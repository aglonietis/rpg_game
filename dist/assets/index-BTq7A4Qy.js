var __defProp = Object.defineProperty;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __publicField = (obj, key, value) => __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
(function polyfill() {
  const relList = document.createElement("link").relList;
  if (relList && relList.supports && relList.supports("modulepreload")) {
    return;
  }
  for (const link of document.querySelectorAll('link[rel="modulepreload"]')) {
    processPreload(link);
  }
  new MutationObserver((mutations) => {
    for (const mutation of mutations) {
      if (mutation.type !== "childList") {
        continue;
      }
      for (const node of mutation.addedNodes) {
        if (node.tagName === "LINK" && node.rel === "modulepreload")
          processPreload(node);
      }
    }
  }).observe(document, { childList: true, subtree: true });
  function getFetchOpts(link) {
    const fetchOpts = {};
    if (link.integrity) fetchOpts.integrity = link.integrity;
    if (link.referrerPolicy) fetchOpts.referrerPolicy = link.referrerPolicy;
    if (link.crossOrigin === "use-credentials")
      fetchOpts.credentials = "include";
    else if (link.crossOrigin === "anonymous") fetchOpts.credentials = "omit";
    else fetchOpts.credentials = "same-origin";
    return fetchOpts;
  }
  function processPreload(link) {
    if (link.ep)
      return;
    link.ep = true;
    const fetchOpts = getFetchOpts(link);
    fetch(link.href, fetchOpts);
  }
})();
/**
* @vue/shared v3.5.11
* (c) 2018-present Yuxi (Evan) You and Vue contributors
* @license MIT
**/
/*! #__NO_SIDE_EFFECTS__ */
// @__NO_SIDE_EFFECTS__
function makeMap(str) {
  const map = /* @__PURE__ */ Object.create(null);
  for (const key of str.split(",")) map[key] = 1;
  return (val) => val in map;
}
const EMPTY_OBJ = {};
const EMPTY_ARR = [];
const NOOP = () => {
};
const NO = () => false;
const isOn = (key) => key.charCodeAt(0) === 111 && key.charCodeAt(1) === 110 && // uppercase letter
(key.charCodeAt(2) > 122 || key.charCodeAt(2) < 97);
const isModelListener = (key) => key.startsWith("onUpdate:");
const extend = Object.assign;
const remove = (arr, el2) => {
  const i = arr.indexOf(el2);
  if (i > -1) {
    arr.splice(i, 1);
  }
};
const hasOwnProperty$1 = Object.prototype.hasOwnProperty;
const hasOwn = (val, key) => hasOwnProperty$1.call(val, key);
const isArray$1 = Array.isArray;
const isMap = (val) => toTypeString(val) === "[object Map]";
const isSet = (val) => toTypeString(val) === "[object Set]";
const isFunction = (val) => typeof val === "function";
const isString = (val) => typeof val === "string";
const isSymbol = (val) => typeof val === "symbol";
const isObject = (val) => val !== null && typeof val === "object";
const isPromise = (val) => {
  return (isObject(val) || isFunction(val)) && isFunction(val.then) && isFunction(val.catch);
};
const objectToString = Object.prototype.toString;
const toTypeString = (value) => objectToString.call(value);
const toRawType = (value) => {
  return toTypeString(value).slice(8, -1);
};
const isPlainObject = (val) => toTypeString(val) === "[object Object]";
const isIntegerKey = (key) => isString(key) && key !== "NaN" && key[0] !== "-" && "" + parseInt(key, 10) === key;
const isReservedProp = /* @__PURE__ */ makeMap(
  // the leading comma is intentional so empty string "" is also included
  ",key,ref,ref_for,ref_key,onVnodeBeforeMount,onVnodeMounted,onVnodeBeforeUpdate,onVnodeUpdated,onVnodeBeforeUnmount,onVnodeUnmounted"
);
const cacheStringFunction = (fn2) => {
  const cache = /* @__PURE__ */ Object.create(null);
  return (str) => {
    const hit = cache[str];
    return hit || (cache[str] = fn2(str));
  };
};
const camelizeRE = /-(\w)/g;
const camelize = cacheStringFunction(
  (str) => {
    return str.replace(camelizeRE, (_, c) => c ? c.toUpperCase() : "");
  }
);
const hyphenateRE = /\B([A-Z])/g;
const hyphenate = cacheStringFunction(
  (str) => str.replace(hyphenateRE, "-$1").toLowerCase()
);
const capitalize = cacheStringFunction((str) => {
  return str.charAt(0).toUpperCase() + str.slice(1);
});
const toHandlerKey = cacheStringFunction(
  (str) => {
    const s = str ? `on${capitalize(str)}` : ``;
    return s;
  }
);
const hasChanged = (value, oldValue) => !Object.is(value, oldValue);
const invokeArrayFns = (fns, ...arg) => {
  for (let i = 0; i < fns.length; i++) {
    fns[i](...arg);
  }
};
const def = (obj, key, value, writable = false) => {
  Object.defineProperty(obj, key, {
    configurable: true,
    enumerable: false,
    writable,
    value
  });
};
const looseToNumber = (val) => {
  const n = parseFloat(val);
  return isNaN(n) ? val : n;
};
let _globalThis;
const getGlobalThis = () => {
  return _globalThis || (_globalThis = typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : {});
};
function normalizeStyle(value) {
  if (isArray$1(value)) {
    const res = {};
    for (let i = 0; i < value.length; i++) {
      const item = value[i];
      const normalized = isString(item) ? parseStringStyle(item) : normalizeStyle(item);
      if (normalized) {
        for (const key in normalized) {
          res[key] = normalized[key];
        }
      }
    }
    return res;
  } else if (isString(value) || isObject(value)) {
    return value;
  }
}
const listDelimiterRE = /;(?![^(]*\))/g;
const propertyDelimiterRE = /:([^]+)/;
const styleCommentRE = /\/\*[^]*?\*\//g;
function parseStringStyle(cssText) {
  const ret = {};
  cssText.replace(styleCommentRE, "").split(listDelimiterRE).forEach((item) => {
    if (item) {
      const tmp2 = item.split(propertyDelimiterRE);
      tmp2.length > 1 && (ret[tmp2[0].trim()] = tmp2[1].trim());
    }
  });
  return ret;
}
function normalizeClass(value) {
  let res = "";
  if (isString(value)) {
    res = value;
  } else if (isArray$1(value)) {
    for (let i = 0; i < value.length; i++) {
      const normalized = normalizeClass(value[i]);
      if (normalized) {
        res += normalized + " ";
      }
    }
  } else if (isObject(value)) {
    for (const name2 in value) {
      if (value[name2]) {
        res += name2 + " ";
      }
    }
  }
  return res.trim();
}
const specialBooleanAttrs = `itemscope,allowfullscreen,formnovalidate,ismap,nomodule,novalidate,readonly`;
const isSpecialBooleanAttr = /* @__PURE__ */ makeMap(specialBooleanAttrs);
function includeBooleanAttr(value) {
  return !!value || value === "";
}
/**
* @vue/reactivity v3.5.11
* (c) 2018-present Yuxi (Evan) You and Vue contributors
* @license MIT
**/
let activeEffectScope;
class EffectScope {
  constructor(detached = false) {
    this.detached = detached;
    this._active = true;
    this.effects = [];
    this.cleanups = [];
    this._isPaused = false;
    this.parent = activeEffectScope;
    if (!detached && activeEffectScope) {
      this.index = (activeEffectScope.scopes || (activeEffectScope.scopes = [])).push(
        this
      ) - 1;
    }
  }
  get active() {
    return this._active;
  }
  pause() {
    if (this._active) {
      this._isPaused = true;
      let i, l;
      if (this.scopes) {
        for (i = 0, l = this.scopes.length; i < l; i++) {
          this.scopes[i].pause();
        }
      }
      for (i = 0, l = this.effects.length; i < l; i++) {
        this.effects[i].pause();
      }
    }
  }
  /**
   * Resumes the effect scope, including all child scopes and effects.
   */
  resume() {
    if (this._active) {
      if (this._isPaused) {
        this._isPaused = false;
        let i, l;
        if (this.scopes) {
          for (i = 0, l = this.scopes.length; i < l; i++) {
            this.scopes[i].resume();
          }
        }
        for (i = 0, l = this.effects.length; i < l; i++) {
          this.effects[i].resume();
        }
      }
    }
  }
  run(fn2) {
    if (this._active) {
      const currentEffectScope = activeEffectScope;
      try {
        activeEffectScope = this;
        return fn2();
      } finally {
        activeEffectScope = currentEffectScope;
      }
    }
  }
  /**
   * This should only be called on non-detached scopes
   * @internal
   */
  on() {
    activeEffectScope = this;
  }
  /**
   * This should only be called on non-detached scopes
   * @internal
   */
  off() {
    activeEffectScope = this.parent;
  }
  stop(fromParent) {
    if (this._active) {
      let i, l;
      for (i = 0, l = this.effects.length; i < l; i++) {
        this.effects[i].stop();
      }
      for (i = 0, l = this.cleanups.length; i < l; i++) {
        this.cleanups[i]();
      }
      if (this.scopes) {
        for (i = 0, l = this.scopes.length; i < l; i++) {
          this.scopes[i].stop(true);
        }
      }
      if (!this.detached && this.parent && !fromParent) {
        const last = this.parent.scopes.pop();
        if (last && last !== this) {
          this.parent.scopes[this.index] = last;
          last.index = this.index;
        }
      }
      this.parent = void 0;
      this._active = false;
    }
  }
}
function effectScope(detached) {
  return new EffectScope(detached);
}
function getCurrentScope() {
  return activeEffectScope;
}
let activeSub;
const pausedQueueEffects = /* @__PURE__ */ new WeakSet();
class ReactiveEffect {
  constructor(fn2) {
    this.fn = fn2;
    this.deps = void 0;
    this.depsTail = void 0;
    this.flags = 1 | 4;
    this.next = void 0;
    this.cleanup = void 0;
    this.scheduler = void 0;
    if (activeEffectScope && activeEffectScope.active) {
      activeEffectScope.effects.push(this);
    }
  }
  pause() {
    this.flags |= 64;
  }
  resume() {
    if (this.flags & 64) {
      this.flags &= ~64;
      if (pausedQueueEffects.has(this)) {
        pausedQueueEffects.delete(this);
        this.trigger();
      }
    }
  }
  /**
   * @internal
   */
  notify() {
    if (this.flags & 2 && !(this.flags & 32)) {
      return;
    }
    if (!(this.flags & 8)) {
      batch(this);
    }
  }
  run() {
    if (!(this.flags & 1)) {
      return this.fn();
    }
    this.flags |= 2;
    cleanupEffect(this);
    prepareDeps(this);
    const prevEffect = activeSub;
    const prevShouldTrack = shouldTrack;
    activeSub = this;
    shouldTrack = true;
    try {
      return this.fn();
    } finally {
      cleanupDeps(this);
      activeSub = prevEffect;
      shouldTrack = prevShouldTrack;
      this.flags &= ~2;
    }
  }
  stop() {
    if (this.flags & 1) {
      for (let link = this.deps; link; link = link.nextDep) {
        removeSub(link);
      }
      this.deps = this.depsTail = void 0;
      cleanupEffect(this);
      this.onStop && this.onStop();
      this.flags &= ~1;
    }
  }
  trigger() {
    if (this.flags & 64) {
      pausedQueueEffects.add(this);
    } else if (this.scheduler) {
      this.scheduler();
    } else {
      this.runIfDirty();
    }
  }
  /**
   * @internal
   */
  runIfDirty() {
    if (isDirty(this)) {
      this.run();
    }
  }
  get dirty() {
    return isDirty(this);
  }
}
let batchDepth = 0;
let batchedSub;
let batchedComputed;
function batch(sub, isComputed = false) {
  sub.flags |= 8;
  if (isComputed) {
    sub.next = batchedComputed;
    batchedComputed = sub;
    return;
  }
  sub.next = batchedSub;
  batchedSub = sub;
}
function startBatch() {
  batchDepth++;
}
function endBatch() {
  if (--batchDepth > 0) {
    return;
  }
  if (batchedComputed) {
    let e = batchedComputed;
    batchedComputed = void 0;
    while (e) {
      const next = e.next;
      e.next = void 0;
      e.flags &= ~8;
      e = next;
    }
  }
  let error;
  while (batchedSub) {
    let e = batchedSub;
    batchedSub = void 0;
    while (e) {
      const next = e.next;
      e.next = void 0;
      e.flags &= ~8;
      if (e.flags & 1) {
        try {
          ;
          e.trigger();
        } catch (err) {
          if (!error) error = err;
        }
      }
      e = next;
    }
  }
  if (error) throw error;
}
function prepareDeps(sub) {
  for (let link = sub.deps; link; link = link.nextDep) {
    link.version = -1;
    link.prevActiveLink = link.dep.activeLink;
    link.dep.activeLink = link;
  }
}
function cleanupDeps(sub) {
  let head;
  let tail = sub.depsTail;
  let link = tail;
  while (link) {
    const prev = link.prevDep;
    if (link.version === -1) {
      if (link === tail) tail = prev;
      removeSub(link);
      removeDep(link);
    } else {
      head = link;
    }
    link.dep.activeLink = link.prevActiveLink;
    link.prevActiveLink = void 0;
    link = prev;
  }
  sub.deps = head;
  sub.depsTail = tail;
}
function isDirty(sub) {
  for (let link = sub.deps; link; link = link.nextDep) {
    if (link.dep.version !== link.version || link.dep.computed && (refreshComputed(link.dep.computed) || link.dep.version !== link.version)) {
      return true;
    }
  }
  if (sub._dirty) {
    return true;
  }
  return false;
}
function refreshComputed(computed2) {
  if (computed2.flags & 4 && !(computed2.flags & 16)) {
    return;
  }
  computed2.flags &= ~16;
  if (computed2.globalVersion === globalVersion) {
    return;
  }
  computed2.globalVersion = globalVersion;
  const dep = computed2.dep;
  computed2.flags |= 2;
  if (dep.version > 0 && !computed2.isSSR && computed2.deps && !isDirty(computed2)) {
    computed2.flags &= ~2;
    return;
  }
  const prevSub = activeSub;
  const prevShouldTrack = shouldTrack;
  activeSub = computed2;
  shouldTrack = true;
  try {
    prepareDeps(computed2);
    const value = computed2.fn(computed2._value);
    if (dep.version === 0 || hasChanged(value, computed2._value)) {
      computed2._value = value;
      dep.version++;
    }
  } catch (err) {
    dep.version++;
    throw err;
  } finally {
    activeSub = prevSub;
    shouldTrack = prevShouldTrack;
    cleanupDeps(computed2);
    computed2.flags &= ~2;
  }
}
function removeSub(link, soft = false) {
  const { dep, prevSub, nextSub } = link;
  if (prevSub) {
    prevSub.nextSub = nextSub;
    link.prevSub = void 0;
  }
  if (nextSub) {
    nextSub.prevSub = prevSub;
    link.nextSub = void 0;
  }
  if (dep.subs === link) {
    dep.subs = prevSub;
  }
  if (!dep.subs && dep.computed) {
    dep.computed.flags &= ~4;
    for (let l = dep.computed.deps; l; l = l.nextDep) {
      removeSub(l, true);
    }
  }
  if (!soft && !--dep.sc && dep.map) {
    dep.map.delete(dep.key);
  }
}
function removeDep(link) {
  const { prevDep, nextDep } = link;
  if (prevDep) {
    prevDep.nextDep = nextDep;
    link.prevDep = void 0;
  }
  if (nextDep) {
    nextDep.prevDep = prevDep;
    link.nextDep = void 0;
  }
}
let shouldTrack = true;
const trackStack = [];
function pauseTracking() {
  trackStack.push(shouldTrack);
  shouldTrack = false;
}
function resetTracking() {
  const last = trackStack.pop();
  shouldTrack = last === void 0 ? true : last;
}
function cleanupEffect(e) {
  const { cleanup } = e;
  e.cleanup = void 0;
  if (cleanup) {
    const prevSub = activeSub;
    activeSub = void 0;
    try {
      cleanup();
    } finally {
      activeSub = prevSub;
    }
  }
}
let globalVersion = 0;
class Link {
  constructor(sub, dep) {
    this.sub = sub;
    this.dep = dep;
    this.version = dep.version;
    this.nextDep = this.prevDep = this.nextSub = this.prevSub = this.prevActiveLink = void 0;
  }
}
class Dep {
  constructor(computed2) {
    this.computed = computed2;
    this.version = 0;
    this.activeLink = void 0;
    this.subs = void 0;
    this.map = void 0;
    this.key = void 0;
    this.sc = 0;
  }
  track(debugInfo) {
    if (!activeSub || !shouldTrack || activeSub === this.computed) {
      return;
    }
    let link = this.activeLink;
    if (link === void 0 || link.sub !== activeSub) {
      link = this.activeLink = new Link(activeSub, this);
      if (!activeSub.deps) {
        activeSub.deps = activeSub.depsTail = link;
      } else {
        link.prevDep = activeSub.depsTail;
        activeSub.depsTail.nextDep = link;
        activeSub.depsTail = link;
      }
      addSub(link);
    } else if (link.version === -1) {
      link.version = this.version;
      if (link.nextDep) {
        const next = link.nextDep;
        next.prevDep = link.prevDep;
        if (link.prevDep) {
          link.prevDep.nextDep = next;
        }
        link.prevDep = activeSub.depsTail;
        link.nextDep = void 0;
        activeSub.depsTail.nextDep = link;
        activeSub.depsTail = link;
        if (activeSub.deps === link) {
          activeSub.deps = next;
        }
      }
    }
    return link;
  }
  trigger(debugInfo) {
    this.version++;
    globalVersion++;
    this.notify(debugInfo);
  }
  notify(debugInfo) {
    startBatch();
    try {
      if (false) ;
      for (let link = this.subs; link; link = link.prevSub) {
        if (link.sub.notify()) {
          ;
          link.sub.dep.notify();
        }
      }
    } finally {
      endBatch();
    }
  }
}
function addSub(link) {
  link.dep.sc++;
  if (link.sub.flags & 4) {
    const computed2 = link.dep.computed;
    if (computed2 && !link.dep.subs) {
      computed2.flags |= 4 | 16;
      for (let l = computed2.deps; l; l = l.nextDep) {
        addSub(l);
      }
    }
    const currentTail = link.dep.subs;
    if (currentTail !== link) {
      link.prevSub = currentTail;
      if (currentTail) currentTail.nextSub = link;
    }
    link.dep.subs = link;
  }
}
const targetMap = /* @__PURE__ */ new WeakMap();
const ITERATE_KEY = Symbol(
  ""
);
const MAP_KEY_ITERATE_KEY = Symbol(
  ""
);
const ARRAY_ITERATE_KEY = Symbol(
  ""
);
function track(target, type, key) {
  if (shouldTrack && activeSub) {
    let depsMap = targetMap.get(target);
    if (!depsMap) {
      targetMap.set(target, depsMap = /* @__PURE__ */ new Map());
    }
    let dep = depsMap.get(key);
    if (!dep) {
      depsMap.set(key, dep = new Dep());
      dep.map = depsMap;
      dep.key = key;
    }
    {
      dep.track();
    }
  }
}
function trigger(target, type, key, newValue, oldValue, oldTarget) {
  const depsMap = targetMap.get(target);
  if (!depsMap) {
    globalVersion++;
    return;
  }
  const run = (dep) => {
    if (dep) {
      {
        dep.trigger();
      }
    }
  };
  startBatch();
  if (type === "clear") {
    depsMap.forEach(run);
  } else {
    const targetIsArray = isArray$1(target);
    const isArrayIndex = targetIsArray && isIntegerKey(key);
    if (targetIsArray && key === "length") {
      const newLength = Number(newValue);
      depsMap.forEach((dep, key2) => {
        if (key2 === "length" || key2 === ARRAY_ITERATE_KEY || !isSymbol(key2) && key2 >= newLength) {
          run(dep);
        }
      });
    } else {
      if (key !== void 0) {
        run(depsMap.get(key));
      }
      if (isArrayIndex) {
        run(depsMap.get(ARRAY_ITERATE_KEY));
      }
      switch (type) {
        case "add":
          if (!targetIsArray) {
            run(depsMap.get(ITERATE_KEY));
            if (isMap(target)) {
              run(depsMap.get(MAP_KEY_ITERATE_KEY));
            }
          } else if (isArrayIndex) {
            run(depsMap.get("length"));
          }
          break;
        case "delete":
          if (!targetIsArray) {
            run(depsMap.get(ITERATE_KEY));
            if (isMap(target)) {
              run(depsMap.get(MAP_KEY_ITERATE_KEY));
            }
          }
          break;
        case "set":
          if (isMap(target)) {
            run(depsMap.get(ITERATE_KEY));
          }
          break;
      }
    }
  }
  endBatch();
}
function reactiveReadArray(array) {
  const raw = toRaw(array);
  if (raw === array) return raw;
  track(raw, "iterate", ARRAY_ITERATE_KEY);
  return isShallow(array) ? raw : raw.map(toReactive);
}
function shallowReadArray(arr) {
  track(arr = toRaw(arr), "iterate", ARRAY_ITERATE_KEY);
  return arr;
}
const arrayInstrumentations = {
  __proto__: null,
  [Symbol.iterator]() {
    return iterator(this, Symbol.iterator, toReactive);
  },
  concat(...args) {
    return reactiveReadArray(this).concat(
      ...args.map((x) => isArray$1(x) ? reactiveReadArray(x) : x)
    );
  },
  entries() {
    return iterator(this, "entries", (value) => {
      value[1] = toReactive(value[1]);
      return value;
    });
  },
  every(fn2, thisArg) {
    return apply(this, "every", fn2, thisArg, void 0, arguments);
  },
  filter(fn2, thisArg) {
    return apply(this, "filter", fn2, thisArg, (v) => v.map(toReactive), arguments);
  },
  find(fn2, thisArg) {
    return apply(this, "find", fn2, thisArg, toReactive, arguments);
  },
  findIndex(fn2, thisArg) {
    return apply(this, "findIndex", fn2, thisArg, void 0, arguments);
  },
  findLast(fn2, thisArg) {
    return apply(this, "findLast", fn2, thisArg, toReactive, arguments);
  },
  findLastIndex(fn2, thisArg) {
    return apply(this, "findLastIndex", fn2, thisArg, void 0, arguments);
  },
  // flat, flatMap could benefit from ARRAY_ITERATE but are not straight-forward to implement
  forEach(fn2, thisArg) {
    return apply(this, "forEach", fn2, thisArg, void 0, arguments);
  },
  includes(...args) {
    return searchProxy(this, "includes", args);
  },
  indexOf(...args) {
    return searchProxy(this, "indexOf", args);
  },
  join(separator) {
    return reactiveReadArray(this).join(separator);
  },
  // keys() iterator only reads `length`, no optimisation required
  lastIndexOf(...args) {
    return searchProxy(this, "lastIndexOf", args);
  },
  map(fn2, thisArg) {
    return apply(this, "map", fn2, thisArg, void 0, arguments);
  },
  pop() {
    return noTracking(this, "pop");
  },
  push(...args) {
    return noTracking(this, "push", args);
  },
  reduce(fn2, ...args) {
    return reduce(this, "reduce", fn2, args);
  },
  reduceRight(fn2, ...args) {
    return reduce(this, "reduceRight", fn2, args);
  },
  shift() {
    return noTracking(this, "shift");
  },
  // slice could use ARRAY_ITERATE but also seems to beg for range tracking
  some(fn2, thisArg) {
    return apply(this, "some", fn2, thisArg, void 0, arguments);
  },
  splice(...args) {
    return noTracking(this, "splice", args);
  },
  toReversed() {
    return reactiveReadArray(this).toReversed();
  },
  toSorted(comparer) {
    return reactiveReadArray(this).toSorted(comparer);
  },
  toSpliced(...args) {
    return reactiveReadArray(this).toSpliced(...args);
  },
  unshift(...args) {
    return noTracking(this, "unshift", args);
  },
  values() {
    return iterator(this, "values", toReactive);
  }
};
function iterator(self2, method, wrapValue) {
  const arr = shallowReadArray(self2);
  const iter = arr[method]();
  if (arr !== self2 && !isShallow(self2)) {
    iter._next = iter.next;
    iter.next = () => {
      const result = iter._next();
      if (result.value) {
        result.value = wrapValue(result.value);
      }
      return result;
    };
  }
  return iter;
}
const arrayProto = Array.prototype;
function apply(self2, method, fn2, thisArg, wrappedRetFn, args) {
  const arr = shallowReadArray(self2);
  const needsWrap = arr !== self2 && !isShallow(self2);
  const methodFn = arr[method];
  if (methodFn !== arrayProto[method]) {
    const result2 = methodFn.apply(self2, args);
    return needsWrap ? toReactive(result2) : result2;
  }
  let wrappedFn = fn2;
  if (arr !== self2) {
    if (needsWrap) {
      wrappedFn = function(item, index) {
        return fn2.call(this, toReactive(item), index, self2);
      };
    } else if (fn2.length > 2) {
      wrappedFn = function(item, index) {
        return fn2.call(this, item, index, self2);
      };
    }
  }
  const result = methodFn.call(arr, wrappedFn, thisArg);
  return needsWrap && wrappedRetFn ? wrappedRetFn(result) : result;
}
function reduce(self2, method, fn2, args) {
  const arr = shallowReadArray(self2);
  let wrappedFn = fn2;
  if (arr !== self2) {
    if (!isShallow(self2)) {
      wrappedFn = function(acc, item, index) {
        return fn2.call(this, acc, toReactive(item), index, self2);
      };
    } else if (fn2.length > 3) {
      wrappedFn = function(acc, item, index) {
        return fn2.call(this, acc, item, index, self2);
      };
    }
  }
  return arr[method](wrappedFn, ...args);
}
function searchProxy(self2, method, args) {
  const arr = toRaw(self2);
  track(arr, "iterate", ARRAY_ITERATE_KEY);
  const res = arr[method](...args);
  if ((res === -1 || res === false) && isProxy(args[0])) {
    args[0] = toRaw(args[0]);
    return arr[method](...args);
  }
  return res;
}
function noTracking(self2, method, args = []) {
  pauseTracking();
  startBatch();
  const res = toRaw(self2)[method].apply(self2, args);
  endBatch();
  resetTracking();
  return res;
}
const isNonTrackableKeys = /* @__PURE__ */ makeMap(`__proto__,__v_isRef,__isVue`);
const builtInSymbols = new Set(
  /* @__PURE__ */ Object.getOwnPropertyNames(Symbol).filter((key) => key !== "arguments" && key !== "caller").map((key) => Symbol[key]).filter(isSymbol)
);
function hasOwnProperty(key) {
  if (!isSymbol(key)) key = String(key);
  const obj = toRaw(this);
  track(obj, "has", key);
  return obj.hasOwnProperty(key);
}
class BaseReactiveHandler {
  constructor(_isReadonly = false, _isShallow = false) {
    this._isReadonly = _isReadonly;
    this._isShallow = _isShallow;
  }
  get(target, key, receiver) {
    const isReadonly2 = this._isReadonly, isShallow2 = this._isShallow;
    if (key === "__v_isReactive") {
      return !isReadonly2;
    } else if (key === "__v_isReadonly") {
      return isReadonly2;
    } else if (key === "__v_isShallow") {
      return isShallow2;
    } else if (key === "__v_raw") {
      if (receiver === (isReadonly2 ? isShallow2 ? shallowReadonlyMap : readonlyMap : isShallow2 ? shallowReactiveMap : reactiveMap).get(target) || // receiver is not the reactive proxy, but has the same prototype
      // this means the receiver is a user proxy of the reactive proxy
      Object.getPrototypeOf(target) === Object.getPrototypeOf(receiver)) {
        return target;
      }
      return;
    }
    const targetIsArray = isArray$1(target);
    if (!isReadonly2) {
      let fn2;
      if (targetIsArray && (fn2 = arrayInstrumentations[key])) {
        return fn2;
      }
      if (key === "hasOwnProperty") {
        return hasOwnProperty;
      }
    }
    const res = Reflect.get(
      target,
      key,
      // if this is a proxy wrapping a ref, return methods using the raw ref
      // as receiver so that we don't have to call `toRaw` on the ref in all
      // its class methods
      isRef(target) ? target : receiver
    );
    if (isSymbol(key) ? builtInSymbols.has(key) : isNonTrackableKeys(key)) {
      return res;
    }
    if (!isReadonly2) {
      track(target, "get", key);
    }
    if (isShallow2) {
      return res;
    }
    if (isRef(res)) {
      return targetIsArray && isIntegerKey(key) ? res : res.value;
    }
    if (isObject(res)) {
      return isReadonly2 ? readonly(res) : reactive(res);
    }
    return res;
  }
}
class MutableReactiveHandler extends BaseReactiveHandler {
  constructor(isShallow2 = false) {
    super(false, isShallow2);
  }
  set(target, key, value, receiver) {
    let oldValue = target[key];
    if (!this._isShallow) {
      const isOldValueReadonly = isReadonly(oldValue);
      if (!isShallow(value) && !isReadonly(value)) {
        oldValue = toRaw(oldValue);
        value = toRaw(value);
      }
      if (!isArray$1(target) && isRef(oldValue) && !isRef(value)) {
        if (isOldValueReadonly) {
          return false;
        } else {
          oldValue.value = value;
          return true;
        }
      }
    }
    const hadKey = isArray$1(target) && isIntegerKey(key) ? Number(key) < target.length : hasOwn(target, key);
    const result = Reflect.set(
      target,
      key,
      value,
      isRef(target) ? target : receiver
    );
    if (target === toRaw(receiver)) {
      if (!hadKey) {
        trigger(target, "add", key, value);
      } else if (hasChanged(value, oldValue)) {
        trigger(target, "set", key, value);
      }
    }
    return result;
  }
  deleteProperty(target, key) {
    const hadKey = hasOwn(target, key);
    target[key];
    const result = Reflect.deleteProperty(target, key);
    if (result && hadKey) {
      trigger(target, "delete", key, void 0);
    }
    return result;
  }
  has(target, key) {
    const result = Reflect.has(target, key);
    if (!isSymbol(key) || !builtInSymbols.has(key)) {
      track(target, "has", key);
    }
    return result;
  }
  ownKeys(target) {
    track(
      target,
      "iterate",
      isArray$1(target) ? "length" : ITERATE_KEY
    );
    return Reflect.ownKeys(target);
  }
}
class ReadonlyReactiveHandler extends BaseReactiveHandler {
  constructor(isShallow2 = false) {
    super(true, isShallow2);
  }
  set(target, key) {
    return true;
  }
  deleteProperty(target, key) {
    return true;
  }
}
const mutableHandlers = /* @__PURE__ */ new MutableReactiveHandler();
const readonlyHandlers = /* @__PURE__ */ new ReadonlyReactiveHandler();
const shallowReactiveHandlers = /* @__PURE__ */ new MutableReactiveHandler(true);
const shallowReadonlyHandlers = /* @__PURE__ */ new ReadonlyReactiveHandler(true);
const toShallow = (value) => value;
const getProto = (v) => Reflect.getPrototypeOf(v);
function get(target, key, isReadonly2 = false, isShallow2 = false) {
  target = target["__v_raw"];
  const rawTarget = toRaw(target);
  const rawKey = toRaw(key);
  if (!isReadonly2) {
    if (hasChanged(key, rawKey)) {
      track(rawTarget, "get", key);
    }
    track(rawTarget, "get", rawKey);
  }
  const { has: has2 } = getProto(rawTarget);
  const wrap = isShallow2 ? toShallow : isReadonly2 ? toReadonly : toReactive;
  if (has2.call(rawTarget, key)) {
    return wrap(target.get(key));
  } else if (has2.call(rawTarget, rawKey)) {
    return wrap(target.get(rawKey));
  } else if (target !== rawTarget) {
    target.get(key);
  }
}
function has(key, isReadonly2 = false) {
  const target = this["__v_raw"];
  const rawTarget = toRaw(target);
  const rawKey = toRaw(key);
  if (!isReadonly2) {
    if (hasChanged(key, rawKey)) {
      track(rawTarget, "has", key);
    }
    track(rawTarget, "has", rawKey);
  }
  return key === rawKey ? target.has(key) : target.has(key) || target.has(rawKey);
}
function size(target, isReadonly2 = false) {
  target = target["__v_raw"];
  !isReadonly2 && track(toRaw(target), "iterate", ITERATE_KEY);
  return Reflect.get(target, "size", target);
}
function add(value, _isShallow = false) {
  if (!_isShallow && !isShallow(value) && !isReadonly(value)) {
    value = toRaw(value);
  }
  const target = toRaw(this);
  const proto = getProto(target);
  const hadKey = proto.has.call(target, value);
  if (!hadKey) {
    target.add(value);
    trigger(target, "add", value, value);
  }
  return this;
}
function set(key, value, _isShallow = false) {
  if (!_isShallow && !isShallow(value) && !isReadonly(value)) {
    value = toRaw(value);
  }
  const target = toRaw(this);
  const { has: has2, get: get2 } = getProto(target);
  let hadKey = has2.call(target, key);
  if (!hadKey) {
    key = toRaw(key);
    hadKey = has2.call(target, key);
  }
  const oldValue = get2.call(target, key);
  target.set(key, value);
  if (!hadKey) {
    trigger(target, "add", key, value);
  } else if (hasChanged(value, oldValue)) {
    trigger(target, "set", key, value);
  }
  return this;
}
function deleteEntry(key) {
  const target = toRaw(this);
  const { has: has2, get: get2 } = getProto(target);
  let hadKey = has2.call(target, key);
  if (!hadKey) {
    key = toRaw(key);
    hadKey = has2.call(target, key);
  }
  get2 ? get2.call(target, key) : void 0;
  const result = target.delete(key);
  if (hadKey) {
    trigger(target, "delete", key, void 0);
  }
  return result;
}
function clear() {
  const target = toRaw(this);
  const hadItems = target.size !== 0;
  const result = target.clear();
  if (hadItems) {
    trigger(target, "clear", void 0, void 0);
  }
  return result;
}
function createForEach(isReadonly2, isShallow2) {
  return function forEach(callback, thisArg) {
    const observed = this;
    const target = observed["__v_raw"];
    const rawTarget = toRaw(target);
    const wrap = isShallow2 ? toShallow : isReadonly2 ? toReadonly : toReactive;
    !isReadonly2 && track(rawTarget, "iterate", ITERATE_KEY);
    return target.forEach((value, key) => {
      return callback.call(thisArg, wrap(value), wrap(key), observed);
    });
  };
}
function createIterableMethod(method, isReadonly2, isShallow2) {
  return function(...args) {
    const target = this["__v_raw"];
    const rawTarget = toRaw(target);
    const targetIsMap = isMap(rawTarget);
    const isPair = method === "entries" || method === Symbol.iterator && targetIsMap;
    const isKeyOnly = method === "keys" && targetIsMap;
    const innerIterator = target[method](...args);
    const wrap = isShallow2 ? toShallow : isReadonly2 ? toReadonly : toReactive;
    !isReadonly2 && track(
      rawTarget,
      "iterate",
      isKeyOnly ? MAP_KEY_ITERATE_KEY : ITERATE_KEY
    );
    return {
      // iterator protocol
      next() {
        const { value, done } = innerIterator.next();
        return done ? { value, done } : {
          value: isPair ? [wrap(value[0]), wrap(value[1])] : wrap(value),
          done
        };
      },
      // iterable protocol
      [Symbol.iterator]() {
        return this;
      }
    };
  };
}
function createReadonlyMethod(type) {
  return function(...args) {
    return type === "delete" ? false : type === "clear" ? void 0 : this;
  };
}
function createInstrumentations() {
  const mutableInstrumentations2 = {
    get(key) {
      return get(this, key);
    },
    get size() {
      return size(this);
    },
    has,
    add,
    set,
    delete: deleteEntry,
    clear,
    forEach: createForEach(false, false)
  };
  const shallowInstrumentations2 = {
    get(key) {
      return get(this, key, false, true);
    },
    get size() {
      return size(this);
    },
    has,
    add(value) {
      return add.call(this, value, true);
    },
    set(key, value) {
      return set.call(this, key, value, true);
    },
    delete: deleteEntry,
    clear,
    forEach: createForEach(false, true)
  };
  const readonlyInstrumentations2 = {
    get(key) {
      return get(this, key, true);
    },
    get size() {
      return size(this, true);
    },
    has(key) {
      return has.call(this, key, true);
    },
    add: createReadonlyMethod("add"),
    set: createReadonlyMethod("set"),
    delete: createReadonlyMethod("delete"),
    clear: createReadonlyMethod("clear"),
    forEach: createForEach(true, false)
  };
  const shallowReadonlyInstrumentations2 = {
    get(key) {
      return get(this, key, true, true);
    },
    get size() {
      return size(this, true);
    },
    has(key) {
      return has.call(this, key, true);
    },
    add: createReadonlyMethod("add"),
    set: createReadonlyMethod("set"),
    delete: createReadonlyMethod("delete"),
    clear: createReadonlyMethod("clear"),
    forEach: createForEach(true, true)
  };
  const iteratorMethods = [
    "keys",
    "values",
    "entries",
    Symbol.iterator
  ];
  iteratorMethods.forEach((method) => {
    mutableInstrumentations2[method] = createIterableMethod(method, false, false);
    readonlyInstrumentations2[method] = createIterableMethod(method, true, false);
    shallowInstrumentations2[method] = createIterableMethod(method, false, true);
    shallowReadonlyInstrumentations2[method] = createIterableMethod(
      method,
      true,
      true
    );
  });
  return [
    mutableInstrumentations2,
    readonlyInstrumentations2,
    shallowInstrumentations2,
    shallowReadonlyInstrumentations2
  ];
}
const [
  mutableInstrumentations,
  readonlyInstrumentations,
  shallowInstrumentations,
  shallowReadonlyInstrumentations
] = /* @__PURE__ */ createInstrumentations();
function createInstrumentationGetter(isReadonly2, shallow) {
  const instrumentations = shallow ? isReadonly2 ? shallowReadonlyInstrumentations : shallowInstrumentations : isReadonly2 ? readonlyInstrumentations : mutableInstrumentations;
  return (target, key, receiver) => {
    if (key === "__v_isReactive") {
      return !isReadonly2;
    } else if (key === "__v_isReadonly") {
      return isReadonly2;
    } else if (key === "__v_raw") {
      return target;
    }
    return Reflect.get(
      hasOwn(instrumentations, key) && key in target ? instrumentations : target,
      key,
      receiver
    );
  };
}
const mutableCollectionHandlers = {
  get: /* @__PURE__ */ createInstrumentationGetter(false, false)
};
const shallowCollectionHandlers = {
  get: /* @__PURE__ */ createInstrumentationGetter(false, true)
};
const readonlyCollectionHandlers = {
  get: /* @__PURE__ */ createInstrumentationGetter(true, false)
};
const shallowReadonlyCollectionHandlers = {
  get: /* @__PURE__ */ createInstrumentationGetter(true, true)
};
const reactiveMap = /* @__PURE__ */ new WeakMap();
const shallowReactiveMap = /* @__PURE__ */ new WeakMap();
const readonlyMap = /* @__PURE__ */ new WeakMap();
const shallowReadonlyMap = /* @__PURE__ */ new WeakMap();
function targetTypeMap(rawType) {
  switch (rawType) {
    case "Object":
    case "Array":
      return 1;
    case "Map":
    case "Set":
    case "WeakMap":
    case "WeakSet":
      return 2;
    default:
      return 0;
  }
}
function getTargetType(value) {
  return value["__v_skip"] || !Object.isExtensible(value) ? 0 : targetTypeMap(toRawType(value));
}
function reactive(target) {
  if (isReadonly(target)) {
    return target;
  }
  return createReactiveObject(
    target,
    false,
    mutableHandlers,
    mutableCollectionHandlers,
    reactiveMap
  );
}
function shallowReactive(target) {
  return createReactiveObject(
    target,
    false,
    shallowReactiveHandlers,
    shallowCollectionHandlers,
    shallowReactiveMap
  );
}
function readonly(target) {
  return createReactiveObject(
    target,
    true,
    readonlyHandlers,
    readonlyCollectionHandlers,
    readonlyMap
  );
}
function shallowReadonly(target) {
  return createReactiveObject(
    target,
    true,
    shallowReadonlyHandlers,
    shallowReadonlyCollectionHandlers,
    shallowReadonlyMap
  );
}
function createReactiveObject(target, isReadonly2, baseHandlers, collectionHandlers, proxyMap) {
  if (!isObject(target)) {
    return target;
  }
  if (target["__v_raw"] && !(isReadonly2 && target["__v_isReactive"])) {
    return target;
  }
  const existingProxy = proxyMap.get(target);
  if (existingProxy) {
    return existingProxy;
  }
  const targetType = getTargetType(target);
  if (targetType === 0) {
    return target;
  }
  const proxy = new Proxy(
    target,
    targetType === 2 ? collectionHandlers : baseHandlers
  );
  proxyMap.set(target, proxy);
  return proxy;
}
function isReactive(value) {
  if (isReadonly(value)) {
    return isReactive(value["__v_raw"]);
  }
  return !!(value && value["__v_isReactive"]);
}
function isReadonly(value) {
  return !!(value && value["__v_isReadonly"]);
}
function isShallow(value) {
  return !!(value && value["__v_isShallow"]);
}
function isProxy(value) {
  return value ? !!value["__v_raw"] : false;
}
function toRaw(observed) {
  const raw = observed && observed["__v_raw"];
  return raw ? toRaw(raw) : observed;
}
function markRaw(value) {
  if (!hasOwn(value, "__v_skip") && Object.isExtensible(value)) {
    def(value, "__v_skip", true);
  }
  return value;
}
const toReactive = (value) => isObject(value) ? reactive(value) : value;
const toReadonly = (value) => isObject(value) ? readonly(value) : value;
function isRef(r) {
  return r ? r["__v_isRef"] === true : false;
}
function ref(value) {
  return createRef(value, false);
}
function shallowRef(value) {
  return createRef(value, true);
}
function createRef(rawValue, shallow) {
  if (isRef(rawValue)) {
    return rawValue;
  }
  return new RefImpl(rawValue, shallow);
}
class RefImpl {
  constructor(value, isShallow2) {
    this.dep = new Dep();
    this["__v_isRef"] = true;
    this["__v_isShallow"] = false;
    this._rawValue = isShallow2 ? value : toRaw(value);
    this._value = isShallow2 ? value : toReactive(value);
    this["__v_isShallow"] = isShallow2;
  }
  get value() {
    {
      this.dep.track();
    }
    return this._value;
  }
  set value(newValue) {
    const oldValue = this._rawValue;
    const useDirectValue = this["__v_isShallow"] || isShallow(newValue) || isReadonly(newValue);
    newValue = useDirectValue ? newValue : toRaw(newValue);
    if (hasChanged(newValue, oldValue)) {
      this._rawValue = newValue;
      this._value = useDirectValue ? newValue : toReactive(newValue);
      {
        this.dep.trigger();
      }
    }
  }
}
function unref(ref2) {
  return isRef(ref2) ? ref2.value : ref2;
}
const shallowUnwrapHandlers = {
  get: (target, key, receiver) => key === "__v_raw" ? target : unref(Reflect.get(target, key, receiver)),
  set: (target, key, value, receiver) => {
    const oldValue = target[key];
    if (isRef(oldValue) && !isRef(value)) {
      oldValue.value = value;
      return true;
    } else {
      return Reflect.set(target, key, value, receiver);
    }
  }
};
function proxyRefs(objectWithRefs) {
  return isReactive(objectWithRefs) ? objectWithRefs : new Proxy(objectWithRefs, shallowUnwrapHandlers);
}
class ComputedRefImpl {
  constructor(fn2, setter, isSSR) {
    this.fn = fn2;
    this.setter = setter;
    this._value = void 0;
    this.dep = new Dep(this);
    this.__v_isRef = true;
    this.deps = void 0;
    this.depsTail = void 0;
    this.flags = 16;
    this.globalVersion = globalVersion - 1;
    this.next = void 0;
    this.effect = this;
    this["__v_isReadonly"] = !setter;
    this.isSSR = isSSR;
  }
  /**
   * @internal
   */
  notify() {
    this.flags |= 16;
    if (!(this.flags & 8) && // avoid infinite self recursion
    activeSub !== this) {
      batch(this, true);
      return true;
    }
  }
  get value() {
    const link = this.dep.track();
    refreshComputed(this);
    if (link) {
      link.version = this.dep.version;
    }
    return this._value;
  }
  set value(newValue) {
    if (this.setter) {
      this.setter(newValue);
    }
  }
}
function computed$1(getterOrOptions, debugOptions, isSSR = false) {
  let getter;
  let setter;
  if (isFunction(getterOrOptions)) {
    getter = getterOrOptions;
  } else {
    getter = getterOrOptions.get;
    setter = getterOrOptions.set;
  }
  const cRef = new ComputedRefImpl(getter, setter, isSSR);
  return cRef;
}
const INITIAL_WATCHER_VALUE = {};
const cleanupMap = /* @__PURE__ */ new WeakMap();
let activeWatcher = void 0;
function onWatcherCleanup(cleanupFn, failSilently = false, owner = activeWatcher) {
  if (owner) {
    let cleanups = cleanupMap.get(owner);
    if (!cleanups) cleanupMap.set(owner, cleanups = []);
    cleanups.push(cleanupFn);
  }
}
function watch$1(source, cb2, options = EMPTY_OBJ) {
  const { immediate, deep, once, scheduler, augmentJob, call } = options;
  const reactiveGetter = (source2) => {
    if (deep) return source2;
    if (isShallow(source2) || deep === false || deep === 0)
      return traverse(source2, 1);
    return traverse(source2);
  };
  let effect2;
  let getter;
  let cleanup;
  let boundCleanup;
  let forceTrigger = false;
  let isMultiSource = false;
  if (isRef(source)) {
    getter = () => source.value;
    forceTrigger = isShallow(source);
  } else if (isReactive(source)) {
    getter = () => reactiveGetter(source);
    forceTrigger = true;
  } else if (isArray$1(source)) {
    isMultiSource = true;
    forceTrigger = source.some((s) => isReactive(s) || isShallow(s));
    getter = () => source.map((s) => {
      if (isRef(s)) {
        return s.value;
      } else if (isReactive(s)) {
        return reactiveGetter(s);
      } else if (isFunction(s)) {
        return call ? call(s, 2) : s();
      } else ;
    });
  } else if (isFunction(source)) {
    if (cb2) {
      getter = call ? () => call(source, 2) : source;
    } else {
      getter = () => {
        if (cleanup) {
          pauseTracking();
          try {
            cleanup();
          } finally {
            resetTracking();
          }
        }
        const currentEffect = activeWatcher;
        activeWatcher = effect2;
        try {
          return call ? call(source, 3, [boundCleanup]) : source(boundCleanup);
        } finally {
          activeWatcher = currentEffect;
        }
      };
    }
  } else {
    getter = NOOP;
  }
  if (cb2 && deep) {
    const baseGetter = getter;
    const depth = deep === true ? Infinity : deep;
    getter = () => traverse(baseGetter(), depth);
  }
  const scope = getCurrentScope();
  const watchHandle = () => {
    effect2.stop();
    if (scope) {
      remove(scope.effects, effect2);
    }
  };
  if (once && cb2) {
    const _cb = cb2;
    cb2 = (...args) => {
      _cb(...args);
      watchHandle();
    };
  }
  let oldValue = isMultiSource ? new Array(source.length).fill(INITIAL_WATCHER_VALUE) : INITIAL_WATCHER_VALUE;
  const job = (immediateFirstRun) => {
    if (!(effect2.flags & 1) || !effect2.dirty && !immediateFirstRun) {
      return;
    }
    if (cb2) {
      const newValue = effect2.run();
      if (deep || forceTrigger || (isMultiSource ? newValue.some((v, i) => hasChanged(v, oldValue[i])) : hasChanged(newValue, oldValue))) {
        if (cleanup) {
          cleanup();
        }
        const currentWatcher = activeWatcher;
        activeWatcher = effect2;
        try {
          const args = [
            newValue,
            // pass undefined as the old value when it's changed for the first time
            oldValue === INITIAL_WATCHER_VALUE ? void 0 : isMultiSource && oldValue[0] === INITIAL_WATCHER_VALUE ? [] : oldValue,
            boundCleanup
          ];
          call ? call(cb2, 3, args) : (
            // @ts-expect-error
            cb2(...args)
          );
          oldValue = newValue;
        } finally {
          activeWatcher = currentWatcher;
        }
      }
    } else {
      effect2.run();
    }
  };
  if (augmentJob) {
    augmentJob(job);
  }
  effect2 = new ReactiveEffect(getter);
  effect2.scheduler = scheduler ? () => scheduler(job, false) : job;
  boundCleanup = (fn2) => onWatcherCleanup(fn2, false, effect2);
  cleanup = effect2.onStop = () => {
    const cleanups = cleanupMap.get(effect2);
    if (cleanups) {
      if (call) {
        call(cleanups, 4);
      } else {
        for (const cleanup2 of cleanups) cleanup2();
      }
      cleanupMap.delete(effect2);
    }
  };
  if (cb2) {
    if (immediate) {
      job(true);
    } else {
      oldValue = effect2.run();
    }
  } else if (scheduler) {
    scheduler(job.bind(null, true), true);
  } else {
    effect2.run();
  }
  watchHandle.pause = effect2.pause.bind(effect2);
  watchHandle.resume = effect2.resume.bind(effect2);
  watchHandle.stop = watchHandle;
  return watchHandle;
}
function traverse(value, depth = Infinity, seen) {
  if (depth <= 0 || !isObject(value) || value["__v_skip"]) {
    return value;
  }
  seen = seen || /* @__PURE__ */ new Set();
  if (seen.has(value)) {
    return value;
  }
  seen.add(value);
  depth--;
  if (isRef(value)) {
    traverse(value.value, depth, seen);
  } else if (isArray$1(value)) {
    for (let i = 0; i < value.length; i++) {
      traverse(value[i], depth, seen);
    }
  } else if (isSet(value) || isMap(value)) {
    value.forEach((v) => {
      traverse(v, depth, seen);
    });
  } else if (isPlainObject(value)) {
    for (const key in value) {
      traverse(value[key], depth, seen);
    }
    for (const key of Object.getOwnPropertySymbols(value)) {
      if (Object.prototype.propertyIsEnumerable.call(value, key)) {
        traverse(value[key], depth, seen);
      }
    }
  }
  return value;
}
/**
* @vue/runtime-core v3.5.11
* (c) 2018-present Yuxi (Evan) You and Vue contributors
* @license MIT
**/
const stack = [];
let isWarning = false;
function warn$1(msg, ...args) {
  if (isWarning) return;
  isWarning = true;
  pauseTracking();
  const instance = stack.length ? stack[stack.length - 1].component : null;
  const appWarnHandler = instance && instance.appContext.config.warnHandler;
  const trace = getComponentTrace();
  if (appWarnHandler) {
    callWithErrorHandling(
      appWarnHandler,
      instance,
      11,
      [
        // eslint-disable-next-line no-restricted-syntax
        msg + args.map((a) => {
          var _a, _b2;
          return (_b2 = (_a = a.toString) == null ? void 0 : _a.call(a)) != null ? _b2 : JSON.stringify(a);
        }).join(""),
        instance && instance.proxy,
        trace.map(
          ({ vnode }) => `at <${formatComponentName(instance, vnode.type)}>`
        ).join("\n"),
        trace
      ]
    );
  } else {
    const warnArgs = [`[Vue warn]: ${msg}`, ...args];
    if (trace.length && // avoid spamming console during tests
    true) {
      warnArgs.push(`
`, ...formatTrace(trace));
    }
    console.warn(...warnArgs);
  }
  resetTracking();
  isWarning = false;
}
function getComponentTrace() {
  let currentVNode = stack[stack.length - 1];
  if (!currentVNode) {
    return [];
  }
  const normalizedStack = [];
  while (currentVNode) {
    const last = normalizedStack[0];
    if (last && last.vnode === currentVNode) {
      last.recurseCount++;
    } else {
      normalizedStack.push({
        vnode: currentVNode,
        recurseCount: 0
      });
    }
    const parentInstance = currentVNode.component && currentVNode.component.parent;
    currentVNode = parentInstance && parentInstance.vnode;
  }
  return normalizedStack;
}
function formatTrace(trace) {
  const logs = [];
  trace.forEach((entry, i) => {
    logs.push(...i === 0 ? [] : [`
`], ...formatTraceEntry(entry));
  });
  return logs;
}
function formatTraceEntry({ vnode, recurseCount }) {
  const postfix = recurseCount > 0 ? `... (${recurseCount} recursive calls)` : ``;
  const isRoot = vnode.component ? vnode.component.parent == null : false;
  const open = ` at <${formatComponentName(
    vnode.component,
    vnode.type,
    isRoot
  )}`;
  const close = `>` + postfix;
  return vnode.props ? [open, ...formatProps(vnode.props), close] : [open + close];
}
function formatProps(props) {
  const res = [];
  const keys = Object.keys(props);
  keys.slice(0, 3).forEach((key) => {
    res.push(...formatProp(key, props[key]));
  });
  if (keys.length > 3) {
    res.push(` ...`);
  }
  return res;
}
function formatProp(key, value, raw) {
  if (isString(value)) {
    value = JSON.stringify(value);
    return raw ? value : [`${key}=${value}`];
  } else if (typeof value === "number" || typeof value === "boolean" || value == null) {
    return raw ? value : [`${key}=${value}`];
  } else if (isRef(value)) {
    value = formatProp(key, toRaw(value.value), true);
    return raw ? value : [`${key}=Ref<`, value, `>`];
  } else if (isFunction(value)) {
    return [`${key}=fn${value.name ? `<${value.name}>` : ``}`];
  } else {
    value = toRaw(value);
    return raw ? value : [`${key}=`, value];
  }
}
function callWithErrorHandling(fn2, instance, type, args) {
  try {
    return args ? fn2(...args) : fn2();
  } catch (err) {
    handleError(err, instance, type);
  }
}
function callWithAsyncErrorHandling(fn2, instance, type, args) {
  if (isFunction(fn2)) {
    const res = callWithErrorHandling(fn2, instance, type, args);
    if (res && isPromise(res)) {
      res.catch((err) => {
        handleError(err, instance, type);
      });
    }
    return res;
  }
  if (isArray$1(fn2)) {
    const values = [];
    for (let i = 0; i < fn2.length; i++) {
      values.push(callWithAsyncErrorHandling(fn2[i], instance, type, args));
    }
    return values;
  }
}
function handleError(err, instance, type, throwInDev = true) {
  const contextVNode = instance ? instance.vnode : null;
  const { errorHandler, throwUnhandledErrorInProduction } = instance && instance.appContext.config || EMPTY_OBJ;
  if (instance) {
    let cur = instance.parent;
    const exposedInstance = instance.proxy;
    const errorInfo = `https://vuejs.org/error-reference/#runtime-${type}`;
    while (cur) {
      const errorCapturedHooks = cur.ec;
      if (errorCapturedHooks) {
        for (let i = 0; i < errorCapturedHooks.length; i++) {
          if (errorCapturedHooks[i](err, exposedInstance, errorInfo) === false) {
            return;
          }
        }
      }
      cur = cur.parent;
    }
    if (errorHandler) {
      pauseTracking();
      callWithErrorHandling(errorHandler, null, 10, [
        err,
        exposedInstance,
        errorInfo
      ]);
      resetTracking();
      return;
    }
  }
  logError(err, type, contextVNode, throwInDev, throwUnhandledErrorInProduction);
}
function logError(err, type, contextVNode, throwInDev = true, throwInProd = false) {
  if (throwInProd) {
    throw err;
  } else {
    console.error(err);
  }
}
const queue = [];
let flushIndex = -1;
const pendingPostFlushCbs = [];
let activePostFlushCbs = null;
let postFlushIndex = 0;
const resolvedPromise = /* @__PURE__ */ Promise.resolve();
let currentFlushPromise = null;
function nextTick(fn2) {
  const p2 = currentFlushPromise || resolvedPromise;
  return fn2 ? p2.then(this ? fn2.bind(this) : fn2) : p2;
}
function findInsertionIndex$1(id2) {
  let start = flushIndex + 1;
  let end = queue.length;
  while (start < end) {
    const middle = start + end >>> 1;
    const middleJob = queue[middle];
    const middleJobId = getId(middleJob);
    if (middleJobId < id2 || middleJobId === id2 && middleJob.flags & 2) {
      start = middle + 1;
    } else {
      end = middle;
    }
  }
  return start;
}
function queueJob(job) {
  if (!(job.flags & 1)) {
    const jobId = getId(job);
    const lastJob = queue[queue.length - 1];
    if (!lastJob || // fast path when the job id is larger than the tail
    !(job.flags & 2) && jobId >= getId(lastJob)) {
      queue.push(job);
    } else {
      queue.splice(findInsertionIndex$1(jobId), 0, job);
    }
    job.flags |= 1;
    queueFlush();
  }
}
function queueFlush() {
  if (!currentFlushPromise) {
    currentFlushPromise = resolvedPromise.then(flushJobs);
  }
}
function queuePostFlushCb(cb2) {
  if (!isArray$1(cb2)) {
    if (activePostFlushCbs && cb2.id === -1) {
      activePostFlushCbs.splice(postFlushIndex + 1, 0, cb2);
    } else if (!(cb2.flags & 1)) {
      pendingPostFlushCbs.push(cb2);
      cb2.flags |= 1;
    }
  } else {
    pendingPostFlushCbs.push(...cb2);
  }
  queueFlush();
}
function flushPreFlushCbs(instance, seen, i = flushIndex + 1) {
  for (; i < queue.length; i++) {
    const cb2 = queue[i];
    if (cb2 && cb2.flags & 2) {
      if (instance && cb2.id !== instance.uid) {
        continue;
      }
      queue.splice(i, 1);
      i--;
      if (cb2.flags & 4) {
        cb2.flags &= ~1;
      }
      cb2();
      if (!(cb2.flags & 4)) {
        cb2.flags &= ~1;
      }
    }
  }
}
function flushPostFlushCbs(seen) {
  if (pendingPostFlushCbs.length) {
    const deduped = [...new Set(pendingPostFlushCbs)].sort(
      (a, b) => getId(a) - getId(b)
    );
    pendingPostFlushCbs.length = 0;
    if (activePostFlushCbs) {
      activePostFlushCbs.push(...deduped);
      return;
    }
    activePostFlushCbs = deduped;
    for (postFlushIndex = 0; postFlushIndex < activePostFlushCbs.length; postFlushIndex++) {
      const cb2 = activePostFlushCbs[postFlushIndex];
      if (cb2.flags & 4) {
        cb2.flags &= ~1;
      }
      if (!(cb2.flags & 8)) cb2();
      cb2.flags &= ~1;
    }
    activePostFlushCbs = null;
    postFlushIndex = 0;
  }
}
const getId = (job) => job.id == null ? job.flags & 2 ? -1 : Infinity : job.id;
function flushJobs(seen) {
  try {
    for (flushIndex = 0; flushIndex < queue.length; flushIndex++) {
      const job = queue[flushIndex];
      if (job && !(job.flags & 8)) {
        if (false) ;
        if (job.flags & 4) {
          job.flags &= ~1;
        }
        callWithErrorHandling(
          job,
          job.i,
          job.i ? 15 : 14
        );
        if (!(job.flags & 4)) {
          job.flags &= ~1;
        }
      }
    }
  } finally {
    for (; flushIndex < queue.length; flushIndex++) {
      const job = queue[flushIndex];
      if (job) {
        job.flags &= ~1;
      }
    }
    flushIndex = -1;
    queue.length = 0;
    flushPostFlushCbs();
    currentFlushPromise = null;
    if (queue.length || pendingPostFlushCbs.length) {
      flushJobs();
    }
  }
}
let currentRenderingInstance = null;
let currentScopeId = null;
function setCurrentRenderingInstance(instance) {
  const prev = currentRenderingInstance;
  currentRenderingInstance = instance;
  currentScopeId = instance && instance.type.__scopeId || null;
  return prev;
}
function withCtx(fn2, ctx = currentRenderingInstance, isNonScopedSlot) {
  if (!ctx) return fn2;
  if (fn2._n) {
    return fn2;
  }
  const renderFnWithContext = (...args) => {
    if (renderFnWithContext._d) {
      setBlockTracking(-1);
    }
    const prevInstance = setCurrentRenderingInstance(ctx);
    let res;
    try {
      res = fn2(...args);
    } finally {
      setCurrentRenderingInstance(prevInstance);
      if (renderFnWithContext._d) {
        setBlockTracking(1);
      }
    }
    return res;
  };
  renderFnWithContext._n = true;
  renderFnWithContext._c = true;
  renderFnWithContext._d = true;
  return renderFnWithContext;
}
function invokeDirectiveHook(vnode, prevVNode, instance, name2) {
  const bindings = vnode.dirs;
  const oldBindings = prevVNode && prevVNode.dirs;
  for (let i = 0; i < bindings.length; i++) {
    const binding = bindings[i];
    if (oldBindings) {
      binding.oldValue = oldBindings[i].value;
    }
    let hook = binding.dir[name2];
    if (hook) {
      pauseTracking();
      callWithAsyncErrorHandling(hook, instance, 8, [
        vnode.el,
        binding,
        vnode,
        prevVNode
      ]);
      resetTracking();
    }
  }
}
const TeleportEndKey = Symbol("_vte");
const isTeleport = (type) => type.__isTeleport;
function setTransitionHooks(vnode, hooks) {
  if (vnode.shapeFlag & 6 && vnode.component) {
    vnode.transition = hooks;
    setTransitionHooks(vnode.component.subTree, hooks);
  } else if (vnode.shapeFlag & 128) {
    vnode.ssContent.transition = hooks.clone(vnode.ssContent);
    vnode.ssFallback.transition = hooks.clone(vnode.ssFallback);
  } else {
    vnode.transition = hooks;
  }
}
/*! #__NO_SIDE_EFFECTS__ */
// @__NO_SIDE_EFFECTS__
function defineComponent(options, extraOptions) {
  return isFunction(options) ? (
    // #8236: extend call and options.name access are considered side-effects
    // by Rollup, so we have to wrap it in a pure-annotated IIFE.
    /* @__PURE__ */ (() => extend({ name: options.name }, extraOptions, { setup: options }))()
  ) : options;
}
function markAsyncBoundary(instance) {
  instance.ids = [instance.ids[0] + instance.ids[2]++ + "-", 0, 0];
}
function useTemplateRef(key) {
  const i = getCurrentInstance();
  const r = shallowRef(null);
  if (i) {
    const refs = i.refs === EMPTY_OBJ ? i.refs = {} : i.refs;
    {
      Object.defineProperty(refs, key, {
        enumerable: true,
        get: () => r.value,
        set: (val) => r.value = val
      });
    }
  }
  const ret = r;
  return ret;
}
function setRef(rawRef, oldRawRef, parentSuspense, vnode, isUnmount = false) {
  if (isArray$1(rawRef)) {
    rawRef.forEach(
      (r, i) => setRef(
        r,
        oldRawRef && (isArray$1(oldRawRef) ? oldRawRef[i] : oldRawRef),
        parentSuspense,
        vnode,
        isUnmount
      )
    );
    return;
  }
  if (isAsyncWrapper(vnode) && !isUnmount) {
    return;
  }
  const refValue = vnode.shapeFlag & 4 ? getComponentPublicInstance(vnode.component) : vnode.el;
  const value = isUnmount ? null : refValue;
  const { i: owner, r: ref3 } = rawRef;
  const oldRef = oldRawRef && oldRawRef.r;
  const refs = owner.refs === EMPTY_OBJ ? owner.refs = {} : owner.refs;
  const setupState = owner.setupState;
  const rawSetupState = toRaw(setupState);
  const canSetSetupRef = setupState === EMPTY_OBJ ? () => false : (key) => {
    return hasOwn(rawSetupState, key);
  };
  if (oldRef != null && oldRef !== ref3) {
    if (isString(oldRef)) {
      refs[oldRef] = null;
      if (canSetSetupRef(oldRef)) {
        setupState[oldRef] = null;
      }
    } else if (isRef(oldRef)) {
      oldRef.value = null;
    }
  }
  if (isFunction(ref3)) {
    callWithErrorHandling(ref3, owner, 12, [value, refs]);
  } else {
    const _isString = isString(ref3);
    const _isRef = isRef(ref3);
    if (_isString || _isRef) {
      const doSet = () => {
        if (rawRef.f) {
          const existing = _isString ? canSetSetupRef(ref3) ? setupState[ref3] : refs[ref3] : ref3.value;
          if (isUnmount) {
            isArray$1(existing) && remove(existing, refValue);
          } else {
            if (!isArray$1(existing)) {
              if (_isString) {
                refs[ref3] = [refValue];
                if (canSetSetupRef(ref3)) {
                  setupState[ref3] = refs[ref3];
                }
              } else {
                ref3.value = [refValue];
                if (rawRef.k) refs[rawRef.k] = ref3.value;
              }
            } else if (!existing.includes(refValue)) {
              existing.push(refValue);
            }
          }
        } else if (_isString) {
          refs[ref3] = value;
          if (canSetSetupRef(ref3)) {
            setupState[ref3] = value;
          }
        } else if (_isRef) {
          ref3.value = value;
          if (rawRef.k) refs[rawRef.k] = value;
        } else ;
      };
      if (value) {
        doSet.id = -1;
        queuePostRenderEffect(doSet, parentSuspense);
      } else {
        doSet();
      }
    }
  }
}
const isAsyncWrapper = (i) => !!i.type.__asyncLoader;
const isKeepAlive = (vnode) => vnode.type.__isKeepAlive;
function onActivated(hook, target) {
  registerKeepAliveHook(hook, "a", target);
}
function onDeactivated(hook, target) {
  registerKeepAliveHook(hook, "da", target);
}
function registerKeepAliveHook(hook, type, target = currentInstance) {
  const wrappedHook = hook.__wdc || (hook.__wdc = () => {
    let current = target;
    while (current) {
      if (current.isDeactivated) {
        return;
      }
      current = current.parent;
    }
    return hook();
  });
  injectHook(type, wrappedHook, target);
  if (target) {
    let current = target.parent;
    while (current && current.parent) {
      if (isKeepAlive(current.parent.vnode)) {
        injectToKeepAliveRoot(wrappedHook, type, target, current);
      }
      current = current.parent;
    }
  }
}
function injectToKeepAliveRoot(hook, type, target, keepAliveRoot) {
  const injected = injectHook(
    type,
    hook,
    keepAliveRoot,
    true
    /* prepend */
  );
  onUnmounted(() => {
    remove(keepAliveRoot[type], injected);
  }, target);
}
function injectHook(type, hook, target = currentInstance, prepend = false) {
  if (target) {
    const hooks = target[type] || (target[type] = []);
    const wrappedHook = hook.__weh || (hook.__weh = (...args) => {
      pauseTracking();
      const reset = setCurrentInstance(target);
      const res = callWithAsyncErrorHandling(hook, target, type, args);
      reset();
      resetTracking();
      return res;
    });
    if (prepend) {
      hooks.unshift(wrappedHook);
    } else {
      hooks.push(wrappedHook);
    }
    return wrappedHook;
  }
}
const createHook = (lifecycle) => (hook, target = currentInstance) => {
  if (!isInSSRComponentSetup || lifecycle === "sp") {
    injectHook(lifecycle, (...args) => hook(...args), target);
  }
};
const onBeforeMount = createHook("bm");
const onMounted = createHook("m");
const onBeforeUpdate = createHook(
  "bu"
);
const onUpdated = createHook("u");
const onBeforeUnmount = createHook(
  "bum"
);
const onUnmounted = createHook("um");
const onServerPrefetch = createHook(
  "sp"
);
const onRenderTriggered = createHook("rtg");
const onRenderTracked = createHook("rtc");
function onErrorCaptured(hook, target = currentInstance) {
  injectHook("ec", hook, target);
}
const COMPONENTS = "components";
function resolveComponent(name2, maybeSelfReference) {
  return resolveAsset(COMPONENTS, name2, true, maybeSelfReference) || name2;
}
const NULL_DYNAMIC_COMPONENT = Symbol.for("v-ndc");
function resolveAsset(type, name2, warnMissing = true, maybeSelfReference = false) {
  const instance = currentRenderingInstance || currentInstance;
  if (instance) {
    const Component = instance.type;
    {
      const selfName = getComponentName(
        Component,
        false
      );
      if (selfName && (selfName === name2 || selfName === camelize(name2) || selfName === capitalize(camelize(name2)))) {
        return Component;
      }
    }
    const res = (
      // local registration
      // check instance[type] first which is resolved for options API
      resolve(instance[type] || Component[type], name2) || // global registration
      resolve(instance.appContext[type], name2)
    );
    if (!res && maybeSelfReference) {
      return Component;
    }
    return res;
  }
}
function resolve(registry, name2) {
  return registry && (registry[name2] || registry[camelize(name2)] || registry[capitalize(camelize(name2))]);
}
const getPublicInstance = (i) => {
  if (!i) return null;
  if (isStatefulComponent(i)) return getComponentPublicInstance(i);
  return getPublicInstance(i.parent);
};
const publicPropertiesMap = (
  // Move PURE marker to new line to workaround compiler discarding it
  // due to type annotation
  /* @__PURE__ */ extend(/* @__PURE__ */ Object.create(null), {
    $: (i) => i,
    $el: (i) => i.vnode.el,
    $data: (i) => i.data,
    $props: (i) => i.props,
    $attrs: (i) => i.attrs,
    $slots: (i) => i.slots,
    $refs: (i) => i.refs,
    $parent: (i) => getPublicInstance(i.parent),
    $root: (i) => getPublicInstance(i.root),
    $host: (i) => i.ce,
    $emit: (i) => i.emit,
    $options: (i) => resolveMergedOptions(i),
    $forceUpdate: (i) => i.f || (i.f = () => {
      queueJob(i.update);
    }),
    $nextTick: (i) => i.n || (i.n = nextTick.bind(i.proxy)),
    $watch: (i) => instanceWatch.bind(i)
  })
);
const hasSetupBinding = (state, key) => state !== EMPTY_OBJ && !state.__isScriptSetup && hasOwn(state, key);
const PublicInstanceProxyHandlers = {
  get({ _: instance }, key) {
    if (key === "__v_skip") {
      return true;
    }
    const { ctx, setupState, data, props, accessCache, type, appContext } = instance;
    let normalizedProps;
    if (key[0] !== "$") {
      const n = accessCache[key];
      if (n !== void 0) {
        switch (n) {
          case 1:
            return setupState[key];
          case 2:
            return data[key];
          case 4:
            return ctx[key];
          case 3:
            return props[key];
        }
      } else if (hasSetupBinding(setupState, key)) {
        accessCache[key] = 1;
        return setupState[key];
      } else if (data !== EMPTY_OBJ && hasOwn(data, key)) {
        accessCache[key] = 2;
        return data[key];
      } else if (
        // only cache other properties when instance has declared (thus stable)
        // props
        (normalizedProps = instance.propsOptions[0]) && hasOwn(normalizedProps, key)
      ) {
        accessCache[key] = 3;
        return props[key];
      } else if (ctx !== EMPTY_OBJ && hasOwn(ctx, key)) {
        accessCache[key] = 4;
        return ctx[key];
      } else if (shouldCacheAccess) {
        accessCache[key] = 0;
      }
    }
    const publicGetter = publicPropertiesMap[key];
    let cssModule, globalProperties;
    if (publicGetter) {
      if (key === "$attrs") {
        track(instance.attrs, "get", "");
      }
      return publicGetter(instance);
    } else if (
      // css module (injected by vue-loader)
      (cssModule = type.__cssModules) && (cssModule = cssModule[key])
    ) {
      return cssModule;
    } else if (ctx !== EMPTY_OBJ && hasOwn(ctx, key)) {
      accessCache[key] = 4;
      return ctx[key];
    } else if (
      // global properties
      globalProperties = appContext.config.globalProperties, hasOwn(globalProperties, key)
    ) {
      {
        return globalProperties[key];
      }
    } else ;
  },
  set({ _: instance }, key, value) {
    const { data, setupState, ctx } = instance;
    if (hasSetupBinding(setupState, key)) {
      setupState[key] = value;
      return true;
    } else if (data !== EMPTY_OBJ && hasOwn(data, key)) {
      data[key] = value;
      return true;
    } else if (hasOwn(instance.props, key)) {
      return false;
    }
    if (key[0] === "$" && key.slice(1) in instance) {
      return false;
    } else {
      {
        ctx[key] = value;
      }
    }
    return true;
  },
  has({
    _: { data, setupState, accessCache, ctx, appContext, propsOptions }
  }, key) {
    let normalizedProps;
    return !!accessCache[key] || data !== EMPTY_OBJ && hasOwn(data, key) || hasSetupBinding(setupState, key) || (normalizedProps = propsOptions[0]) && hasOwn(normalizedProps, key) || hasOwn(ctx, key) || hasOwn(publicPropertiesMap, key) || hasOwn(appContext.config.globalProperties, key);
  },
  defineProperty(target, key, descriptor) {
    if (descriptor.get != null) {
      target._.accessCache[key] = 0;
    } else if (hasOwn(descriptor, "value")) {
      this.set(target, key, descriptor.value, null);
    }
    return Reflect.defineProperty(target, key, descriptor);
  }
};
function normalizePropsOrEmits(props) {
  return isArray$1(props) ? props.reduce(
    (normalized, p2) => (normalized[p2] = null, normalized),
    {}
  ) : props;
}
let shouldCacheAccess = true;
function applyOptions(instance) {
  const options = resolveMergedOptions(instance);
  const publicThis = instance.proxy;
  const ctx = instance.ctx;
  shouldCacheAccess = false;
  if (options.beforeCreate) {
    callHook(options.beforeCreate, instance, "bc");
  }
  const {
    // state
    data: dataOptions,
    computed: computedOptions,
    methods,
    watch: watchOptions,
    provide: provideOptions,
    inject: injectOptions,
    // lifecycle
    created,
    beforeMount,
    mounted,
    beforeUpdate,
    updated,
    activated,
    deactivated,
    beforeDestroy,
    beforeUnmount,
    destroyed,
    unmounted,
    render,
    renderTracked,
    renderTriggered,
    errorCaptured,
    serverPrefetch,
    // public API
    expose,
    inheritAttrs,
    // assets
    components,
    directives,
    filters
  } = options;
  const checkDuplicateProperties = null;
  if (injectOptions) {
    resolveInjections(injectOptions, ctx, checkDuplicateProperties);
  }
  if (methods) {
    for (const key in methods) {
      const methodHandler = methods[key];
      if (isFunction(methodHandler)) {
        {
          ctx[key] = methodHandler.bind(publicThis);
        }
      }
    }
  }
  if (dataOptions) {
    const data = dataOptions.call(publicThis, publicThis);
    if (!isObject(data)) ;
    else {
      instance.data = reactive(data);
    }
  }
  shouldCacheAccess = true;
  if (computedOptions) {
    for (const key in computedOptions) {
      const opt = computedOptions[key];
      const get2 = isFunction(opt) ? opt.bind(publicThis, publicThis) : isFunction(opt.get) ? opt.get.bind(publicThis, publicThis) : NOOP;
      const set2 = !isFunction(opt) && isFunction(opt.set) ? opt.set.bind(publicThis) : NOOP;
      const c = computed({
        get: get2,
        set: set2
      });
      Object.defineProperty(ctx, key, {
        enumerable: true,
        configurable: true,
        get: () => c.value,
        set: (v) => c.value = v
      });
    }
  }
  if (watchOptions) {
    for (const key in watchOptions) {
      createWatcher(watchOptions[key], ctx, publicThis, key);
    }
  }
  if (provideOptions) {
    const provides = isFunction(provideOptions) ? provideOptions.call(publicThis) : provideOptions;
    Reflect.ownKeys(provides).forEach((key) => {
      provide(key, provides[key]);
    });
  }
  if (created) {
    callHook(created, instance, "c");
  }
  function registerLifecycleHook(register, hook) {
    if (isArray$1(hook)) {
      hook.forEach((_hook) => register(_hook.bind(publicThis)));
    } else if (hook) {
      register(hook.bind(publicThis));
    }
  }
  registerLifecycleHook(onBeforeMount, beforeMount);
  registerLifecycleHook(onMounted, mounted);
  registerLifecycleHook(onBeforeUpdate, beforeUpdate);
  registerLifecycleHook(onUpdated, updated);
  registerLifecycleHook(onActivated, activated);
  registerLifecycleHook(onDeactivated, deactivated);
  registerLifecycleHook(onErrorCaptured, errorCaptured);
  registerLifecycleHook(onRenderTracked, renderTracked);
  registerLifecycleHook(onRenderTriggered, renderTriggered);
  registerLifecycleHook(onBeforeUnmount, beforeUnmount);
  registerLifecycleHook(onUnmounted, unmounted);
  registerLifecycleHook(onServerPrefetch, serverPrefetch);
  if (isArray$1(expose)) {
    if (expose.length) {
      const exposed = instance.exposed || (instance.exposed = {});
      expose.forEach((key) => {
        Object.defineProperty(exposed, key, {
          get: () => publicThis[key],
          set: (val) => publicThis[key] = val
        });
      });
    } else if (!instance.exposed) {
      instance.exposed = {};
    }
  }
  if (render && instance.render === NOOP) {
    instance.render = render;
  }
  if (inheritAttrs != null) {
    instance.inheritAttrs = inheritAttrs;
  }
  if (components) instance.components = components;
  if (directives) instance.directives = directives;
  if (serverPrefetch) {
    markAsyncBoundary(instance);
  }
}
function resolveInjections(injectOptions, ctx, checkDuplicateProperties = NOOP) {
  if (isArray$1(injectOptions)) {
    injectOptions = normalizeInject(injectOptions);
  }
  for (const key in injectOptions) {
    const opt = injectOptions[key];
    let injected;
    if (isObject(opt)) {
      if ("default" in opt) {
        injected = inject(
          opt.from || key,
          opt.default,
          true
        );
      } else {
        injected = inject(opt.from || key);
      }
    } else {
      injected = inject(opt);
    }
    if (isRef(injected)) {
      Object.defineProperty(ctx, key, {
        enumerable: true,
        configurable: true,
        get: () => injected.value,
        set: (v) => injected.value = v
      });
    } else {
      ctx[key] = injected;
    }
  }
}
function callHook(hook, instance, type) {
  callWithAsyncErrorHandling(
    isArray$1(hook) ? hook.map((h2) => h2.bind(instance.proxy)) : hook.bind(instance.proxy),
    instance,
    type
  );
}
function createWatcher(raw, ctx, publicThis, key) {
  let getter = key.includes(".") ? createPathGetter(publicThis, key) : () => publicThis[key];
  if (isString(raw)) {
    const handler = ctx[raw];
    if (isFunction(handler)) {
      {
        watch(getter, handler);
      }
    }
  } else if (isFunction(raw)) {
    {
      watch(getter, raw.bind(publicThis));
    }
  } else if (isObject(raw)) {
    if (isArray$1(raw)) {
      raw.forEach((r) => createWatcher(r, ctx, publicThis, key));
    } else {
      const handler = isFunction(raw.handler) ? raw.handler.bind(publicThis) : ctx[raw.handler];
      if (isFunction(handler)) {
        watch(getter, handler, raw);
      }
    }
  } else ;
}
function resolveMergedOptions(instance) {
  const base = instance.type;
  const { mixins, extends: extendsOptions } = base;
  const {
    mixins: globalMixins,
    optionsCache: cache,
    config: { optionMergeStrategies }
  } = instance.appContext;
  const cached = cache.get(base);
  let resolved;
  if (cached) {
    resolved = cached;
  } else if (!globalMixins.length && !mixins && !extendsOptions) {
    {
      resolved = base;
    }
  } else {
    resolved = {};
    if (globalMixins.length) {
      globalMixins.forEach(
        (m) => mergeOptions$1(resolved, m, optionMergeStrategies, true)
      );
    }
    mergeOptions$1(resolved, base, optionMergeStrategies);
  }
  if (isObject(base)) {
    cache.set(base, resolved);
  }
  return resolved;
}
function mergeOptions$1(to2, from, strats, asMixin = false) {
  const { mixins, extends: extendsOptions } = from;
  if (extendsOptions) {
    mergeOptions$1(to2, extendsOptions, strats, true);
  }
  if (mixins) {
    mixins.forEach(
      (m) => mergeOptions$1(to2, m, strats, true)
    );
  }
  for (const key in from) {
    if (asMixin && key === "expose") ;
    else {
      const strat = internalOptionMergeStrats[key] || strats && strats[key];
      to2[key] = strat ? strat(to2[key], from[key]) : from[key];
    }
  }
  return to2;
}
const internalOptionMergeStrats = {
  data: mergeDataFn,
  props: mergeEmitsOrPropsOptions,
  emits: mergeEmitsOrPropsOptions,
  // objects
  methods: mergeObjectOptions,
  computed: mergeObjectOptions,
  // lifecycle
  beforeCreate: mergeAsArray,
  created: mergeAsArray,
  beforeMount: mergeAsArray,
  mounted: mergeAsArray,
  beforeUpdate: mergeAsArray,
  updated: mergeAsArray,
  beforeDestroy: mergeAsArray,
  beforeUnmount: mergeAsArray,
  destroyed: mergeAsArray,
  unmounted: mergeAsArray,
  activated: mergeAsArray,
  deactivated: mergeAsArray,
  errorCaptured: mergeAsArray,
  serverPrefetch: mergeAsArray,
  // assets
  components: mergeObjectOptions,
  directives: mergeObjectOptions,
  // watch
  watch: mergeWatchOptions,
  // provide / inject
  provide: mergeDataFn,
  inject: mergeInject
};
function mergeDataFn(to2, from) {
  if (!from) {
    return to2;
  }
  if (!to2) {
    return from;
  }
  return function mergedDataFn() {
    return extend(
      isFunction(to2) ? to2.call(this, this) : to2,
      isFunction(from) ? from.call(this, this) : from
    );
  };
}
function mergeInject(to2, from) {
  return mergeObjectOptions(normalizeInject(to2), normalizeInject(from));
}
function normalizeInject(raw) {
  if (isArray$1(raw)) {
    const res = {};
    for (let i = 0; i < raw.length; i++) {
      res[raw[i]] = raw[i];
    }
    return res;
  }
  return raw;
}
function mergeAsArray(to2, from) {
  return to2 ? [...new Set([].concat(to2, from))] : from;
}
function mergeObjectOptions(to2, from) {
  return to2 ? extend(/* @__PURE__ */ Object.create(null), to2, from) : from;
}
function mergeEmitsOrPropsOptions(to2, from) {
  if (to2) {
    if (isArray$1(to2) && isArray$1(from)) {
      return [.../* @__PURE__ */ new Set([...to2, ...from])];
    }
    return extend(
      /* @__PURE__ */ Object.create(null),
      normalizePropsOrEmits(to2),
      normalizePropsOrEmits(from != null ? from : {})
    );
  } else {
    return from;
  }
}
function mergeWatchOptions(to2, from) {
  if (!to2) return from;
  if (!from) return to2;
  const merged = extend(/* @__PURE__ */ Object.create(null), to2);
  for (const key in from) {
    merged[key] = mergeAsArray(to2[key], from[key]);
  }
  return merged;
}
function createAppContext() {
  return {
    app: null,
    config: {
      isNativeTag: NO,
      performance: false,
      globalProperties: {},
      optionMergeStrategies: {},
      errorHandler: void 0,
      warnHandler: void 0,
      compilerOptions: {}
    },
    mixins: [],
    components: {},
    directives: {},
    provides: /* @__PURE__ */ Object.create(null),
    optionsCache: /* @__PURE__ */ new WeakMap(),
    propsCache: /* @__PURE__ */ new WeakMap(),
    emitsCache: /* @__PURE__ */ new WeakMap()
  };
}
let uid$1 = 0;
function createAppAPI(render, hydrate) {
  return function createApp2(rootComponent, rootProps = null) {
    if (!isFunction(rootComponent)) {
      rootComponent = extend({}, rootComponent);
    }
    if (rootProps != null && !isObject(rootProps)) {
      rootProps = null;
    }
    const context = createAppContext();
    const installedPlugins = /* @__PURE__ */ new WeakSet();
    const pluginCleanupFns = [];
    let isMounted = false;
    const app2 = context.app = {
      _uid: uid$1++,
      _component: rootComponent,
      _props: rootProps,
      _container: null,
      _context: context,
      _instance: null,
      version,
      get config() {
        return context.config;
      },
      set config(v) {
      },
      use(plugin, ...options) {
        if (installedPlugins.has(plugin)) ;
        else if (plugin && isFunction(plugin.install)) {
          installedPlugins.add(plugin);
          plugin.install(app2, ...options);
        } else if (isFunction(plugin)) {
          installedPlugins.add(plugin);
          plugin(app2, ...options);
        } else ;
        return app2;
      },
      mixin(mixin) {
        {
          if (!context.mixins.includes(mixin)) {
            context.mixins.push(mixin);
          }
        }
        return app2;
      },
      component(name2, component) {
        if (!component) {
          return context.components[name2];
        }
        context.components[name2] = component;
        return app2;
      },
      directive(name2, directive) {
        if (!directive) {
          return context.directives[name2];
        }
        context.directives[name2] = directive;
        return app2;
      },
      mount(rootContainer, isHydrate, namespace) {
        if (!isMounted) {
          const vnode = app2._ceVNode || createVNode(rootComponent, rootProps);
          vnode.appContext = context;
          if (namespace === true) {
            namespace = "svg";
          } else if (namespace === false) {
            namespace = void 0;
          }
          if (isHydrate && hydrate) {
            hydrate(vnode, rootContainer);
          } else {
            render(vnode, rootContainer, namespace);
          }
          isMounted = true;
          app2._container = rootContainer;
          rootContainer.__vue_app__ = app2;
          return getComponentPublicInstance(vnode.component);
        }
      },
      onUnmount(cleanupFn) {
        pluginCleanupFns.push(cleanupFn);
      },
      unmount() {
        if (isMounted) {
          callWithAsyncErrorHandling(
            pluginCleanupFns,
            app2._instance,
            16
          );
          render(null, app2._container);
          delete app2._container.__vue_app__;
        }
      },
      provide(key, value) {
        context.provides[key] = value;
        return app2;
      },
      runWithContext(fn2) {
        const lastApp = currentApp;
        currentApp = app2;
        try {
          return fn2();
        } finally {
          currentApp = lastApp;
        }
      }
    };
    return app2;
  };
}
let currentApp = null;
function provide(key, value) {
  if (!currentInstance) ;
  else {
    let provides = currentInstance.provides;
    const parentProvides = currentInstance.parent && currentInstance.parent.provides;
    if (parentProvides === provides) {
      provides = currentInstance.provides = Object.create(parentProvides);
    }
    provides[key] = value;
  }
}
function inject(key, defaultValue, treatDefaultAsFactory = false) {
  const instance = currentInstance || currentRenderingInstance;
  if (instance || currentApp) {
    const provides = currentApp ? currentApp._context.provides : instance ? instance.parent == null ? instance.vnode.appContext && instance.vnode.appContext.provides : instance.parent.provides : void 0;
    if (provides && key in provides) {
      return provides[key];
    } else if (arguments.length > 1) {
      return treatDefaultAsFactory && isFunction(defaultValue) ? defaultValue.call(instance && instance.proxy) : defaultValue;
    } else ;
  }
}
const internalObjectProto = {};
const createInternalObject = () => Object.create(internalObjectProto);
const isInternalObject = (obj) => Object.getPrototypeOf(obj) === internalObjectProto;
function initProps(instance, rawProps, isStateful, isSSR = false) {
  const props = {};
  const attrs = createInternalObject();
  instance.propsDefaults = /* @__PURE__ */ Object.create(null);
  setFullProps(instance, rawProps, props, attrs);
  for (const key in instance.propsOptions[0]) {
    if (!(key in props)) {
      props[key] = void 0;
    }
  }
  if (isStateful) {
    instance.props = isSSR ? props : shallowReactive(props);
  } else {
    if (!instance.type.props) {
      instance.props = attrs;
    } else {
      instance.props = props;
    }
  }
  instance.attrs = attrs;
}
function updateProps(instance, rawProps, rawPrevProps, optimized) {
  const {
    props,
    attrs,
    vnode: { patchFlag }
  } = instance;
  const rawCurrentProps = toRaw(props);
  const [options] = instance.propsOptions;
  let hasAttrsChanged = false;
  if (
    // always force full diff in dev
    // - #1942 if hmr is enabled with sfc component
    // - vite#872 non-sfc component used by sfc component
    (optimized || patchFlag > 0) && !(patchFlag & 16)
  ) {
    if (patchFlag & 8) {
      const propsToUpdate = instance.vnode.dynamicProps;
      for (let i = 0; i < propsToUpdate.length; i++) {
        let key = propsToUpdate[i];
        if (isEmitListener(instance.emitsOptions, key)) {
          continue;
        }
        const value = rawProps[key];
        if (options) {
          if (hasOwn(attrs, key)) {
            if (value !== attrs[key]) {
              attrs[key] = value;
              hasAttrsChanged = true;
            }
          } else {
            const camelizedKey = camelize(key);
            props[camelizedKey] = resolvePropValue(
              options,
              rawCurrentProps,
              camelizedKey,
              value,
              instance,
              false
            );
          }
        } else {
          if (value !== attrs[key]) {
            attrs[key] = value;
            hasAttrsChanged = true;
          }
        }
      }
    }
  } else {
    if (setFullProps(instance, rawProps, props, attrs)) {
      hasAttrsChanged = true;
    }
    let kebabKey;
    for (const key in rawCurrentProps) {
      if (!rawProps || // for camelCase
      !hasOwn(rawProps, key) && // it's possible the original props was passed in as kebab-case
      // and converted to camelCase (#955)
      ((kebabKey = hyphenate(key)) === key || !hasOwn(rawProps, kebabKey))) {
        if (options) {
          if (rawPrevProps && // for camelCase
          (rawPrevProps[key] !== void 0 || // for kebab-case
          rawPrevProps[kebabKey] !== void 0)) {
            props[key] = resolvePropValue(
              options,
              rawCurrentProps,
              key,
              void 0,
              instance,
              true
            );
          }
        } else {
          delete props[key];
        }
      }
    }
    if (attrs !== rawCurrentProps) {
      for (const key in attrs) {
        if (!rawProps || !hasOwn(rawProps, key) && true) {
          delete attrs[key];
          hasAttrsChanged = true;
        }
      }
    }
  }
  if (hasAttrsChanged) {
    trigger(instance.attrs, "set", "");
  }
}
function setFullProps(instance, rawProps, props, attrs) {
  const [options, needCastKeys] = instance.propsOptions;
  let hasAttrsChanged = false;
  let rawCastValues;
  if (rawProps) {
    for (let key in rawProps) {
      if (isReservedProp(key)) {
        continue;
      }
      const value = rawProps[key];
      let camelKey;
      if (options && hasOwn(options, camelKey = camelize(key))) {
        if (!needCastKeys || !needCastKeys.includes(camelKey)) {
          props[camelKey] = value;
        } else {
          (rawCastValues || (rawCastValues = {}))[camelKey] = value;
        }
      } else if (!isEmitListener(instance.emitsOptions, key)) {
        if (!(key in attrs) || value !== attrs[key]) {
          attrs[key] = value;
          hasAttrsChanged = true;
        }
      }
    }
  }
  if (needCastKeys) {
    const rawCurrentProps = toRaw(props);
    const castValues = rawCastValues || EMPTY_OBJ;
    for (let i = 0; i < needCastKeys.length; i++) {
      const key = needCastKeys[i];
      props[key] = resolvePropValue(
        options,
        rawCurrentProps,
        key,
        castValues[key],
        instance,
        !hasOwn(castValues, key)
      );
    }
  }
  return hasAttrsChanged;
}
function resolvePropValue(options, props, key, value, instance, isAbsent) {
  const opt = options[key];
  if (opt != null) {
    const hasDefault = hasOwn(opt, "default");
    if (hasDefault && value === void 0) {
      const defaultValue = opt.default;
      if (opt.type !== Function && !opt.skipFactory && isFunction(defaultValue)) {
        const { propsDefaults } = instance;
        if (key in propsDefaults) {
          value = propsDefaults[key];
        } else {
          const reset = setCurrentInstance(instance);
          value = propsDefaults[key] = defaultValue.call(
            null,
            props
          );
          reset();
        }
      } else {
        value = defaultValue;
      }
      if (instance.ce) {
        instance.ce._setProp(key, value);
      }
    }
    if (opt[
      0
      /* shouldCast */
    ]) {
      if (isAbsent && !hasDefault) {
        value = false;
      } else if (opt[
        1
        /* shouldCastTrue */
      ] && (value === "" || value === hyphenate(key))) {
        value = true;
      }
    }
  }
  return value;
}
const mixinPropsCache = /* @__PURE__ */ new WeakMap();
function normalizePropsOptions(comp, appContext, asMixin = false) {
  const cache = asMixin ? mixinPropsCache : appContext.propsCache;
  const cached = cache.get(comp);
  if (cached) {
    return cached;
  }
  const raw = comp.props;
  const normalized = {};
  const needCastKeys = [];
  let hasExtends = false;
  if (!isFunction(comp)) {
    const extendProps = (raw2) => {
      hasExtends = true;
      const [props, keys] = normalizePropsOptions(raw2, appContext, true);
      extend(normalized, props);
      if (keys) needCastKeys.push(...keys);
    };
    if (!asMixin && appContext.mixins.length) {
      appContext.mixins.forEach(extendProps);
    }
    if (comp.extends) {
      extendProps(comp.extends);
    }
    if (comp.mixins) {
      comp.mixins.forEach(extendProps);
    }
  }
  if (!raw && !hasExtends) {
    if (isObject(comp)) {
      cache.set(comp, EMPTY_ARR);
    }
    return EMPTY_ARR;
  }
  if (isArray$1(raw)) {
    for (let i = 0; i < raw.length; i++) {
      const normalizedKey = camelize(raw[i]);
      if (validatePropName(normalizedKey)) {
        normalized[normalizedKey] = EMPTY_OBJ;
      }
    }
  } else if (raw) {
    for (const key in raw) {
      const normalizedKey = camelize(key);
      if (validatePropName(normalizedKey)) {
        const opt = raw[key];
        const prop = normalized[normalizedKey] = isArray$1(opt) || isFunction(opt) ? { type: opt } : extend({}, opt);
        const propType = prop.type;
        let shouldCast = false;
        let shouldCastTrue = true;
        if (isArray$1(propType)) {
          for (let index = 0; index < propType.length; ++index) {
            const type = propType[index];
            const typeName = isFunction(type) && type.name;
            if (typeName === "Boolean") {
              shouldCast = true;
              break;
            } else if (typeName === "String") {
              shouldCastTrue = false;
            }
          }
        } else {
          shouldCast = isFunction(propType) && propType.name === "Boolean";
        }
        prop[
          0
          /* shouldCast */
        ] = shouldCast;
        prop[
          1
          /* shouldCastTrue */
        ] = shouldCastTrue;
        if (shouldCast || hasOwn(prop, "default")) {
          needCastKeys.push(normalizedKey);
        }
      }
    }
  }
  const res = [normalized, needCastKeys];
  if (isObject(comp)) {
    cache.set(comp, res);
  }
  return res;
}
function validatePropName(key) {
  if (key[0] !== "$" && !isReservedProp(key)) {
    return true;
  }
  return false;
}
const isInternalKey = (key) => key[0] === "_" || key === "$stable";
const normalizeSlotValue = (value) => isArray$1(value) ? value.map(normalizeVNode) : [normalizeVNode(value)];
const normalizeSlot$1 = (key, rawSlot, ctx) => {
  if (rawSlot._n) {
    return rawSlot;
  }
  const normalized = withCtx((...args) => {
    if (false) ;
    return normalizeSlotValue(rawSlot(...args));
  }, ctx);
  normalized._c = false;
  return normalized;
};
const normalizeObjectSlots = (rawSlots, slots, instance) => {
  const ctx = rawSlots._ctx;
  for (const key in rawSlots) {
    if (isInternalKey(key)) continue;
    const value = rawSlots[key];
    if (isFunction(value)) {
      slots[key] = normalizeSlot$1(key, value, ctx);
    } else if (value != null) {
      const normalized = normalizeSlotValue(value);
      slots[key] = () => normalized;
    }
  }
};
const normalizeVNodeSlots = (instance, children) => {
  const normalized = normalizeSlotValue(children);
  instance.slots.default = () => normalized;
};
const assignSlots = (slots, children, optimized) => {
  for (const key in children) {
    if (optimized || key !== "_") {
      slots[key] = children[key];
    }
  }
};
const initSlots = (instance, children, optimized) => {
  const slots = instance.slots = createInternalObject();
  if (instance.vnode.shapeFlag & 32) {
    const type = children._;
    if (type) {
      assignSlots(slots, children, optimized);
      if (optimized) {
        def(slots, "_", type, true);
      }
    } else {
      normalizeObjectSlots(children, slots);
    }
  } else if (children) {
    normalizeVNodeSlots(instance, children);
  }
};
const updateSlots = (instance, children, optimized) => {
  const { vnode, slots } = instance;
  let needDeletionCheck = true;
  let deletionComparisonTarget = EMPTY_OBJ;
  if (vnode.shapeFlag & 32) {
    const type = children._;
    if (type) {
      if (optimized && type === 1) {
        needDeletionCheck = false;
      } else {
        assignSlots(slots, children, optimized);
      }
    } else {
      needDeletionCheck = !children.$stable;
      normalizeObjectSlots(children, slots);
    }
    deletionComparisonTarget = children;
  } else if (children) {
    normalizeVNodeSlots(instance, children);
    deletionComparisonTarget = { default: 1 };
  }
  if (needDeletionCheck) {
    for (const key in slots) {
      if (!isInternalKey(key) && deletionComparisonTarget[key] == null) {
        delete slots[key];
      }
    }
  }
};
const queuePostRenderEffect = queueEffectWithSuspense;
function createRenderer(options) {
  return baseCreateRenderer(options);
}
function baseCreateRenderer(options, createHydrationFns) {
  const target = getGlobalThis();
  target.__VUE__ = true;
  const {
    insert: hostInsert,
    remove: hostRemove,
    patchProp: hostPatchProp,
    createElement: hostCreateElement,
    createText: hostCreateText,
    createComment: hostCreateComment,
    setText: hostSetText,
    setElementText: hostSetElementText,
    parentNode: hostParentNode,
    nextSibling: hostNextSibling,
    setScopeId: hostSetScopeId = NOOP,
    insertStaticContent: hostInsertStaticContent
  } = options;
  const patch = (n1, n2, container, anchor = null, parentComponent = null, parentSuspense = null, namespace = void 0, slotScopeIds = null, optimized = !!n2.dynamicChildren) => {
    if (n1 === n2) {
      return;
    }
    if (n1 && !isSameVNodeType(n1, n2)) {
      anchor = getNextHostNode(n1);
      unmount(n1, parentComponent, parentSuspense, true);
      n1 = null;
    }
    if (n2.patchFlag === -2) {
      optimized = false;
      n2.dynamicChildren = null;
    }
    const { type, ref: ref3, shapeFlag } = n2;
    switch (type) {
      case Text:
        processText(n1, n2, container, anchor);
        break;
      case Comment:
        processCommentNode(n1, n2, container, anchor);
        break;
      case Static:
        if (n1 == null) {
          mountStaticNode(n2, container, anchor, namespace);
        }
        break;
      case Fragment:
        processFragment(
          n1,
          n2,
          container,
          anchor,
          parentComponent,
          parentSuspense,
          namespace,
          slotScopeIds,
          optimized
        );
        break;
      default:
        if (shapeFlag & 1) {
          processElement(
            n1,
            n2,
            container,
            anchor,
            parentComponent,
            parentSuspense,
            namespace,
            slotScopeIds,
            optimized
          );
        } else if (shapeFlag & 6) {
          processComponent(
            n1,
            n2,
            container,
            anchor,
            parentComponent,
            parentSuspense,
            namespace,
            slotScopeIds,
            optimized
          );
        } else if (shapeFlag & 64) {
          type.process(
            n1,
            n2,
            container,
            anchor,
            parentComponent,
            parentSuspense,
            namespace,
            slotScopeIds,
            optimized,
            internals
          );
        } else if (shapeFlag & 128) {
          type.process(
            n1,
            n2,
            container,
            anchor,
            parentComponent,
            parentSuspense,
            namespace,
            slotScopeIds,
            optimized,
            internals
          );
        } else ;
    }
    if (ref3 != null && parentComponent) {
      setRef(ref3, n1 && n1.ref, parentSuspense, n2 || n1, !n2);
    }
  };
  const processText = (n1, n2, container, anchor) => {
    if (n1 == null) {
      hostInsert(
        n2.el = hostCreateText(n2.children),
        container,
        anchor
      );
    } else {
      const el2 = n2.el = n1.el;
      if (n2.children !== n1.children) {
        hostSetText(el2, n2.children);
      }
    }
  };
  const processCommentNode = (n1, n2, container, anchor) => {
    if (n1 == null) {
      hostInsert(
        n2.el = hostCreateComment(n2.children || ""),
        container,
        anchor
      );
    } else {
      n2.el = n1.el;
    }
  };
  const mountStaticNode = (n2, container, anchor, namespace) => {
    [n2.el, n2.anchor] = hostInsertStaticContent(
      n2.children,
      container,
      anchor,
      namespace,
      n2.el,
      n2.anchor
    );
  };
  const moveStaticNode = ({ el: el2, anchor }, container, nextSibling) => {
    let next;
    while (el2 && el2 !== anchor) {
      next = hostNextSibling(el2);
      hostInsert(el2, container, nextSibling);
      el2 = next;
    }
    hostInsert(anchor, container, nextSibling);
  };
  const removeStaticNode = ({ el: el2, anchor }) => {
    let next;
    while (el2 && el2 !== anchor) {
      next = hostNextSibling(el2);
      hostRemove(el2);
      el2 = next;
    }
    hostRemove(anchor);
  };
  const processElement = (n1, n2, container, anchor, parentComponent, parentSuspense, namespace, slotScopeIds, optimized) => {
    if (n2.type === "svg") {
      namespace = "svg";
    } else if (n2.type === "math") {
      namespace = "mathml";
    }
    if (n1 == null) {
      mountElement(
        n2,
        container,
        anchor,
        parentComponent,
        parentSuspense,
        namespace,
        slotScopeIds,
        optimized
      );
    } else {
      patchElement(
        n1,
        n2,
        parentComponent,
        parentSuspense,
        namespace,
        slotScopeIds,
        optimized
      );
    }
  };
  const mountElement = (vnode, container, anchor, parentComponent, parentSuspense, namespace, slotScopeIds, optimized) => {
    let el2;
    let vnodeHook;
    const { props, shapeFlag, transition, dirs } = vnode;
    el2 = vnode.el = hostCreateElement(
      vnode.type,
      namespace,
      props && props.is,
      props
    );
    if (shapeFlag & 8) {
      hostSetElementText(el2, vnode.children);
    } else if (shapeFlag & 16) {
      mountChildren(
        vnode.children,
        el2,
        null,
        parentComponent,
        parentSuspense,
        resolveChildrenNamespace(vnode, namespace),
        slotScopeIds,
        optimized
      );
    }
    if (dirs) {
      invokeDirectiveHook(vnode, null, parentComponent, "created");
    }
    setScopeId(el2, vnode, vnode.scopeId, slotScopeIds, parentComponent);
    if (props) {
      for (const key in props) {
        if (key !== "value" && !isReservedProp(key)) {
          hostPatchProp(el2, key, null, props[key], namespace, parentComponent);
        }
      }
      if ("value" in props) {
        hostPatchProp(el2, "value", null, props.value, namespace);
      }
      if (vnodeHook = props.onVnodeBeforeMount) {
        invokeVNodeHook(vnodeHook, parentComponent, vnode);
      }
    }
    if (dirs) {
      invokeDirectiveHook(vnode, null, parentComponent, "beforeMount");
    }
    const needCallTransitionHooks = needTransition(parentSuspense, transition);
    if (needCallTransitionHooks) {
      transition.beforeEnter(el2);
    }
    hostInsert(el2, container, anchor);
    if ((vnodeHook = props && props.onVnodeMounted) || needCallTransitionHooks || dirs) {
      queuePostRenderEffect(() => {
        vnodeHook && invokeVNodeHook(vnodeHook, parentComponent, vnode);
        needCallTransitionHooks && transition.enter(el2);
        dirs && invokeDirectiveHook(vnode, null, parentComponent, "mounted");
      }, parentSuspense);
    }
  };
  const setScopeId = (el2, vnode, scopeId, slotScopeIds, parentComponent) => {
    if (scopeId) {
      hostSetScopeId(el2, scopeId);
    }
    if (slotScopeIds) {
      for (let i = 0; i < slotScopeIds.length; i++) {
        hostSetScopeId(el2, slotScopeIds[i]);
      }
    }
    if (parentComponent) {
      let subTree = parentComponent.subTree;
      if (vnode === subTree || isSuspense(subTree.type) && (subTree.ssContent === vnode || subTree.ssFallback === vnode)) {
        const parentVNode = parentComponent.vnode;
        setScopeId(
          el2,
          parentVNode,
          parentVNode.scopeId,
          parentVNode.slotScopeIds,
          parentComponent.parent
        );
      }
    }
  };
  const mountChildren = (children, container, anchor, parentComponent, parentSuspense, namespace, slotScopeIds, optimized, start = 0) => {
    for (let i = start; i < children.length; i++) {
      const child = children[i] = optimized ? cloneIfMounted(children[i]) : normalizeVNode(children[i]);
      patch(
        null,
        child,
        container,
        anchor,
        parentComponent,
        parentSuspense,
        namespace,
        slotScopeIds,
        optimized
      );
    }
  };
  const patchElement = (n1, n2, parentComponent, parentSuspense, namespace, slotScopeIds, optimized) => {
    const el2 = n2.el = n1.el;
    let { patchFlag, dynamicChildren, dirs } = n2;
    patchFlag |= n1.patchFlag & 16;
    const oldProps = n1.props || EMPTY_OBJ;
    const newProps = n2.props || EMPTY_OBJ;
    let vnodeHook;
    parentComponent && toggleRecurse(parentComponent, false);
    if (vnodeHook = newProps.onVnodeBeforeUpdate) {
      invokeVNodeHook(vnodeHook, parentComponent, n2, n1);
    }
    if (dirs) {
      invokeDirectiveHook(n2, n1, parentComponent, "beforeUpdate");
    }
    parentComponent && toggleRecurse(parentComponent, true);
    if (oldProps.innerHTML && newProps.innerHTML == null || oldProps.textContent && newProps.textContent == null) {
      hostSetElementText(el2, "");
    }
    if (dynamicChildren) {
      patchBlockChildren(
        n1.dynamicChildren,
        dynamicChildren,
        el2,
        parentComponent,
        parentSuspense,
        resolveChildrenNamespace(n2, namespace),
        slotScopeIds
      );
    } else if (!optimized) {
      patchChildren(
        n1,
        n2,
        el2,
        null,
        parentComponent,
        parentSuspense,
        resolveChildrenNamespace(n2, namespace),
        slotScopeIds,
        false
      );
    }
    if (patchFlag > 0) {
      if (patchFlag & 16) {
        patchProps(el2, oldProps, newProps, parentComponent, namespace);
      } else {
        if (patchFlag & 2) {
          if (oldProps.class !== newProps.class) {
            hostPatchProp(el2, "class", null, newProps.class, namespace);
          }
        }
        if (patchFlag & 4) {
          hostPatchProp(el2, "style", oldProps.style, newProps.style, namespace);
        }
        if (patchFlag & 8) {
          const propsToUpdate = n2.dynamicProps;
          for (let i = 0; i < propsToUpdate.length; i++) {
            const key = propsToUpdate[i];
            const prev = oldProps[key];
            const next = newProps[key];
            if (next !== prev || key === "value") {
              hostPatchProp(el2, key, prev, next, namespace, parentComponent);
            }
          }
        }
      }
      if (patchFlag & 1) {
        if (n1.children !== n2.children) {
          hostSetElementText(el2, n2.children);
        }
      }
    } else if (!optimized && dynamicChildren == null) {
      patchProps(el2, oldProps, newProps, parentComponent, namespace);
    }
    if ((vnodeHook = newProps.onVnodeUpdated) || dirs) {
      queuePostRenderEffect(() => {
        vnodeHook && invokeVNodeHook(vnodeHook, parentComponent, n2, n1);
        dirs && invokeDirectiveHook(n2, n1, parentComponent, "updated");
      }, parentSuspense);
    }
  };
  const patchBlockChildren = (oldChildren, newChildren, fallbackContainer, parentComponent, parentSuspense, namespace, slotScopeIds) => {
    for (let i = 0; i < newChildren.length; i++) {
      const oldVNode = oldChildren[i];
      const newVNode = newChildren[i];
      const container = (
        // oldVNode may be an errored async setup() component inside Suspense
        // which will not have a mounted element
        oldVNode.el && // - In the case of a Fragment, we need to provide the actual parent
        // of the Fragment itself so it can move its children.
        (oldVNode.type === Fragment || // - In the case of different nodes, there is going to be a replacement
        // which also requires the correct parent container
        !isSameVNodeType(oldVNode, newVNode) || // - In the case of a component, it could contain anything.
        oldVNode.shapeFlag & (6 | 64)) ? hostParentNode(oldVNode.el) : (
          // In other cases, the parent container is not actually used so we
          // just pass the block element here to avoid a DOM parentNode call.
          fallbackContainer
        )
      );
      patch(
        oldVNode,
        newVNode,
        container,
        null,
        parentComponent,
        parentSuspense,
        namespace,
        slotScopeIds,
        true
      );
    }
  };
  const patchProps = (el2, oldProps, newProps, parentComponent, namespace) => {
    if (oldProps !== newProps) {
      if (oldProps !== EMPTY_OBJ) {
        for (const key in oldProps) {
          if (!isReservedProp(key) && !(key in newProps)) {
            hostPatchProp(
              el2,
              key,
              oldProps[key],
              null,
              namespace,
              parentComponent
            );
          }
        }
      }
      for (const key in newProps) {
        if (isReservedProp(key)) continue;
        const next = newProps[key];
        const prev = oldProps[key];
        if (next !== prev && key !== "value") {
          hostPatchProp(el2, key, prev, next, namespace, parentComponent);
        }
      }
      if ("value" in newProps) {
        hostPatchProp(el2, "value", oldProps.value, newProps.value, namespace);
      }
    }
  };
  const processFragment = (n1, n2, container, anchor, parentComponent, parentSuspense, namespace, slotScopeIds, optimized) => {
    const fragmentStartAnchor = n2.el = n1 ? n1.el : hostCreateText("");
    const fragmentEndAnchor = n2.anchor = n1 ? n1.anchor : hostCreateText("");
    let { patchFlag, dynamicChildren, slotScopeIds: fragmentSlotScopeIds } = n2;
    if (fragmentSlotScopeIds) {
      slotScopeIds = slotScopeIds ? slotScopeIds.concat(fragmentSlotScopeIds) : fragmentSlotScopeIds;
    }
    if (n1 == null) {
      hostInsert(fragmentStartAnchor, container, anchor);
      hostInsert(fragmentEndAnchor, container, anchor);
      mountChildren(
        // #10007
        // such fragment like `<></>` will be compiled into
        // a fragment which doesn't have a children.
        // In this case fallback to an empty array
        n2.children || [],
        container,
        fragmentEndAnchor,
        parentComponent,
        parentSuspense,
        namespace,
        slotScopeIds,
        optimized
      );
    } else {
      if (patchFlag > 0 && patchFlag & 64 && dynamicChildren && // #2715 the previous fragment could've been a BAILed one as a result
      // of renderSlot() with no valid children
      n1.dynamicChildren) {
        patchBlockChildren(
          n1.dynamicChildren,
          dynamicChildren,
          container,
          parentComponent,
          parentSuspense,
          namespace,
          slotScopeIds
        );
        if (
          // #2080 if the stable fragment has a key, it's a <template v-for> that may
          //  get moved around. Make sure all root level vnodes inherit el.
          // #2134 or if it's a component root, it may also get moved around
          // as the component is being moved.
          n2.key != null || parentComponent && n2 === parentComponent.subTree
        ) {
          traverseStaticChildren(
            n1,
            n2,
            true
            /* shallow */
          );
        }
      } else {
        patchChildren(
          n1,
          n2,
          container,
          fragmentEndAnchor,
          parentComponent,
          parentSuspense,
          namespace,
          slotScopeIds,
          optimized
        );
      }
    }
  };
  const processComponent = (n1, n2, container, anchor, parentComponent, parentSuspense, namespace, slotScopeIds, optimized) => {
    n2.slotScopeIds = slotScopeIds;
    if (n1 == null) {
      if (n2.shapeFlag & 512) {
        parentComponent.ctx.activate(
          n2,
          container,
          anchor,
          namespace,
          optimized
        );
      } else {
        mountComponent(
          n2,
          container,
          anchor,
          parentComponent,
          parentSuspense,
          namespace,
          optimized
        );
      }
    } else {
      updateComponent(n1, n2, optimized);
    }
  };
  const mountComponent = (initialVNode, container, anchor, parentComponent, parentSuspense, namespace, optimized) => {
    const instance = initialVNode.component = createComponentInstance(
      initialVNode,
      parentComponent,
      parentSuspense
    );
    if (isKeepAlive(initialVNode)) {
      instance.ctx.renderer = internals;
    }
    {
      setupComponent(instance, false, optimized);
    }
    if (instance.asyncDep) {
      parentSuspense && parentSuspense.registerDep(instance, setupRenderEffect, optimized);
      if (!initialVNode.el) {
        const placeholder = instance.subTree = createVNode(Comment);
        processCommentNode(null, placeholder, container, anchor);
      }
    } else {
      setupRenderEffect(
        instance,
        initialVNode,
        container,
        anchor,
        parentSuspense,
        namespace,
        optimized
      );
    }
  };
  const updateComponent = (n1, n2, optimized) => {
    const instance = n2.component = n1.component;
    if (shouldUpdateComponent(n1, n2, optimized)) {
      if (instance.asyncDep && !instance.asyncResolved) {
        updateComponentPreRender(instance, n2, optimized);
        return;
      } else {
        instance.next = n2;
        instance.update();
      }
    } else {
      n2.el = n1.el;
      instance.vnode = n2;
    }
  };
  const setupRenderEffect = (instance, initialVNode, container, anchor, parentSuspense, namespace, optimized) => {
    const componentUpdateFn = () => {
      if (!instance.isMounted) {
        let vnodeHook;
        const { el: el2, props } = initialVNode;
        const { bm: bm2, m, parent, root, type } = instance;
        const isAsyncWrapperVNode = isAsyncWrapper(initialVNode);
        toggleRecurse(instance, false);
        if (bm2) {
          invokeArrayFns(bm2);
        }
        if (!isAsyncWrapperVNode && (vnodeHook = props && props.onVnodeBeforeMount)) {
          invokeVNodeHook(vnodeHook, parent, initialVNode);
        }
        toggleRecurse(instance, true);
        if (el2 && hydrateNode) {
          const hydrateSubTree = () => {
            instance.subTree = renderComponentRoot(instance);
            hydrateNode(
              el2,
              instance.subTree,
              instance,
              parentSuspense,
              null
            );
          };
          if (isAsyncWrapperVNode && type.__asyncHydrate) {
            type.__asyncHydrate(
              el2,
              instance,
              hydrateSubTree
            );
          } else {
            hydrateSubTree();
          }
        } else {
          if (root.ce) {
            root.ce._injectChildStyle(type);
          }
          const subTree = instance.subTree = renderComponentRoot(instance);
          patch(
            null,
            subTree,
            container,
            anchor,
            instance,
            parentSuspense,
            namespace
          );
          initialVNode.el = subTree.el;
        }
        if (m) {
          queuePostRenderEffect(m, parentSuspense);
        }
        if (!isAsyncWrapperVNode && (vnodeHook = props && props.onVnodeMounted)) {
          const scopedInitialVNode = initialVNode;
          queuePostRenderEffect(
            () => invokeVNodeHook(vnodeHook, parent, scopedInitialVNode),
            parentSuspense
          );
        }
        if (initialVNode.shapeFlag & 256 || parent && isAsyncWrapper(parent.vnode) && parent.vnode.shapeFlag & 256) {
          instance.a && queuePostRenderEffect(instance.a, parentSuspense);
        }
        instance.isMounted = true;
        initialVNode = container = anchor = null;
      } else {
        let { next, bu, u, parent, vnode } = instance;
        {
          const nonHydratedAsyncRoot = locateNonHydratedAsyncRoot(instance);
          if (nonHydratedAsyncRoot) {
            if (next) {
              next.el = vnode.el;
              updateComponentPreRender(instance, next, optimized);
            }
            nonHydratedAsyncRoot.asyncDep.then(() => {
              if (!instance.isUnmounted) {
                componentUpdateFn();
              }
            });
            return;
          }
        }
        let originNext = next;
        let vnodeHook;
        toggleRecurse(instance, false);
        if (next) {
          next.el = vnode.el;
          updateComponentPreRender(instance, next, optimized);
        } else {
          next = vnode;
        }
        if (bu) {
          invokeArrayFns(bu);
        }
        if (vnodeHook = next.props && next.props.onVnodeBeforeUpdate) {
          invokeVNodeHook(vnodeHook, parent, next, vnode);
        }
        toggleRecurse(instance, true);
        const nextTree = renderComponentRoot(instance);
        const prevTree = instance.subTree;
        instance.subTree = nextTree;
        patch(
          prevTree,
          nextTree,
          // parent may have changed if it's in a teleport
          hostParentNode(prevTree.el),
          // anchor may have changed if it's in a fragment
          getNextHostNode(prevTree),
          instance,
          parentSuspense,
          namespace
        );
        next.el = nextTree.el;
        if (originNext === null) {
          updateHOCHostEl(instance, nextTree.el);
        }
        if (u) {
          queuePostRenderEffect(u, parentSuspense);
        }
        if (vnodeHook = next.props && next.props.onVnodeUpdated) {
          queuePostRenderEffect(
            () => invokeVNodeHook(vnodeHook, parent, next, vnode),
            parentSuspense
          );
        }
      }
    };
    instance.scope.on();
    const effect2 = instance.effect = new ReactiveEffect(componentUpdateFn);
    instance.scope.off();
    const update = instance.update = effect2.run.bind(effect2);
    const job = instance.job = effect2.runIfDirty.bind(effect2);
    job.i = instance;
    job.id = instance.uid;
    effect2.scheduler = () => queueJob(job);
    toggleRecurse(instance, true);
    update();
  };
  const updateComponentPreRender = (instance, nextVNode, optimized) => {
    nextVNode.component = instance;
    const prevProps = instance.vnode.props;
    instance.vnode = nextVNode;
    instance.next = null;
    updateProps(instance, nextVNode.props, prevProps, optimized);
    updateSlots(instance, nextVNode.children, optimized);
    pauseTracking();
    flushPreFlushCbs(instance);
    resetTracking();
  };
  const patchChildren = (n1, n2, container, anchor, parentComponent, parentSuspense, namespace, slotScopeIds, optimized = false) => {
    const c1 = n1 && n1.children;
    const prevShapeFlag = n1 ? n1.shapeFlag : 0;
    const c2 = n2.children;
    const { patchFlag, shapeFlag } = n2;
    if (patchFlag > 0) {
      if (patchFlag & 128) {
        patchKeyedChildren(
          c1,
          c2,
          container,
          anchor,
          parentComponent,
          parentSuspense,
          namespace,
          slotScopeIds,
          optimized
        );
        return;
      } else if (patchFlag & 256) {
        patchUnkeyedChildren(
          c1,
          c2,
          container,
          anchor,
          parentComponent,
          parentSuspense,
          namespace,
          slotScopeIds,
          optimized
        );
        return;
      }
    }
    if (shapeFlag & 8) {
      if (prevShapeFlag & 16) {
        unmountChildren(c1, parentComponent, parentSuspense);
      }
      if (c2 !== c1) {
        hostSetElementText(container, c2);
      }
    } else {
      if (prevShapeFlag & 16) {
        if (shapeFlag & 16) {
          patchKeyedChildren(
            c1,
            c2,
            container,
            anchor,
            parentComponent,
            parentSuspense,
            namespace,
            slotScopeIds,
            optimized
          );
        } else {
          unmountChildren(c1, parentComponent, parentSuspense, true);
        }
      } else {
        if (prevShapeFlag & 8) {
          hostSetElementText(container, "");
        }
        if (shapeFlag & 16) {
          mountChildren(
            c2,
            container,
            anchor,
            parentComponent,
            parentSuspense,
            namespace,
            slotScopeIds,
            optimized
          );
        }
      }
    }
  };
  const patchUnkeyedChildren = (c1, c2, container, anchor, parentComponent, parentSuspense, namespace, slotScopeIds, optimized) => {
    c1 = c1 || EMPTY_ARR;
    c2 = c2 || EMPTY_ARR;
    const oldLength = c1.length;
    const newLength = c2.length;
    const commonLength = Math.min(oldLength, newLength);
    let i;
    for (i = 0; i < commonLength; i++) {
      const nextChild = c2[i] = optimized ? cloneIfMounted(c2[i]) : normalizeVNode(c2[i]);
      patch(
        c1[i],
        nextChild,
        container,
        null,
        parentComponent,
        parentSuspense,
        namespace,
        slotScopeIds,
        optimized
      );
    }
    if (oldLength > newLength) {
      unmountChildren(
        c1,
        parentComponent,
        parentSuspense,
        true,
        false,
        commonLength
      );
    } else {
      mountChildren(
        c2,
        container,
        anchor,
        parentComponent,
        parentSuspense,
        namespace,
        slotScopeIds,
        optimized,
        commonLength
      );
    }
  };
  const patchKeyedChildren = (c1, c2, container, parentAnchor, parentComponent, parentSuspense, namespace, slotScopeIds, optimized) => {
    let i = 0;
    const l2 = c2.length;
    let e1 = c1.length - 1;
    let e2 = l2 - 1;
    while (i <= e1 && i <= e2) {
      const n1 = c1[i];
      const n2 = c2[i] = optimized ? cloneIfMounted(c2[i]) : normalizeVNode(c2[i]);
      if (isSameVNodeType(n1, n2)) {
        patch(
          n1,
          n2,
          container,
          null,
          parentComponent,
          parentSuspense,
          namespace,
          slotScopeIds,
          optimized
        );
      } else {
        break;
      }
      i++;
    }
    while (i <= e1 && i <= e2) {
      const n1 = c1[e1];
      const n2 = c2[e2] = optimized ? cloneIfMounted(c2[e2]) : normalizeVNode(c2[e2]);
      if (isSameVNodeType(n1, n2)) {
        patch(
          n1,
          n2,
          container,
          null,
          parentComponent,
          parentSuspense,
          namespace,
          slotScopeIds,
          optimized
        );
      } else {
        break;
      }
      e1--;
      e2--;
    }
    if (i > e1) {
      if (i <= e2) {
        const nextPos = e2 + 1;
        const anchor = nextPos < l2 ? c2[nextPos].el : parentAnchor;
        while (i <= e2) {
          patch(
            null,
            c2[i] = optimized ? cloneIfMounted(c2[i]) : normalizeVNode(c2[i]),
            container,
            anchor,
            parentComponent,
            parentSuspense,
            namespace,
            slotScopeIds,
            optimized
          );
          i++;
        }
      }
    } else if (i > e2) {
      while (i <= e1) {
        unmount(c1[i], parentComponent, parentSuspense, true);
        i++;
      }
    } else {
      const s1 = i;
      const s2 = i;
      const keyToNewIndexMap = /* @__PURE__ */ new Map();
      for (i = s2; i <= e2; i++) {
        const nextChild = c2[i] = optimized ? cloneIfMounted(c2[i]) : normalizeVNode(c2[i]);
        if (nextChild.key != null) {
          keyToNewIndexMap.set(nextChild.key, i);
        }
      }
      let j2;
      let patched = 0;
      const toBePatched = e2 - s2 + 1;
      let moved = false;
      let maxNewIndexSoFar = 0;
      const newIndexToOldIndexMap = new Array(toBePatched);
      for (i = 0; i < toBePatched; i++) newIndexToOldIndexMap[i] = 0;
      for (i = s1; i <= e1; i++) {
        const prevChild = c1[i];
        if (patched >= toBePatched) {
          unmount(prevChild, parentComponent, parentSuspense, true);
          continue;
        }
        let newIndex;
        if (prevChild.key != null) {
          newIndex = keyToNewIndexMap.get(prevChild.key);
        } else {
          for (j2 = s2; j2 <= e2; j2++) {
            if (newIndexToOldIndexMap[j2 - s2] === 0 && isSameVNodeType(prevChild, c2[j2])) {
              newIndex = j2;
              break;
            }
          }
        }
        if (newIndex === void 0) {
          unmount(prevChild, parentComponent, parentSuspense, true);
        } else {
          newIndexToOldIndexMap[newIndex - s2] = i + 1;
          if (newIndex >= maxNewIndexSoFar) {
            maxNewIndexSoFar = newIndex;
          } else {
            moved = true;
          }
          patch(
            prevChild,
            c2[newIndex],
            container,
            null,
            parentComponent,
            parentSuspense,
            namespace,
            slotScopeIds,
            optimized
          );
          patched++;
        }
      }
      const increasingNewIndexSequence = moved ? getSequence(newIndexToOldIndexMap) : EMPTY_ARR;
      j2 = increasingNewIndexSequence.length - 1;
      for (i = toBePatched - 1; i >= 0; i--) {
        const nextIndex = s2 + i;
        const nextChild = c2[nextIndex];
        const anchor = nextIndex + 1 < l2 ? c2[nextIndex + 1].el : parentAnchor;
        if (newIndexToOldIndexMap[i] === 0) {
          patch(
            null,
            nextChild,
            container,
            anchor,
            parentComponent,
            parentSuspense,
            namespace,
            slotScopeIds,
            optimized
          );
        } else if (moved) {
          if (j2 < 0 || i !== increasingNewIndexSequence[j2]) {
            move(nextChild, container, anchor, 2);
          } else {
            j2--;
          }
        }
      }
    }
  };
  const move = (vnode, container, anchor, moveType, parentSuspense = null) => {
    const { el: el2, type, transition, children, shapeFlag } = vnode;
    if (shapeFlag & 6) {
      move(vnode.component.subTree, container, anchor, moveType);
      return;
    }
    if (shapeFlag & 128) {
      vnode.suspense.move(container, anchor, moveType);
      return;
    }
    if (shapeFlag & 64) {
      type.move(vnode, container, anchor, internals);
      return;
    }
    if (type === Fragment) {
      hostInsert(el2, container, anchor);
      for (let i = 0; i < children.length; i++) {
        move(children[i], container, anchor, moveType);
      }
      hostInsert(vnode.anchor, container, anchor);
      return;
    }
    if (type === Static) {
      moveStaticNode(vnode, container, anchor);
      return;
    }
    const needTransition2 = moveType !== 2 && shapeFlag & 1 && transition;
    if (needTransition2) {
      if (moveType === 0) {
        transition.beforeEnter(el2);
        hostInsert(el2, container, anchor);
        queuePostRenderEffect(() => transition.enter(el2), parentSuspense);
      } else {
        const { leave, delayLeave, afterLeave } = transition;
        const remove22 = () => hostInsert(el2, container, anchor);
        const performLeave = () => {
          leave(el2, () => {
            remove22();
            afterLeave && afterLeave();
          });
        };
        if (delayLeave) {
          delayLeave(el2, remove22, performLeave);
        } else {
          performLeave();
        }
      }
    } else {
      hostInsert(el2, container, anchor);
    }
  };
  const unmount = (vnode, parentComponent, parentSuspense, doRemove = false, optimized = false) => {
    const {
      type,
      props,
      ref: ref3,
      children,
      dynamicChildren,
      shapeFlag,
      patchFlag,
      dirs,
      cacheIndex
    } = vnode;
    if (patchFlag === -2) {
      optimized = false;
    }
    if (ref3 != null) {
      setRef(ref3, null, parentSuspense, vnode, true);
    }
    if (cacheIndex != null) {
      parentComponent.renderCache[cacheIndex] = void 0;
    }
    if (shapeFlag & 256) {
      parentComponent.ctx.deactivate(vnode);
      return;
    }
    const shouldInvokeDirs = shapeFlag & 1 && dirs;
    const shouldInvokeVnodeHook = !isAsyncWrapper(vnode);
    let vnodeHook;
    if (shouldInvokeVnodeHook && (vnodeHook = props && props.onVnodeBeforeUnmount)) {
      invokeVNodeHook(vnodeHook, parentComponent, vnode);
    }
    if (shapeFlag & 6) {
      unmountComponent(vnode.component, parentSuspense, doRemove);
    } else {
      if (shapeFlag & 128) {
        vnode.suspense.unmount(parentSuspense, doRemove);
        return;
      }
      if (shouldInvokeDirs) {
        invokeDirectiveHook(vnode, null, parentComponent, "beforeUnmount");
      }
      if (shapeFlag & 64) {
        vnode.type.remove(
          vnode,
          parentComponent,
          parentSuspense,
          internals,
          doRemove
        );
      } else if (dynamicChildren && // #5154
      // when v-once is used inside a block, setBlockTracking(-1) marks the
      // parent block with hasOnce: true
      // so that it doesn't take the fast path during unmount - otherwise
      // components nested in v-once are never unmounted.
      !dynamicChildren.hasOnce && // #1153: fast path should not be taken for non-stable (v-for) fragments
      (type !== Fragment || patchFlag > 0 && patchFlag & 64)) {
        unmountChildren(
          dynamicChildren,
          parentComponent,
          parentSuspense,
          false,
          true
        );
      } else if (type === Fragment && patchFlag & (128 | 256) || !optimized && shapeFlag & 16) {
        unmountChildren(children, parentComponent, parentSuspense);
      }
      if (doRemove) {
        remove2(vnode);
      }
    }
    if (shouldInvokeVnodeHook && (vnodeHook = props && props.onVnodeUnmounted) || shouldInvokeDirs) {
      queuePostRenderEffect(() => {
        vnodeHook && invokeVNodeHook(vnodeHook, parentComponent, vnode);
        shouldInvokeDirs && invokeDirectiveHook(vnode, null, parentComponent, "unmounted");
      }, parentSuspense);
    }
  };
  const remove2 = (vnode) => {
    const { type, el: el2, anchor, transition } = vnode;
    if (type === Fragment) {
      {
        removeFragment(el2, anchor);
      }
      return;
    }
    if (type === Static) {
      removeStaticNode(vnode);
      return;
    }
    const performRemove = () => {
      hostRemove(el2);
      if (transition && !transition.persisted && transition.afterLeave) {
        transition.afterLeave();
      }
    };
    if (vnode.shapeFlag & 1 && transition && !transition.persisted) {
      const { leave, delayLeave } = transition;
      const performLeave = () => leave(el2, performRemove);
      if (delayLeave) {
        delayLeave(vnode.el, performRemove, performLeave);
      } else {
        performLeave();
      }
    } else {
      performRemove();
    }
  };
  const removeFragment = (cur, end) => {
    let next;
    while (cur !== end) {
      next = hostNextSibling(cur);
      hostRemove(cur);
      cur = next;
    }
    hostRemove(end);
  };
  const unmountComponent = (instance, parentSuspense, doRemove) => {
    const { bum, scope, job, subTree, um: um2, m, a } = instance;
    invalidateMount(m);
    invalidateMount(a);
    if (bum) {
      invokeArrayFns(bum);
    }
    scope.stop();
    if (job) {
      job.flags |= 8;
      unmount(subTree, instance, parentSuspense, doRemove);
    }
    if (um2) {
      queuePostRenderEffect(um2, parentSuspense);
    }
    queuePostRenderEffect(() => {
      instance.isUnmounted = true;
    }, parentSuspense);
    if (parentSuspense && parentSuspense.pendingBranch && !parentSuspense.isUnmounted && instance.asyncDep && !instance.asyncResolved && instance.suspenseId === parentSuspense.pendingId) {
      parentSuspense.deps--;
      if (parentSuspense.deps === 0) {
        parentSuspense.resolve();
      }
    }
  };
  const unmountChildren = (children, parentComponent, parentSuspense, doRemove = false, optimized = false, start = 0) => {
    for (let i = start; i < children.length; i++) {
      unmount(children[i], parentComponent, parentSuspense, doRemove, optimized);
    }
  };
  const getNextHostNode = (vnode) => {
    if (vnode.shapeFlag & 6) {
      return getNextHostNode(vnode.component.subTree);
    }
    if (vnode.shapeFlag & 128) {
      return vnode.suspense.next();
    }
    const el2 = hostNextSibling(vnode.anchor || vnode.el);
    const teleportEnd = el2 && el2[TeleportEndKey];
    return teleportEnd ? hostNextSibling(teleportEnd) : el2;
  };
  let isFlushing = false;
  const render = (vnode, container, namespace) => {
    if (vnode == null) {
      if (container._vnode) {
        unmount(container._vnode, null, null, true);
      }
    } else {
      patch(
        container._vnode || null,
        vnode,
        container,
        null,
        null,
        null,
        namespace
      );
    }
    container._vnode = vnode;
    if (!isFlushing) {
      isFlushing = true;
      flushPreFlushCbs();
      flushPostFlushCbs();
      isFlushing = false;
    }
  };
  const internals = {
    p: patch,
    um: unmount,
    m: move,
    r: remove2,
    mt: mountComponent,
    mc: mountChildren,
    pc: patchChildren,
    pbc: patchBlockChildren,
    n: getNextHostNode,
    o: options
  };
  let hydrate;
  let hydrateNode;
  return {
    render,
    hydrate,
    createApp: createAppAPI(render, hydrate)
  };
}
function resolveChildrenNamespace({ type, props }, currentNamespace) {
  return currentNamespace === "svg" && type === "foreignObject" || currentNamespace === "mathml" && type === "annotation-xml" && props && props.encoding && props.encoding.includes("html") ? void 0 : currentNamespace;
}
function toggleRecurse({ effect: effect2, job }, allowed) {
  if (allowed) {
    effect2.flags |= 32;
    job.flags |= 4;
  } else {
    effect2.flags &= ~32;
    job.flags &= ~4;
  }
}
function needTransition(parentSuspense, transition) {
  return (!parentSuspense || parentSuspense && !parentSuspense.pendingBranch) && transition && !transition.persisted;
}
function traverseStaticChildren(n1, n2, shallow = false) {
  const ch1 = n1.children;
  const ch2 = n2.children;
  if (isArray$1(ch1) && isArray$1(ch2)) {
    for (let i = 0; i < ch1.length; i++) {
      const c1 = ch1[i];
      let c2 = ch2[i];
      if (c2.shapeFlag & 1 && !c2.dynamicChildren) {
        if (c2.patchFlag <= 0 || c2.patchFlag === 32) {
          c2 = ch2[i] = cloneIfMounted(ch2[i]);
          c2.el = c1.el;
        }
        if (!shallow && c2.patchFlag !== -2)
          traverseStaticChildren(c1, c2);
      }
      if (c2.type === Text) {
        c2.el = c1.el;
      }
    }
  }
}
function getSequence(arr) {
  const p2 = arr.slice();
  const result = [0];
  let i, j2, u, v, c;
  const len = arr.length;
  for (i = 0; i < len; i++) {
    const arrI = arr[i];
    if (arrI !== 0) {
      j2 = result[result.length - 1];
      if (arr[j2] < arrI) {
        p2[i] = j2;
        result.push(i);
        continue;
      }
      u = 0;
      v = result.length - 1;
      while (u < v) {
        c = u + v >> 1;
        if (arr[result[c]] < arrI) {
          u = c + 1;
        } else {
          v = c;
        }
      }
      if (arrI < arr[result[u]]) {
        if (u > 0) {
          p2[i] = result[u - 1];
        }
        result[u] = i;
      }
    }
  }
  u = result.length;
  v = result[u - 1];
  while (u-- > 0) {
    result[u] = v;
    v = p2[v];
  }
  return result;
}
function locateNonHydratedAsyncRoot(instance) {
  const subComponent = instance.subTree.component;
  if (subComponent) {
    if (subComponent.asyncDep && !subComponent.asyncResolved) {
      return subComponent;
    } else {
      return locateNonHydratedAsyncRoot(subComponent);
    }
  }
}
function invalidateMount(hooks) {
  if (hooks) {
    for (let i = 0; i < hooks.length; i++)
      hooks[i].flags |= 8;
  }
}
const ssrContextKey = Symbol.for("v-scx");
const useSSRContext = () => {
  {
    const ctx = inject(ssrContextKey);
    return ctx;
  }
};
function watch(source, cb2, options) {
  return doWatch(source, cb2, options);
}
function doWatch(source, cb2, options = EMPTY_OBJ) {
  const { immediate, deep, flush, once } = options;
  const baseWatchOptions = extend({}, options);
  let ssrCleanup;
  if (isInSSRComponentSetup) {
    if (flush === "sync") {
      const ctx = useSSRContext();
      ssrCleanup = ctx.__watcherHandles || (ctx.__watcherHandles = []);
    } else if (!cb2 || immediate) {
      baseWatchOptions.once = true;
    } else {
      const watchStopHandle = () => {
      };
      watchStopHandle.stop = NOOP;
      watchStopHandle.resume = NOOP;
      watchStopHandle.pause = NOOP;
      return watchStopHandle;
    }
  }
  const instance = currentInstance;
  baseWatchOptions.call = (fn2, type, args) => callWithAsyncErrorHandling(fn2, instance, type, args);
  let isPre = false;
  if (flush === "post") {
    baseWatchOptions.scheduler = (job) => {
      queuePostRenderEffect(job, instance && instance.suspense);
    };
  } else if (flush !== "sync") {
    isPre = true;
    baseWatchOptions.scheduler = (job, isFirstRun) => {
      if (isFirstRun) {
        job();
      } else {
        queueJob(job);
      }
    };
  }
  baseWatchOptions.augmentJob = (job) => {
    if (cb2) {
      job.flags |= 4;
    }
    if (isPre) {
      job.flags |= 2;
      if (instance) {
        job.id = instance.uid;
        job.i = instance;
      }
    }
  };
  const watchHandle = watch$1(source, cb2, baseWatchOptions);
  if (ssrCleanup) ssrCleanup.push(watchHandle);
  return watchHandle;
}
function instanceWatch(source, value, options) {
  const publicThis = this.proxy;
  const getter = isString(source) ? source.includes(".") ? createPathGetter(publicThis, source) : () => publicThis[source] : source.bind(publicThis, publicThis);
  let cb2;
  if (isFunction(value)) {
    cb2 = value;
  } else {
    cb2 = value.handler;
    options = value;
  }
  const reset = setCurrentInstance(this);
  const res = doWatch(getter, cb2.bind(publicThis), options);
  reset();
  return res;
}
function createPathGetter(ctx, path) {
  const segments = path.split(".");
  return () => {
    let cur = ctx;
    for (let i = 0; i < segments.length && cur; i++) {
      cur = cur[segments[i]];
    }
    return cur;
  };
}
const getModelModifiers = (props, modelName) => {
  return modelName === "modelValue" || modelName === "model-value" ? props.modelModifiers : props[`${modelName}Modifiers`] || props[`${camelize(modelName)}Modifiers`] || props[`${hyphenate(modelName)}Modifiers`];
};
function emit(instance, event, ...rawArgs) {
  if (instance.isUnmounted) return;
  const props = instance.vnode.props || EMPTY_OBJ;
  let args = rawArgs;
  const isModelListener2 = event.startsWith("update:");
  const modifiers = isModelListener2 && getModelModifiers(props, event.slice(7));
  if (modifiers) {
    if (modifiers.trim) {
      args = rawArgs.map((a) => isString(a) ? a.trim() : a);
    }
    if (modifiers.number) {
      args = rawArgs.map(looseToNumber);
    }
  }
  let handlerName;
  let handler = props[handlerName = toHandlerKey(event)] || // also try camelCase event handler (#2249)
  props[handlerName = toHandlerKey(camelize(event))];
  if (!handler && isModelListener2) {
    handler = props[handlerName = toHandlerKey(hyphenate(event))];
  }
  if (handler) {
    callWithAsyncErrorHandling(
      handler,
      instance,
      6,
      args
    );
  }
  const onceHandler = props[handlerName + `Once`];
  if (onceHandler) {
    if (!instance.emitted) {
      instance.emitted = {};
    } else if (instance.emitted[handlerName]) {
      return;
    }
    instance.emitted[handlerName] = true;
    callWithAsyncErrorHandling(
      onceHandler,
      instance,
      6,
      args
    );
  }
}
function normalizeEmitsOptions(comp, appContext, asMixin = false) {
  const cache = appContext.emitsCache;
  const cached = cache.get(comp);
  if (cached !== void 0) {
    return cached;
  }
  const raw = comp.emits;
  let normalized = {};
  let hasExtends = false;
  if (!isFunction(comp)) {
    const extendEmits = (raw2) => {
      const normalizedFromExtend = normalizeEmitsOptions(raw2, appContext, true);
      if (normalizedFromExtend) {
        hasExtends = true;
        extend(normalized, normalizedFromExtend);
      }
    };
    if (!asMixin && appContext.mixins.length) {
      appContext.mixins.forEach(extendEmits);
    }
    if (comp.extends) {
      extendEmits(comp.extends);
    }
    if (comp.mixins) {
      comp.mixins.forEach(extendEmits);
    }
  }
  if (!raw && !hasExtends) {
    if (isObject(comp)) {
      cache.set(comp, null);
    }
    return null;
  }
  if (isArray$1(raw)) {
    raw.forEach((key) => normalized[key] = null);
  } else {
    extend(normalized, raw);
  }
  if (isObject(comp)) {
    cache.set(comp, normalized);
  }
  return normalized;
}
function isEmitListener(options, key) {
  if (!options || !isOn(key)) {
    return false;
  }
  key = key.slice(2).replace(/Once$/, "");
  return hasOwn(options, key[0].toLowerCase() + key.slice(1)) || hasOwn(options, hyphenate(key)) || hasOwn(options, key);
}
function markAttrsAccessed() {
}
function renderComponentRoot(instance) {
  const {
    type: Component,
    vnode,
    proxy,
    withProxy,
    propsOptions: [propsOptions],
    slots,
    attrs,
    emit: emit2,
    render,
    renderCache,
    props,
    data,
    setupState,
    ctx,
    inheritAttrs
  } = instance;
  const prev = setCurrentRenderingInstance(instance);
  let result;
  let fallthroughAttrs;
  try {
    if (vnode.shapeFlag & 4) {
      const proxyToUse = withProxy || proxy;
      const thisProxy = false ? new Proxy(proxyToUse, {
        get(target, key, receiver) {
          warn$1(
            `Property '${String(
              key
            )}' was accessed via 'this'. Avoid using 'this' in templates.`
          );
          return Reflect.get(target, key, receiver);
        }
      }) : proxyToUse;
      result = normalizeVNode(
        render.call(
          thisProxy,
          proxyToUse,
          renderCache,
          false ? shallowReadonly(props) : props,
          setupState,
          data,
          ctx
        )
      );
      fallthroughAttrs = attrs;
    } else {
      const render2 = Component;
      if (false) ;
      result = normalizeVNode(
        render2.length > 1 ? render2(
          false ? shallowReadonly(props) : props,
          false ? {
            get attrs() {
              markAttrsAccessed();
              return shallowReadonly(attrs);
            },
            slots,
            emit: emit2
          } : { attrs, slots, emit: emit2 }
        ) : render2(
          false ? shallowReadonly(props) : props,
          null
        )
      );
      fallthroughAttrs = Component.props ? attrs : getFunctionalFallthrough(attrs);
    }
  } catch (err) {
    blockStack.length = 0;
    handleError(err, instance, 1);
    result = createVNode(Comment);
  }
  let root = result;
  if (fallthroughAttrs && inheritAttrs !== false) {
    const keys = Object.keys(fallthroughAttrs);
    const { shapeFlag } = root;
    if (keys.length) {
      if (shapeFlag & (1 | 6)) {
        if (propsOptions && keys.some(isModelListener)) {
          fallthroughAttrs = filterModelListeners(
            fallthroughAttrs,
            propsOptions
          );
        }
        root = cloneVNode(root, fallthroughAttrs, false, true);
      }
    }
  }
  if (vnode.dirs) {
    root = cloneVNode(root, null, false, true);
    root.dirs = root.dirs ? root.dirs.concat(vnode.dirs) : vnode.dirs;
  }
  if (vnode.transition) {
    setTransitionHooks(root, vnode.transition);
  }
  {
    result = root;
  }
  setCurrentRenderingInstance(prev);
  return result;
}
const getFunctionalFallthrough = (attrs) => {
  let res;
  for (const key in attrs) {
    if (key === "class" || key === "style" || isOn(key)) {
      (res || (res = {}))[key] = attrs[key];
    }
  }
  return res;
};
const filterModelListeners = (attrs, props) => {
  const res = {};
  for (const key in attrs) {
    if (!isModelListener(key) || !(key.slice(9) in props)) {
      res[key] = attrs[key];
    }
  }
  return res;
};
function shouldUpdateComponent(prevVNode, nextVNode, optimized) {
  const { props: prevProps, children: prevChildren, component } = prevVNode;
  const { props: nextProps, children: nextChildren, patchFlag } = nextVNode;
  const emits = component.emitsOptions;
  if (nextVNode.dirs || nextVNode.transition) {
    return true;
  }
  if (optimized && patchFlag >= 0) {
    if (patchFlag & 1024) {
      return true;
    }
    if (patchFlag & 16) {
      if (!prevProps) {
        return !!nextProps;
      }
      return hasPropsChanged(prevProps, nextProps, emits);
    } else if (patchFlag & 8) {
      const dynamicProps = nextVNode.dynamicProps;
      for (let i = 0; i < dynamicProps.length; i++) {
        const key = dynamicProps[i];
        if (nextProps[key] !== prevProps[key] && !isEmitListener(emits, key)) {
          return true;
        }
      }
    }
  } else {
    if (prevChildren || nextChildren) {
      if (!nextChildren || !nextChildren.$stable) {
        return true;
      }
    }
    if (prevProps === nextProps) {
      return false;
    }
    if (!prevProps) {
      return !!nextProps;
    }
    if (!nextProps) {
      return true;
    }
    return hasPropsChanged(prevProps, nextProps, emits);
  }
  return false;
}
function hasPropsChanged(prevProps, nextProps, emitsOptions) {
  const nextKeys = Object.keys(nextProps);
  if (nextKeys.length !== Object.keys(prevProps).length) {
    return true;
  }
  for (let i = 0; i < nextKeys.length; i++) {
    const key = nextKeys[i];
    if (nextProps[key] !== prevProps[key] && !isEmitListener(emitsOptions, key)) {
      return true;
    }
  }
  return false;
}
function updateHOCHostEl({ vnode, parent }, el2) {
  while (parent) {
    const root = parent.subTree;
    if (root.suspense && root.suspense.activeBranch === vnode) {
      root.el = vnode.el;
    }
    if (root === vnode) {
      (vnode = parent.vnode).el = el2;
      parent = parent.parent;
    } else {
      break;
    }
  }
}
const isSuspense = (type) => type.__isSuspense;
function queueEffectWithSuspense(fn2, suspense) {
  if (suspense && suspense.pendingBranch) {
    if (isArray$1(fn2)) {
      suspense.effects.push(...fn2);
    } else {
      suspense.effects.push(fn2);
    }
  } else {
    queuePostFlushCb(fn2);
  }
}
const Fragment = Symbol.for("v-fgt");
const Text = Symbol.for("v-txt");
const Comment = Symbol.for("v-cmt");
const Static = Symbol.for("v-stc");
const blockStack = [];
let currentBlock = null;
function openBlock(disableTracking = false) {
  blockStack.push(currentBlock = disableTracking ? null : []);
}
function closeBlock() {
  blockStack.pop();
  currentBlock = blockStack[blockStack.length - 1] || null;
}
let isBlockTreeEnabled = 1;
function setBlockTracking(value) {
  isBlockTreeEnabled += value;
  if (value < 0 && currentBlock) {
    currentBlock.hasOnce = true;
  }
}
function setupBlock(vnode) {
  vnode.dynamicChildren = isBlockTreeEnabled > 0 ? currentBlock || EMPTY_ARR : null;
  closeBlock();
  if (isBlockTreeEnabled > 0 && currentBlock) {
    currentBlock.push(vnode);
  }
  return vnode;
}
function createElementBlock(type, props, children, patchFlag, dynamicProps, shapeFlag) {
  return setupBlock(
    createBaseVNode(
      type,
      props,
      children,
      patchFlag,
      dynamicProps,
      shapeFlag,
      true
    )
  );
}
function createBlock(type, props, children, patchFlag, dynamicProps) {
  return setupBlock(
    createVNode(
      type,
      props,
      children,
      patchFlag,
      dynamicProps,
      true
    )
  );
}
function isVNode(value) {
  return value ? value.__v_isVNode === true : false;
}
function isSameVNodeType(n1, n2) {
  return n1.type === n2.type && n1.key === n2.key;
}
const normalizeKey = ({ key }) => key != null ? key : null;
const normalizeRef = ({
  ref: ref3,
  ref_key,
  ref_for
}) => {
  if (typeof ref3 === "number") {
    ref3 = "" + ref3;
  }
  return ref3 != null ? isString(ref3) || isRef(ref3) || isFunction(ref3) ? { i: currentRenderingInstance, r: ref3, k: ref_key, f: !!ref_for } : ref3 : null;
};
function createBaseVNode(type, props = null, children = null, patchFlag = 0, dynamicProps = null, shapeFlag = type === Fragment ? 0 : 1, isBlockNode = false, needFullChildrenNormalization = false) {
  const vnode = {
    __v_isVNode: true,
    __v_skip: true,
    type,
    props,
    key: props && normalizeKey(props),
    ref: props && normalizeRef(props),
    scopeId: currentScopeId,
    slotScopeIds: null,
    children,
    component: null,
    suspense: null,
    ssContent: null,
    ssFallback: null,
    dirs: null,
    transition: null,
    el: null,
    anchor: null,
    target: null,
    targetStart: null,
    targetAnchor: null,
    staticCount: 0,
    shapeFlag,
    patchFlag,
    dynamicProps,
    dynamicChildren: null,
    appContext: null,
    ctx: currentRenderingInstance
  };
  if (needFullChildrenNormalization) {
    normalizeChildren(vnode, children);
    if (shapeFlag & 128) {
      type.normalize(vnode);
    }
  } else if (children) {
    vnode.shapeFlag |= isString(children) ? 8 : 16;
  }
  if (isBlockTreeEnabled > 0 && // avoid a block node from tracking itself
  !isBlockNode && // has current parent block
  currentBlock && // presence of a patch flag indicates this node needs patching on updates.
  // component nodes also should always be patched, because even if the
  // component doesn't need to update, it needs to persist the instance on to
  // the next vnode so that it can be properly unmounted later.
  (vnode.patchFlag > 0 || shapeFlag & 6) && // the EVENTS flag is only for hydration and if it is the only flag, the
  // vnode should not be considered dynamic due to handler caching.
  vnode.patchFlag !== 32) {
    currentBlock.push(vnode);
  }
  return vnode;
}
const createVNode = _createVNode;
function _createVNode(type, props = null, children = null, patchFlag = 0, dynamicProps = null, isBlockNode = false) {
  if (!type || type === NULL_DYNAMIC_COMPONENT) {
    type = Comment;
  }
  if (isVNode(type)) {
    const cloned = cloneVNode(
      type,
      props,
      true
      /* mergeRef: true */
    );
    if (children) {
      normalizeChildren(cloned, children);
    }
    if (isBlockTreeEnabled > 0 && !isBlockNode && currentBlock) {
      if (cloned.shapeFlag & 6) {
        currentBlock[currentBlock.indexOf(type)] = cloned;
      } else {
        currentBlock.push(cloned);
      }
    }
    cloned.patchFlag = -2;
    return cloned;
  }
  if (isClassComponent(type)) {
    type = type.__vccOpts;
  }
  if (props) {
    props = guardReactiveProps(props);
    let { class: klass, style } = props;
    if (klass && !isString(klass)) {
      props.class = normalizeClass(klass);
    }
    if (isObject(style)) {
      if (isProxy(style) && !isArray$1(style)) {
        style = extend({}, style);
      }
      props.style = normalizeStyle(style);
    }
  }
  const shapeFlag = isString(type) ? 1 : isSuspense(type) ? 128 : isTeleport(type) ? 64 : isObject(type) ? 4 : isFunction(type) ? 2 : 0;
  return createBaseVNode(
    type,
    props,
    children,
    patchFlag,
    dynamicProps,
    shapeFlag,
    isBlockNode,
    true
  );
}
function guardReactiveProps(props) {
  if (!props) return null;
  return isProxy(props) || isInternalObject(props) ? extend({}, props) : props;
}
function cloneVNode(vnode, extraProps, mergeRef = false, cloneTransition = false) {
  const { props, ref: ref3, patchFlag, children, transition } = vnode;
  const mergedProps = extraProps ? mergeProps(props || {}, extraProps) : props;
  const cloned = {
    __v_isVNode: true,
    __v_skip: true,
    type: vnode.type,
    props: mergedProps,
    key: mergedProps && normalizeKey(mergedProps),
    ref: extraProps && extraProps.ref ? (
      // #2078 in the case of <component :is="vnode" ref="extra"/>
      // if the vnode itself already has a ref, cloneVNode will need to merge
      // the refs so the single vnode can be set on multiple refs
      mergeRef && ref3 ? isArray$1(ref3) ? ref3.concat(normalizeRef(extraProps)) : [ref3, normalizeRef(extraProps)] : normalizeRef(extraProps)
    ) : ref3,
    scopeId: vnode.scopeId,
    slotScopeIds: vnode.slotScopeIds,
    children,
    target: vnode.target,
    targetStart: vnode.targetStart,
    targetAnchor: vnode.targetAnchor,
    staticCount: vnode.staticCount,
    shapeFlag: vnode.shapeFlag,
    // if the vnode is cloned with extra props, we can no longer assume its
    // existing patch flag to be reliable and need to add the FULL_PROPS flag.
    // note: preserve flag for fragments since they use the flag for children
    // fast paths only.
    patchFlag: extraProps && vnode.type !== Fragment ? patchFlag === -1 ? 16 : patchFlag | 16 : patchFlag,
    dynamicProps: vnode.dynamicProps,
    dynamicChildren: vnode.dynamicChildren,
    appContext: vnode.appContext,
    dirs: vnode.dirs,
    transition,
    // These should technically only be non-null on mounted VNodes. However,
    // they *should* be copied for kept-alive vnodes. So we just always copy
    // them since them being non-null during a mount doesn't affect the logic as
    // they will simply be overwritten.
    component: vnode.component,
    suspense: vnode.suspense,
    ssContent: vnode.ssContent && cloneVNode(vnode.ssContent),
    ssFallback: vnode.ssFallback && cloneVNode(vnode.ssFallback),
    el: vnode.el,
    anchor: vnode.anchor,
    ctx: vnode.ctx,
    ce: vnode.ce
  };
  if (transition && cloneTransition) {
    setTransitionHooks(
      cloned,
      transition.clone(cloned)
    );
  }
  return cloned;
}
function createTextVNode(text = " ", flag = 0) {
  return createVNode(Text, null, text, flag);
}
function normalizeVNode(child) {
  if (child == null || typeof child === "boolean") {
    return createVNode(Comment);
  } else if (isArray$1(child)) {
    return createVNode(
      Fragment,
      null,
      // #3666, avoid reference pollution when reusing vnode
      child.slice()
    );
  } else if (isVNode(child)) {
    return cloneIfMounted(child);
  } else {
    return createVNode(Text, null, String(child));
  }
}
function cloneIfMounted(child) {
  return child.el === null && child.patchFlag !== -1 || child.memo ? child : cloneVNode(child);
}
function normalizeChildren(vnode, children) {
  let type = 0;
  const { shapeFlag } = vnode;
  if (children == null) {
    children = null;
  } else if (isArray$1(children)) {
    type = 16;
  } else if (typeof children === "object") {
    if (shapeFlag & (1 | 64)) {
      const slot = children.default;
      if (slot) {
        slot._c && (slot._d = false);
        normalizeChildren(vnode, slot());
        slot._c && (slot._d = true);
      }
      return;
    } else {
      type = 32;
      const slotFlag = children._;
      if (!slotFlag && !isInternalObject(children)) {
        children._ctx = currentRenderingInstance;
      } else if (slotFlag === 3 && currentRenderingInstance) {
        if (currentRenderingInstance.slots._ === 1) {
          children._ = 1;
        } else {
          children._ = 2;
          vnode.patchFlag |= 1024;
        }
      }
    }
  } else if (isFunction(children)) {
    children = { default: children, _ctx: currentRenderingInstance };
    type = 32;
  } else {
    children = String(children);
    if (shapeFlag & 64) {
      type = 16;
      children = [createTextVNode(children)];
    } else {
      type = 8;
    }
  }
  vnode.children = children;
  vnode.shapeFlag |= type;
}
function mergeProps(...args) {
  const ret = {};
  for (let i = 0; i < args.length; i++) {
    const toMerge = args[i];
    for (const key in toMerge) {
      if (key === "class") {
        if (ret.class !== toMerge.class) {
          ret.class = normalizeClass([ret.class, toMerge.class]);
        }
      } else if (key === "style") {
        ret.style = normalizeStyle([ret.style, toMerge.style]);
      } else if (isOn(key)) {
        const existing = ret[key];
        const incoming = toMerge[key];
        if (incoming && existing !== incoming && !(isArray$1(existing) && existing.includes(incoming))) {
          ret[key] = existing ? [].concat(existing, incoming) : incoming;
        }
      } else if (key !== "") {
        ret[key] = toMerge[key];
      }
    }
  }
  return ret;
}
function invokeVNodeHook(hook, instance, vnode, prevVNode = null) {
  callWithAsyncErrorHandling(hook, instance, 7, [
    vnode,
    prevVNode
  ]);
}
const emptyAppContext = createAppContext();
let uid = 0;
function createComponentInstance(vnode, parent, suspense) {
  const type = vnode.type;
  const appContext = (parent ? parent.appContext : vnode.appContext) || emptyAppContext;
  const instance = {
    uid: uid++,
    vnode,
    type,
    parent,
    appContext,
    root: null,
    // to be immediately set
    next: null,
    subTree: null,
    // will be set synchronously right after creation
    effect: null,
    update: null,
    // will be set synchronously right after creation
    job: null,
    scope: new EffectScope(
      true
      /* detached */
    ),
    render: null,
    proxy: null,
    exposed: null,
    exposeProxy: null,
    withProxy: null,
    provides: parent ? parent.provides : Object.create(appContext.provides),
    ids: parent ? parent.ids : ["", 0, 0],
    accessCache: null,
    renderCache: [],
    // local resolved assets
    components: null,
    directives: null,
    // resolved props and emits options
    propsOptions: normalizePropsOptions(type, appContext),
    emitsOptions: normalizeEmitsOptions(type, appContext),
    // emit
    emit: null,
    // to be set immediately
    emitted: null,
    // props default value
    propsDefaults: EMPTY_OBJ,
    // inheritAttrs
    inheritAttrs: type.inheritAttrs,
    // state
    ctx: EMPTY_OBJ,
    data: EMPTY_OBJ,
    props: EMPTY_OBJ,
    attrs: EMPTY_OBJ,
    slots: EMPTY_OBJ,
    refs: EMPTY_OBJ,
    setupState: EMPTY_OBJ,
    setupContext: null,
    // suspense related
    suspense,
    suspenseId: suspense ? suspense.pendingId : 0,
    asyncDep: null,
    asyncResolved: false,
    // lifecycle hooks
    // not using enums here because it results in computed properties
    isMounted: false,
    isUnmounted: false,
    isDeactivated: false,
    bc: null,
    c: null,
    bm: null,
    m: null,
    bu: null,
    u: null,
    um: null,
    bum: null,
    da: null,
    a: null,
    rtg: null,
    rtc: null,
    ec: null,
    sp: null
  };
  {
    instance.ctx = { _: instance };
  }
  instance.root = parent ? parent.root : instance;
  instance.emit = emit.bind(null, instance);
  if (vnode.ce) {
    vnode.ce(instance);
  }
  return instance;
}
let currentInstance = null;
const getCurrentInstance = () => currentInstance || currentRenderingInstance;
let internalSetCurrentInstance;
let setInSSRSetupState;
{
  const g = getGlobalThis();
  const registerGlobalSetter = (key, setter) => {
    let setters;
    if (!(setters = g[key])) setters = g[key] = [];
    setters.push(setter);
    return (v) => {
      if (setters.length > 1) setters.forEach((set2) => set2(v));
      else setters[0](v);
    };
  };
  internalSetCurrentInstance = registerGlobalSetter(
    `__VUE_INSTANCE_SETTERS__`,
    (v) => currentInstance = v
  );
  setInSSRSetupState = registerGlobalSetter(
    `__VUE_SSR_SETTERS__`,
    (v) => isInSSRComponentSetup = v
  );
}
const setCurrentInstance = (instance) => {
  const prev = currentInstance;
  internalSetCurrentInstance(instance);
  instance.scope.on();
  return () => {
    instance.scope.off();
    internalSetCurrentInstance(prev);
  };
};
const unsetCurrentInstance = () => {
  currentInstance && currentInstance.scope.off();
  internalSetCurrentInstance(null);
};
function isStatefulComponent(instance) {
  return instance.vnode.shapeFlag & 4;
}
let isInSSRComponentSetup = false;
function setupComponent(instance, isSSR = false, optimized = false) {
  isSSR && setInSSRSetupState(isSSR);
  const { props, children } = instance.vnode;
  const isStateful = isStatefulComponent(instance);
  initProps(instance, props, isStateful, isSSR);
  initSlots(instance, children, optimized);
  const setupResult = isStateful ? setupStatefulComponent(instance, isSSR) : void 0;
  isSSR && setInSSRSetupState(false);
  return setupResult;
}
function setupStatefulComponent(instance, isSSR) {
  const Component = instance.type;
  instance.accessCache = /* @__PURE__ */ Object.create(null);
  instance.proxy = new Proxy(instance.ctx, PublicInstanceProxyHandlers);
  const { setup } = Component;
  if (setup) {
    const setupContext = instance.setupContext = setup.length > 1 ? createSetupContext(instance) : null;
    const reset = setCurrentInstance(instance);
    pauseTracking();
    const setupResult = callWithErrorHandling(
      setup,
      instance,
      0,
      [
        instance.props,
        setupContext
      ]
    );
    resetTracking();
    reset();
    if (isPromise(setupResult)) {
      if (!isAsyncWrapper(instance)) markAsyncBoundary(instance);
      setupResult.then(unsetCurrentInstance, unsetCurrentInstance);
      if (isSSR) {
        return setupResult.then((resolvedResult) => {
          handleSetupResult(instance, resolvedResult, isSSR);
        }).catch((e) => {
          handleError(e, instance, 0);
        });
      } else {
        instance.asyncDep = setupResult;
      }
    } else {
      handleSetupResult(instance, setupResult, isSSR);
    }
  } else {
    finishComponentSetup(instance, isSSR);
  }
}
function handleSetupResult(instance, setupResult, isSSR) {
  if (isFunction(setupResult)) {
    if (instance.type.__ssrInlineRender) {
      instance.ssrRender = setupResult;
    } else {
      instance.render = setupResult;
    }
  } else if (isObject(setupResult)) {
    instance.setupState = proxyRefs(setupResult);
  } else ;
  finishComponentSetup(instance, isSSR);
}
let compile;
function finishComponentSetup(instance, isSSR, skipOptions) {
  const Component = instance.type;
  if (!instance.render) {
    if (!isSSR && compile && !Component.render) {
      const template = Component.template || resolveMergedOptions(instance).template;
      if (template) {
        const { isCustomElement, compilerOptions } = instance.appContext.config;
        const { delimiters, compilerOptions: componentCompilerOptions } = Component;
        const finalCompilerOptions = extend(
          extend(
            {
              isCustomElement,
              delimiters
            },
            compilerOptions
          ),
          componentCompilerOptions
        );
        Component.render = compile(template, finalCompilerOptions);
      }
    }
    instance.render = Component.render || NOOP;
  }
  {
    const reset = setCurrentInstance(instance);
    pauseTracking();
    try {
      applyOptions(instance);
    } finally {
      resetTracking();
      reset();
    }
  }
}
const attrsProxyHandlers = {
  get(target, key) {
    track(target, "get", "");
    return target[key];
  }
};
function createSetupContext(instance) {
  const expose = (exposed) => {
    instance.exposed = exposed || {};
  };
  {
    return {
      attrs: new Proxy(instance.attrs, attrsProxyHandlers),
      slots: instance.slots,
      emit: instance.emit,
      expose
    };
  }
}
function getComponentPublicInstance(instance) {
  if (instance.exposed) {
    return instance.exposeProxy || (instance.exposeProxy = new Proxy(proxyRefs(markRaw(instance.exposed)), {
      get(target, key) {
        if (key in target) {
          return target[key];
        } else if (key in publicPropertiesMap) {
          return publicPropertiesMap[key](instance);
        }
      },
      has(target, key) {
        return key in target || key in publicPropertiesMap;
      }
    }));
  } else {
    return instance.proxy;
  }
}
const classifyRE = /(?:^|[-_])(\w)/g;
const classify = (str) => str.replace(classifyRE, (c) => c.toUpperCase()).replace(/[-_]/g, "");
function getComponentName(Component, includeInferred = true) {
  return isFunction(Component) ? Component.displayName || Component.name : Component.name || includeInferred && Component.__name;
}
function formatComponentName(instance, Component, isRoot = false) {
  let name2 = getComponentName(Component);
  if (!name2 && Component.__file) {
    const match = Component.__file.match(/([^/\\]+)\.\w+$/);
    if (match) {
      name2 = match[1];
    }
  }
  if (!name2 && instance && instance.parent) {
    const inferFromRegistry = (registry) => {
      for (const key in registry) {
        if (registry[key] === Component) {
          return key;
        }
      }
    };
    name2 = inferFromRegistry(
      instance.components || instance.parent.type.components
    ) || inferFromRegistry(instance.appContext.components);
  }
  return name2 ? classify(name2) : isRoot ? `App` : `Anonymous`;
}
function isClassComponent(value) {
  return isFunction(value) && "__vccOpts" in value;
}
const computed = (getterOrOptions, debugOptions) => {
  const c = computed$1(getterOrOptions, debugOptions, isInSSRComponentSetup);
  return c;
};
function h(type, propsOrChildren, children) {
  const l = arguments.length;
  if (l === 2) {
    if (isObject(propsOrChildren) && !isArray$1(propsOrChildren)) {
      if (isVNode(propsOrChildren)) {
        return createVNode(type, null, [propsOrChildren]);
      }
      return createVNode(type, propsOrChildren);
    } else {
      return createVNode(type, null, propsOrChildren);
    }
  } else {
    if (l > 3) {
      children = Array.prototype.slice.call(arguments, 2);
    } else if (l === 3 && isVNode(children)) {
      children = [children];
    }
    return createVNode(type, propsOrChildren, children);
  }
}
const version = "3.5.11";
/**
* @vue/runtime-dom v3.5.11
* (c) 2018-present Yuxi (Evan) You and Vue contributors
* @license MIT
**/
let policy = void 0;
const tt$1 = typeof window !== "undefined" && window.trustedTypes;
if (tt$1) {
  try {
    policy = /* @__PURE__ */ tt$1.createPolicy("vue", {
      createHTML: (val) => val
    });
  } catch (e) {
  }
}
const unsafeToTrustedHTML = policy ? (val) => policy.createHTML(val) : (val) => val;
const svgNS = "http://www.w3.org/2000/svg";
const mathmlNS = "http://www.w3.org/1998/Math/MathML";
const doc = typeof document !== "undefined" ? document : null;
const templateContainer = doc && /* @__PURE__ */ doc.createElement("template");
const nodeOps = {
  insert: (child, parent, anchor) => {
    parent.insertBefore(child, anchor || null);
  },
  remove: (child) => {
    const parent = child.parentNode;
    if (parent) {
      parent.removeChild(child);
    }
  },
  createElement: (tag, namespace, is2, props) => {
    const el2 = namespace === "svg" ? doc.createElementNS(svgNS, tag) : namespace === "mathml" ? doc.createElementNS(mathmlNS, tag) : is2 ? doc.createElement(tag, { is: is2 }) : doc.createElement(tag);
    if (tag === "select" && props && props.multiple != null) {
      el2.setAttribute("multiple", props.multiple);
    }
    return el2;
  },
  createText: (text) => doc.createTextNode(text),
  createComment: (text) => doc.createComment(text),
  setText: (node, text) => {
    node.nodeValue = text;
  },
  setElementText: (el2, text) => {
    el2.textContent = text;
  },
  parentNode: (node) => node.parentNode,
  nextSibling: (node) => node.nextSibling,
  querySelector: (selector) => doc.querySelector(selector),
  setScopeId(el2, id2) {
    el2.setAttribute(id2, "");
  },
  // __UNSAFE__
  // Reason: innerHTML.
  // Static content here can only come from compiled templates.
  // As long as the user only uses trusted templates, this is safe.
  insertStaticContent(content, parent, anchor, namespace, start, end) {
    const before = anchor ? anchor.previousSibling : parent.lastChild;
    if (start && (start === end || start.nextSibling)) {
      while (true) {
        parent.insertBefore(start.cloneNode(true), anchor);
        if (start === end || !(start = start.nextSibling)) break;
      }
    } else {
      templateContainer.innerHTML = unsafeToTrustedHTML(
        namespace === "svg" ? `<svg>${content}</svg>` : namespace === "mathml" ? `<math>${content}</math>` : content
      );
      const template = templateContainer.content;
      if (namespace === "svg" || namespace === "mathml") {
        const wrapper = template.firstChild;
        while (wrapper.firstChild) {
          template.appendChild(wrapper.firstChild);
        }
        template.removeChild(wrapper);
      }
      parent.insertBefore(template, anchor);
    }
    return [
      // first
      before ? before.nextSibling : parent.firstChild,
      // last
      anchor ? anchor.previousSibling : parent.lastChild
    ];
  }
};
const vtcKey = Symbol("_vtc");
function patchClass(el2, value, isSVG) {
  const transitionClasses = el2[vtcKey];
  if (transitionClasses) {
    value = (value ? [value, ...transitionClasses] : [...transitionClasses]).join(" ");
  }
  if (value == null) {
    el2.removeAttribute("class");
  } else if (isSVG) {
    el2.setAttribute("class", value);
  } else {
    el2.className = value;
  }
}
const vShowOriginalDisplay = Symbol("_vod");
const vShowHidden = Symbol("_vsh");
const CSS_VAR_TEXT = Symbol("");
const displayRE = /(^|;)\s*display\s*:/;
function patchStyle(el2, prev, next) {
  const style = el2.style;
  const isCssString = isString(next);
  let hasControlledDisplay = false;
  if (next && !isCssString) {
    if (prev) {
      if (!isString(prev)) {
        for (const key in prev) {
          if (next[key] == null) {
            setStyle(style, key, "");
          }
        }
      } else {
        for (const prevStyle of prev.split(";")) {
          const key = prevStyle.slice(0, prevStyle.indexOf(":")).trim();
          if (next[key] == null) {
            setStyle(style, key, "");
          }
        }
      }
    }
    for (const key in next) {
      if (key === "display") {
        hasControlledDisplay = true;
      }
      setStyle(style, key, next[key]);
    }
  } else {
    if (isCssString) {
      if (prev !== next) {
        const cssVarText = style[CSS_VAR_TEXT];
        if (cssVarText) {
          next += ";" + cssVarText;
        }
        style.cssText = next;
        hasControlledDisplay = displayRE.test(next);
      }
    } else if (prev) {
      el2.removeAttribute("style");
    }
  }
  if (vShowOriginalDisplay in el2) {
    el2[vShowOriginalDisplay] = hasControlledDisplay ? style.display : "";
    if (el2[vShowHidden]) {
      style.display = "none";
    }
  }
}
const importantRE = /\s*!important$/;
function setStyle(style, name2, val) {
  if (isArray$1(val)) {
    val.forEach((v) => setStyle(style, name2, v));
  } else {
    if (val == null) val = "";
    if (name2.startsWith("--")) {
      style.setProperty(name2, val);
    } else {
      const prefixed = autoPrefix(style, name2);
      if (importantRE.test(val)) {
        style.setProperty(
          hyphenate(prefixed),
          val.replace(importantRE, ""),
          "important"
        );
      } else {
        style[prefixed] = val;
      }
    }
  }
}
const prefixes = ["Webkit", "Moz", "ms"];
const prefixCache = {};
function autoPrefix(style, rawName) {
  const cached = prefixCache[rawName];
  if (cached) {
    return cached;
  }
  let name2 = camelize(rawName);
  if (name2 !== "filter" && name2 in style) {
    return prefixCache[rawName] = name2;
  }
  name2 = capitalize(name2);
  for (let i = 0; i < prefixes.length; i++) {
    const prefixed = prefixes[i] + name2;
    if (prefixed in style) {
      return prefixCache[rawName] = prefixed;
    }
  }
  return rawName;
}
const xlinkNS = "http://www.w3.org/1999/xlink";
function patchAttr(el2, key, value, isSVG, instance, isBoolean = isSpecialBooleanAttr(key)) {
  if (isSVG && key.startsWith("xlink:")) {
    if (value == null) {
      el2.removeAttributeNS(xlinkNS, key.slice(6, key.length));
    } else {
      el2.setAttributeNS(xlinkNS, key, value);
    }
  } else {
    if (value == null || isBoolean && !includeBooleanAttr(value)) {
      el2.removeAttribute(key);
    } else {
      el2.setAttribute(
        key,
        isBoolean ? "" : isSymbol(value) ? String(value) : value
      );
    }
  }
}
function patchDOMProp(el2, key, value, parentComponent) {
  if (key === "innerHTML" || key === "textContent") {
    if (value != null) {
      el2[key] = key === "innerHTML" ? unsafeToTrustedHTML(value) : value;
    }
    return;
  }
  const tag = el2.tagName;
  if (key === "value" && tag !== "PROGRESS" && // custom elements may use _value internally
  !tag.includes("-")) {
    const oldValue = tag === "OPTION" ? el2.getAttribute("value") || "" : el2.value;
    const newValue = value == null ? (
      // #11647: value should be set as empty string for null and undefined,
      // but <input type="checkbox"> should be set as 'on'.
      el2.type === "checkbox" ? "on" : ""
    ) : String(value);
    if (oldValue !== newValue || !("_value" in el2)) {
      el2.value = newValue;
    }
    if (value == null) {
      el2.removeAttribute(key);
    }
    el2._value = value;
    return;
  }
  let needRemove = false;
  if (value === "" || value == null) {
    const type = typeof el2[key];
    if (type === "boolean") {
      value = includeBooleanAttr(value);
    } else if (value == null && type === "string") {
      value = "";
      needRemove = true;
    } else if (type === "number") {
      value = 0;
      needRemove = true;
    }
  }
  try {
    el2[key] = value;
  } catch (e) {
  }
  needRemove && el2.removeAttribute(key);
}
function addEventListener(el2, event, handler, options) {
  el2.addEventListener(event, handler, options);
}
function removeEventListener(el2, event, handler, options) {
  el2.removeEventListener(event, handler, options);
}
const veiKey = Symbol("_vei");
function patchEvent(el2, rawName, prevValue, nextValue, instance = null) {
  const invokers = el2[veiKey] || (el2[veiKey] = {});
  const existingInvoker = invokers[rawName];
  if (nextValue && existingInvoker) {
    existingInvoker.value = nextValue;
  } else {
    const [name2, options] = parseName(rawName);
    if (nextValue) {
      const invoker = invokers[rawName] = createInvoker(
        nextValue,
        instance
      );
      addEventListener(el2, name2, invoker, options);
    } else if (existingInvoker) {
      removeEventListener(el2, name2, existingInvoker, options);
      invokers[rawName] = void 0;
    }
  }
}
const optionsModifierRE = /(?:Once|Passive|Capture)$/;
function parseName(name2) {
  let options;
  if (optionsModifierRE.test(name2)) {
    options = {};
    let m;
    while (m = name2.match(optionsModifierRE)) {
      name2 = name2.slice(0, name2.length - m[0].length);
      options[m[0].toLowerCase()] = true;
    }
  }
  const event = name2[2] === ":" ? name2.slice(3) : hyphenate(name2.slice(2));
  return [event, options];
}
let cachedNow = 0;
const p = /* @__PURE__ */ Promise.resolve();
const getNow = () => cachedNow || (p.then(() => cachedNow = 0), cachedNow = Date.now());
function createInvoker(initialValue, instance) {
  const invoker = (e) => {
    if (!e._vts) {
      e._vts = Date.now();
    } else if (e._vts <= invoker.attached) {
      return;
    }
    callWithAsyncErrorHandling(
      patchStopImmediatePropagation(e, invoker.value),
      instance,
      5,
      [e]
    );
  };
  invoker.value = initialValue;
  invoker.attached = getNow();
  return invoker;
}
function patchStopImmediatePropagation(e, value) {
  if (isArray$1(value)) {
    const originalStop = e.stopImmediatePropagation;
    e.stopImmediatePropagation = () => {
      originalStop.call(e);
      e._stopped = true;
    };
    return value.map(
      (fn2) => (e2) => !e2._stopped && fn2 && fn2(e2)
    );
  } else {
    return value;
  }
}
const isNativeOn = (key) => key.charCodeAt(0) === 111 && key.charCodeAt(1) === 110 && // lowercase letter
key.charCodeAt(2) > 96 && key.charCodeAt(2) < 123;
const patchProp = (el2, key, prevValue, nextValue, namespace, parentComponent) => {
  const isSVG = namespace === "svg";
  if (key === "class") {
    patchClass(el2, nextValue, isSVG);
  } else if (key === "style") {
    patchStyle(el2, prevValue, nextValue);
  } else if (isOn(key)) {
    if (!isModelListener(key)) {
      patchEvent(el2, key, prevValue, nextValue, parentComponent);
    }
  } else if (key[0] === "." ? (key = key.slice(1), true) : key[0] === "^" ? (key = key.slice(1), false) : shouldSetAsProp(el2, key, nextValue, isSVG)) {
    patchDOMProp(el2, key, nextValue);
    if (!el2.tagName.includes("-") && (key === "value" || key === "checked" || key === "selected")) {
      patchAttr(el2, key, nextValue, isSVG, parentComponent, key !== "value");
    }
  } else if (
    // #11081 force set props for possible async custom element
    el2._isVueCE && (/[A-Z]/.test(key) || !isString(nextValue))
  ) {
    patchDOMProp(el2, camelize(key), nextValue);
  } else {
    if (key === "true-value") {
      el2._trueValue = nextValue;
    } else if (key === "false-value") {
      el2._falseValue = nextValue;
    }
    patchAttr(el2, key, nextValue, isSVG);
  }
};
function shouldSetAsProp(el2, key, value, isSVG) {
  if (isSVG) {
    if (key === "innerHTML" || key === "textContent") {
      return true;
    }
    if (key in el2 && isNativeOn(key) && isFunction(value)) {
      return true;
    }
    return false;
  }
  if (key === "spellcheck" || key === "draggable" || key === "translate") {
    return false;
  }
  if (key === "form") {
    return false;
  }
  if (key === "list" && el2.tagName === "INPUT") {
    return false;
  }
  if (key === "type" && el2.tagName === "TEXTAREA") {
    return false;
  }
  if (key === "width" || key === "height") {
    const tag = el2.tagName;
    if (tag === "IMG" || tag === "VIDEO" || tag === "CANVAS" || tag === "SOURCE") {
      return false;
    }
  }
  if (isNativeOn(key) && isString(value)) {
    return false;
  }
  return key in el2;
}
const rendererOptions = /* @__PURE__ */ extend({ patchProp }, nodeOps);
let renderer;
function ensureRenderer() {
  return renderer || (renderer = createRenderer(rendererOptions));
}
const createApp = (...args) => {
  const app2 = ensureRenderer().createApp(...args);
  const { mount } = app2;
  app2.mount = (containerOrSelector) => {
    const container = normalizeContainer(containerOrSelector);
    if (!container) return;
    const component = app2._component;
    if (!isFunction(component) && !component.render && !component.template) {
      component.template = container.innerHTML;
    }
    if (container.nodeType === 1) {
      container.textContent = "";
    }
    const proxy = mount(container, false, resolveRootNamespace(container));
    if (container instanceof Element) {
      container.removeAttribute("v-cloak");
      container.setAttribute("data-v-app", "");
    }
    return proxy;
  };
  return app2;
};
function resolveRootNamespace(container) {
  if (container instanceof SVGElement) {
    return "svg";
  }
  if (typeof MathMLElement === "function" && container instanceof MathMLElement) {
    return "mathml";
  }
}
function normalizeContainer(container) {
  if (isString(container)) {
    const res = document.querySelector(container);
    return res;
  }
  return container;
}
var isVue2 = false;
/*!
 * pinia v2.2.4
 * (c) 2024 Eduardo San Martin Morote
 * @license MIT
 */
const piniaSymbol = (
  /* istanbul ignore next */
  Symbol()
);
var MutationType;
(function(MutationType2) {
  MutationType2["direct"] = "direct";
  MutationType2["patchObject"] = "patch object";
  MutationType2["patchFunction"] = "patch function";
})(MutationType || (MutationType = {}));
function createPinia() {
  const scope = effectScope(true);
  const state = scope.run(() => ref({}));
  let _p2 = [];
  let toBeInstalled = [];
  const pinia = markRaw({
    install(app2) {
      {
        pinia._a = app2;
        app2.provide(piniaSymbol, pinia);
        app2.config.globalProperties.$pinia = pinia;
        toBeInstalled.forEach((plugin) => _p2.push(plugin));
        toBeInstalled = [];
      }
    },
    use(plugin) {
      if (!this._a && !isVue2) {
        toBeInstalled.push(plugin);
      } else {
        _p2.push(plugin);
      }
      return this;
    },
    _p: _p2,
    // it's actually undefined here
    // @ts-expect-error
    _a: null,
    _e: scope,
    _s: /* @__PURE__ */ new Map(),
    state
  });
  return pinia;
}
/*!
  * vue-router v4.4.5
  * (c) 2024 Eduardo San Martin Morote
  * @license MIT
  */
const isBrowser = typeof document !== "undefined";
function isRouteComponent(component) {
  return typeof component === "object" || "displayName" in component || "props" in component || "__vccOpts" in component;
}
function isESModule(obj) {
  return obj.__esModule || obj[Symbol.toStringTag] === "Module" || // support CF with dynamic imports that do not
  // add the Module string tag
  obj.default && isRouteComponent(obj.default);
}
const assign = Object.assign;
function applyToParams(fn2, params) {
  const newParams = {};
  for (const key in params) {
    const value = params[key];
    newParams[key] = isArray(value) ? value.map(fn2) : fn2(value);
  }
  return newParams;
}
const noop = () => {
};
const isArray = Array.isArray;
const HASH_RE = /#/g;
const AMPERSAND_RE = /&/g;
const SLASH_RE = /\//g;
const EQUAL_RE = /=/g;
const IM_RE = /\?/g;
const PLUS_RE = /\+/g;
const ENC_BRACKET_OPEN_RE = /%5B/g;
const ENC_BRACKET_CLOSE_RE = /%5D/g;
const ENC_CARET_RE = /%5E/g;
const ENC_BACKTICK_RE = /%60/g;
const ENC_CURLY_OPEN_RE = /%7B/g;
const ENC_PIPE_RE = /%7C/g;
const ENC_CURLY_CLOSE_RE = /%7D/g;
const ENC_SPACE_RE = /%20/g;
function commonEncode(text) {
  return encodeURI("" + text).replace(ENC_PIPE_RE, "|").replace(ENC_BRACKET_OPEN_RE, "[").replace(ENC_BRACKET_CLOSE_RE, "]");
}
function encodeHash(text) {
  return commonEncode(text).replace(ENC_CURLY_OPEN_RE, "{").replace(ENC_CURLY_CLOSE_RE, "}").replace(ENC_CARET_RE, "^");
}
function encodeQueryValue(text) {
  return commonEncode(text).replace(PLUS_RE, "%2B").replace(ENC_SPACE_RE, "+").replace(HASH_RE, "%23").replace(AMPERSAND_RE, "%26").replace(ENC_BACKTICK_RE, "`").replace(ENC_CURLY_OPEN_RE, "{").replace(ENC_CURLY_CLOSE_RE, "}").replace(ENC_CARET_RE, "^");
}
function encodeQueryKey(text) {
  return encodeQueryValue(text).replace(EQUAL_RE, "%3D");
}
function encodePath(text) {
  return commonEncode(text).replace(HASH_RE, "%23").replace(IM_RE, "%3F");
}
function encodeParam(text) {
  return text == null ? "" : encodePath(text).replace(SLASH_RE, "%2F");
}
function decode(text) {
  try {
    return decodeURIComponent("" + text);
  } catch (err) {
  }
  return "" + text;
}
const TRAILING_SLASH_RE = /\/$/;
const removeTrailingSlash = (path) => path.replace(TRAILING_SLASH_RE, "");
function parseURL(parseQuery2, location2, currentLocation = "/") {
  let path, query = {}, searchString = "", hash = "";
  const hashPos = location2.indexOf("#");
  let searchPos = location2.indexOf("?");
  if (hashPos < searchPos && hashPos >= 0) {
    searchPos = -1;
  }
  if (searchPos > -1) {
    path = location2.slice(0, searchPos);
    searchString = location2.slice(searchPos + 1, hashPos > -1 ? hashPos : location2.length);
    query = parseQuery2(searchString);
  }
  if (hashPos > -1) {
    path = path || location2.slice(0, hashPos);
    hash = location2.slice(hashPos, location2.length);
  }
  path = resolveRelativePath(path != null ? path : location2, currentLocation);
  return {
    fullPath: path + (searchString && "?") + searchString + hash,
    path,
    query,
    hash: decode(hash)
  };
}
function stringifyURL(stringifyQuery2, location2) {
  const query = location2.query ? stringifyQuery2(location2.query) : "";
  return location2.path + (query && "?") + query + (location2.hash || "");
}
function stripBase(pathname, base) {
  if (!base || !pathname.toLowerCase().startsWith(base.toLowerCase()))
    return pathname;
  return pathname.slice(base.length) || "/";
}
function isSameRouteLocation(stringifyQuery2, a, b) {
  const aLastIndex = a.matched.length - 1;
  const bLastIndex = b.matched.length - 1;
  return aLastIndex > -1 && aLastIndex === bLastIndex && isSameRouteRecord(a.matched[aLastIndex], b.matched[bLastIndex]) && isSameRouteLocationParams(a.params, b.params) && stringifyQuery2(a.query) === stringifyQuery2(b.query) && a.hash === b.hash;
}
function isSameRouteRecord(a, b) {
  return (a.aliasOf || a) === (b.aliasOf || b);
}
function isSameRouteLocationParams(a, b) {
  if (Object.keys(a).length !== Object.keys(b).length)
    return false;
  for (const key in a) {
    if (!isSameRouteLocationParamsValue(a[key], b[key]))
      return false;
  }
  return true;
}
function isSameRouteLocationParamsValue(a, b) {
  return isArray(a) ? isEquivalentArray(a, b) : isArray(b) ? isEquivalentArray(b, a) : a === b;
}
function isEquivalentArray(a, b) {
  return isArray(b) ? a.length === b.length && a.every((value, i) => value === b[i]) : a.length === 1 && a[0] === b;
}
function resolveRelativePath(to2, from) {
  if (to2.startsWith("/"))
    return to2;
  if (!to2)
    return from;
  const fromSegments = from.split("/");
  const toSegments = to2.split("/");
  const lastToSegment = toSegments[toSegments.length - 1];
  if (lastToSegment === ".." || lastToSegment === ".") {
    toSegments.push("");
  }
  let position = fromSegments.length - 1;
  let toPosition;
  let segment;
  for (toPosition = 0; toPosition < toSegments.length; toPosition++) {
    segment = toSegments[toPosition];
    if (segment === ".")
      continue;
    if (segment === "..") {
      if (position > 1)
        position--;
    } else
      break;
  }
  return fromSegments.slice(0, position).join("/") + "/" + toSegments.slice(toPosition).join("/");
}
const START_LOCATION_NORMALIZED = {
  path: "/",
  // TODO: could we use a symbol in the future?
  name: void 0,
  params: {},
  query: {},
  hash: "",
  fullPath: "/",
  matched: [],
  meta: {},
  redirectedFrom: void 0
};
var NavigationType;
(function(NavigationType2) {
  NavigationType2["pop"] = "pop";
  NavigationType2["push"] = "push";
})(NavigationType || (NavigationType = {}));
var NavigationDirection;
(function(NavigationDirection2) {
  NavigationDirection2["back"] = "back";
  NavigationDirection2["forward"] = "forward";
  NavigationDirection2["unknown"] = "";
})(NavigationDirection || (NavigationDirection = {}));
function normalizeBase(base) {
  if (!base) {
    if (isBrowser) {
      const baseEl = document.querySelector("base");
      base = baseEl && baseEl.getAttribute("href") || "/";
      base = base.replace(/^\w+:\/\/[^\/]+/, "");
    } else {
      base = "/";
    }
  }
  if (base[0] !== "/" && base[0] !== "#")
    base = "/" + base;
  return removeTrailingSlash(base);
}
const BEFORE_HASH_RE = /^[^#]+#/;
function createHref(base, location2) {
  return base.replace(BEFORE_HASH_RE, "#") + location2;
}
function getElementPosition(el2, offset) {
  const docRect = document.documentElement.getBoundingClientRect();
  const elRect = el2.getBoundingClientRect();
  return {
    behavior: offset.behavior,
    left: elRect.left - docRect.left - (offset.left || 0),
    top: elRect.top - docRect.top - (offset.top || 0)
  };
}
const computeScrollPosition = () => ({
  left: window.scrollX,
  top: window.scrollY
});
function scrollToPosition(position) {
  let scrollToOptions;
  if ("el" in position) {
    const positionEl = position.el;
    const isIdSelector = typeof positionEl === "string" && positionEl.startsWith("#");
    const el2 = typeof positionEl === "string" ? isIdSelector ? document.getElementById(positionEl.slice(1)) : document.querySelector(positionEl) : positionEl;
    if (!el2) {
      return;
    }
    scrollToOptions = getElementPosition(el2, position);
  } else {
    scrollToOptions = position;
  }
  if ("scrollBehavior" in document.documentElement.style)
    window.scrollTo(scrollToOptions);
  else {
    window.scrollTo(scrollToOptions.left != null ? scrollToOptions.left : window.scrollX, scrollToOptions.top != null ? scrollToOptions.top : window.scrollY);
  }
}
function getScrollKey(path, delta) {
  const position = history.state ? history.state.position - delta : -1;
  return position + path;
}
const scrollPositions = /* @__PURE__ */ new Map();
function saveScrollPosition(key, scrollPosition) {
  scrollPositions.set(key, scrollPosition);
}
function getSavedScrollPosition(key) {
  const scroll = scrollPositions.get(key);
  scrollPositions.delete(key);
  return scroll;
}
let createBaseLocation = () => location.protocol + "//" + location.host;
function createCurrentLocation(base, location2) {
  const { pathname, search, hash } = location2;
  const hashPos = base.indexOf("#");
  if (hashPos > -1) {
    let slicePos = hash.includes(base.slice(hashPos)) ? base.slice(hashPos).length : 1;
    let pathFromHash = hash.slice(slicePos);
    if (pathFromHash[0] !== "/")
      pathFromHash = "/" + pathFromHash;
    return stripBase(pathFromHash, "");
  }
  const path = stripBase(pathname, base);
  return path + search + hash;
}
function useHistoryListeners(base, historyState, currentLocation, replace) {
  let listeners = [];
  let teardowns = [];
  let pauseState = null;
  const popStateHandler = ({ state }) => {
    const to2 = createCurrentLocation(base, location);
    const from = currentLocation.value;
    const fromState = historyState.value;
    let delta = 0;
    if (state) {
      currentLocation.value = to2;
      historyState.value = state;
      if (pauseState && pauseState === from) {
        pauseState = null;
        return;
      }
      delta = fromState ? state.position - fromState.position : 0;
    } else {
      replace(to2);
    }
    listeners.forEach((listener) => {
      listener(currentLocation.value, from, {
        delta,
        type: NavigationType.pop,
        direction: delta ? delta > 0 ? NavigationDirection.forward : NavigationDirection.back : NavigationDirection.unknown
      });
    });
  };
  function pauseListeners() {
    pauseState = currentLocation.value;
  }
  function listen(callback) {
    listeners.push(callback);
    const teardown = () => {
      const index = listeners.indexOf(callback);
      if (index > -1)
        listeners.splice(index, 1);
    };
    teardowns.push(teardown);
    return teardown;
  }
  function beforeUnloadListener() {
    const { history: history2 } = window;
    if (!history2.state)
      return;
    history2.replaceState(assign({}, history2.state, { scroll: computeScrollPosition() }), "");
  }
  function destroy() {
    for (const teardown of teardowns)
      teardown();
    teardowns = [];
    window.removeEventListener("popstate", popStateHandler);
    window.removeEventListener("beforeunload", beforeUnloadListener);
  }
  window.addEventListener("popstate", popStateHandler);
  window.addEventListener("beforeunload", beforeUnloadListener, {
    passive: true
  });
  return {
    pauseListeners,
    listen,
    destroy
  };
}
function buildState(back, current, forward, replaced = false, computeScroll = false) {
  return {
    back,
    current,
    forward,
    replaced,
    position: window.history.length,
    scroll: computeScroll ? computeScrollPosition() : null
  };
}
function useHistoryStateNavigation(base) {
  const { history: history2, location: location2 } = window;
  const currentLocation = {
    value: createCurrentLocation(base, location2)
  };
  const historyState = { value: history2.state };
  if (!historyState.value) {
    changeLocation(currentLocation.value, {
      back: null,
      current: currentLocation.value,
      forward: null,
      // the length is off by one, we need to decrease it
      position: history2.length - 1,
      replaced: true,
      // don't add a scroll as the user may have an anchor, and we want
      // scrollBehavior to be triggered without a saved position
      scroll: null
    }, true);
  }
  function changeLocation(to2, state, replace2) {
    const hashIndex = base.indexOf("#");
    const url = hashIndex > -1 ? (location2.host && document.querySelector("base") ? base : base.slice(hashIndex)) + to2 : createBaseLocation() + base + to2;
    try {
      history2[replace2 ? "replaceState" : "pushState"](state, "", url);
      historyState.value = state;
    } catch (err) {
      {
        console.error(err);
      }
      location2[replace2 ? "replace" : "assign"](url);
    }
  }
  function replace(to2, data) {
    const state = assign({}, history2.state, buildState(
      historyState.value.back,
      // keep back and forward entries but override current position
      to2,
      historyState.value.forward,
      true
    ), data, { position: historyState.value.position });
    changeLocation(to2, state, true);
    currentLocation.value = to2;
  }
  function push(to2, data) {
    const currentState = assign(
      {},
      // use current history state to gracefully handle a wrong call to
      // history.replaceState
      // https://github.com/vuejs/router/issues/366
      historyState.value,
      history2.state,
      {
        forward: to2,
        scroll: computeScrollPosition()
      }
    );
    changeLocation(currentState.current, currentState, true);
    const state = assign({}, buildState(currentLocation.value, to2, null), { position: currentState.position + 1 }, data);
    changeLocation(to2, state, false);
    currentLocation.value = to2;
  }
  return {
    location: currentLocation,
    state: historyState,
    push,
    replace
  };
}
function createWebHistory(base) {
  base = normalizeBase(base);
  const historyNavigation = useHistoryStateNavigation(base);
  const historyListeners = useHistoryListeners(base, historyNavigation.state, historyNavigation.location, historyNavigation.replace);
  function go2(delta, triggerListeners = true) {
    if (!triggerListeners)
      historyListeners.pauseListeners();
    history.go(delta);
  }
  const routerHistory = assign({
    // it's overridden right after
    location: "",
    base,
    go: go2,
    createHref: createHref.bind(null, base)
  }, historyNavigation, historyListeners);
  Object.defineProperty(routerHistory, "location", {
    enumerable: true,
    get: () => historyNavigation.location.value
  });
  Object.defineProperty(routerHistory, "state", {
    enumerable: true,
    get: () => historyNavigation.state.value
  });
  return routerHistory;
}
function isRouteLocation(route) {
  return typeof route === "string" || route && typeof route === "object";
}
function isRouteName(name2) {
  return typeof name2 === "string" || typeof name2 === "symbol";
}
const NavigationFailureSymbol = Symbol("");
var NavigationFailureType;
(function(NavigationFailureType2) {
  NavigationFailureType2[NavigationFailureType2["aborted"] = 4] = "aborted";
  NavigationFailureType2[NavigationFailureType2["cancelled"] = 8] = "cancelled";
  NavigationFailureType2[NavigationFailureType2["duplicated"] = 16] = "duplicated";
})(NavigationFailureType || (NavigationFailureType = {}));
function createRouterError(type, params) {
  {
    return assign(new Error(), {
      type,
      [NavigationFailureSymbol]: true
    }, params);
  }
}
function isNavigationFailure(error, type) {
  return error instanceof Error && NavigationFailureSymbol in error && (type == null || !!(error.type & type));
}
const BASE_PARAM_PATTERN = "[^/]+?";
const BASE_PATH_PARSER_OPTIONS = {
  sensitive: false,
  strict: false,
  start: true,
  end: true
};
const REGEX_CHARS_RE = /[.+*?^${}()[\]/\\]/g;
function tokensToParser(segments, extraOptions) {
  const options = assign({}, BASE_PATH_PARSER_OPTIONS, extraOptions);
  const score = [];
  let pattern = options.start ? "^" : "";
  const keys = [];
  for (const segment of segments) {
    const segmentScores = segment.length ? [] : [
      90
      /* PathScore.Root */
    ];
    if (options.strict && !segment.length)
      pattern += "/";
    for (let tokenIndex = 0; tokenIndex < segment.length; tokenIndex++) {
      const token = segment[tokenIndex];
      let subSegmentScore = 40 + (options.sensitive ? 0.25 : 0);
      if (token.type === 0) {
        if (!tokenIndex)
          pattern += "/";
        pattern += token.value.replace(REGEX_CHARS_RE, "\\$&");
        subSegmentScore += 40;
      } else if (token.type === 1) {
        const { value, repeatable, optional, regexp } = token;
        keys.push({
          name: value,
          repeatable,
          optional
        });
        const re2 = regexp ? regexp : BASE_PARAM_PATTERN;
        if (re2 !== BASE_PARAM_PATTERN) {
          subSegmentScore += 10;
          try {
            new RegExp(`(${re2})`);
          } catch (err) {
            throw new Error(`Invalid custom RegExp for param "${value}" (${re2}): ` + err.message);
          }
        }
        let subPattern = repeatable ? `((?:${re2})(?:/(?:${re2}))*)` : `(${re2})`;
        if (!tokenIndex)
          subPattern = // avoid an optional / if there are more segments e.g. /:p?-static
          // or /:p?-:p2
          optional && segment.length < 2 ? `(?:/${subPattern})` : "/" + subPattern;
        if (optional)
          subPattern += "?";
        pattern += subPattern;
        subSegmentScore += 20;
        if (optional)
          subSegmentScore += -8;
        if (repeatable)
          subSegmentScore += -20;
        if (re2 === ".*")
          subSegmentScore += -50;
      }
      segmentScores.push(subSegmentScore);
    }
    score.push(segmentScores);
  }
  if (options.strict && options.end) {
    const i = score.length - 1;
    score[i][score[i].length - 1] += 0.7000000000000001;
  }
  if (!options.strict)
    pattern += "/?";
  if (options.end)
    pattern += "$";
  else if (options.strict)
    pattern += "(?:/|$)";
  const re = new RegExp(pattern, options.sensitive ? "" : "i");
  function parse(path) {
    const match = path.match(re);
    const params = {};
    if (!match)
      return null;
    for (let i = 1; i < match.length; i++) {
      const value = match[i] || "";
      const key = keys[i - 1];
      params[key.name] = value && key.repeatable ? value.split("/") : value;
    }
    return params;
  }
  function stringify(params) {
    let path = "";
    let avoidDuplicatedSlash = false;
    for (const segment of segments) {
      if (!avoidDuplicatedSlash || !path.endsWith("/"))
        path += "/";
      avoidDuplicatedSlash = false;
      for (const token of segment) {
        if (token.type === 0) {
          path += token.value;
        } else if (token.type === 1) {
          const { value, repeatable, optional } = token;
          const param = value in params ? params[value] : "";
          if (isArray(param) && !repeatable) {
            throw new Error(`Provided param "${value}" is an array but it is not repeatable (* or + modifiers)`);
          }
          const text = isArray(param) ? param.join("/") : param;
          if (!text) {
            if (optional) {
              if (segment.length < 2) {
                if (path.endsWith("/"))
                  path = path.slice(0, -1);
                else
                  avoidDuplicatedSlash = true;
              }
            } else
              throw new Error(`Missing required param "${value}"`);
          }
          path += text;
        }
      }
    }
    return path || "/";
  }
  return {
    re,
    score,
    keys,
    parse,
    stringify
  };
}
function compareScoreArray(a, b) {
  let i = 0;
  while (i < a.length && i < b.length) {
    const diff = b[i] - a[i];
    if (diff)
      return diff;
    i++;
  }
  if (a.length < b.length) {
    return a.length === 1 && a[0] === 40 + 40 ? -1 : 1;
  } else if (a.length > b.length) {
    return b.length === 1 && b[0] === 40 + 40 ? 1 : -1;
  }
  return 0;
}
function comparePathParserScore(a, b) {
  let i = 0;
  const aScore = a.score;
  const bScore = b.score;
  while (i < aScore.length && i < bScore.length) {
    const comp = compareScoreArray(aScore[i], bScore[i]);
    if (comp)
      return comp;
    i++;
  }
  if (Math.abs(bScore.length - aScore.length) === 1) {
    if (isLastScoreNegative(aScore))
      return 1;
    if (isLastScoreNegative(bScore))
      return -1;
  }
  return bScore.length - aScore.length;
}
function isLastScoreNegative(score) {
  const last = score[score.length - 1];
  return score.length > 0 && last[last.length - 1] < 0;
}
const ROOT_TOKEN = {
  type: 0,
  value: ""
};
const VALID_PARAM_RE = /[a-zA-Z0-9_]/;
function tokenizePath(path) {
  if (!path)
    return [[]];
  if (path === "/")
    return [[ROOT_TOKEN]];
  if (!path.startsWith("/")) {
    throw new Error(`Invalid path "${path}"`);
  }
  function crash(message) {
    throw new Error(`ERR (${state})/"${buffer}": ${message}`);
  }
  let state = 0;
  let previousState = state;
  const tokens = [];
  let segment;
  function finalizeSegment() {
    if (segment)
      tokens.push(segment);
    segment = [];
  }
  let i = 0;
  let char;
  let buffer = "";
  let customRe = "";
  function consumeBuffer() {
    if (!buffer)
      return;
    if (state === 0) {
      segment.push({
        type: 0,
        value: buffer
      });
    } else if (state === 1 || state === 2 || state === 3) {
      if (segment.length > 1 && (char === "*" || char === "+"))
        crash(`A repeatable param (${buffer}) must be alone in its segment. eg: '/:ids+.`);
      segment.push({
        type: 1,
        value: buffer,
        regexp: customRe,
        repeatable: char === "*" || char === "+",
        optional: char === "*" || char === "?"
      });
    } else {
      crash("Invalid state to consume buffer");
    }
    buffer = "";
  }
  function addCharToBuffer() {
    buffer += char;
  }
  while (i < path.length) {
    char = path[i++];
    if (char === "\\" && state !== 2) {
      previousState = state;
      state = 4;
      continue;
    }
    switch (state) {
      case 0:
        if (char === "/") {
          if (buffer) {
            consumeBuffer();
          }
          finalizeSegment();
        } else if (char === ":") {
          consumeBuffer();
          state = 1;
        } else {
          addCharToBuffer();
        }
        break;
      case 4:
        addCharToBuffer();
        state = previousState;
        break;
      case 1:
        if (char === "(") {
          state = 2;
        } else if (VALID_PARAM_RE.test(char)) {
          addCharToBuffer();
        } else {
          consumeBuffer();
          state = 0;
          if (char !== "*" && char !== "?" && char !== "+")
            i--;
        }
        break;
      case 2:
        if (char === ")") {
          if (customRe[customRe.length - 1] == "\\")
            customRe = customRe.slice(0, -1) + char;
          else
            state = 3;
        } else {
          customRe += char;
        }
        break;
      case 3:
        consumeBuffer();
        state = 0;
        if (char !== "*" && char !== "?" && char !== "+")
          i--;
        customRe = "";
        break;
      default:
        crash("Unknown state");
        break;
    }
  }
  if (state === 2)
    crash(`Unfinished custom RegExp for param "${buffer}"`);
  consumeBuffer();
  finalizeSegment();
  return tokens;
}
function createRouteRecordMatcher(record, parent, options) {
  const parser = tokensToParser(tokenizePath(record.path), options);
  const matcher = assign(parser, {
    record,
    parent,
    // these needs to be populated by the parent
    children: [],
    alias: []
  });
  if (parent) {
    if (!matcher.record.aliasOf === !parent.record.aliasOf)
      parent.children.push(matcher);
  }
  return matcher;
}
function createRouterMatcher(routes, globalOptions) {
  const matchers = [];
  const matcherMap = /* @__PURE__ */ new Map();
  globalOptions = mergeOptions({ strict: false, end: true, sensitive: false }, globalOptions);
  function getRecordMatcher(name2) {
    return matcherMap.get(name2);
  }
  function addRoute(record, parent, originalRecord) {
    const isRootAdd = !originalRecord;
    const mainNormalizedRecord = normalizeRouteRecord(record);
    mainNormalizedRecord.aliasOf = originalRecord && originalRecord.record;
    const options = mergeOptions(globalOptions, record);
    const normalizedRecords = [mainNormalizedRecord];
    if ("alias" in record) {
      const aliases = typeof record.alias === "string" ? [record.alias] : record.alias;
      for (const alias of aliases) {
        normalizedRecords.push(
          // we need to normalize again to ensure the `mods` property
          // being non enumerable
          normalizeRouteRecord(assign({}, mainNormalizedRecord, {
            // this allows us to hold a copy of the `components` option
            // so that async components cache is hold on the original record
            components: originalRecord ? originalRecord.record.components : mainNormalizedRecord.components,
            path: alias,
            // we might be the child of an alias
            aliasOf: originalRecord ? originalRecord.record : mainNormalizedRecord
            // the aliases are always of the same kind as the original since they
            // are defined on the same record
          }))
        );
      }
    }
    let matcher;
    let originalMatcher;
    for (const normalizedRecord of normalizedRecords) {
      const { path } = normalizedRecord;
      if (parent && path[0] !== "/") {
        const parentPath = parent.record.path;
        const connectingSlash = parentPath[parentPath.length - 1] === "/" ? "" : "/";
        normalizedRecord.path = parent.record.path + (path && connectingSlash + path);
      }
      matcher = createRouteRecordMatcher(normalizedRecord, parent, options);
      if (originalRecord) {
        originalRecord.alias.push(matcher);
      } else {
        originalMatcher = originalMatcher || matcher;
        if (originalMatcher !== matcher)
          originalMatcher.alias.push(matcher);
        if (isRootAdd && record.name && !isAliasRecord(matcher))
          removeRoute(record.name);
      }
      if (isMatchable(matcher)) {
        insertMatcher(matcher);
      }
      if (mainNormalizedRecord.children) {
        const children = mainNormalizedRecord.children;
        for (let i = 0; i < children.length; i++) {
          addRoute(children[i], matcher, originalRecord && originalRecord.children[i]);
        }
      }
      originalRecord = originalRecord || matcher;
    }
    return originalMatcher ? () => {
      removeRoute(originalMatcher);
    } : noop;
  }
  function removeRoute(matcherRef) {
    if (isRouteName(matcherRef)) {
      const matcher = matcherMap.get(matcherRef);
      if (matcher) {
        matcherMap.delete(matcherRef);
        matchers.splice(matchers.indexOf(matcher), 1);
        matcher.children.forEach(removeRoute);
        matcher.alias.forEach(removeRoute);
      }
    } else {
      const index = matchers.indexOf(matcherRef);
      if (index > -1) {
        matchers.splice(index, 1);
        if (matcherRef.record.name)
          matcherMap.delete(matcherRef.record.name);
        matcherRef.children.forEach(removeRoute);
        matcherRef.alias.forEach(removeRoute);
      }
    }
  }
  function getRoutes() {
    return matchers;
  }
  function insertMatcher(matcher) {
    const index = findInsertionIndex(matcher, matchers);
    matchers.splice(index, 0, matcher);
    if (matcher.record.name && !isAliasRecord(matcher))
      matcherMap.set(matcher.record.name, matcher);
  }
  function resolve2(location2, currentLocation) {
    let matcher;
    let params = {};
    let path;
    let name2;
    if ("name" in location2 && location2.name) {
      matcher = matcherMap.get(location2.name);
      if (!matcher)
        throw createRouterError(1, {
          location: location2
        });
      name2 = matcher.record.name;
      params = assign(
        // paramsFromLocation is a new object
        paramsFromLocation(
          currentLocation.params,
          // only keep params that exist in the resolved location
          // only keep optional params coming from a parent record
          matcher.keys.filter((k2) => !k2.optional).concat(matcher.parent ? matcher.parent.keys.filter((k2) => k2.optional) : []).map((k2) => k2.name)
        ),
        // discard any existing params in the current location that do not exist here
        // #1497 this ensures better active/exact matching
        location2.params && paramsFromLocation(location2.params, matcher.keys.map((k2) => k2.name))
      );
      path = matcher.stringify(params);
    } else if (location2.path != null) {
      path = location2.path;
      matcher = matchers.find((m) => m.re.test(path));
      if (matcher) {
        params = matcher.parse(path);
        name2 = matcher.record.name;
      }
    } else {
      matcher = currentLocation.name ? matcherMap.get(currentLocation.name) : matchers.find((m) => m.re.test(currentLocation.path));
      if (!matcher)
        throw createRouterError(1, {
          location: location2,
          currentLocation
        });
      name2 = matcher.record.name;
      params = assign({}, currentLocation.params, location2.params);
      path = matcher.stringify(params);
    }
    const matched = [];
    let parentMatcher = matcher;
    while (parentMatcher) {
      matched.unshift(parentMatcher.record);
      parentMatcher = parentMatcher.parent;
    }
    return {
      name: name2,
      path,
      params,
      matched,
      meta: mergeMetaFields(matched)
    };
  }
  routes.forEach((route) => addRoute(route));
  function clearRoutes() {
    matchers.length = 0;
    matcherMap.clear();
  }
  return {
    addRoute,
    resolve: resolve2,
    removeRoute,
    clearRoutes,
    getRoutes,
    getRecordMatcher
  };
}
function paramsFromLocation(params, keys) {
  const newParams = {};
  for (const key of keys) {
    if (key in params)
      newParams[key] = params[key];
  }
  return newParams;
}
function normalizeRouteRecord(record) {
  const normalized = {
    path: record.path,
    redirect: record.redirect,
    name: record.name,
    meta: record.meta || {},
    aliasOf: record.aliasOf,
    beforeEnter: record.beforeEnter,
    props: normalizeRecordProps(record),
    children: record.children || [],
    instances: {},
    leaveGuards: /* @__PURE__ */ new Set(),
    updateGuards: /* @__PURE__ */ new Set(),
    enterCallbacks: {},
    // must be declared afterwards
    // mods: {},
    components: "components" in record ? record.components || null : record.component && { default: record.component }
  };
  Object.defineProperty(normalized, "mods", {
    value: {}
  });
  return normalized;
}
function normalizeRecordProps(record) {
  const propsObject = {};
  const props = record.props || false;
  if ("component" in record) {
    propsObject.default = props;
  } else {
    for (const name2 in record.components)
      propsObject[name2] = typeof props === "object" ? props[name2] : props;
  }
  return propsObject;
}
function isAliasRecord(record) {
  while (record) {
    if (record.record.aliasOf)
      return true;
    record = record.parent;
  }
  return false;
}
function mergeMetaFields(matched) {
  return matched.reduce((meta, record) => assign(meta, record.meta), {});
}
function mergeOptions(defaults, partialOptions) {
  const options = {};
  for (const key in defaults) {
    options[key] = key in partialOptions ? partialOptions[key] : defaults[key];
  }
  return options;
}
function findInsertionIndex(matcher, matchers) {
  let lower = 0;
  let upper = matchers.length;
  while (lower !== upper) {
    const mid = lower + upper >> 1;
    const sortOrder = comparePathParserScore(matcher, matchers[mid]);
    if (sortOrder < 0) {
      upper = mid;
    } else {
      lower = mid + 1;
    }
  }
  const insertionAncestor = getInsertionAncestor(matcher);
  if (insertionAncestor) {
    upper = matchers.lastIndexOf(insertionAncestor, upper - 1);
  }
  return upper;
}
function getInsertionAncestor(matcher) {
  let ancestor = matcher;
  while (ancestor = ancestor.parent) {
    if (isMatchable(ancestor) && comparePathParserScore(matcher, ancestor) === 0) {
      return ancestor;
    }
  }
  return;
}
function isMatchable({ record }) {
  return !!(record.name || record.components && Object.keys(record.components).length || record.redirect);
}
function parseQuery(search) {
  const query = {};
  if (search === "" || search === "?")
    return query;
  const hasLeadingIM = search[0] === "?";
  const searchParams = (hasLeadingIM ? search.slice(1) : search).split("&");
  for (let i = 0; i < searchParams.length; ++i) {
    const searchParam = searchParams[i].replace(PLUS_RE, " ");
    const eqPos = searchParam.indexOf("=");
    const key = decode(eqPos < 0 ? searchParam : searchParam.slice(0, eqPos));
    const value = eqPos < 0 ? null : decode(searchParam.slice(eqPos + 1));
    if (key in query) {
      let currentValue = query[key];
      if (!isArray(currentValue)) {
        currentValue = query[key] = [currentValue];
      }
      currentValue.push(value);
    } else {
      query[key] = value;
    }
  }
  return query;
}
function stringifyQuery(query) {
  let search = "";
  for (let key in query) {
    const value = query[key];
    key = encodeQueryKey(key);
    if (value == null) {
      if (value !== void 0) {
        search += (search.length ? "&" : "") + key;
      }
      continue;
    }
    const values = isArray(value) ? value.map((v) => v && encodeQueryValue(v)) : [value && encodeQueryValue(value)];
    values.forEach((value2) => {
      if (value2 !== void 0) {
        search += (search.length ? "&" : "") + key;
        if (value2 != null)
          search += "=" + value2;
      }
    });
  }
  return search;
}
function normalizeQuery(query) {
  const normalizedQuery = {};
  for (const key in query) {
    const value = query[key];
    if (value !== void 0) {
      normalizedQuery[key] = isArray(value) ? value.map((v) => v == null ? null : "" + v) : value == null ? value : "" + value;
    }
  }
  return normalizedQuery;
}
const matchedRouteKey = Symbol("");
const viewDepthKey = Symbol("");
const routerKey = Symbol("");
const routeLocationKey = Symbol("");
const routerViewLocationKey = Symbol("");
function useCallbacks() {
  let handlers = [];
  function add2(handler) {
    handlers.push(handler);
    return () => {
      const i = handlers.indexOf(handler);
      if (i > -1)
        handlers.splice(i, 1);
    };
  }
  function reset() {
    handlers = [];
  }
  return {
    add: add2,
    list: () => handlers.slice(),
    reset
  };
}
function guardToPromiseFn(guard, to2, from, record, name2, runWithContext = (fn2) => fn2()) {
  const enterCallbackArray = record && // name is defined if record is because of the function overload
  (record.enterCallbacks[name2] = record.enterCallbacks[name2] || []);
  return () => new Promise((resolve2, reject) => {
    const next = (valid) => {
      if (valid === false) {
        reject(createRouterError(4, {
          from,
          to: to2
        }));
      } else if (valid instanceof Error) {
        reject(valid);
      } else if (isRouteLocation(valid)) {
        reject(createRouterError(2, {
          from: to2,
          to: valid
        }));
      } else {
        if (enterCallbackArray && // since enterCallbackArray is truthy, both record and name also are
        record.enterCallbacks[name2] === enterCallbackArray && typeof valid === "function") {
          enterCallbackArray.push(valid);
        }
        resolve2();
      }
    };
    const guardReturn = runWithContext(() => guard.call(record && record.instances[name2], to2, from, next));
    let guardCall = Promise.resolve(guardReturn);
    if (guard.length < 3)
      guardCall = guardCall.then(next);
    guardCall.catch((err) => reject(err));
  });
}
function extractComponentsGuards(matched, guardType, to2, from, runWithContext = (fn2) => fn2()) {
  const guards = [];
  for (const record of matched) {
    for (const name2 in record.components) {
      let rawComponent = record.components[name2];
      if (guardType !== "beforeRouteEnter" && !record.instances[name2])
        continue;
      if (isRouteComponent(rawComponent)) {
        const options = rawComponent.__vccOpts || rawComponent;
        const guard = options[guardType];
        guard && guards.push(guardToPromiseFn(guard, to2, from, record, name2, runWithContext));
      } else {
        let componentPromise = rawComponent();
        guards.push(() => componentPromise.then((resolved) => {
          if (!resolved)
            throw new Error(`Couldn't resolve component "${name2}" at "${record.path}"`);
          const resolvedComponent = isESModule(resolved) ? resolved.default : resolved;
          record.mods[name2] = resolved;
          record.components[name2] = resolvedComponent;
          const options = resolvedComponent.__vccOpts || resolvedComponent;
          const guard = options[guardType];
          return guard && guardToPromiseFn(guard, to2, from, record, name2, runWithContext)();
        }));
      }
    }
  }
  return guards;
}
function useLink(props) {
  const router2 = inject(routerKey);
  const currentRoute = inject(routeLocationKey);
  const route = computed(() => {
    const to2 = unref(props.to);
    return router2.resolve(to2);
  });
  const activeRecordIndex = computed(() => {
    const { matched } = route.value;
    const { length } = matched;
    const routeMatched = matched[length - 1];
    const currentMatched = currentRoute.matched;
    if (!routeMatched || !currentMatched.length)
      return -1;
    const index = currentMatched.findIndex(isSameRouteRecord.bind(null, routeMatched));
    if (index > -1)
      return index;
    const parentRecordPath = getOriginalPath(matched[length - 2]);
    return (
      // we are dealing with nested routes
      length > 1 && // if the parent and matched route have the same path, this link is
      // referring to the empty child. Or we currently are on a different
      // child of the same parent
      getOriginalPath(routeMatched) === parentRecordPath && // avoid comparing the child with its parent
      currentMatched[currentMatched.length - 1].path !== parentRecordPath ? currentMatched.findIndex(isSameRouteRecord.bind(null, matched[length - 2])) : index
    );
  });
  const isActive = computed(() => activeRecordIndex.value > -1 && includesParams(currentRoute.params, route.value.params));
  const isExactActive = computed(() => activeRecordIndex.value > -1 && activeRecordIndex.value === currentRoute.matched.length - 1 && isSameRouteLocationParams(currentRoute.params, route.value.params));
  function navigate(e = {}) {
    if (guardEvent(e)) {
      return router2[unref(props.replace) ? "replace" : "push"](
        unref(props.to)
        // avoid uncaught errors are they are logged anyway
      ).catch(noop);
    }
    return Promise.resolve();
  }
  return {
    route,
    href: computed(() => route.value.href),
    isActive,
    isExactActive,
    navigate
  };
}
const RouterLinkImpl = /* @__PURE__ */ defineComponent({
  name: "RouterLink",
  compatConfig: { MODE: 3 },
  props: {
    to: {
      type: [String, Object],
      required: true
    },
    replace: Boolean,
    activeClass: String,
    // inactiveClass: String,
    exactActiveClass: String,
    custom: Boolean,
    ariaCurrentValue: {
      type: String,
      default: "page"
    }
  },
  useLink,
  setup(props, { slots }) {
    const link = reactive(useLink(props));
    const { options } = inject(routerKey);
    const elClass = computed(() => ({
      [getLinkClass(props.activeClass, options.linkActiveClass, "router-link-active")]: link.isActive,
      // [getLinkClass(
      //   props.inactiveClass,
      //   options.linkInactiveClass,
      //   'router-link-inactive'
      // )]: !link.isExactActive,
      [getLinkClass(props.exactActiveClass, options.linkExactActiveClass, "router-link-exact-active")]: link.isExactActive
    }));
    return () => {
      const children = slots.default && slots.default(link);
      return props.custom ? children : h("a", {
        "aria-current": link.isExactActive ? props.ariaCurrentValue : null,
        href: link.href,
        // this would override user added attrs but Vue will still add
        // the listener, so we end up triggering both
        onClick: link.navigate,
        class: elClass.value
      }, children);
    };
  }
});
const RouterLink = RouterLinkImpl;
function guardEvent(e) {
  if (e.metaKey || e.altKey || e.ctrlKey || e.shiftKey)
    return;
  if (e.defaultPrevented)
    return;
  if (e.button !== void 0 && e.button !== 0)
    return;
  if (e.currentTarget && e.currentTarget.getAttribute) {
    const target = e.currentTarget.getAttribute("target");
    if (/\b_blank\b/i.test(target))
      return;
  }
  if (e.preventDefault)
    e.preventDefault();
  return true;
}
function includesParams(outer, inner) {
  for (const key in inner) {
    const innerValue = inner[key];
    const outerValue = outer[key];
    if (typeof innerValue === "string") {
      if (innerValue !== outerValue)
        return false;
    } else {
      if (!isArray(outerValue) || outerValue.length !== innerValue.length || innerValue.some((value, i) => value !== outerValue[i]))
        return false;
    }
  }
  return true;
}
function getOriginalPath(record) {
  return record ? record.aliasOf ? record.aliasOf.path : record.path : "";
}
const getLinkClass = (propClass, globalClass, defaultClass) => propClass != null ? propClass : globalClass != null ? globalClass : defaultClass;
const RouterViewImpl = /* @__PURE__ */ defineComponent({
  name: "RouterView",
  // #674 we manually inherit them
  inheritAttrs: false,
  props: {
    name: {
      type: String,
      default: "default"
    },
    route: Object
  },
  // Better compat for @vue/compat users
  // https://github.com/vuejs/router/issues/1315
  compatConfig: { MODE: 3 },
  setup(props, { attrs, slots }) {
    const injectedRoute = inject(routerViewLocationKey);
    const routeToDisplay = computed(() => props.route || injectedRoute.value);
    const injectedDepth = inject(viewDepthKey, 0);
    const depth = computed(() => {
      let initialDepth = unref(injectedDepth);
      const { matched } = routeToDisplay.value;
      let matchedRoute;
      while ((matchedRoute = matched[initialDepth]) && !matchedRoute.components) {
        initialDepth++;
      }
      return initialDepth;
    });
    const matchedRouteRef = computed(() => routeToDisplay.value.matched[depth.value]);
    provide(viewDepthKey, computed(() => depth.value + 1));
    provide(matchedRouteKey, matchedRouteRef);
    provide(routerViewLocationKey, routeToDisplay);
    const viewRef = ref();
    watch(() => [viewRef.value, matchedRouteRef.value, props.name], ([instance, to2, name2], [oldInstance, from, oldName]) => {
      if (to2) {
        to2.instances[name2] = instance;
        if (from && from !== to2 && instance && instance === oldInstance) {
          if (!to2.leaveGuards.size) {
            to2.leaveGuards = from.leaveGuards;
          }
          if (!to2.updateGuards.size) {
            to2.updateGuards = from.updateGuards;
          }
        }
      }
      if (instance && to2 && // if there is no instance but to and from are the same this might be
      // the first visit
      (!from || !isSameRouteRecord(to2, from) || !oldInstance)) {
        (to2.enterCallbacks[name2] || []).forEach((callback) => callback(instance));
      }
    }, { flush: "post" });
    return () => {
      const route = routeToDisplay.value;
      const currentName = props.name;
      const matchedRoute = matchedRouteRef.value;
      const ViewComponent = matchedRoute && matchedRoute.components[currentName];
      if (!ViewComponent) {
        return normalizeSlot(slots.default, { Component: ViewComponent, route });
      }
      const routePropsOption = matchedRoute.props[currentName];
      const routeProps = routePropsOption ? routePropsOption === true ? route.params : typeof routePropsOption === "function" ? routePropsOption(route) : routePropsOption : null;
      const onVnodeUnmounted = (vnode) => {
        if (vnode.component.isUnmounted) {
          matchedRoute.instances[currentName] = null;
        }
      };
      const component = h(ViewComponent, assign({}, routeProps, attrs, {
        onVnodeUnmounted,
        ref: viewRef
      }));
      return (
        // pass the vnode to the slot as a prop.
        // h and <component :is="..."> both accept vnodes
        normalizeSlot(slots.default, { Component: component, route }) || component
      );
    };
  }
});
function normalizeSlot(slot, data) {
  if (!slot)
    return null;
  const slotContent = slot(data);
  return slotContent.length === 1 ? slotContent[0] : slotContent;
}
const RouterView = RouterViewImpl;
function createRouter(options) {
  const matcher = createRouterMatcher(options.routes, options);
  const parseQuery$1 = options.parseQuery || parseQuery;
  const stringifyQuery$1 = options.stringifyQuery || stringifyQuery;
  const routerHistory = options.history;
  const beforeGuards = useCallbacks();
  const beforeResolveGuards = useCallbacks();
  const afterGuards = useCallbacks();
  const currentRoute = shallowRef(START_LOCATION_NORMALIZED);
  let pendingLocation = START_LOCATION_NORMALIZED;
  if (isBrowser && options.scrollBehavior && "scrollRestoration" in history) {
    history.scrollRestoration = "manual";
  }
  const normalizeParams = applyToParams.bind(null, (paramValue) => "" + paramValue);
  const encodeParams = applyToParams.bind(null, encodeParam);
  const decodeParams = (
    // @ts-expect-error: intentionally avoid the type check
    applyToParams.bind(null, decode)
  );
  function addRoute(parentOrRoute, route) {
    let parent;
    let record;
    if (isRouteName(parentOrRoute)) {
      parent = matcher.getRecordMatcher(parentOrRoute);
      record = route;
    } else {
      record = parentOrRoute;
    }
    return matcher.addRoute(record, parent);
  }
  function removeRoute(name2) {
    const recordMatcher = matcher.getRecordMatcher(name2);
    if (recordMatcher) {
      matcher.removeRoute(recordMatcher);
    }
  }
  function getRoutes() {
    return matcher.getRoutes().map((routeMatcher) => routeMatcher.record);
  }
  function hasRoute(name2) {
    return !!matcher.getRecordMatcher(name2);
  }
  function resolve2(rawLocation, currentLocation) {
    currentLocation = assign({}, currentLocation || currentRoute.value);
    if (typeof rawLocation === "string") {
      const locationNormalized = parseURL(parseQuery$1, rawLocation, currentLocation.path);
      const matchedRoute2 = matcher.resolve({ path: locationNormalized.path }, currentLocation);
      const href2 = routerHistory.createHref(locationNormalized.fullPath);
      return assign(locationNormalized, matchedRoute2, {
        params: decodeParams(matchedRoute2.params),
        hash: decode(locationNormalized.hash),
        redirectedFrom: void 0,
        href: href2
      });
    }
    let matcherLocation;
    if (rawLocation.path != null) {
      matcherLocation = assign({}, rawLocation, {
        path: parseURL(parseQuery$1, rawLocation.path, currentLocation.path).path
      });
    } else {
      const targetParams = assign({}, rawLocation.params);
      for (const key in targetParams) {
        if (targetParams[key] == null) {
          delete targetParams[key];
        }
      }
      matcherLocation = assign({}, rawLocation, {
        params: encodeParams(targetParams)
      });
      currentLocation.params = encodeParams(currentLocation.params);
    }
    const matchedRoute = matcher.resolve(matcherLocation, currentLocation);
    const hash = rawLocation.hash || "";
    matchedRoute.params = normalizeParams(decodeParams(matchedRoute.params));
    const fullPath = stringifyURL(stringifyQuery$1, assign({}, rawLocation, {
      hash: encodeHash(hash),
      path: matchedRoute.path
    }));
    const href = routerHistory.createHref(fullPath);
    return assign({
      fullPath,
      // keep the hash encoded so fullPath is effectively path + encodedQuery +
      // hash
      hash,
      query: (
        // if the user is using a custom query lib like qs, we might have
        // nested objects, so we keep the query as is, meaning it can contain
        // numbers at `$route.query`, but at the point, the user will have to
        // use their own type anyway.
        // https://github.com/vuejs/router/issues/328#issuecomment-649481567
        stringifyQuery$1 === stringifyQuery ? normalizeQuery(rawLocation.query) : rawLocation.query || {}
      )
    }, matchedRoute, {
      redirectedFrom: void 0,
      href
    });
  }
  function locationAsObject(to2) {
    return typeof to2 === "string" ? parseURL(parseQuery$1, to2, currentRoute.value.path) : assign({}, to2);
  }
  function checkCanceledNavigation(to2, from) {
    if (pendingLocation !== to2) {
      return createRouterError(8, {
        from,
        to: to2
      });
    }
  }
  function push(to2) {
    return pushWithRedirect(to2);
  }
  function replace(to2) {
    return push(assign(locationAsObject(to2), { replace: true }));
  }
  function handleRedirectRecord(to2) {
    const lastMatched = to2.matched[to2.matched.length - 1];
    if (lastMatched && lastMatched.redirect) {
      const { redirect } = lastMatched;
      let newTargetLocation = typeof redirect === "function" ? redirect(to2) : redirect;
      if (typeof newTargetLocation === "string") {
        newTargetLocation = newTargetLocation.includes("?") || newTargetLocation.includes("#") ? newTargetLocation = locationAsObject(newTargetLocation) : (
          // force empty params
          { path: newTargetLocation }
        );
        newTargetLocation.params = {};
      }
      return assign({
        query: to2.query,
        hash: to2.hash,
        // avoid transferring params if the redirect has a path
        params: newTargetLocation.path != null ? {} : to2.params
      }, newTargetLocation);
    }
  }
  function pushWithRedirect(to2, redirectedFrom) {
    const targetLocation = pendingLocation = resolve2(to2);
    const from = currentRoute.value;
    const data = to2.state;
    const force = to2.force;
    const replace2 = to2.replace === true;
    const shouldRedirect = handleRedirectRecord(targetLocation);
    if (shouldRedirect)
      return pushWithRedirect(
        assign(locationAsObject(shouldRedirect), {
          state: typeof shouldRedirect === "object" ? assign({}, data, shouldRedirect.state) : data,
          force,
          replace: replace2
        }),
        // keep original redirectedFrom if it exists
        redirectedFrom || targetLocation
      );
    const toLocation = targetLocation;
    toLocation.redirectedFrom = redirectedFrom;
    let failure;
    if (!force && isSameRouteLocation(stringifyQuery$1, from, targetLocation)) {
      failure = createRouterError(16, { to: toLocation, from });
      handleScroll(
        from,
        from,
        // this is a push, the only way for it to be triggered from a
        // history.listen is with a redirect, which makes it become a push
        true,
        // This cannot be the first navigation because the initial location
        // cannot be manually navigated to
        false
      );
    }
    return (failure ? Promise.resolve(failure) : navigate(toLocation, from)).catch((error) => isNavigationFailure(error) ? (
      // navigation redirects still mark the router as ready
      isNavigationFailure(
        error,
        2
        /* ErrorTypes.NAVIGATION_GUARD_REDIRECT */
      ) ? error : markAsReady(error)
    ) : (
      // reject any unknown error
      triggerError(error, toLocation, from)
    )).then((failure2) => {
      if (failure2) {
        if (isNavigationFailure(
          failure2,
          2
          /* ErrorTypes.NAVIGATION_GUARD_REDIRECT */
        )) {
          return pushWithRedirect(
            // keep options
            assign({
              // preserve an existing replacement but allow the redirect to override it
              replace: replace2
            }, locationAsObject(failure2.to), {
              state: typeof failure2.to === "object" ? assign({}, data, failure2.to.state) : data,
              force
            }),
            // preserve the original redirectedFrom if any
            redirectedFrom || toLocation
          );
        }
      } else {
        failure2 = finalizeNavigation(toLocation, from, true, replace2, data);
      }
      triggerAfterEach(toLocation, from, failure2);
      return failure2;
    });
  }
  function checkCanceledNavigationAndReject(to2, from) {
    const error = checkCanceledNavigation(to2, from);
    return error ? Promise.reject(error) : Promise.resolve();
  }
  function runWithContext(fn2) {
    const app2 = installedApps.values().next().value;
    return app2 && typeof app2.runWithContext === "function" ? app2.runWithContext(fn2) : fn2();
  }
  function navigate(to2, from) {
    let guards;
    const [leavingRecords, updatingRecords, enteringRecords] = extractChangingRecords(to2, from);
    guards = extractComponentsGuards(leavingRecords.reverse(), "beforeRouteLeave", to2, from);
    for (const record of leavingRecords) {
      record.leaveGuards.forEach((guard) => {
        guards.push(guardToPromiseFn(guard, to2, from));
      });
    }
    const canceledNavigationCheck = checkCanceledNavigationAndReject.bind(null, to2, from);
    guards.push(canceledNavigationCheck);
    return runGuardQueue(guards).then(() => {
      guards = [];
      for (const guard of beforeGuards.list()) {
        guards.push(guardToPromiseFn(guard, to2, from));
      }
      guards.push(canceledNavigationCheck);
      return runGuardQueue(guards);
    }).then(() => {
      guards = extractComponentsGuards(updatingRecords, "beforeRouteUpdate", to2, from);
      for (const record of updatingRecords) {
        record.updateGuards.forEach((guard) => {
          guards.push(guardToPromiseFn(guard, to2, from));
        });
      }
      guards.push(canceledNavigationCheck);
      return runGuardQueue(guards);
    }).then(() => {
      guards = [];
      for (const record of enteringRecords) {
        if (record.beforeEnter) {
          if (isArray(record.beforeEnter)) {
            for (const beforeEnter of record.beforeEnter)
              guards.push(guardToPromiseFn(beforeEnter, to2, from));
          } else {
            guards.push(guardToPromiseFn(record.beforeEnter, to2, from));
          }
        }
      }
      guards.push(canceledNavigationCheck);
      return runGuardQueue(guards);
    }).then(() => {
      to2.matched.forEach((record) => record.enterCallbacks = {});
      guards = extractComponentsGuards(enteringRecords, "beforeRouteEnter", to2, from, runWithContext);
      guards.push(canceledNavigationCheck);
      return runGuardQueue(guards);
    }).then(() => {
      guards = [];
      for (const guard of beforeResolveGuards.list()) {
        guards.push(guardToPromiseFn(guard, to2, from));
      }
      guards.push(canceledNavigationCheck);
      return runGuardQueue(guards);
    }).catch((err) => isNavigationFailure(
      err,
      8
      /* ErrorTypes.NAVIGATION_CANCELLED */
    ) ? err : Promise.reject(err));
  }
  function triggerAfterEach(to2, from, failure) {
    afterGuards.list().forEach((guard) => runWithContext(() => guard(to2, from, failure)));
  }
  function finalizeNavigation(toLocation, from, isPush, replace2, data) {
    const error = checkCanceledNavigation(toLocation, from);
    if (error)
      return error;
    const isFirstNavigation = from === START_LOCATION_NORMALIZED;
    const state = !isBrowser ? {} : history.state;
    if (isPush) {
      if (replace2 || isFirstNavigation)
        routerHistory.replace(toLocation.fullPath, assign({
          scroll: isFirstNavigation && state && state.scroll
        }, data));
      else
        routerHistory.push(toLocation.fullPath, data);
    }
    currentRoute.value = toLocation;
    handleScroll(toLocation, from, isPush, isFirstNavigation);
    markAsReady();
  }
  let removeHistoryListener;
  function setupListeners() {
    if (removeHistoryListener)
      return;
    removeHistoryListener = routerHistory.listen((to2, _from, info) => {
      if (!router2.listening)
        return;
      const toLocation = resolve2(to2);
      const shouldRedirect = handleRedirectRecord(toLocation);
      if (shouldRedirect) {
        pushWithRedirect(assign(shouldRedirect, { replace: true }), toLocation).catch(noop);
        return;
      }
      pendingLocation = toLocation;
      const from = currentRoute.value;
      if (isBrowser) {
        saveScrollPosition(getScrollKey(from.fullPath, info.delta), computeScrollPosition());
      }
      navigate(toLocation, from).catch((error) => {
        if (isNavigationFailure(
          error,
          4 | 8
          /* ErrorTypes.NAVIGATION_CANCELLED */
        )) {
          return error;
        }
        if (isNavigationFailure(
          error,
          2
          /* ErrorTypes.NAVIGATION_GUARD_REDIRECT */
        )) {
          pushWithRedirect(
            error.to,
            toLocation
            // avoid an uncaught rejection, let push call triggerError
          ).then((failure) => {
            if (isNavigationFailure(
              failure,
              4 | 16
              /* ErrorTypes.NAVIGATION_DUPLICATED */
            ) && !info.delta && info.type === NavigationType.pop) {
              routerHistory.go(-1, false);
            }
          }).catch(noop);
          return Promise.reject();
        }
        if (info.delta) {
          routerHistory.go(-info.delta, false);
        }
        return triggerError(error, toLocation, from);
      }).then((failure) => {
        failure = failure || finalizeNavigation(
          // after navigation, all matched components are resolved
          toLocation,
          from,
          false
        );
        if (failure) {
          if (info.delta && // a new navigation has been triggered, so we do not want to revert, that will change the current history
          // entry while a different route is displayed
          !isNavigationFailure(
            failure,
            8
            /* ErrorTypes.NAVIGATION_CANCELLED */
          )) {
            routerHistory.go(-info.delta, false);
          } else if (info.type === NavigationType.pop && isNavigationFailure(
            failure,
            4 | 16
            /* ErrorTypes.NAVIGATION_DUPLICATED */
          )) {
            routerHistory.go(-1, false);
          }
        }
        triggerAfterEach(toLocation, from, failure);
      }).catch(noop);
    });
  }
  let readyHandlers = useCallbacks();
  let errorListeners = useCallbacks();
  let ready;
  function triggerError(error, to2, from) {
    markAsReady(error);
    const list = errorListeners.list();
    if (list.length) {
      list.forEach((handler) => handler(error, to2, from));
    } else {
      console.error(error);
    }
    return Promise.reject(error);
  }
  function isReady() {
    if (ready && currentRoute.value !== START_LOCATION_NORMALIZED)
      return Promise.resolve();
    return new Promise((resolve22, reject) => {
      readyHandlers.add([resolve22, reject]);
    });
  }
  function markAsReady(err) {
    if (!ready) {
      ready = !err;
      setupListeners();
      readyHandlers.list().forEach(([resolve22, reject]) => err ? reject(err) : resolve22());
      readyHandlers.reset();
    }
    return err;
  }
  function handleScroll(to2, from, isPush, isFirstNavigation) {
    const { scrollBehavior } = options;
    if (!isBrowser || !scrollBehavior)
      return Promise.resolve();
    const scrollPosition = !isPush && getSavedScrollPosition(getScrollKey(to2.fullPath, 0)) || (isFirstNavigation || !isPush) && history.state && history.state.scroll || null;
    return nextTick().then(() => scrollBehavior(to2, from, scrollPosition)).then((position) => position && scrollToPosition(position)).catch((err) => triggerError(err, to2, from));
  }
  const go2 = (delta) => routerHistory.go(delta);
  let started;
  const installedApps = /* @__PURE__ */ new Set();
  const router2 = {
    currentRoute,
    listening: true,
    addRoute,
    removeRoute,
    clearRoutes: matcher.clearRoutes,
    hasRoute,
    getRoutes,
    resolve: resolve2,
    options,
    push,
    replace,
    go: go2,
    back: () => go2(-1),
    forward: () => go2(1),
    beforeEach: beforeGuards.add,
    beforeResolve: beforeResolveGuards.add,
    afterEach: afterGuards.add,
    onError: errorListeners.add,
    isReady,
    install(app2) {
      const router22 = this;
      app2.component("RouterLink", RouterLink);
      app2.component("RouterView", RouterView);
      app2.config.globalProperties.$router = router22;
      Object.defineProperty(app2.config.globalProperties, "$route", {
        enumerable: true,
        get: () => unref(currentRoute)
      });
      if (isBrowser && // used for the initial navigation client side to avoid pushing
      // multiple times when the router is used in multiple apps
      !started && currentRoute.value === START_LOCATION_NORMALIZED) {
        started = true;
        push(routerHistory.location).catch((err) => {
        });
      }
      const reactiveRoute = {};
      for (const key in START_LOCATION_NORMALIZED) {
        Object.defineProperty(reactiveRoute, key, {
          get: () => currentRoute.value[key],
          enumerable: true
        });
      }
      app2.provide(routerKey, router22);
      app2.provide(routeLocationKey, shallowReactive(reactiveRoute));
      app2.provide(routerViewLocationKey, currentRoute);
      const unmountApp = app2.unmount;
      installedApps.add(app2);
      app2.unmount = function() {
        installedApps.delete(app2);
        if (installedApps.size < 1) {
          pendingLocation = START_LOCATION_NORMALIZED;
          removeHistoryListener && removeHistoryListener();
          removeHistoryListener = null;
          currentRoute.value = START_LOCATION_NORMALIZED;
          started = false;
          ready = false;
        }
        unmountApp();
      };
    }
  };
  function runGuardQueue(guards) {
    return guards.reduce((promise, guard) => promise.then(() => runWithContext(guard)), Promise.resolve());
  }
  return router2;
}
function extractChangingRecords(to2, from) {
  const leavingRecords = [];
  const updatingRecords = [];
  const enteringRecords = [];
  const len = Math.max(from.matched.length, to2.matched.length);
  for (let i = 0; i < len; i++) {
    const recordFrom = from.matched[i];
    if (recordFrom) {
      if (to2.matched.find((record) => isSameRouteRecord(record, recordFrom)))
        updatingRecords.push(recordFrom);
      else
        leavingRecords.push(recordFrom);
    }
    const recordTo = to2.matched[i];
    if (recordTo) {
      if (!from.matched.find((record) => isSameRouteRecord(record, recordTo))) {
        enteringRecords.push(recordTo);
      }
    }
  }
  return [leavingRecords, updatingRecords, enteringRecords];
}
const _sfc_main$4 = /* @__PURE__ */ defineComponent({
  __name: "App",
  setup(__props) {
    return (_ctx, _cache2) => {
      return openBlock(), createBlock(unref(RouterView));
    };
  }
});
const _export_sfc = (sfc, props) => {
  const target = sfc.__vccOpts || sfc;
  for (const [key, val] of props) {
    target[key] = val;
  }
  return target;
};
const _sfc_main$3 = {};
const _hoisted_1$1 = { class: "navigation" };
const _hoisted_2$1 = { class: "navigation-item" };
const _hoisted_3 = { class: "navigation-item" };
const _hoisted_4 = { class: "navigation-item" };
function _sfc_render(_ctx, _cache2) {
  const _component_RouterLink = resolveComponent("RouterLink");
  return openBlock(), createElementBlock("header", null, [
    createBaseVNode("ul", _hoisted_1$1, [
      createBaseVNode("li", _hoisted_2$1, [
        createVNode(_component_RouterLink, {
          class: "navigation-link",
          to: "/"
        }, {
          default: withCtx(() => _cache2[0] || (_cache2[0] = [
            createTextVNode("Home")
          ])),
          _: 1
        })
      ]),
      createBaseVNode("li", _hoisted_3, [
        createVNode(_component_RouterLink, {
          to: "/game",
          class: "navigation-link"
        }, {
          default: withCtx(() => _cache2[1] || (_cache2[1] = [
            createTextVNode("Game")
          ])),
          _: 1
        })
      ]),
      createBaseVNode("li", _hoisted_4, [
        createVNode(_component_RouterLink, {
          to: "/about",
          class: "navigation-link"
        }, {
          default: withCtx(() => _cache2[2] || (_cache2[2] = [
            createTextVNode("About")
          ])),
          _: 1
        })
      ])
    ])
  ]);
}
const PageHeader = /* @__PURE__ */ _export_sfc(_sfc_main$3, [["render", _sfc_render], ["__scopeId", "data-v-9488e888"]]);
const _sfc_main$2 = /* @__PURE__ */ defineComponent({
  __name: "HomeView",
  setup(__props) {
    return (_ctx, _cache2) => {
      return openBlock(), createElementBlock(Fragment, null, [
        createVNode(PageHeader),
        _cache2[0] || (_cache2[0] = createBaseVNode("main", null, [
          createBaseVNode("p", null, " This is Home Page ")
        ], -1))
      ], 64);
    };
  }
});
/*!
 * ONNX Runtime Web v1.19.2
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
var zd = Object.create;
var nn = Object.defineProperty;
var Wd = Object.getOwnPropertyDescriptor;
var Hd = Object.getOwnPropertyNames;
var qd = Object.getPrototypeOf, jd = Object.prototype.hasOwnProperty;
var ko = ((i) => typeof require < "u" ? require : typeof Proxy < "u" ? new Proxy(i, { get: (e, o) => (typeof require < "u" ? require : e)[o] }) : i)(function(i) {
  if (typeof require < "u") return require.apply(this, arguments);
  throw Error('Dynamic require of "' + i + '" is not supported');
});
var O = (i, e) => () => (i && (e = i(i = 0)), e);
var mt = (i, e) => () => (e || i((e = { exports: {} }).exports, e), e.exports), Or = (i, e) => {
  for (var o in e) nn(i, o, { get: e[o], enumerable: true });
}, Za = (i, e, o, t) => {
  if (e && typeof e == "object" || typeof e == "function") for (let r of Hd(e)) !jd.call(i, r) && r !== o && nn(i, r, { get: () => e[r], enumerable: !(t = Wd(e, r)) || t.enumerable });
  return i;
};
var rr = (i, e, o) => (o = i != null ? zd(qd(i)) : {}, Za(!i || !i.__esModule ? nn(o, "default", { value: i, enumerable: true }) : o, i)), on = (i) => Za(nn({}, "__esModule", { value: true }), i);
var an, $e, nr, Xd, sn, un = O(() => {
  an = /* @__PURE__ */ new Map(), $e = [], nr = (i, e, o) => {
    if (e && typeof e.init == "function" && typeof e.createInferenceSessionHandler == "function") {
      let t = an.get(i);
      if (t === void 0) an.set(i, { backend: e, priority: o });
      else {
        if (t.priority > o) return;
        if (t.priority === o && t.backend !== e) throw new Error(`cannot register backend "${i}" using priority ${o}`);
      }
      if (o >= 0) {
        let r = $e.indexOf(i);
        r !== -1 && $e.splice(r, 1);
        for (let n = 0; n < $e.length; n++) if (an.get($e[n]).priority <= o) {
          $e.splice(n, 0, i);
          return;
        }
        $e.push(i);
      }
      return;
    }
    throw new TypeError("not a valid backend");
  }, Xd = async (i) => {
    let e = an.get(i);
    if (!e) return "backend not found.";
    if (e.initialized) return e.backend;
    if (e.aborted) return e.error;
    {
      let o = !!e.initPromise;
      try {
        return o || (e.initPromise = e.backend.init(i)), await e.initPromise, e.initialized = true, e.backend;
      } catch (t) {
        return o || (e.error = `${t}`, e.aborted = true), e.error;
      } finally {
        delete e.initPromise;
      }
    }
  }, sn = async (i) => {
    let e = i.executionProviders || [], o = e.map((u) => typeof u == "string" ? u : u.name), t = o.length === 0 ? $e : o, r, n = [], s = /* @__PURE__ */ new Set();
    for (let u of t) {
      let l = await Xd(u);
      typeof l == "string" ? n.push({ name: u, err: l }) : (r || (r = l), r === l && s.add(u));
    }
    if (!r) throw new Error(`no available backend found. ERR: ${n.map((u) => `[${u.name}] ${u.err}`).join(", ")}`);
    for (let { name: u, err: l } of n) o.includes(u) && console.warn(`removing requested execution provider "${u}" from session options because it is not available: ${l}`);
    let a = e.filter((u) => s.has(typeof u == "string" ? u : u.name));
    return [r, new Proxy(i, { get: (u, l) => l === "executionProviders" ? a : Reflect.get(u, l) })];
  };
});
var Qa = O(() => {
  un();
});
var ts, es = O(() => {
  ts = "1.19.2";
});
var rs, Rt, Bo = O(() => {
  es();
  rs = "warning", Rt = { wasm: {}, webgl: {}, webgpu: {}, versions: { common: ts }, set logLevel(i) {
    if (i !== void 0) {
      if (typeof i != "string" || ["verbose", "info", "warning", "error", "fatal"].indexOf(i) === -1) throw new Error(`Unsupported logging level: ${i}`);
      rs = i;
    }
  }, get logLevel() {
    return rs;
  } };
  Object.defineProperty(Rt, "logLevel", { enumerable: true });
});
var z, ns = O(() => {
  Bo();
  z = Rt;
});
var os, is, as = O(() => {
  os = (i, e) => {
    let o = typeof document < "u" ? document.createElement("canvas") : new OffscreenCanvas(1, 1);
    o.width = i.dims[3], o.height = i.dims[2];
    let t = o.getContext("2d");
    if (t != null) {
      let r, n;
      (e == null ? void 0 : e.tensorLayout) !== void 0 && e.tensorLayout === "NHWC" ? (r = i.dims[2], n = i.dims[3]) : (r = i.dims[3], n = i.dims[2]);
      let s = (e == null ? void 0 : e.format) !== void 0 ? e.format : "RGB", a = e == null ? void 0 : e.norm, u, l;
      a === void 0 || a.mean === void 0 ? u = [255, 255, 255, 255] : typeof a.mean == "number" ? u = [a.mean, a.mean, a.mean, a.mean] : (u = [a.mean[0], a.mean[1], a.mean[2], 0], a.mean[3] !== void 0 && (u[3] = a.mean[3])), a === void 0 || a.bias === void 0 ? l = [0, 0, 0, 0] : typeof a.bias == "number" ? l = [a.bias, a.bias, a.bias, a.bias] : (l = [a.bias[0], a.bias[1], a.bias[2], 0], a.bias[3] !== void 0 && (l[3] = a.bias[3]));
      let f = n * r, p2 = 0, d = f, y = f * 2, w = -1;
      s === "RGBA" ? (p2 = 0, d = f, y = f * 2, w = f * 3) : s === "RGB" ? (p2 = 0, d = f, y = f * 2) : s === "RBG" && (p2 = 0, y = f, d = f * 2);
      for (let v = 0; v < n; v++) for (let S = 0; S < r; S++) {
        let L = (i.data[p2++] - l[0]) * u[0], A = (i.data[d++] - l[1]) * u[1], P = (i.data[y++] - l[2]) * u[2], M = w === -1 ? 255 : (i.data[w++] - l[3]) * u[3];
        t.fillStyle = "rgba(" + L + "," + A + "," + P + "," + M + ")", t.fillRect(S, v, 1, 1);
      }
      if ("toDataURL" in o) return o.toDataURL();
      throw new Error("toDataURL is not supported");
    } else throw new Error("Can not access image data");
  }, is = (i, e) => {
    let o = typeof document < "u" ? document.createElement("canvas").getContext("2d") : new OffscreenCanvas(1, 1).getContext("2d"), t;
    if (o != null) {
      let r, n, s;
      (e == null ? void 0 : e.tensorLayout) !== void 0 && e.tensorLayout === "NHWC" ? (r = i.dims[2], n = i.dims[1], s = i.dims[3]) : (r = i.dims[3], n = i.dims[2], s = i.dims[1]);
      let a = e !== void 0 && e.format !== void 0 ? e.format : "RGB", u = e == null ? void 0 : e.norm, l, f;
      u === void 0 || u.mean === void 0 ? l = [255, 255, 255, 255] : typeof u.mean == "number" ? l = [u.mean, u.mean, u.mean, u.mean] : (l = [u.mean[0], u.mean[1], u.mean[2], 255], u.mean[3] !== void 0 && (l[3] = u.mean[3])), u === void 0 || u.bias === void 0 ? f = [0, 0, 0, 0] : typeof u.bias == "number" ? f = [u.bias, u.bias, u.bias, u.bias] : (f = [u.bias[0], u.bias[1], u.bias[2], 0], u.bias[3] !== void 0 && (f[3] = u.bias[3]));
      let p2 = n * r;
      if (e !== void 0 && (e.format !== void 0 && s === 4 && e.format !== "RGBA" || s === 3 && e.format !== "RGB" && e.format !== "BGR")) throw new Error("Tensor format doesn't match input tensor dims");
      let d = 4, y = 0, w = 1, v = 2, S = 3, L = 0, A = p2, P = p2 * 2, M = -1;
      a === "RGBA" ? (L = 0, A = p2, P = p2 * 2, M = p2 * 3) : a === "RGB" ? (L = 0, A = p2, P = p2 * 2) : a === "RBG" && (L = 0, P = p2, A = p2 * 2), t = o.createImageData(r, n);
      for (let V = 0; V < n * r; y += d, w += d, v += d, S += d, V++) t.data[y] = (i.data[L++] - f[0]) * l[0], t.data[w] = (i.data[A++] - f[1]) * l[1], t.data[v] = (i.data[P++] - f[2]) * l[2], t.data[S] = M === -1 ? 255 : (i.data[M++] - f[3]) * l[3];
    } else throw new Error("Can not access image data");
    return t;
  };
});
var Fo, ss, us, ls, fs, cs = O(() => {
  ln();
  Fo = (i, e) => {
    if (i === void 0) throw new Error("Image buffer must be defined");
    if (e.height === void 0 || e.width === void 0) throw new Error("Image height and width must be defined");
    if (e.tensorLayout === "NHWC") throw new Error("NHWC Tensor layout is not supported yet");
    let { height: o, width: t } = e, r = e.norm ?? { mean: 255, bias: 0 }, n, s;
    typeof r.mean == "number" ? n = [r.mean, r.mean, r.mean, r.mean] : n = [r.mean[0], r.mean[1], r.mean[2], r.mean[3] ?? 255], typeof r.bias == "number" ? s = [r.bias, r.bias, r.bias, r.bias] : s = [r.bias[0], r.bias[1], r.bias[2], r.bias[3] ?? 0];
    let a = e.format !== void 0 ? e.format : "RGBA", u = e.tensorFormat !== void 0 && e.tensorFormat !== void 0 ? e.tensorFormat : "RGB", l = o * t, f = u === "RGBA" ? new Float32Array(l * 4) : new Float32Array(l * 3), p2 = 4, d = 0, y = 1, w = 2, v = 3, S = 0, L = l, A = l * 2, P = -1;
    a === "RGB" && (p2 = 3, d = 0, y = 1, w = 2, v = -1), u === "RGBA" ? P = l * 3 : u === "RBG" ? (S = 0, A = l, L = l * 2) : u === "BGR" && (A = 0, L = l, S = l * 2);
    for (let V = 0; V < l; V++, d += p2, w += p2, y += p2, v += p2) f[S++] = (i[d] + s[0]) / n[0], f[L++] = (i[y] + s[1]) / n[1], f[A++] = (i[w] + s[2]) / n[2], P !== -1 && v !== -1 && (f[P++] = (i[v] + s[3]) / n[3]);
    return u === "RGBA" ? new Lt("float32", f, [1, 4, o, t]) : new Lt("float32", f, [1, 3, o, t]);
  }, ss = async (i, e) => {
    let o = typeof HTMLImageElement < "u" && i instanceof HTMLImageElement, t = typeof ImageData < "u" && i instanceof ImageData, r = typeof ImageBitmap < "u" && i instanceof ImageBitmap, n = typeof i == "string", s, a = e ?? {}, u = () => {
      if (typeof document < "u") return document.createElement("canvas");
      if (typeof OffscreenCanvas < "u") return new OffscreenCanvas(1, 1);
      throw new Error("Canvas is not supported");
    }, l = (f) => f instanceof HTMLCanvasElement || f instanceof OffscreenCanvas ? f.getContext("2d") : null;
    if (o) {
      let f = u();
      f.width = i.width, f.height = i.height;
      let p2 = l(f);
      if (p2 != null) {
        let d = i.height, y = i.width;
        if (e !== void 0 && e.resizedHeight !== void 0 && e.resizedWidth !== void 0 && (d = e.resizedHeight, y = e.resizedWidth), e !== void 0) {
          if (a = e, e.tensorFormat !== void 0) throw new Error("Image input config format must be RGBA for HTMLImageElement");
          a.tensorFormat = "RGBA", a.height = d, a.width = y;
        } else a.tensorFormat = "RGBA", a.height = d, a.width = y;
        p2.drawImage(i, 0, 0), s = p2.getImageData(0, 0, y, d).data;
      } else throw new Error("Can not access image data");
    } else if (t) {
      let f, p2;
      if (e !== void 0 && e.resizedWidth !== void 0 && e.resizedHeight !== void 0 ? (f = e.resizedHeight, p2 = e.resizedWidth) : (f = i.height, p2 = i.width), e !== void 0 && (a = e), a.format = "RGBA", a.height = f, a.width = p2, e !== void 0) {
        let d = u();
        d.width = p2, d.height = f;
        let y = l(d);
        if (y != null) y.putImageData(i, 0, 0), s = y.getImageData(0, 0, p2, f).data;
        else throw new Error("Can not access image data");
      } else s = i.data;
    } else if (r) {
      if (e === void 0) throw new Error("Please provide image config with format for Imagebitmap");
      let f = u();
      f.width = i.width, f.height = i.height;
      let p2 = l(f);
      if (p2 != null) {
        let d = i.height, y = i.width;
        return p2.drawImage(i, 0, 0, y, d), s = p2.getImageData(0, 0, y, d).data, a.height = d, a.width = y, Fo(s, a);
      } else throw new Error("Can not access image data");
    } else {
      if (n) return new Promise((f, p2) => {
        let d = u(), y = l(d);
        if (!i || !y) return p2();
        let w = new Image();
        w.crossOrigin = "Anonymous", w.src = i, w.onload = () => {
          d.width = w.width, d.height = w.height, y.drawImage(w, 0, 0, d.width, d.height);
          let v = y.getImageData(0, 0, d.width, d.height);
          a.height = d.height, a.width = d.width, f(Fo(v.data, a));
        };
      });
      throw new Error("Input data provided is not supported - aborted tensor creation");
    }
    if (s !== void 0) return Fo(s, a);
    throw new Error("Input data provided is not supported - aborted tensor creation");
  }, us = (i, e) => {
    let { width: o, height: t, download: r, dispose: n } = e, s = [1, t, o, 4];
    return new Lt({ location: "texture", type: "float32", texture: i, dims: s, download: r, dispose: n });
  }, ls = (i, e) => {
    let { dataType: o, dims: t, download: r, dispose: n } = e;
    return new Lt({ location: "gpu-buffer", type: o ?? "float32", gpuBuffer: i, dims: t, download: r, dispose: n });
  }, fs = (i, e, o) => new Lt({ location: "cpu-pinned", type: i, data: e, dims: o ?? [e.length] });
});
var ke, Sr, ps, ds, hs = O(() => {
  ke = /* @__PURE__ */ new Map([["float32", Float32Array], ["uint8", Uint8Array], ["int8", Int8Array], ["uint16", Uint16Array], ["int16", Int16Array], ["int32", Int32Array], ["bool", Uint8Array], ["float64", Float64Array], ["uint32", Uint32Array]]), Sr = /* @__PURE__ */ new Map([[Float32Array, "float32"], [Uint8Array, "uint8"], [Int8Array, "int8"], [Uint16Array, "uint16"], [Int16Array, "int16"], [Int32Array, "int32"], [Float64Array, "float64"], [Uint32Array, "uint32"]]), ps = false, ds = () => {
    if (!ps) {
      ps = true;
      let i = typeof BigInt64Array < "u" && BigInt64Array.from, e = typeof BigUint64Array < "u" && BigUint64Array.from, o = typeof Float16Array < "u" && Float16Array.from;
      i && (ke.set("int64", BigInt64Array), Sr.set(BigInt64Array, "int64")), e && (ke.set("uint64", BigUint64Array), Sr.set(BigUint64Array, "uint64")), o ? (ke.set("float16", Float16Array), Sr.set(Float16Array, "float16")) : ke.set("float16", Uint16Array);
    }
  };
});
var ms, bs, gs = O(() => {
  ln();
  ms = (i) => {
    let e = 1;
    for (let o = 0; o < i.length; o++) {
      let t = i[o];
      if (typeof t != "number" || !Number.isSafeInteger(t)) throw new TypeError(`dims[${o}] must be an integer, got: ${t}`);
      if (t < 0) throw new RangeError(`dims[${o}] must be a non-negative integer, got: ${t}`);
      e *= t;
    }
    return e;
  }, bs = (i, e) => {
    switch (i.location) {
      case "cpu":
        return new Lt(i.type, i.data, e);
      case "cpu-pinned":
        return new Lt({ location: "cpu-pinned", data: i.data, type: i.type, dims: e });
      case "texture":
        return new Lt({ location: "texture", texture: i.texture, type: i.type, dims: e });
      case "gpu-buffer":
        return new Lt({ location: "gpu-buffer", gpuBuffer: i.gpuBuffer, type: i.type, dims: e });
      default:
        throw new Error(`tensorReshape: tensor location ${i.location} is not supported`);
    }
  };
});
var Lt, ln = O(() => {
  as();
  cs();
  hs();
  gs();
  Lt = class {
    constructor(e, o, t) {
      ds();
      let r, n;
      if (typeof e == "object" && "location" in e) switch (this.dataLocation = e.location, r = e.type, n = e.dims, e.location) {
        case "cpu-pinned": {
          let a = ke.get(r);
          if (!a) throw new TypeError(`unsupported type "${r}" to create tensor from pinned buffer`);
          if (!(e.data instanceof a)) throw new TypeError(`buffer should be of type ${a.name}`);
          this.cpuData = e.data;
          break;
        }
        case "texture": {
          if (r !== "float32") throw new TypeError(`unsupported type "${r}" to create tensor from texture`);
          this.gpuTextureData = e.texture, this.downloader = e.download, this.disposer = e.dispose;
          break;
        }
        case "gpu-buffer": {
          if (r !== "float32" && r !== "float16" && r !== "int32" && r !== "int64" && r !== "uint32" && r !== "uint8" && r !== "bool") throw new TypeError(`unsupported type "${r}" to create tensor from gpu buffer`);
          this.gpuBufferData = e.gpuBuffer, this.downloader = e.download, this.disposer = e.dispose;
          break;
        }
        default:
          throw new Error(`Tensor constructor: unsupported location '${this.dataLocation}'`);
      }
      else {
        let a, u;
        if (typeof e == "string") if (r = e, u = t, e === "string") {
          if (!Array.isArray(o)) throw new TypeError("A string tensor's data must be a string array.");
          a = o;
        } else {
          let l = ke.get(e);
          if (l === void 0) throw new TypeError(`Unsupported tensor type: ${e}.`);
          if (Array.isArray(o)) {
            if (e === "float16" && l === Uint16Array) throw new TypeError("Creating a float16 tensor from number array is not supported. Please use Uint16Array as data.");
            e === "uint64" || e === "int64" ? a = l.from(o, BigInt) : a = l.from(o);
          } else if (o instanceof l) a = o;
          else throw new TypeError(`A ${r} tensor's data must be type of ${l}`);
        }
        else if (u = o, Array.isArray(e)) {
          if (e.length === 0) throw new TypeError("Tensor type cannot be inferred from an empty array.");
          let l = typeof e[0];
          if (l === "string") r = "string", a = e;
          else if (l === "boolean") r = "bool", a = Uint8Array.from(e);
          else throw new TypeError(`Invalid element type of data array: ${l}.`);
        } else {
          let l = Sr.get(e.constructor);
          if (l === void 0) throw new TypeError(`Unsupported type for tensor data: ${e.constructor}.`);
          r = l, a = e;
        }
        if (u === void 0) u = [a.length];
        else if (!Array.isArray(u)) throw new TypeError("A tensor's dims must be a number array");
        n = u, this.cpuData = a, this.dataLocation = "cpu";
      }
      let s = ms(n);
      if (this.cpuData && s !== this.cpuData.length) throw new Error(`Tensor's size(${s}) does not match data length(${this.cpuData.length}).`);
      this.type = r, this.dims = n, this.size = s;
    }
    static async fromImage(e, o) {
      return ss(e, o);
    }
    static fromTexture(e, o) {
      return us(e, o);
    }
    static fromGpuBuffer(e, o) {
      return ls(e, o);
    }
    static fromPinnedBuffer(e, o, t) {
      return fs(e, o, t);
    }
    toDataURL(e) {
      return os(this, e);
    }
    toImageData(e) {
      return is(this, e);
    }
    get data() {
      if (this.ensureValid(), !this.cpuData) throw new Error("The data is not on CPU. Use `getData()` to download GPU data to CPU, or use `texture` or `gpuBuffer` property to access the GPU data directly.");
      return this.cpuData;
    }
    get location() {
      return this.dataLocation;
    }
    get texture() {
      if (this.ensureValid(), !this.gpuTextureData) throw new Error("The data is not stored as a WebGL texture.");
      return this.gpuTextureData;
    }
    get gpuBuffer() {
      if (this.ensureValid(), !this.gpuBufferData) throw new Error("The data is not stored as a WebGPU buffer.");
      return this.gpuBufferData;
    }
    async getData(e) {
      switch (this.ensureValid(), this.dataLocation) {
        case "cpu":
        case "cpu-pinned":
          return this.data;
        case "texture":
        case "gpu-buffer": {
          if (!this.downloader) throw new Error("The current tensor is not created with a specified data downloader.");
          if (this.isDownloading) throw new Error("The current tensor is being downloaded.");
          try {
            this.isDownloading = true;
            let o = await this.downloader();
            return this.downloader = void 0, this.dataLocation = "cpu", this.cpuData = o, e && this.disposer && (this.disposer(), this.disposer = void 0), o;
          } finally {
            this.isDownloading = false;
          }
        }
        default:
          throw new Error(`cannot get data from location: ${this.dataLocation}`);
      }
    }
    dispose() {
      if (this.isDownloading) throw new Error("The current tensor is being downloaded.");
      this.disposer && (this.disposer(), this.disposer = void 0), this.cpuData = void 0, this.gpuTextureData = void 0, this.gpuBufferData = void 0, this.downloader = void 0, this.isDownloading = void 0, this.dataLocation = "none";
    }
    ensureValid() {
      if (this.dataLocation === "none") throw new Error("The tensor is disposed.");
    }
    reshape(e) {
      if (this.ensureValid(), this.downloader || this.disposer) throw new Error("Cannot reshape a tensor that owns GPU resource.");
      return bs(this, e);
    }
  };
});
var Tt, fn = O(() => {
  ln();
  Tt = Lt;
});
var ys, xs, Be, Fe, Co = O(() => {
  Bo();
  ys = (i, e) => {
    (typeof Rt.trace > "u" ? !Rt.wasm.trace : !Rt.trace) || console.timeStamp(`${i}::ORT::${e}`);
  }, xs = (i, e) => {
    var _a;
    let o = ((_a = new Error().stack) == null ? void 0 : _a.split(/\r\n|\r|\n/g)) || [], t = false;
    for (let r = 0; r < o.length; r++) {
      if (t && !o[r].includes("TRACE_FUNC")) {
        let n = `FUNC_${i}::${o[r].trim().split(" ")[1]}`;
        e && (n += `::${e}`), ys("CPU", n);
        return;
      }
      o[r].includes("TRACE_FUNC") && (t = true);
    }
  }, Be = (i) => {
    (typeof Rt.trace > "u" ? !Rt.wasm.trace : !Rt.trace) || xs("BEGIN", i);
  }, Fe = (i) => {
    (typeof Rt.trace > "u" ? !Rt.wasm.trace : !Rt.trace) || xs("END", i);
  };
});
var cn, Ts = O(() => {
  un();
  fn();
  Co();
  cn = class i {
    constructor(e) {
      this.handler = e;
    }
    async run(e, o, t) {
      Be();
      let r = {}, n = {};
      if (typeof e != "object" || e === null || e instanceof Tt || Array.isArray(e)) throw new TypeError("'feeds' must be an object that use input names as keys and OnnxValue as corresponding values.");
      let s = true;
      if (typeof o == "object") {
        if (o === null) throw new TypeError("Unexpected argument[1]: cannot be null.");
        if (o instanceof Tt) throw new TypeError("'fetches' cannot be a Tensor");
        if (Array.isArray(o)) {
          if (o.length === 0) throw new TypeError("'fetches' cannot be an empty array.");
          s = false;
          for (let l of o) {
            if (typeof l != "string") throw new TypeError("'fetches' must be a string array or an object.");
            if (this.outputNames.indexOf(l) === -1) throw new RangeError(`'fetches' contains invalid output name: ${l}.`);
            r[l] = null;
          }
          if (typeof t == "object" && t !== null) n = t;
          else if (typeof t < "u") throw new TypeError("'options' must be an object.");
        } else {
          let l = false, f = Object.getOwnPropertyNames(o);
          for (let p2 of this.outputNames) if (f.indexOf(p2) !== -1) {
            let d = o[p2];
            (d === null || d instanceof Tt) && (l = true, s = false, r[p2] = d);
          }
          if (l) {
            if (typeof t == "object" && t !== null) n = t;
            else if (typeof t < "u") throw new TypeError("'options' must be an object.");
          } else n = o;
        }
      } else if (typeof o < "u") throw new TypeError("Unexpected argument[1]: must be 'fetches' or 'options'.");
      for (let l of this.inputNames) if (typeof e[l] > "u") throw new Error(`input '${l}' is missing in 'feeds'.`);
      if (s) for (let l of this.outputNames) r[l] = null;
      let a = await this.handler.run(e, r, n), u = {};
      for (let l in a) if (Object.hasOwnProperty.call(a, l)) {
        let f = a[l];
        f instanceof Tt ? u[l] = f : u[l] = new Tt(f.type, f.data, f.dims);
      }
      return Fe(), u;
    }
    async release() {
      return this.handler.dispose();
    }
    static async create(e, o, t, r) {
      Be();
      let n, s = {};
      if (typeof e == "string") {
        if (n = e, typeof o == "object" && o !== null) s = o;
        else if (typeof o < "u") throw new TypeError("'options' must be an object.");
      } else if (e instanceof Uint8Array) {
        if (n = e, typeof o == "object" && o !== null) s = o;
        else if (typeof o < "u") throw new TypeError("'options' must be an object.");
      } else if (e instanceof ArrayBuffer || typeof SharedArrayBuffer < "u" && e instanceof SharedArrayBuffer) {
        let f = e, p2 = 0, d = e.byteLength;
        if (typeof o == "object" && o !== null) s = o;
        else if (typeof o == "number") {
          if (p2 = o, !Number.isSafeInteger(p2)) throw new RangeError("'byteOffset' must be an integer.");
          if (p2 < 0 || p2 >= f.byteLength) throw new RangeError(`'byteOffset' is out of range [0, ${f.byteLength}).`);
          if (d = e.byteLength - p2, typeof t == "number") {
            if (d = t, !Number.isSafeInteger(d)) throw new RangeError("'byteLength' must be an integer.");
            if (d <= 0 || p2 + d > f.byteLength) throw new RangeError(`'byteLength' is out of range (0, ${f.byteLength - p2}].`);
            if (typeof r == "object" && r !== null) s = r;
            else if (typeof r < "u") throw new TypeError("'options' must be an object.");
          } else if (typeof t < "u") throw new TypeError("'byteLength' must be a number.");
        } else if (typeof o < "u") throw new TypeError("'options' must be an object.");
        n = new Uint8Array(f, p2, d);
      } else throw new TypeError("Unexpected argument[0]: must be 'path' or 'buffer'.");
      let [a, u] = await sn(s), l = await a.createInferenceSessionHandler(n, u);
      return Fe(), new i(l);
    }
    startProfiling() {
      this.handler.startProfiling();
    }
    endProfiling() {
      this.handler.endProfiling();
    }
    get inputNames() {
      return this.handler.inputNames;
    }
    get outputNames() {
      return this.handler.outputNames;
    }
  };
});
var Kd, ws = O(() => {
  Ts();
  Kd = cn;
});
var vs = O(() => {
});
var Is = O(() => {
});
var _s = O(() => {
});
var Os = O(() => {
});
var Jd, pn, Ss = O(() => {
  un();
  fn();
  Jd = "Training backend could not be resolved. Make sure you're using the correct configuration & WebAssembly files.", pn = class i {
    constructor(e, o, t) {
      this.handler = e, this.hasOptimizerModel = o, this.hasEvalModel = t;
    }
    get trainingInputNames() {
      return this.handler.inputNames;
    }
    get trainingOutputNames() {
      return this.handler.outputNames;
    }
    get evalInputNames() {
      if (this.hasEvalModel) return this.handler.evalInputNames;
      throw new Error("This training session has no evalModel loaded.");
    }
    get evalOutputNames() {
      if (this.hasEvalModel) return this.handler.evalOutputNames;
      throw new Error("This training session has no evalModel loaded.");
    }
    static async create(e, o) {
      let t = e.evalModel || "", r = e.optimizerModel || "", n = o || {}, [s, a] = await sn(n);
      if (s.createTrainingSessionHandler) {
        let u = await s.createTrainingSessionHandler(e.checkpointState, e.trainModel, t, r, a);
        return new i(u, !!e.optimizerModel, !!e.evalModel);
      } else throw new Error(Jd);
    }
    typeNarrowingForRunStep(e, o, t, r, n) {
      let s = {}, a = {};
      if (typeof t != "object" || t === null || t instanceof Tt || Array.isArray(t)) throw new TypeError("'feeds' must be an object that use input names as keys and OnnxValue as corresponding values.");
      let u = true;
      if (typeof r == "object") {
        if (r === null) throw new TypeError("Unexpected argument[1]: cannot be null.");
        if (r instanceof Tt) throw new TypeError("'fetches' cannot be a Tensor");
        if (Array.isArray(r)) {
          if (r.length === 0) throw new TypeError("'fetches' cannot be an empty array.");
          u = false;
          for (let l of r) {
            if (typeof l != "string") throw new TypeError("'fetches' must be a string array or an object.");
            if (o.indexOf(l) === -1) throw new RangeError(`'fetches' contains invalid output name: ${l}.`);
            s[l] = null;
          }
          if (typeof n == "object" && n !== null) a = n;
          else if (typeof n < "u") throw new TypeError("'options' must be an object.");
        } else {
          let l = false, f = Object.getOwnPropertyNames(r);
          for (let p2 of o) if (f.indexOf(p2) !== -1) {
            let d = r[p2];
            (d === null || d instanceof Tt) && (l = true, u = false, s[p2] = d);
          }
          if (l) {
            if (typeof n == "object" && n !== null) a = n;
            else if (typeof n < "u") throw new TypeError("'options' must be an object.");
          } else a = r;
        }
      } else if (typeof r < "u") throw new TypeError("Unexpected argument[1]: must be 'fetches' or 'options'.");
      for (let l of e) if (typeof t[l] > "u") throw new Error(`input '${l}' is missing in 'feeds'.`);
      if (u) for (let l of o) s[l] = null;
      return [s, a];
    }
    convertHandlerReturnTypeToMapOfTensors(e) {
      let o = {};
      for (let t in e) if (Object.hasOwnProperty.call(e, t)) {
        let r = e[t];
        r instanceof Tt ? o[t] = r : o[t] = new Tt(r.type, r.data, r.dims);
      }
      return o;
    }
    async lazyResetGrad() {
      await this.handler.lazyResetGrad();
    }
    async runTrainStep(e, o, t) {
      let [r, n] = this.typeNarrowingForRunStep(this.trainingInputNames, this.trainingOutputNames, e, o, t), s = await this.handler.runTrainStep(e, r, n);
      return this.convertHandlerReturnTypeToMapOfTensors(s);
    }
    async runOptimizerStep(e) {
      if (this.hasOptimizerModel) await this.handler.runOptimizerStep(e || {});
      else throw new Error("This TrainingSession has no OptimizerModel loaded.");
    }
    async runEvalStep(e, o, t) {
      if (this.hasEvalModel) {
        let [r, n] = this.typeNarrowingForRunStep(this.evalInputNames, this.evalOutputNames, e, o, t), s = await this.handler.runEvalStep(e, r, n);
        return this.convertHandlerReturnTypeToMapOfTensors(s);
      } else throw new Error("This TrainingSession has no EvalModel loaded.");
    }
    async getParametersSize(e = true) {
      return this.handler.getParametersSize(e);
    }
    async loadParametersBuffer(e, o = true) {
      let t = await this.getParametersSize(o);
      if (e.length !== 4 * t) throw new Error("Size of the buffer passed into loadParametersBuffer must match the number of parameters in the model. Please use getParametersSize method to check.");
      return this.handler.loadParametersBuffer(e, o);
    }
    async getContiguousParameters(e = true) {
      return this.handler.getContiguousParameters(e);
    }
    async release() {
      return this.handler.dispose();
    }
  };
});
var Yd, As = O(() => {
  Ss();
  Yd = pn;
});
var No = {};
Or(No, { InferenceSession: () => Kd, TRACE: () => ys, TRACE_FUNC_BEGIN: () => Be, TRACE_FUNC_END: () => Fe, Tensor: () => Tt, TrainingSession: () => Yd, env: () => z, registerBackend: () => nr });
var Kt = O(() => {
  Qa();
  ns();
  ws();
  fn();
  vs();
  Is();
  Co();
  _s();
  Os();
  As();
});
function Ie(i, e, o, t) {
  if (e === void 0) return Qd(i);
  if (o === void 0) dn(i, e);
  else if (typeof o == "number" && t === void 0) dn(i, e);
  else if (typeof o == "string" && t === void 0) dn(i, o, 1, e);
  else if (typeof o == "string" && typeof t == "number") dn(i, o, t, e);
  else throw new TypeError("input is valid");
}
function Qd(i) {
  return { verbose: Ie.verbose.bind(null, i), info: Ie.info.bind(null, i), warning: Ie.warning.bind(null, i), error: Ie.error.bind(null, i), fatal: Ie.fatal.bind(null, i) };
}
function dn(i, e, o, t) {
  let r = Ar[t || ""] || Ar[""];
  Es[i] < Es[r.minimalSeverity] || (r.logDateTime && (e = `${(/* @__PURE__ */ new Date()).toISOString()}|${e}`), r.logSourceLocation, Zd[r.provider].log(i, e, t));
}
var Ro, Go, Es, Zd, Ds, Ar, tt, mn, bn, gn, hn, Mt = O(() => {
  Ro = class {
    log(e, o, t) {
    }
  }, Go = class {
    log(e, o, t) {
      console.log(`${this.color(e)} ${t ? "\x1B[35m" + t + "\x1B[0m " : ""}${o}`);
    }
    color(e) {
      switch (e) {
        case "verbose":
          return "\x1B[34;40mv\x1B[0m";
        case "info":
          return "\x1B[32mi\x1B[0m";
        case "warning":
          return "\x1B[30;43mw\x1B[0m";
        case "error":
          return "\x1B[31;40me\x1B[0m";
        case "fatal":
          return "\x1B[101mf\x1B[0m";
        default:
          throw new Error(`unsupported severity: ${e}`);
      }
    }
  }, Es = { verbose: 1e3, info: 2e3, warning: 4e3, error: 5e3, fatal: 6e3 }, Zd = { none: new Ro(), console: new Go() }, Ds = { provider: "console", minimalSeverity: "warning", logDateTime: true, logSourceLocation: false }, Ar = { "": Ds };
  ((u) => {
    function i(l, f) {
      u("verbose", l, f);
    }
    u.verbose = i;
    function e(l, f) {
      u("info", l, f);
    }
    u.info = e;
    function o(l, f) {
      u("warning", l, f);
    }
    u.warning = o;
    function t(l, f) {
      u("error", l, f);
    }
    u.error = t;
    function r(l, f) {
      u("fatal", l, f);
    }
    u.fatal = r;
    function n(l) {
      Ar = {}, s("", l || {});
    }
    u.reset = n;
    function s(l, f) {
      if (l === "*") n(f);
      else {
        let p2 = Ar[l] || Ds;
        Ar[l] = { provider: f.provider || p2.provider, minimalSeverity: f.minimalSeverity || p2.minimalSeverity, logDateTime: f.logDateTime === void 0 ? p2.logDateTime : f.logDateTime, logSourceLocation: f.logSourceLocation === void 0 ? p2.logSourceLocation : f.logSourceLocation };
      }
    }
    u.set = s;
    function a(l) {
      let f = {};
      l.logLevel && (f.minimalSeverity = l.logLevel), s("", f);
    }
    u.setWithEnv = a;
  })(Ie || (Ie = {}));
  tt = Ie, mn = class {
    constructor(e, o, t, r, n, s) {
      this.category = e;
      this.name = o;
      this.startTime = t;
      this.endCallback = r;
      this.timer = n;
      this.ctx = s;
    }
    async end() {
      return this.endCallback(this);
    }
    async checkTimer() {
      if (this.ctx === void 0 || this.timer === void 0) throw new Error("No webgl timer found");
      return this.ctx.endTimer(), this.ctx.waitForQueryAndGetTime(this.timer);
    }
  }, bn = class {
    constructor(e, o, t, r) {
      this.category = e;
      this.name = o;
      this.startTime = t;
      this.endTime = r;
    }
  }, gn = class {
    constructor(e, o, t) {
      this._started = false;
      this._flushPointer = 0;
      this._started = false, this._maxNumberEvents = e === void 0 ? 1e4 : e, this._flushBatchSize = o === void 0 ? 10 : o, this._flushIntervalInMilliseconds = t === void 0 ? 5e3 : t;
    }
    static create(e) {
      return e === void 0 ? new this() : new this(e.maxNumberEvents, e.flushBatchSize, e.flushIntervalInMilliseconds);
    }
    start() {
      this._started = true, this._timingEvents = [], this._flushTime = hn(), this._flushPointer = 0;
    }
    stop() {
      for (this._started = false; this._flushPointer < this._timingEvents.length; this._flushPointer++) this.logOneEvent(this._timingEvents[this._flushPointer]);
    }
    event(e, o, t, r) {
      let n = this._started ? this.begin(e, o, r) : void 0, s = false, a = t();
      if (a && typeof a.then == "function") return s = true, new Promise((u, l) => {
        a.then(async (f) => {
          n && await n.end(), u(f);
        }, async (f) => {
          n && await n.end(), l(f);
        });
      });
      if (!s && n) {
        let u = n.end();
        if (u && typeof u.then == "function") return new Promise((l, f) => {
          u.then(() => {
            l(a);
          }, (p2) => {
            f(p2);
          });
        });
      }
      return a;
    }
    begin(e, o, t) {
      if (!this._started) throw new Error("profiler is not started yet");
      if (t === void 0) {
        let r = hn();
        return this.flush(r), new mn(e, o, r, (n) => this.endSync(n));
      } else {
        let r = t.beginTimer();
        return new mn(e, o, 0, async (n) => this.end(n), r, t);
      }
    }
    async end(e) {
      let o = await e.checkTimer();
      this._timingEvents.length < this._maxNumberEvents && (this._timingEvents.push(new bn(e.category, e.name, e.startTime, o)), this.flush(o));
    }
    endSync(e) {
      let o = hn();
      this._timingEvents.length < this._maxNumberEvents && (this._timingEvents.push(new bn(e.category, e.name, e.startTime, o)), this.flush(o));
    }
    logOneEvent(e) {
      tt.verbose(`Profiler.${e.category}`, `${(e.endTime - e.startTime).toFixed(2)}ms on event '${e.name}' at ${e.endTime.toFixed(2)}`);
    }
    flush(e) {
      if (this._timingEvents.length - this._flushPointer >= this._flushBatchSize || e - this._flushTime >= this._flushIntervalInMilliseconds) {
        for (let o = this._flushPointer; this._flushPointer < o + this._flushBatchSize && this._flushPointer < this._timingEvents.length; this._flushPointer++) this.logOneEvent(this._timingEvents[this._flushPointer]);
        this._flushTime = hn();
      }
    }
    get started() {
      return this._started;
    }
  }, hn = typeof performance < "u" && performance.now ? () => performance.now() : Date.now;
});
function Ls(i, e, o) {
  for (let t of o) {
    let r = t[0], n = t[1], s = t[2], a = t[3], u = t[4];
    if (i.opType === r) {
      for (let l of e) if ((l.domain === n || l.domain === "ai.onnx" && n === "") && th(l.version, s)) return { opImpl: a, opInit: u };
    }
  }
  throw new TypeError(`cannot resolve operator '${i.opType}' with opsets: ${e.map((t) => `${t.domain || "ai.onnx"} v${t.version}`).join(", ")}`);
}
function th(i, e) {
  if (e.endsWith("+")) {
    let o = Number.parseInt(e.substring(0, e.length - 1), 10);
    return !isNaN(o) && o <= i;
  } else if (e.split("-").length === 2) {
    let o = e.split("-"), t = Number.parseInt(o[0], 10), r = Number.parseInt(o[1], 10);
    return !isNaN(t) && !isNaN(r) && t <= i && i <= r;
  } else return Number.parseInt(e, 10) === i;
}
var $s = O(() => {
});
var ks = mt((Mo) => {
  Mo.__esModule = true;
  var eh = function() {
    function i(e) {
      if (!e) throw new TypeError("Invalid argument; `value` has no value.");
      this.value = i.EMPTY, e && i.isGuid(e) && (this.value = e);
    }
    return i.isGuid = function(e) {
      var o = e.toString();
      return e && (e instanceof i || i.validator.test(o));
    }, i.create = function() {
      return new i([i.gen(2), i.gen(1), i.gen(1), i.gen(1), i.gen(3)].join("-"));
    }, i.createEmpty = function() {
      return new i("emptyguid");
    }, i.parse = function(e) {
      return new i(e);
    }, i.raw = function() {
      return [i.gen(2), i.gen(1), i.gen(1), i.gen(1), i.gen(3)].join("-");
    }, i.gen = function(e) {
      for (var o = "", t = 0; t < e; t++) o += ((1 + Math.random()) * 65536 | 0).toString(16).substring(1);
      return o;
    }, i.prototype.equals = function(e) {
      return i.isGuid(e) && this.value === e.toString();
    }, i.prototype.isEmpty = function() {
      return this.value === i.EMPTY;
    }, i.prototype.toString = function() {
      return this.value;
    }, i.prototype.toJSON = function() {
      return { value: this.value };
    }, i.validator = new RegExp("^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$", "i"), i.EMPTY = "00000000-0000-0000-0000-000000000000", i;
  }();
  Mo.Guid = eh;
});
function rt(i, e, o) {
  this.low = i | 0, this.high = e | 0, this.unsigned = !!o;
}
function Pt(i) {
  return (i && i.__isLong__) === true;
}
function Bs(i) {
  var e = Math.clz32(i & -i);
  return i ? 31 - e : e;
}
function Ce(i, e) {
  var o, t, r;
  return e ? (i >>>= 0, (r = 0 <= i && i < 256) && (t = Cs[i], t) ? t : (o = J(i, 0, true), r && (Cs[i] = o), o)) : (i |= 0, (r = -128 <= i && i < 128) && (t = Fs[i], t) ? t : (o = J(i, i < 0 ? -1 : 0, false), r && (Fs[i] = o), o));
}
function Vt(i, e) {
  if (isNaN(i)) return e ? he : Jt;
  if (e) {
    if (i < 0) return he;
    if (i >= Ms) return zs;
  } else {
    if (i <= -Rs) return Ft;
    if (i + 1 >= Rs) return Vs;
  }
  return i < 0 ? Vt(-i, e).neg() : J(i % ir | 0, i / ir | 0, e);
}
function J(i, e, o) {
  return new rt(i, e, o);
}
function Vo(i, e, o) {
  if (i.length === 0) throw Error("empty string");
  if (typeof e == "number" ? (o = e, e = false) : e = !!e, i === "NaN" || i === "Infinity" || i === "+Infinity" || i === "-Infinity") return e ? he : Jt;
  if (o = o || 10, o < 2 || 36 < o) throw RangeError("radix");
  var t;
  if ((t = i.indexOf("-")) > 0) throw Error("interior hyphen");
  if (t === 0) return Vo(i.substring(1), e, o).neg();
  for (var r = Vt(yn(o, 8)), n = Jt, s = 0; s < i.length; s += 8) {
    var a = Math.min(8, i.length - s), u = parseInt(i.substring(s, s + a), o);
    if (a < 8) {
      var l = Vt(yn(o, a));
      n = n.mul(l).add(Vt(u));
    } else n = n.mul(r), n = n.add(Vt(u));
  }
  return n.unsigned = e, n;
}
function Yt(i, e) {
  return typeof i == "number" ? Vt(i, e) : typeof i == "string" ? Vo(i, e) : J(i.low, i.high, typeof e == "boolean" ? e : i.unsigned);
}
var Ut, Fs, Cs, yn, Ns, rh, ir, Ms, Rs, Gs, Jt, he, or, Us, Uo, Vs, zs, Ft, D, me, zo = O(() => {
  Ut = null;
  try {
    Ut = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11])), {}).exports;
  } catch {
  }
  rt.prototype.__isLong__;
  Object.defineProperty(rt.prototype, "__isLong__", { value: true });
  rt.isLong = Pt;
  Fs = {}, Cs = {};
  rt.fromInt = Ce;
  rt.fromNumber = Vt;
  rt.fromBits = J;
  yn = Math.pow;
  rt.fromString = Vo;
  rt.fromValue = Yt;
  Ns = 65536, rh = 1 << 24, ir = Ns * Ns, Ms = ir * ir, Rs = Ms / 2, Gs = Ce(rh), Jt = Ce(0);
  rt.ZERO = Jt;
  he = Ce(0, true);
  rt.UZERO = he;
  or = Ce(1);
  rt.ONE = or;
  Us = Ce(1, true);
  rt.UONE = Us;
  Uo = Ce(-1);
  rt.NEG_ONE = Uo;
  Vs = J(-1, 2147483647, false);
  rt.MAX_VALUE = Vs;
  zs = J(-1, -1, true);
  rt.MAX_UNSIGNED_VALUE = zs;
  Ft = J(0, -2147483648, false);
  rt.MIN_VALUE = Ft;
  D = rt.prototype;
  D.toInt = function() {
    return this.unsigned ? this.low >>> 0 : this.low;
  };
  D.toNumber = function() {
    return this.unsigned ? (this.high >>> 0) * ir + (this.low >>> 0) : this.high * ir + (this.low >>> 0);
  };
  D.toString = function(e) {
    if (e = e || 10, e < 2 || 36 < e) throw RangeError("radix");
    if (this.isZero()) return "0";
    if (this.isNegative()) if (this.eq(Ft)) {
      var o = Vt(e), t = this.div(o), r = t.mul(o).sub(this);
      return t.toString(e) + r.toInt().toString(e);
    } else return "-" + this.neg().toString(e);
    for (var n = Vt(yn(e, 6), this.unsigned), s = this, a = ""; ; ) {
      var u = s.div(n), l = s.sub(u.mul(n)).toInt() >>> 0, f = l.toString(e);
      if (s = u, s.isZero()) return f + a;
      for (; f.length < 6; ) f = "0" + f;
      a = "" + f + a;
    }
  };
  D.getHighBits = function() {
    return this.high;
  };
  D.getHighBitsUnsigned = function() {
    return this.high >>> 0;
  };
  D.getLowBits = function() {
    return this.low;
  };
  D.getLowBitsUnsigned = function() {
    return this.low >>> 0;
  };
  D.getNumBitsAbs = function() {
    if (this.isNegative()) return this.eq(Ft) ? 64 : this.neg().getNumBitsAbs();
    for (var e = this.high != 0 ? this.high : this.low, o = 31; o > 0 && !(e & 1 << o); o--) ;
    return this.high != 0 ? o + 33 : o + 1;
  };
  D.isZero = function() {
    return this.high === 0 && this.low === 0;
  };
  D.eqz = D.isZero;
  D.isNegative = function() {
    return !this.unsigned && this.high < 0;
  };
  D.isPositive = function() {
    return this.unsigned || this.high >= 0;
  };
  D.isOdd = function() {
    return (this.low & 1) === 1;
  };
  D.isEven = function() {
    return (this.low & 1) === 0;
  };
  D.equals = function(e) {
    return Pt(e) || (e = Yt(e)), this.unsigned !== e.unsigned && this.high >>> 31 === 1 && e.high >>> 31 === 1 ? false : this.high === e.high && this.low === e.low;
  };
  D.eq = D.equals;
  D.notEquals = function(e) {
    return !this.eq(e);
  };
  D.neq = D.notEquals;
  D.ne = D.notEquals;
  D.lessThan = function(e) {
    return this.comp(e) < 0;
  };
  D.lt = D.lessThan;
  D.lessThanOrEqual = function(e) {
    return this.comp(e) <= 0;
  };
  D.lte = D.lessThanOrEqual;
  D.le = D.lessThanOrEqual;
  D.greaterThan = function(e) {
    return this.comp(e) > 0;
  };
  D.gt = D.greaterThan;
  D.greaterThanOrEqual = function(e) {
    return this.comp(e) >= 0;
  };
  D.gte = D.greaterThanOrEqual;
  D.ge = D.greaterThanOrEqual;
  D.compare = function(e) {
    if (Pt(e) || (e = Yt(e)), this.eq(e)) return 0;
    var o = this.isNegative(), t = e.isNegative();
    return o && !t ? -1 : !o && t ? 1 : this.unsigned ? e.high >>> 0 > this.high >>> 0 || e.high === this.high && e.low >>> 0 > this.low >>> 0 ? -1 : 1 : this.sub(e).isNegative() ? -1 : 1;
  };
  D.comp = D.compare;
  D.negate = function() {
    return !this.unsigned && this.eq(Ft) ? Ft : this.not().add(or);
  };
  D.neg = D.negate;
  D.add = function(e) {
    Pt(e) || (e = Yt(e));
    var o = this.high >>> 16, t = this.high & 65535, r = this.low >>> 16, n = this.low & 65535, s = e.high >>> 16, a = e.high & 65535, u = e.low >>> 16, l = e.low & 65535, f = 0, p2 = 0, d = 0, y = 0;
    return y += n + l, d += y >>> 16, y &= 65535, d += r + u, p2 += d >>> 16, d &= 65535, p2 += t + a, f += p2 >>> 16, p2 &= 65535, f += o + s, f &= 65535, J(d << 16 | y, f << 16 | p2, this.unsigned);
  };
  D.subtract = function(e) {
    return Pt(e) || (e = Yt(e)), this.add(e.neg());
  };
  D.sub = D.subtract;
  D.multiply = function(e) {
    if (this.isZero()) return this;
    if (Pt(e) || (e = Yt(e)), Ut) {
      var o = Ut.mul(this.low, this.high, e.low, e.high);
      return J(o, Ut.get_high(), this.unsigned);
    }
    if (e.isZero()) return this.unsigned ? he : Jt;
    if (this.eq(Ft)) return e.isOdd() ? Ft : Jt;
    if (e.eq(Ft)) return this.isOdd() ? Ft : Jt;
    if (this.isNegative()) return e.isNegative() ? this.neg().mul(e.neg()) : this.neg().mul(e).neg();
    if (e.isNegative()) return this.mul(e.neg()).neg();
    if (this.lt(Gs) && e.lt(Gs)) return Vt(this.toNumber() * e.toNumber(), this.unsigned);
    var t = this.high >>> 16, r = this.high & 65535, n = this.low >>> 16, s = this.low & 65535, a = e.high >>> 16, u = e.high & 65535, l = e.low >>> 16, f = e.low & 65535, p2 = 0, d = 0, y = 0, w = 0;
    return w += s * f, y += w >>> 16, w &= 65535, y += n * f, d += y >>> 16, y &= 65535, y += s * l, d += y >>> 16, y &= 65535, d += r * f, p2 += d >>> 16, d &= 65535, d += n * l, p2 += d >>> 16, d &= 65535, d += s * u, p2 += d >>> 16, d &= 65535, p2 += t * f + r * l + n * u + s * a, p2 &= 65535, J(y << 16 | w, p2 << 16 | d, this.unsigned);
  };
  D.mul = D.multiply;
  D.divide = function(e) {
    if (Pt(e) || (e = Yt(e)), e.isZero()) throw Error("division by zero");
    if (Ut) {
      if (!this.unsigned && this.high === -2147483648 && e.low === -1 && e.high === -1) return this;
      var o = (this.unsigned ? Ut.div_u : Ut.div_s)(this.low, this.high, e.low, e.high);
      return J(o, Ut.get_high(), this.unsigned);
    }
    if (this.isZero()) return this.unsigned ? he : Jt;
    var t, r, n;
    if (this.unsigned) {
      if (e.unsigned || (e = e.toUnsigned()), e.gt(this)) return he;
      if (e.gt(this.shru(1))) return Us;
      n = he;
    } else {
      if (this.eq(Ft)) {
        if (e.eq(or) || e.eq(Uo)) return Ft;
        if (e.eq(Ft)) return or;
        var s = this.shr(1);
        return t = s.div(e).shl(1), t.eq(Jt) ? e.isNegative() ? or : Uo : (r = this.sub(e.mul(t)), n = t.add(r.div(e)), n);
      } else if (e.eq(Ft)) return this.unsigned ? he : Jt;
      if (this.isNegative()) return e.isNegative() ? this.neg().div(e.neg()) : this.neg().div(e).neg();
      if (e.isNegative()) return this.div(e.neg()).neg();
      n = Jt;
    }
    for (r = this; r.gte(e); ) {
      t = Math.max(1, Math.floor(r.toNumber() / e.toNumber()));
      for (var a = Math.ceil(Math.log(t) / Math.LN2), u = a <= 48 ? 1 : yn(2, a - 48), l = Vt(t), f = l.mul(e); f.isNegative() || f.gt(r); ) t -= u, l = Vt(t, this.unsigned), f = l.mul(e);
      l.isZero() && (l = or), n = n.add(l), r = r.sub(f);
    }
    return n;
  };
  D.div = D.divide;
  D.modulo = function(e) {
    if (Pt(e) || (e = Yt(e)), Ut) {
      var o = (this.unsigned ? Ut.rem_u : Ut.rem_s)(this.low, this.high, e.low, e.high);
      return J(o, Ut.get_high(), this.unsigned);
    }
    return this.sub(this.div(e).mul(e));
  };
  D.mod = D.modulo;
  D.rem = D.modulo;
  D.not = function() {
    return J(~this.low, ~this.high, this.unsigned);
  };
  D.countLeadingZeros = function() {
    return this.high ? Math.clz32(this.high) : Math.clz32(this.low) + 32;
  };
  D.clz = D.countLeadingZeros;
  D.countTrailingZeros = function() {
    return this.low ? Bs(this.low) : Bs(this.high) + 32;
  };
  D.ctz = D.countTrailingZeros;
  D.and = function(e) {
    return Pt(e) || (e = Yt(e)), J(this.low & e.low, this.high & e.high, this.unsigned);
  };
  D.or = function(e) {
    return Pt(e) || (e = Yt(e)), J(this.low | e.low, this.high | e.high, this.unsigned);
  };
  D.xor = function(e) {
    return Pt(e) || (e = Yt(e)), J(this.low ^ e.low, this.high ^ e.high, this.unsigned);
  };
  D.shiftLeft = function(e) {
    return Pt(e) && (e = e.toInt()), (e &= 63) === 0 ? this : e < 32 ? J(this.low << e, this.high << e | this.low >>> 32 - e, this.unsigned) : J(0, this.low << e - 32, this.unsigned);
  };
  D.shl = D.shiftLeft;
  D.shiftRight = function(e) {
    return Pt(e) && (e = e.toInt()), (e &= 63) === 0 ? this : e < 32 ? J(this.low >>> e | this.high << 32 - e, this.high >> e, this.unsigned) : J(this.high >> e - 32, this.high >= 0 ? 0 : -1, this.unsigned);
  };
  D.shr = D.shiftRight;
  D.shiftRightUnsigned = function(e) {
    return Pt(e) && (e = e.toInt()), (e &= 63) === 0 ? this : e < 32 ? J(this.low >>> e | this.high << 32 - e, this.high >>> e, this.unsigned) : e === 32 ? J(this.high, 0, this.unsigned) : J(this.high >>> e - 32, 0, this.unsigned);
  };
  D.shru = D.shiftRightUnsigned;
  D.shr_u = D.shiftRightUnsigned;
  D.rotateLeft = function(e) {
    var o;
    return Pt(e) && (e = e.toInt()), (e &= 63) === 0 ? this : e === 32 ? J(this.high, this.low, this.unsigned) : e < 32 ? (o = 32 - e, J(this.low << e | this.high >>> o, this.high << e | this.low >>> o, this.unsigned)) : (e -= 32, o = 32 - e, J(this.high << e | this.low >>> o, this.low << e | this.high >>> o, this.unsigned));
  };
  D.rotl = D.rotateLeft;
  D.rotateRight = function(e) {
    var o;
    return Pt(e) && (e = e.toInt()), (e &= 63) === 0 ? this : e === 32 ? J(this.high, this.low, this.unsigned) : e < 32 ? (o = 32 - e, J(this.high << o | this.low >>> e, this.low << o | this.high >>> e, this.unsigned)) : (e -= 32, o = 32 - e, J(this.low << o | this.high >>> e, this.high << o | this.low >>> e, this.unsigned));
  };
  D.rotr = D.rotateRight;
  D.toSigned = function() {
    return this.unsigned ? J(this.low, this.high, false) : this;
  };
  D.toUnsigned = function() {
    return this.unsigned ? this : J(this.low, this.high, true);
  };
  D.toBytes = function(e) {
    return e ? this.toBytesLE() : this.toBytesBE();
  };
  D.toBytesLE = function() {
    var e = this.high, o = this.low;
    return [o & 255, o >>> 8 & 255, o >>> 16 & 255, o >>> 24, e & 255, e >>> 8 & 255, e >>> 16 & 255, e >>> 24];
  };
  D.toBytesBE = function() {
    var e = this.high, o = this.low;
    return [e >>> 24, e >>> 16 & 255, e >>> 8 & 255, e & 255, o >>> 24, o >>> 16 & 255, o >>> 8 & 255, o & 255];
  };
  rt.fromBytes = function(e, o, t) {
    return t ? rt.fromBytesLE(e, o) : rt.fromBytesBE(e, o);
  };
  rt.fromBytesLE = function(e, o) {
    return new rt(e[0] | e[1] << 8 | e[2] << 16 | e[3] << 24, e[4] | e[5] << 8 | e[6] << 16 | e[7] << 24, o);
  };
  rt.fromBytesBE = function(e, o) {
    return new rt(e[4] << 24 | e[5] << 16 | e[6] << 8 | e[7], e[0] << 24 | e[1] << 16 | e[2] << 8 | e[3], o);
  };
  me = rt;
});
var T, xn = O(() => {
  T = {};
  T.Offset;
  T.Table;
  T.SIZEOF_SHORT = 2;
  T.SIZEOF_INT = 4;
  T.FILE_IDENTIFIER_LENGTH = 4;
  T.SIZE_PREFIX_LENGTH = 4;
  T.Encoding = { UTF8_BYTES: 1, UTF16_STRING: 2 };
  T.int32 = new Int32Array(2);
  T.float32 = new Float32Array(T.int32.buffer);
  T.float64 = new Float64Array(T.int32.buffer);
  T.isLittleEndian = new Uint16Array(new Uint8Array([1, 0]).buffer)[0] === 1;
  T.Long = function(i, e) {
    this.low = i | 0, this.high = e | 0;
  };
  T.Long.create = function(i, e) {
    return i == 0 && e == 0 ? T.Long.ZERO : new T.Long(i, e);
  };
  T.Long.prototype.toFloat64 = function() {
    return (this.low >>> 0) + this.high * 4294967296;
  };
  T.Long.prototype.equals = function(i) {
    return this.low == i.low && this.high == i.high;
  };
  T.Long.ZERO = new T.Long(0, 0);
  T.Builder = function(i) {
    if (i) var e = i;
    else var e = 1024;
    this.bb = T.ByteBuffer.allocate(e), this.space = e, this.minalign = 1, this.vtable = null, this.vtable_in_use = 0, this.isNested = false, this.object_start = 0, this.vtables = [], this.vector_num_elems = 0, this.force_defaults = false;
  };
  T.Builder.prototype.clear = function() {
    this.bb.clear(), this.space = this.bb.capacity(), this.minalign = 1, this.vtable = null, this.vtable_in_use = 0, this.isNested = false, this.object_start = 0, this.vtables = [], this.vector_num_elems = 0, this.force_defaults = false;
  };
  T.Builder.prototype.forceDefaults = function(i) {
    this.force_defaults = i;
  };
  T.Builder.prototype.dataBuffer = function() {
    return this.bb;
  };
  T.Builder.prototype.asUint8Array = function() {
    return this.bb.bytes().subarray(this.bb.position(), this.bb.position() + this.offset());
  };
  T.Builder.prototype.prep = function(i, e) {
    i > this.minalign && (this.minalign = i);
    for (var o = ~(this.bb.capacity() - this.space + e) + 1 & i - 1; this.space < o + i + e; ) {
      var t = this.bb.capacity();
      this.bb = T.Builder.growByteBuffer(this.bb), this.space += this.bb.capacity() - t;
    }
    this.pad(o);
  };
  T.Builder.prototype.pad = function(i) {
    for (var e = 0; e < i; e++) this.bb.writeInt8(--this.space, 0);
  };
  T.Builder.prototype.writeInt8 = function(i) {
    this.bb.writeInt8(this.space -= 1, i);
  };
  T.Builder.prototype.writeInt16 = function(i) {
    this.bb.writeInt16(this.space -= 2, i);
  };
  T.Builder.prototype.writeInt32 = function(i) {
    this.bb.writeInt32(this.space -= 4, i);
  };
  T.Builder.prototype.writeInt64 = function(i) {
    this.bb.writeInt64(this.space -= 8, i);
  };
  T.Builder.prototype.writeFloat32 = function(i) {
    this.bb.writeFloat32(this.space -= 4, i);
  };
  T.Builder.prototype.writeFloat64 = function(i) {
    this.bb.writeFloat64(this.space -= 8, i);
  };
  T.Builder.prototype.addInt8 = function(i) {
    this.prep(1, 0), this.writeInt8(i);
  };
  T.Builder.prototype.addInt16 = function(i) {
    this.prep(2, 0), this.writeInt16(i);
  };
  T.Builder.prototype.addInt32 = function(i) {
    this.prep(4, 0), this.writeInt32(i);
  };
  T.Builder.prototype.addInt64 = function(i) {
    this.prep(8, 0), this.writeInt64(i);
  };
  T.Builder.prototype.addFloat32 = function(i) {
    this.prep(4, 0), this.writeFloat32(i);
  };
  T.Builder.prototype.addFloat64 = function(i) {
    this.prep(8, 0), this.writeFloat64(i);
  };
  T.Builder.prototype.addFieldInt8 = function(i, e, o) {
    (this.force_defaults || e != o) && (this.addInt8(e), this.slot(i));
  };
  T.Builder.prototype.addFieldInt16 = function(i, e, o) {
    (this.force_defaults || e != o) && (this.addInt16(e), this.slot(i));
  };
  T.Builder.prototype.addFieldInt32 = function(i, e, o) {
    (this.force_defaults || e != o) && (this.addInt32(e), this.slot(i));
  };
  T.Builder.prototype.addFieldInt64 = function(i, e, o) {
    (this.force_defaults || !e.equals(o)) && (this.addInt64(e), this.slot(i));
  };
  T.Builder.prototype.addFieldFloat32 = function(i, e, o) {
    (this.force_defaults || e != o) && (this.addFloat32(e), this.slot(i));
  };
  T.Builder.prototype.addFieldFloat64 = function(i, e, o) {
    (this.force_defaults || e != o) && (this.addFloat64(e), this.slot(i));
  };
  T.Builder.prototype.addFieldOffset = function(i, e, o) {
    (this.force_defaults || e != o) && (this.addOffset(e), this.slot(i));
  };
  T.Builder.prototype.addFieldStruct = function(i, e, o) {
    e != o && (this.nested(e), this.slot(i));
  };
  T.Builder.prototype.nested = function(i) {
    if (i != this.offset()) throw new Error("FlatBuffers: struct must be serialized inline.");
  };
  T.Builder.prototype.notNested = function() {
    if (this.isNested) throw new Error("FlatBuffers: object serialization must not be nested.");
  };
  T.Builder.prototype.slot = function(i) {
    this.vtable[i] = this.offset();
  };
  T.Builder.prototype.offset = function() {
    return this.bb.capacity() - this.space;
  };
  T.Builder.growByteBuffer = function(i) {
    var e = i.capacity();
    if (e & 3221225472) throw new Error("FlatBuffers: cannot grow buffer beyond 2 gigabytes.");
    var o = e << 1, t = T.ByteBuffer.allocate(o);
    return t.setPosition(o - e), t.bytes().set(i.bytes(), o - e), t;
  };
  T.Builder.prototype.addOffset = function(i) {
    this.prep(T.SIZEOF_INT, 0), this.writeInt32(this.offset() - i + T.SIZEOF_INT);
  };
  T.Builder.prototype.startObject = function(i) {
    this.notNested(), this.vtable == null && (this.vtable = []), this.vtable_in_use = i;
    for (var e = 0; e < i; e++) this.vtable[e] = 0;
    this.isNested = true, this.object_start = this.offset();
  };
  T.Builder.prototype.endObject = function() {
    if (this.vtable == null || !this.isNested) throw new Error("FlatBuffers: endObject called without startObject");
    this.addInt32(0);
    for (var i = this.offset(), e = this.vtable_in_use - 1; e >= 0 && this.vtable[e] == 0; e--) ;
    for (var o = e + 1; e >= 0; e--) this.addInt16(this.vtable[e] != 0 ? i - this.vtable[e] : 0);
    var t = 2;
    this.addInt16(i - this.object_start);
    var r = (o + t) * T.SIZEOF_SHORT;
    this.addInt16(r);
    var n = 0, s = this.space;
    t: for (e = 0; e < this.vtables.length; e++) {
      var a = this.bb.capacity() - this.vtables[e];
      if (r == this.bb.readInt16(a)) {
        for (var u = T.SIZEOF_SHORT; u < r; u += T.SIZEOF_SHORT) if (this.bb.readInt16(s + u) != this.bb.readInt16(a + u)) continue t;
        n = this.vtables[e];
        break;
      }
    }
    return n ? (this.space = this.bb.capacity() - i, this.bb.writeInt32(this.space, n - i)) : (this.vtables.push(this.offset()), this.bb.writeInt32(this.bb.capacity() - i, this.offset() - i)), this.isNested = false, i;
  };
  T.Builder.prototype.finish = function(i, e, o) {
    var t = o ? T.SIZE_PREFIX_LENGTH : 0;
    if (e) {
      var r = e;
      if (this.prep(this.minalign, T.SIZEOF_INT + T.FILE_IDENTIFIER_LENGTH + t), r.length != T.FILE_IDENTIFIER_LENGTH) throw new Error("FlatBuffers: file identifier must be length " + T.FILE_IDENTIFIER_LENGTH);
      for (var n = T.FILE_IDENTIFIER_LENGTH - 1; n >= 0; n--) this.writeInt8(r.charCodeAt(n));
    }
    this.prep(this.minalign, T.SIZEOF_INT + t), this.addOffset(i), t && this.addInt32(this.bb.capacity() - this.space), this.bb.setPosition(this.space);
  };
  T.Builder.prototype.finishSizePrefixed = function(i, e) {
    this.finish(i, e, true);
  };
  T.Builder.prototype.requiredField = function(i, e) {
    var o = this.bb.capacity() - i, t = o - this.bb.readInt32(o), r = this.bb.readInt16(t + e) != 0;
    if (!r) throw new Error("FlatBuffers: field " + e + " must be set");
  };
  T.Builder.prototype.startVector = function(i, e, o) {
    this.notNested(), this.vector_num_elems = e, this.prep(T.SIZEOF_INT, i * e), this.prep(o, i * e);
  };
  T.Builder.prototype.endVector = function() {
    return this.writeInt32(this.vector_num_elems), this.offset();
  };
  T.Builder.prototype.createString = function(i) {
    if (i instanceof Uint8Array) var e = i;
    else for (var e = [], o = 0; o < i.length; ) {
      var t, r = i.charCodeAt(o++);
      if (r < 55296 || r >= 56320) t = r;
      else {
        var n = i.charCodeAt(o++);
        t = (r << 10) + n + (65536 - 56623104 - 56320);
      }
      t < 128 ? e.push(t) : (t < 2048 ? e.push(t >> 6 & 31 | 192) : (t < 65536 ? e.push(t >> 12 & 15 | 224) : e.push(t >> 18 & 7 | 240, t >> 12 & 63 | 128), e.push(t >> 6 & 63 | 128)), e.push(t & 63 | 128));
    }
    this.addInt8(0), this.startVector(1, e.length, 1), this.bb.setPosition(this.space -= e.length);
    for (var o = 0, s = this.space, a = this.bb.bytes(); o < e.length; o++) a[s++] = e[o];
    return this.endVector();
  };
  T.Builder.prototype.createLong = function(i, e) {
    return T.Long.create(i, e);
  };
  T.ByteBuffer = function(i) {
    this.bytes_ = i, this.position_ = 0;
  };
  T.ByteBuffer.allocate = function(i) {
    return new T.ByteBuffer(new Uint8Array(i));
  };
  T.ByteBuffer.prototype.clear = function() {
    this.position_ = 0;
  };
  T.ByteBuffer.prototype.bytes = function() {
    return this.bytes_;
  };
  T.ByteBuffer.prototype.position = function() {
    return this.position_;
  };
  T.ByteBuffer.prototype.setPosition = function(i) {
    this.position_ = i;
  };
  T.ByteBuffer.prototype.capacity = function() {
    return this.bytes_.length;
  };
  T.ByteBuffer.prototype.readInt8 = function(i) {
    return this.readUint8(i) << 24 >> 24;
  };
  T.ByteBuffer.prototype.readUint8 = function(i) {
    return this.bytes_[i];
  };
  T.ByteBuffer.prototype.readInt16 = function(i) {
    return this.readUint16(i) << 16 >> 16;
  };
  T.ByteBuffer.prototype.readUint16 = function(i) {
    return this.bytes_[i] | this.bytes_[i + 1] << 8;
  };
  T.ByteBuffer.prototype.readInt32 = function(i) {
    return this.bytes_[i] | this.bytes_[i + 1] << 8 | this.bytes_[i + 2] << 16 | this.bytes_[i + 3] << 24;
  };
  T.ByteBuffer.prototype.readUint32 = function(i) {
    return this.readInt32(i) >>> 0;
  };
  T.ByteBuffer.prototype.readInt64 = function(i) {
    return new T.Long(this.readInt32(i), this.readInt32(i + 4));
  };
  T.ByteBuffer.prototype.readUint64 = function(i) {
    return new T.Long(this.readUint32(i), this.readUint32(i + 4));
  };
  T.ByteBuffer.prototype.readFloat32 = function(i) {
    return T.int32[0] = this.readInt32(i), T.float32[0];
  };
  T.ByteBuffer.prototype.readFloat64 = function(i) {
    return T.int32[T.isLittleEndian ? 0 : 1] = this.readInt32(i), T.int32[T.isLittleEndian ? 1 : 0] = this.readInt32(i + 4), T.float64[0];
  };
  T.ByteBuffer.prototype.writeInt8 = function(i, e) {
    this.bytes_[i] = e;
  };
  T.ByteBuffer.prototype.writeUint8 = function(i, e) {
    this.bytes_[i] = e;
  };
  T.ByteBuffer.prototype.writeInt16 = function(i, e) {
    this.bytes_[i] = e, this.bytes_[i + 1] = e >> 8;
  };
  T.ByteBuffer.prototype.writeUint16 = function(i, e) {
    this.bytes_[i] = e, this.bytes_[i + 1] = e >> 8;
  };
  T.ByteBuffer.prototype.writeInt32 = function(i, e) {
    this.bytes_[i] = e, this.bytes_[i + 1] = e >> 8, this.bytes_[i + 2] = e >> 16, this.bytes_[i + 3] = e >> 24;
  };
  T.ByteBuffer.prototype.writeUint32 = function(i, e) {
    this.bytes_[i] = e, this.bytes_[i + 1] = e >> 8, this.bytes_[i + 2] = e >> 16, this.bytes_[i + 3] = e >> 24;
  };
  T.ByteBuffer.prototype.writeInt64 = function(i, e) {
    this.writeInt32(i, e.low), this.writeInt32(i + 4, e.high);
  };
  T.ByteBuffer.prototype.writeUint64 = function(i, e) {
    this.writeUint32(i, e.low), this.writeUint32(i + 4, e.high);
  };
  T.ByteBuffer.prototype.writeFloat32 = function(i, e) {
    T.float32[0] = e, this.writeInt32(i, T.int32[0]);
  };
  T.ByteBuffer.prototype.writeFloat64 = function(i, e) {
    T.float64[0] = e, this.writeInt32(i, T.int32[T.isLittleEndian ? 0 : 1]), this.writeInt32(i + 4, T.int32[T.isLittleEndian ? 1 : 0]);
  };
  T.ByteBuffer.prototype.getBufferIdentifier = function() {
    if (this.bytes_.length < this.position_ + T.SIZEOF_INT + T.FILE_IDENTIFIER_LENGTH) throw new Error("FlatBuffers: ByteBuffer is too short to contain an identifier.");
    for (var i = "", e = 0; e < T.FILE_IDENTIFIER_LENGTH; e++) i += String.fromCharCode(this.readInt8(this.position_ + T.SIZEOF_INT + e));
    return i;
  };
  T.ByteBuffer.prototype.__offset = function(i, e) {
    var o = i - this.readInt32(i);
    return e < this.readInt16(o) ? this.readInt16(o + e) : 0;
  };
  T.ByteBuffer.prototype.__union = function(i, e) {
    return i.bb_pos = e + this.readInt32(e), i.bb = this, i;
  };
  T.ByteBuffer.prototype.__string = function(i, e) {
    i += this.readInt32(i);
    var o = this.readInt32(i), t = "", r = 0;
    if (i += T.SIZEOF_INT, e === T.Encoding.UTF8_BYTES) return this.bytes_.subarray(i, i + o);
    for (; r < o; ) {
      var n, s = this.readUint8(i + r++);
      if (s < 192) n = s;
      else {
        var a = this.readUint8(i + r++);
        if (s < 224) n = (s & 31) << 6 | a & 63;
        else {
          var u = this.readUint8(i + r++);
          if (s < 240) n = (s & 15) << 12 | (a & 63) << 6 | u & 63;
          else {
            var l = this.readUint8(i + r++);
            n = (s & 7) << 18 | (a & 63) << 12 | (u & 63) << 6 | l & 63;
          }
        }
      }
      n < 65536 ? t += String.fromCharCode(n) : (n -= 65536, t += String.fromCharCode((n >> 10) + 55296, (n & 1024 - 1) + 56320));
    }
    return t;
  };
  T.ByteBuffer.prototype.__indirect = function(i) {
    return i + this.readInt32(i);
  };
  T.ByteBuffer.prototype.__vector = function(i) {
    return i + this.readInt32(i) + T.SIZEOF_INT;
  };
  T.ByteBuffer.prototype.__vector_len = function(i) {
    return this.readInt32(i + this.readInt32(i));
  };
  T.ByteBuffer.prototype.__has_identifier = function(i) {
    if (i.length != T.FILE_IDENTIFIER_LENGTH) throw new Error("FlatBuffers: file identifier must be length " + T.FILE_IDENTIFIER_LENGTH);
    for (var e = 0; e < T.FILE_IDENTIFIER_LENGTH; e++) if (i.charCodeAt(e) != this.readInt8(this.position_ + T.SIZEOF_INT + e)) return false;
    return true;
  };
  T.ByteBuffer.prototype.createLong = function(i, e) {
    return T.Long.create(i, e);
  };
});
var F, Pr = O(() => {
  xn();
  ((e) => {
    ((t) => {
      ((n) => {
        ((P) => (P[P.UNDEFINED = 0] = "UNDEFINED", P[P.FLOAT = 1] = "FLOAT", P[P.INT = 2] = "INT", P[P.STRING = 3] = "STRING", P[P.TENSOR = 4] = "TENSOR", P[P.GRAPH = 5] = "GRAPH", P[P.FLOATS = 6] = "FLOATS", P[P.INTS = 7] = "INTS", P[P.STRINGS = 8] = "STRINGS", P[P.TENSORS = 9] = "TENSORS", P[P.GRAPHS = 10] = "GRAPHS", P[P.SPARSE_TENSOR = 11] = "SPARSE_TENSOR", P[P.SPARSE_TENSORS = 12] = "SPARSE_TENSORS"))(n.AttributeType || (n.AttributeType = {}));
      })(t.fbs || (t.fbs = {}));
    })(e.experimental || (e.experimental = {}));
  })(F || (F = {}));
  ((e) => {
    ((t) => {
      ((n) => {
        ((l) => (l[l.UNKNOWN = 0] = "UNKNOWN", l[l.VALUE = 1] = "VALUE", l[l.PARAM = 2] = "PARAM"))(n.DimensionValueType || (n.DimensionValueType = {}));
      })(t.fbs || (t.fbs = {}));
    })(e.experimental || (e.experimental = {}));
  })(F || (F = {}));
  ((e) => {
    ((t) => {
      ((n) => {
        ((C) => (C[C.UNDEFINED = 0] = "UNDEFINED", C[C.FLOAT = 1] = "FLOAT", C[C.UINT8 = 2] = "UINT8", C[C.INT8 = 3] = "INT8", C[C.UINT16 = 4] = "UINT16", C[C.INT16 = 5] = "INT16", C[C.INT32 = 6] = "INT32", C[C.INT64 = 7] = "INT64", C[C.STRING = 8] = "STRING", C[C.BOOL = 9] = "BOOL", C[C.FLOAT16 = 10] = "FLOAT16", C[C.DOUBLE = 11] = "DOUBLE", C[C.UINT32 = 12] = "UINT32", C[C.UINT64 = 13] = "UINT64", C[C.COMPLEX64 = 14] = "COMPLEX64", C[C.COMPLEX128 = 15] = "COMPLEX128", C[C.BFLOAT16 = 16] = "BFLOAT16", C[C.FLOAT8E4M3FN = 17] = "FLOAT8E4M3FN", C[C.FLOAT8E4M3FNUZ = 18] = "FLOAT8E4M3FNUZ", C[C.FLOAT8E5M2 = 19] = "FLOAT8E5M2", C[C.FLOAT8E5M2FNUZ = 20] = "FLOAT8E5M2FNUZ"))(n.TensorDataType || (n.TensorDataType = {}));
      })(t.fbs || (t.fbs = {}));
    })(e.experimental || (e.experimental = {}));
  })(F || (F = {}));
  ((e) => {
    ((t) => {
      ((n) => {
        ((u) => (u[u.Primitive = 0] = "Primitive", u[u.Fused = 1] = "Fused"))(n.NodeType || (n.NodeType = {}));
      })(t.fbs || (t.fbs = {}));
    })(e.experimental || (e.experimental = {}));
  })(F || (F = {}));
  ((e) => {
    ((t) => {
      ((n) => {
        ((f) => (f[f.NONE = 0] = "NONE", f[f.tensor_type = 1] = "tensor_type", f[f.sequence_type = 2] = "sequence_type", f[f.map_type = 3] = "map_type"))(n.TypeInfoValue || (n.TypeInfoValue = {}));
      })(t.fbs || (t.fbs = {}));
    })(e.experimental || (e.experimental = {}));
  })(F || (F = {}));
  ((e) => {
    ((t) => {
      ((n) => {
        class r {
          constructor() {
            this.bb = null;
            this.bb_pos = 0;
          }
          __init(a, u) {
            return this.bb_pos = a, this.bb = u, this;
          }
          static getRootAsShape(a, u) {
            return (u || new r()).__init(a.readInt32(a.position()) + a.position(), a);
          }
          static getSizePrefixedRootAsShape(a, u) {
            return a.setPosition(a.position() + T.SIZE_PREFIX_LENGTH), (u || new r()).__init(a.readInt32(a.position()) + a.position(), a);
          }
          dim(a, u) {
            let l = this.bb.__offset(this.bb_pos, 4);
            return l ? (u || new e.experimental.fbs.Dimension()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + l) + a * 4), this.bb) : null;
          }
          dimLength() {
            let a = this.bb.__offset(this.bb_pos, 4);
            return a ? this.bb.__vector_len(this.bb_pos + a) : 0;
          }
          static startShape(a) {
            a.startObject(1);
          }
          static addDim(a, u) {
            a.addFieldOffset(0, u, 0);
          }
          static createDimVector(a, u) {
            a.startVector(4, u.length, 4);
            for (let l = u.length - 1; l >= 0; l--) a.addOffset(u[l]);
            return a.endVector();
          }
          static startDimVector(a, u) {
            a.startVector(4, u, 4);
          }
          static endShape(a) {
            return a.endObject();
          }
          static createShape(a, u) {
            return r.startShape(a), r.addDim(a, u), r.endShape(a);
          }
        }
        n.Shape = r;
      })(t.fbs || (t.fbs = {}));
    })(e.experimental || (e.experimental = {}));
  })(F || (F = {}));
  ((e) => {
    ((t) => {
      ((n) => {
        class r {
          constructor() {
            this.bb = null;
            this.bb_pos = 0;
          }
          __init(a, u) {
            return this.bb_pos = a, this.bb = u, this;
          }
          static getRootAsDimension(a, u) {
            return (u || new r()).__init(a.readInt32(a.position()) + a.position(), a);
          }
          static getSizePrefixedRootAsDimension(a, u) {
            return a.setPosition(a.position() + T.SIZE_PREFIX_LENGTH), (u || new r()).__init(a.readInt32(a.position()) + a.position(), a);
          }
          value(a) {
            let u = this.bb.__offset(this.bb_pos, 4);
            return u ? (a || new e.experimental.fbs.DimensionValue()).__init(this.bb.__indirect(this.bb_pos + u), this.bb) : null;
          }
          denotation(a) {
            let u = this.bb.__offset(this.bb_pos, 6);
            return u ? this.bb.__string(this.bb_pos + u, a) : null;
          }
          static startDimension(a) {
            a.startObject(2);
          }
          static addValue(a, u) {
            a.addFieldOffset(0, u, 0);
          }
          static addDenotation(a, u) {
            a.addFieldOffset(1, u, 0);
          }
          static endDimension(a) {
            return a.endObject();
          }
          static createDimension(a, u, l) {
            return r.startDimension(a), r.addValue(a, u), r.addDenotation(a, l), r.endDimension(a);
          }
        }
        n.Dimension = r;
      })(t.fbs || (t.fbs = {}));
    })(e.experimental || (e.experimental = {}));
  })(F || (F = {}));
  ((e) => {
    ((t) => {
      ((n) => {
        class r {
          constructor() {
            this.bb = null;
            this.bb_pos = 0;
          }
          __init(a, u) {
            return this.bb_pos = a, this.bb = u, this;
          }
          static getRootAsDimensionValue(a, u) {
            return (u || new r()).__init(a.readInt32(a.position()) + a.position(), a);
          }
          static getSizePrefixedRootAsDimensionValue(a, u) {
            return a.setPosition(a.position() + T.SIZE_PREFIX_LENGTH), (u || new r()).__init(a.readInt32(a.position()) + a.position(), a);
          }
          dimType() {
            let a = this.bb.__offset(this.bb_pos, 4);
            return a ? this.bb.readInt8(this.bb_pos + a) : 0;
          }
          dimValue() {
            let a = this.bb.__offset(this.bb_pos, 6);
            return a ? this.bb.readInt64(this.bb_pos + a) : this.bb.createLong(0, 0);
          }
          dimParam(a) {
            let u = this.bb.__offset(this.bb_pos, 8);
            return u ? this.bb.__string(this.bb_pos + u, a) : null;
          }
          static startDimensionValue(a) {
            a.startObject(3);
          }
          static addDimType(a, u) {
            a.addFieldInt8(0, u, 0);
          }
          static addDimValue(a, u) {
            a.addFieldInt64(1, u, a.createLong(0, 0));
          }
          static addDimParam(a, u) {
            a.addFieldOffset(2, u, 0);
          }
          static endDimensionValue(a) {
            return a.endObject();
          }
          static createDimensionValue(a, u, l, f) {
            return r.startDimensionValue(a), r.addDimType(a, u), r.addDimValue(a, l), r.addDimParam(a, f), r.endDimensionValue(a);
          }
        }
        n.DimensionValue = r;
      })(t.fbs || (t.fbs = {}));
    })(e.experimental || (e.experimental = {}));
  })(F || (F = {}));
  ((e) => {
    ((t) => {
      ((n) => {
        class r {
          constructor() {
            this.bb = null;
            this.bb_pos = 0;
          }
          __init(a, u) {
            return this.bb_pos = a, this.bb = u, this;
          }
          static getRootAsTensorTypeAndShape(a, u) {
            return (u || new r()).__init(a.readInt32(a.position()) + a.position(), a);
          }
          static getSizePrefixedRootAsTensorTypeAndShape(a, u) {
            return a.setPosition(a.position() + T.SIZE_PREFIX_LENGTH), (u || new r()).__init(a.readInt32(a.position()) + a.position(), a);
          }
          elemType() {
            let a = this.bb.__offset(this.bb_pos, 4);
            return a ? this.bb.readInt32(this.bb_pos + a) : 0;
          }
          shape(a) {
            let u = this.bb.__offset(this.bb_pos, 6);
            return u ? (a || new e.experimental.fbs.Shape()).__init(this.bb.__indirect(this.bb_pos + u), this.bb) : null;
          }
          static startTensorTypeAndShape(a) {
            a.startObject(2);
          }
          static addElemType(a, u) {
            a.addFieldInt32(0, u, 0);
          }
          static addShape(a, u) {
            a.addFieldOffset(1, u, 0);
          }
          static endTensorTypeAndShape(a) {
            return a.endObject();
          }
          static createTensorTypeAndShape(a, u, l) {
            return r.startTensorTypeAndShape(a), r.addElemType(a, u), r.addShape(a, l), r.endTensorTypeAndShape(a);
          }
        }
        n.TensorTypeAndShape = r;
      })(t.fbs || (t.fbs = {}));
    })(e.experimental || (e.experimental = {}));
  })(F || (F = {}));
  ((e) => {
    ((t) => {
      ((n) => {
        class r {
          constructor() {
            this.bb = null;
            this.bb_pos = 0;
          }
          __init(a, u) {
            return this.bb_pos = a, this.bb = u, this;
          }
          static getRootAsMapType(a, u) {
            return (u || new r()).__init(a.readInt32(a.position()) + a.position(), a);
          }
          static getSizePrefixedRootAsMapType(a, u) {
            return a.setPosition(a.position() + T.SIZE_PREFIX_LENGTH), (u || new r()).__init(a.readInt32(a.position()) + a.position(), a);
          }
          keyType() {
            let a = this.bb.__offset(this.bb_pos, 4);
            return a ? this.bb.readInt32(this.bb_pos + a) : 0;
          }
          valueType(a) {
            let u = this.bb.__offset(this.bb_pos, 6);
            return u ? (a || new e.experimental.fbs.TypeInfo()).__init(this.bb.__indirect(this.bb_pos + u), this.bb) : null;
          }
          static startMapType(a) {
            a.startObject(2);
          }
          static addKeyType(a, u) {
            a.addFieldInt32(0, u, 0);
          }
          static addValueType(a, u) {
            a.addFieldOffset(1, u, 0);
          }
          static endMapType(a) {
            return a.endObject();
          }
          static createMapType(a, u, l) {
            return r.startMapType(a), r.addKeyType(a, u), r.addValueType(a, l), r.endMapType(a);
          }
        }
        n.MapType = r;
      })(t.fbs || (t.fbs = {}));
    })(e.experimental || (e.experimental = {}));
  })(F || (F = {}));
  ((e) => {
    ((t) => {
      ((n) => {
        class r {
          constructor() {
            this.bb = null;
            this.bb_pos = 0;
          }
          __init(a, u) {
            return this.bb_pos = a, this.bb = u, this;
          }
          static getRootAsSequenceType(a, u) {
            return (u || new r()).__init(a.readInt32(a.position()) + a.position(), a);
          }
          static getSizePrefixedRootAsSequenceType(a, u) {
            return a.setPosition(a.position() + T.SIZE_PREFIX_LENGTH), (u || new r()).__init(a.readInt32(a.position()) + a.position(), a);
          }
          elemType(a) {
            let u = this.bb.__offset(this.bb_pos, 4);
            return u ? (a || new e.experimental.fbs.TypeInfo()).__init(this.bb.__indirect(this.bb_pos + u), this.bb) : null;
          }
          static startSequenceType(a) {
            a.startObject(1);
          }
          static addElemType(a, u) {
            a.addFieldOffset(0, u, 0);
          }
          static endSequenceType(a) {
            return a.endObject();
          }
          static createSequenceType(a, u) {
            return r.startSequenceType(a), r.addElemType(a, u), r.endSequenceType(a);
          }
        }
        n.SequenceType = r;
      })(t.fbs || (t.fbs = {}));
    })(e.experimental || (e.experimental = {}));
  })(F || (F = {}));
  ((e) => {
    ((t) => {
      ((n) => {
        class r {
          constructor() {
            this.bb = null;
            this.bb_pos = 0;
          }
          __init(a, u) {
            return this.bb_pos = a, this.bb = u, this;
          }
          nodeIndex() {
            return this.bb.readUint32(this.bb_pos);
          }
          srcArgIndex() {
            return this.bb.readInt32(this.bb_pos + 4);
          }
          dstArgIndex() {
            return this.bb.readInt32(this.bb_pos + 8);
          }
          static createEdgeEnd(a, u, l, f) {
            return a.prep(4, 12), a.writeInt32(f), a.writeInt32(l), a.writeInt32(u), a.offset();
          }
        }
        n.EdgeEnd = r;
      })(t.fbs || (t.fbs = {}));
    })(e.experimental || (e.experimental = {}));
  })(F || (F = {}));
  ((e) => {
    ((t) => {
      ((n) => {
        class r {
          constructor() {
            this.bb = null;
            this.bb_pos = 0;
          }
          __init(a, u) {
            return this.bb_pos = a, this.bb = u, this;
          }
          static getRootAsNodeEdge(a, u) {
            return (u || new r()).__init(a.readInt32(a.position()) + a.position(), a);
          }
          static getSizePrefixedRootAsNodeEdge(a, u) {
            return a.setPosition(a.position() + T.SIZE_PREFIX_LENGTH), (u || new r()).__init(a.readInt32(a.position()) + a.position(), a);
          }
          nodeIndex() {
            let a = this.bb.__offset(this.bb_pos, 4);
            return a ? this.bb.readUint32(this.bb_pos + a) : 0;
          }
          inputEdges(a, u) {
            let l = this.bb.__offset(this.bb_pos, 6);
            return l ? (u || new e.experimental.fbs.EdgeEnd()).__init(this.bb.__vector(this.bb_pos + l) + a * 12, this.bb) : null;
          }
          inputEdgesLength() {
            let a = this.bb.__offset(this.bb_pos, 6);
            return a ? this.bb.__vector_len(this.bb_pos + a) : 0;
          }
          outputEdges(a, u) {
            let l = this.bb.__offset(this.bb_pos, 8);
            return l ? (u || new e.experimental.fbs.EdgeEnd()).__init(this.bb.__vector(this.bb_pos + l) + a * 12, this.bb) : null;
          }
          outputEdgesLength() {
            let a = this.bb.__offset(this.bb_pos, 8);
            return a ? this.bb.__vector_len(this.bb_pos + a) : 0;
          }
          static startNodeEdge(a) {
            a.startObject(3);
          }
          static addNodeIndex(a, u) {
            a.addFieldInt32(0, u, 0);
          }
          static addInputEdges(a, u) {
            a.addFieldOffset(1, u, 0);
          }
          static startInputEdgesVector(a, u) {
            a.startVector(12, u, 4);
          }
          static addOutputEdges(a, u) {
            a.addFieldOffset(2, u, 0);
          }
          static startOutputEdgesVector(a, u) {
            a.startVector(12, u, 4);
          }
          static endNodeEdge(a) {
            return a.endObject();
          }
          static createNodeEdge(a, u, l, f) {
            return r.startNodeEdge(a), r.addNodeIndex(a, u), r.addInputEdges(a, l), r.addOutputEdges(a, f), r.endNodeEdge(a);
          }
        }
        n.NodeEdge = r;
      })(t.fbs || (t.fbs = {}));
    })(e.experimental || (e.experimental = {}));
  })(F || (F = {}));
  ((e) => {
    ((t) => {
      ((n) => {
        class r {
          constructor() {
            this.bb = null;
            this.bb_pos = 0;
          }
          __init(a, u) {
            return this.bb_pos = a, this.bb = u, this;
          }
          static getRootAsNode(a, u) {
            return (u || new r()).__init(a.readInt32(a.position()) + a.position(), a);
          }
          static getSizePrefixedRootAsNode(a, u) {
            return a.setPosition(a.position() + T.SIZE_PREFIX_LENGTH), (u || new r()).__init(a.readInt32(a.position()) + a.position(), a);
          }
          name(a) {
            let u = this.bb.__offset(this.bb_pos, 4);
            return u ? this.bb.__string(this.bb_pos + u, a) : null;
          }
          docString(a) {
            let u = this.bb.__offset(this.bb_pos, 6);
            return u ? this.bb.__string(this.bb_pos + u, a) : null;
          }
          domain(a) {
            let u = this.bb.__offset(this.bb_pos, 8);
            return u ? this.bb.__string(this.bb_pos + u, a) : null;
          }
          sinceVersion() {
            let a = this.bb.__offset(this.bb_pos, 10);
            return a ? this.bb.readInt32(this.bb_pos + a) : 0;
          }
          index() {
            let a = this.bb.__offset(this.bb_pos, 12);
            return a ? this.bb.readUint32(this.bb_pos + a) : 0;
          }
          opType(a) {
            let u = this.bb.__offset(this.bb_pos, 14);
            return u ? this.bb.__string(this.bb_pos + u, a) : null;
          }
          type() {
            let a = this.bb.__offset(this.bb_pos, 16);
            return a ? this.bb.readInt32(this.bb_pos + a) : 0;
          }
          executionProviderType(a) {
            let u = this.bb.__offset(this.bb_pos, 18);
            return u ? this.bb.__string(this.bb_pos + u, a) : null;
          }
          inputs(a, u) {
            let l = this.bb.__offset(this.bb_pos, 20);
            return l ? this.bb.__string(this.bb.__vector(this.bb_pos + l) + a * 4, u) : null;
          }
          inputsLength() {
            let a = this.bb.__offset(this.bb_pos, 20);
            return a ? this.bb.__vector_len(this.bb_pos + a) : 0;
          }
          outputs(a, u) {
            let l = this.bb.__offset(this.bb_pos, 22);
            return l ? this.bb.__string(this.bb.__vector(this.bb_pos + l) + a * 4, u) : null;
          }
          outputsLength() {
            let a = this.bb.__offset(this.bb_pos, 22);
            return a ? this.bb.__vector_len(this.bb_pos + a) : 0;
          }
          attributes(a, u) {
            let l = this.bb.__offset(this.bb_pos, 24);
            return l ? (u || new e.experimental.fbs.Attribute()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + l) + a * 4), this.bb) : null;
          }
          attributesLength() {
            let a = this.bb.__offset(this.bb_pos, 24);
            return a ? this.bb.__vector_len(this.bb_pos + a) : 0;
          }
          inputArgCounts(a) {
            let u = this.bb.__offset(this.bb_pos, 26);
            return u ? this.bb.readInt32(this.bb.__vector(this.bb_pos + u) + a * 4) : 0;
          }
          inputArgCountsLength() {
            let a = this.bb.__offset(this.bb_pos, 26);
            return a ? this.bb.__vector_len(this.bb_pos + a) : 0;
          }
          inputArgCountsArray() {
            let a = this.bb.__offset(this.bb_pos, 26);
            return a ? new Int32Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + a), this.bb.__vector_len(this.bb_pos + a)) : null;
          }
          implicitInputs(a, u) {
            let l = this.bb.__offset(this.bb_pos, 28);
            return l ? this.bb.__string(this.bb.__vector(this.bb_pos + l) + a * 4, u) : null;
          }
          implicitInputsLength() {
            let a = this.bb.__offset(this.bb_pos, 28);
            return a ? this.bb.__vector_len(this.bb_pos + a) : 0;
          }
          static startNode(a) {
            a.startObject(13);
          }
          static addName(a, u) {
            a.addFieldOffset(0, u, 0);
          }
          static addDocString(a, u) {
            a.addFieldOffset(1, u, 0);
          }
          static addDomain(a, u) {
            a.addFieldOffset(2, u, 0);
          }
          static addSinceVersion(a, u) {
            a.addFieldInt32(3, u, 0);
          }
          static addIndex(a, u) {
            a.addFieldInt32(4, u, 0);
          }
          static addOpType(a, u) {
            a.addFieldOffset(5, u, 0);
          }
          static addType(a, u) {
            a.addFieldInt32(6, u, 0);
          }
          static addExecutionProviderType(a, u) {
            a.addFieldOffset(7, u, 0);
          }
          static addInputs(a, u) {
            a.addFieldOffset(8, u, 0);
          }
          static createInputsVector(a, u) {
            a.startVector(4, u.length, 4);
            for (let l = u.length - 1; l >= 0; l--) a.addOffset(u[l]);
            return a.endVector();
          }
          static startInputsVector(a, u) {
            a.startVector(4, u, 4);
          }
          static addOutputs(a, u) {
            a.addFieldOffset(9, u, 0);
          }
          static createOutputsVector(a, u) {
            a.startVector(4, u.length, 4);
            for (let l = u.length - 1; l >= 0; l--) a.addOffset(u[l]);
            return a.endVector();
          }
          static startOutputsVector(a, u) {
            a.startVector(4, u, 4);
          }
          static addAttributes(a, u) {
            a.addFieldOffset(10, u, 0);
          }
          static createAttributesVector(a, u) {
            a.startVector(4, u.length, 4);
            for (let l = u.length - 1; l >= 0; l--) a.addOffset(u[l]);
            return a.endVector();
          }
          static startAttributesVector(a, u) {
            a.startVector(4, u, 4);
          }
          static addInputArgCounts(a, u) {
            a.addFieldOffset(11, u, 0);
          }
          static createInputArgCountsVector(a, u) {
            a.startVector(4, u.length, 4);
            for (let l = u.length - 1; l >= 0; l--) a.addInt32(u[l]);
            return a.endVector();
          }
          static startInputArgCountsVector(a, u) {
            a.startVector(4, u, 4);
          }
          static addImplicitInputs(a, u) {
            a.addFieldOffset(12, u, 0);
          }
          static createImplicitInputsVector(a, u) {
            a.startVector(4, u.length, 4);
            for (let l = u.length - 1; l >= 0; l--) a.addOffset(u[l]);
            return a.endVector();
          }
          static startImplicitInputsVector(a, u) {
            a.startVector(4, u, 4);
          }
          static endNode(a) {
            return a.endObject();
          }
          static createNode(a, u, l, f, p2, d, y, w, v, S, L, A, P, M) {
            return r.startNode(a), r.addName(a, u), r.addDocString(a, l), r.addDomain(a, f), r.addSinceVersion(a, p2), r.addIndex(a, d), r.addOpType(a, y), r.addType(a, w), r.addExecutionProviderType(a, v), r.addInputs(a, S), r.addOutputs(a, L), r.addAttributes(a, A), r.addInputArgCounts(a, P), r.addImplicitInputs(a, M), r.endNode(a);
          }
        }
        n.Node = r;
      })(t.fbs || (t.fbs = {}));
    })(e.experimental || (e.experimental = {}));
  })(F || (F = {}));
  ((e) => {
    ((t) => {
      ((n) => {
        class r {
          constructor() {
            this.bb = null;
            this.bb_pos = 0;
          }
          __init(a, u) {
            return this.bb_pos = a, this.bb = u, this;
          }
          static getRootAsValueInfo(a, u) {
            return (u || new r()).__init(a.readInt32(a.position()) + a.position(), a);
          }
          static getSizePrefixedRootAsValueInfo(a, u) {
            return a.setPosition(a.position() + T.SIZE_PREFIX_LENGTH), (u || new r()).__init(a.readInt32(a.position()) + a.position(), a);
          }
          name(a) {
            let u = this.bb.__offset(this.bb_pos, 4);
            return u ? this.bb.__string(this.bb_pos + u, a) : null;
          }
          docString(a) {
            let u = this.bb.__offset(this.bb_pos, 6);
            return u ? this.bb.__string(this.bb_pos + u, a) : null;
          }
          type(a) {
            let u = this.bb.__offset(this.bb_pos, 8);
            return u ? (a || new e.experimental.fbs.TypeInfo()).__init(this.bb.__indirect(this.bb_pos + u), this.bb) : null;
          }
          static startValueInfo(a) {
            a.startObject(3);
          }
          static addName(a, u) {
            a.addFieldOffset(0, u, 0);
          }
          static addDocString(a, u) {
            a.addFieldOffset(1, u, 0);
          }
          static addType(a, u) {
            a.addFieldOffset(2, u, 0);
          }
          static endValueInfo(a) {
            return a.endObject();
          }
          static createValueInfo(a, u, l, f) {
            return r.startValueInfo(a), r.addName(a, u), r.addDocString(a, l), r.addType(a, f), r.endValueInfo(a);
          }
        }
        n.ValueInfo = r;
      })(t.fbs || (t.fbs = {}));
    })(e.experimental || (e.experimental = {}));
  })(F || (F = {}));
  ((e) => {
    ((t) => {
      ((n) => {
        class r {
          constructor() {
            this.bb = null;
            this.bb_pos = 0;
          }
          __init(a, u) {
            return this.bb_pos = a, this.bb = u, this;
          }
          static getRootAsTypeInfo(a, u) {
            return (u || new r()).__init(a.readInt32(a.position()) + a.position(), a);
          }
          static getSizePrefixedRootAsTypeInfo(a, u) {
            return a.setPosition(a.position() + T.SIZE_PREFIX_LENGTH), (u || new r()).__init(a.readInt32(a.position()) + a.position(), a);
          }
          denotation(a) {
            let u = this.bb.__offset(this.bb_pos, 4);
            return u ? this.bb.__string(this.bb_pos + u, a) : null;
          }
          valueType() {
            let a = this.bb.__offset(this.bb_pos, 6);
            return a ? this.bb.readUint8(this.bb_pos + a) : 0;
          }
          value(a) {
            let u = this.bb.__offset(this.bb_pos, 8);
            return u ? this.bb.__union(a, this.bb_pos + u) : null;
          }
          static startTypeInfo(a) {
            a.startObject(3);
          }
          static addDenotation(a, u) {
            a.addFieldOffset(0, u, 0);
          }
          static addValueType(a, u) {
            a.addFieldInt8(1, u, 0);
          }
          static addValue(a, u) {
            a.addFieldOffset(2, u, 0);
          }
          static endTypeInfo(a) {
            return a.endObject();
          }
          static createTypeInfo(a, u, l, f) {
            return r.startTypeInfo(a), r.addDenotation(a, u), r.addValueType(a, l), r.addValue(a, f), r.endTypeInfo(a);
          }
        }
        n.TypeInfo = r;
      })(t.fbs || (t.fbs = {}));
    })(e.experimental || (e.experimental = {}));
  })(F || (F = {}));
  ((e) => {
    ((t) => {
      ((n) => {
        class r {
          constructor() {
            this.bb = null;
            this.bb_pos = 0;
          }
          __init(a, u) {
            return this.bb_pos = a, this.bb = u, this;
          }
          static getRootAsOperatorSetId(a, u) {
            return (u || new r()).__init(a.readInt32(a.position()) + a.position(), a);
          }
          static getSizePrefixedRootAsOperatorSetId(a, u) {
            return a.setPosition(a.position() + T.SIZE_PREFIX_LENGTH), (u || new r()).__init(a.readInt32(a.position()) + a.position(), a);
          }
          domain(a) {
            let u = this.bb.__offset(this.bb_pos, 4);
            return u ? this.bb.__string(this.bb_pos + u, a) : null;
          }
          version() {
            let a = this.bb.__offset(this.bb_pos, 6);
            return a ? this.bb.readInt64(this.bb_pos + a) : this.bb.createLong(0, 0);
          }
          static startOperatorSetId(a) {
            a.startObject(2);
          }
          static addDomain(a, u) {
            a.addFieldOffset(0, u, 0);
          }
          static addVersion(a, u) {
            a.addFieldInt64(1, u, a.createLong(0, 0));
          }
          static endOperatorSetId(a) {
            return a.endObject();
          }
          static createOperatorSetId(a, u, l) {
            return r.startOperatorSetId(a), r.addDomain(a, u), r.addVersion(a, l), r.endOperatorSetId(a);
          }
        }
        n.OperatorSetId = r;
      })(t.fbs || (t.fbs = {}));
    })(e.experimental || (e.experimental = {}));
  })(F || (F = {}));
  ((e) => {
    ((t) => {
      ((n) => {
        class r {
          constructor() {
            this.bb = null;
            this.bb_pos = 0;
          }
          __init(a, u) {
            return this.bb_pos = a, this.bb = u, this;
          }
          static getRootAsTensor(a, u) {
            return (u || new r()).__init(a.readInt32(a.position()) + a.position(), a);
          }
          static getSizePrefixedRootAsTensor(a, u) {
            return a.setPosition(a.position() + T.SIZE_PREFIX_LENGTH), (u || new r()).__init(a.readInt32(a.position()) + a.position(), a);
          }
          name(a) {
            let u = this.bb.__offset(this.bb_pos, 4);
            return u ? this.bb.__string(this.bb_pos + u, a) : null;
          }
          docString(a) {
            let u = this.bb.__offset(this.bb_pos, 6);
            return u ? this.bb.__string(this.bb_pos + u, a) : null;
          }
          dims(a) {
            let u = this.bb.__offset(this.bb_pos, 8);
            return u ? this.bb.readInt64(this.bb.__vector(this.bb_pos + u) + a * 8) : this.bb.createLong(0, 0);
          }
          dimsLength() {
            let a = this.bb.__offset(this.bb_pos, 8);
            return a ? this.bb.__vector_len(this.bb_pos + a) : 0;
          }
          dataType() {
            let a = this.bb.__offset(this.bb_pos, 10);
            return a ? this.bb.readInt32(this.bb_pos + a) : 0;
          }
          rawData(a) {
            let u = this.bb.__offset(this.bb_pos, 12);
            return u ? this.bb.readUint8(this.bb.__vector(this.bb_pos + u) + a) : 0;
          }
          rawDataLength() {
            let a = this.bb.__offset(this.bb_pos, 12);
            return a ? this.bb.__vector_len(this.bb_pos + a) : 0;
          }
          rawDataArray() {
            let a = this.bb.__offset(this.bb_pos, 12);
            return a ? new Uint8Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + a), this.bb.__vector_len(this.bb_pos + a)) : null;
          }
          stringData(a, u) {
            let l = this.bb.__offset(this.bb_pos, 14);
            return l ? this.bb.__string(this.bb.__vector(this.bb_pos + l) + a * 4, u) : null;
          }
          stringDataLength() {
            let a = this.bb.__offset(this.bb_pos, 14);
            return a ? this.bb.__vector_len(this.bb_pos + a) : 0;
          }
          static startTensor(a) {
            a.startObject(6);
          }
          static addName(a, u) {
            a.addFieldOffset(0, u, 0);
          }
          static addDocString(a, u) {
            a.addFieldOffset(1, u, 0);
          }
          static addDims(a, u) {
            a.addFieldOffset(2, u, 0);
          }
          static createDimsVector(a, u) {
            a.startVector(8, u.length, 8);
            for (let l = u.length - 1; l >= 0; l--) a.addInt64(u[l]);
            return a.endVector();
          }
          static startDimsVector(a, u) {
            a.startVector(8, u, 8);
          }
          static addDataType(a, u) {
            a.addFieldInt32(3, u, 0);
          }
          static addRawData(a, u) {
            a.addFieldOffset(4, u, 0);
          }
          static createRawDataVector(a, u) {
            a.startVector(1, u.length, 1);
            for (let l = u.length - 1; l >= 0; l--) a.addInt8(u[l]);
            return a.endVector();
          }
          static startRawDataVector(a, u) {
            a.startVector(1, u, 1);
          }
          static addStringData(a, u) {
            a.addFieldOffset(5, u, 0);
          }
          static createStringDataVector(a, u) {
            a.startVector(4, u.length, 4);
            for (let l = u.length - 1; l >= 0; l--) a.addOffset(u[l]);
            return a.endVector();
          }
          static startStringDataVector(a, u) {
            a.startVector(4, u, 4);
          }
          static endTensor(a) {
            return a.endObject();
          }
          static createTensor(a, u, l, f, p2, d, y) {
            return r.startTensor(a), r.addName(a, u), r.addDocString(a, l), r.addDims(a, f), r.addDataType(a, p2), r.addRawData(a, d), r.addStringData(a, y), r.endTensor(a);
          }
        }
        n.Tensor = r;
      })(t.fbs || (t.fbs = {}));
    })(e.experimental || (e.experimental = {}));
  })(F || (F = {}));
  ((e) => {
    ((t) => {
      ((n) => {
        class r {
          constructor() {
            this.bb = null;
            this.bb_pos = 0;
          }
          __init(a, u) {
            return this.bb_pos = a, this.bb = u, this;
          }
          static getRootAsSparseTensor(a, u) {
            return (u || new r()).__init(a.readInt32(a.position()) + a.position(), a);
          }
          static getSizePrefixedRootAsSparseTensor(a, u) {
            return a.setPosition(a.position() + T.SIZE_PREFIX_LENGTH), (u || new r()).__init(a.readInt32(a.position()) + a.position(), a);
          }
          values(a) {
            let u = this.bb.__offset(this.bb_pos, 4);
            return u ? (a || new e.experimental.fbs.Tensor()).__init(this.bb.__indirect(this.bb_pos + u), this.bb) : null;
          }
          indices(a) {
            let u = this.bb.__offset(this.bb_pos, 6);
            return u ? (a || new e.experimental.fbs.Tensor()).__init(this.bb.__indirect(this.bb_pos + u), this.bb) : null;
          }
          dims(a) {
            let u = this.bb.__offset(this.bb_pos, 8);
            return u ? this.bb.readInt64(this.bb.__vector(this.bb_pos + u) + a * 8) : this.bb.createLong(0, 0);
          }
          dimsLength() {
            let a = this.bb.__offset(this.bb_pos, 8);
            return a ? this.bb.__vector_len(this.bb_pos + a) : 0;
          }
          static startSparseTensor(a) {
            a.startObject(3);
          }
          static addValues(a, u) {
            a.addFieldOffset(0, u, 0);
          }
          static addIndices(a, u) {
            a.addFieldOffset(1, u, 0);
          }
          static addDims(a, u) {
            a.addFieldOffset(2, u, 0);
          }
          static createDimsVector(a, u) {
            a.startVector(8, u.length, 8);
            for (let l = u.length - 1; l >= 0; l--) a.addInt64(u[l]);
            return a.endVector();
          }
          static startDimsVector(a, u) {
            a.startVector(8, u, 8);
          }
          static endSparseTensor(a) {
            return a.endObject();
          }
          static createSparseTensor(a, u, l, f) {
            return r.startSparseTensor(a), r.addValues(a, u), r.addIndices(a, l), r.addDims(a, f), r.endSparseTensor(a);
          }
        }
        n.SparseTensor = r;
      })(t.fbs || (t.fbs = {}));
    })(e.experimental || (e.experimental = {}));
  })(F || (F = {}));
  ((e) => {
    ((t) => {
      ((n) => {
        class r {
          constructor() {
            this.bb = null;
            this.bb_pos = 0;
          }
          __init(a, u) {
            return this.bb_pos = a, this.bb = u, this;
          }
          static getRootAsAttribute(a, u) {
            return (u || new r()).__init(a.readInt32(a.position()) + a.position(), a);
          }
          static getSizePrefixedRootAsAttribute(a, u) {
            return a.setPosition(a.position() + T.SIZE_PREFIX_LENGTH), (u || new r()).__init(a.readInt32(a.position()) + a.position(), a);
          }
          name(a) {
            let u = this.bb.__offset(this.bb_pos, 4);
            return u ? this.bb.__string(this.bb_pos + u, a) : null;
          }
          docString(a) {
            let u = this.bb.__offset(this.bb_pos, 6);
            return u ? this.bb.__string(this.bb_pos + u, a) : null;
          }
          type() {
            let a = this.bb.__offset(this.bb_pos, 8);
            return a ? this.bb.readInt32(this.bb_pos + a) : 0;
          }
          f() {
            let a = this.bb.__offset(this.bb_pos, 10);
            return a ? this.bb.readFloat32(this.bb_pos + a) : 0;
          }
          i() {
            let a = this.bb.__offset(this.bb_pos, 12);
            return a ? this.bb.readInt64(this.bb_pos + a) : this.bb.createLong(0, 0);
          }
          s(a) {
            let u = this.bb.__offset(this.bb_pos, 14);
            return u ? this.bb.__string(this.bb_pos + u, a) : null;
          }
          t(a) {
            let u = this.bb.__offset(this.bb_pos, 16);
            return u ? (a || new e.experimental.fbs.Tensor()).__init(this.bb.__indirect(this.bb_pos + u), this.bb) : null;
          }
          g(a) {
            let u = this.bb.__offset(this.bb_pos, 18);
            return u ? (a || new e.experimental.fbs.Graph()).__init(this.bb.__indirect(this.bb_pos + u), this.bb) : null;
          }
          floats(a) {
            let u = this.bb.__offset(this.bb_pos, 20);
            return u ? this.bb.readFloat32(this.bb.__vector(this.bb_pos + u) + a * 4) : 0;
          }
          floatsLength() {
            let a = this.bb.__offset(this.bb_pos, 20);
            return a ? this.bb.__vector_len(this.bb_pos + a) : 0;
          }
          floatsArray() {
            let a = this.bb.__offset(this.bb_pos, 20);
            return a ? new Float32Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + a), this.bb.__vector_len(this.bb_pos + a)) : null;
          }
          ints(a) {
            let u = this.bb.__offset(this.bb_pos, 22);
            return u ? this.bb.readInt64(this.bb.__vector(this.bb_pos + u) + a * 8) : this.bb.createLong(0, 0);
          }
          intsLength() {
            let a = this.bb.__offset(this.bb_pos, 22);
            return a ? this.bb.__vector_len(this.bb_pos + a) : 0;
          }
          strings(a, u) {
            let l = this.bb.__offset(this.bb_pos, 24);
            return l ? this.bb.__string(this.bb.__vector(this.bb_pos + l) + a * 4, u) : null;
          }
          stringsLength() {
            let a = this.bb.__offset(this.bb_pos, 24);
            return a ? this.bb.__vector_len(this.bb_pos + a) : 0;
          }
          tensors(a, u) {
            let l = this.bb.__offset(this.bb_pos, 26);
            return l ? (u || new e.experimental.fbs.Tensor()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + l) + a * 4), this.bb) : null;
          }
          tensorsLength() {
            let a = this.bb.__offset(this.bb_pos, 26);
            return a ? this.bb.__vector_len(this.bb_pos + a) : 0;
          }
          graphs(a, u) {
            let l = this.bb.__offset(this.bb_pos, 28);
            return l ? (u || new e.experimental.fbs.Graph()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + l) + a * 4), this.bb) : null;
          }
          graphsLength() {
            let a = this.bb.__offset(this.bb_pos, 28);
            return a ? this.bb.__vector_len(this.bb_pos + a) : 0;
          }
          static startAttribute(a) {
            a.startObject(13);
          }
          static addName(a, u) {
            a.addFieldOffset(0, u, 0);
          }
          static addDocString(a, u) {
            a.addFieldOffset(1, u, 0);
          }
          static addType(a, u) {
            a.addFieldInt32(2, u, 0);
          }
          static addF(a, u) {
            a.addFieldFloat32(3, u, 0);
          }
          static addI(a, u) {
            a.addFieldInt64(4, u, a.createLong(0, 0));
          }
          static addS(a, u) {
            a.addFieldOffset(5, u, 0);
          }
          static addT(a, u) {
            a.addFieldOffset(6, u, 0);
          }
          static addG(a, u) {
            a.addFieldOffset(7, u, 0);
          }
          static addFloats(a, u) {
            a.addFieldOffset(8, u, 0);
          }
          static createFloatsVector(a, u) {
            a.startVector(4, u.length, 4);
            for (let l = u.length - 1; l >= 0; l--) a.addFloat32(u[l]);
            return a.endVector();
          }
          static startFloatsVector(a, u) {
            a.startVector(4, u, 4);
          }
          static addInts(a, u) {
            a.addFieldOffset(9, u, 0);
          }
          static createIntsVector(a, u) {
            a.startVector(8, u.length, 8);
            for (let l = u.length - 1; l >= 0; l--) a.addInt64(u[l]);
            return a.endVector();
          }
          static startIntsVector(a, u) {
            a.startVector(8, u, 8);
          }
          static addStrings(a, u) {
            a.addFieldOffset(10, u, 0);
          }
          static createStringsVector(a, u) {
            a.startVector(4, u.length, 4);
            for (let l = u.length - 1; l >= 0; l--) a.addOffset(u[l]);
            return a.endVector();
          }
          static startStringsVector(a, u) {
            a.startVector(4, u, 4);
          }
          static addTensors(a, u) {
            a.addFieldOffset(11, u, 0);
          }
          static createTensorsVector(a, u) {
            a.startVector(4, u.length, 4);
            for (let l = u.length - 1; l >= 0; l--) a.addOffset(u[l]);
            return a.endVector();
          }
          static startTensorsVector(a, u) {
            a.startVector(4, u, 4);
          }
          static addGraphs(a, u) {
            a.addFieldOffset(12, u, 0);
          }
          static createGraphsVector(a, u) {
            a.startVector(4, u.length, 4);
            for (let l = u.length - 1; l >= 0; l--) a.addOffset(u[l]);
            return a.endVector();
          }
          static startGraphsVector(a, u) {
            a.startVector(4, u, 4);
          }
          static endAttribute(a) {
            return a.endObject();
          }
          static createAttribute(a, u, l, f, p2, d, y, w, v, S, L, A, P, M) {
            return r.startAttribute(a), r.addName(a, u), r.addDocString(a, l), r.addType(a, f), r.addF(a, p2), r.addI(a, d), r.addS(a, y), r.addT(a, w), r.addG(a, v), r.addFloats(a, S), r.addInts(a, L), r.addStrings(a, A), r.addTensors(a, P), r.addGraphs(a, M), r.endAttribute(a);
          }
        }
        n.Attribute = r;
      })(t.fbs || (t.fbs = {}));
    })(e.experimental || (e.experimental = {}));
  })(F || (F = {}));
  ((e) => {
    ((t) => {
      ((n) => {
        class r {
          constructor() {
            this.bb = null;
            this.bb_pos = 0;
          }
          __init(a, u) {
            return this.bb_pos = a, this.bb = u, this;
          }
          static getRootAsGraph(a, u) {
            return (u || new r()).__init(a.readInt32(a.position()) + a.position(), a);
          }
          static getSizePrefixedRootAsGraph(a, u) {
            return a.setPosition(a.position() + T.SIZE_PREFIX_LENGTH), (u || new r()).__init(a.readInt32(a.position()) + a.position(), a);
          }
          initializers(a, u) {
            let l = this.bb.__offset(this.bb_pos, 4);
            return l ? (u || new e.experimental.fbs.Tensor()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + l) + a * 4), this.bb) : null;
          }
          initializersLength() {
            let a = this.bb.__offset(this.bb_pos, 4);
            return a ? this.bb.__vector_len(this.bb_pos + a) : 0;
          }
          nodeArgs(a, u) {
            let l = this.bb.__offset(this.bb_pos, 6);
            return l ? (u || new e.experimental.fbs.ValueInfo()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + l) + a * 4), this.bb) : null;
          }
          nodeArgsLength() {
            let a = this.bb.__offset(this.bb_pos, 6);
            return a ? this.bb.__vector_len(this.bb_pos + a) : 0;
          }
          nodes(a, u) {
            let l = this.bb.__offset(this.bb_pos, 8);
            return l ? (u || new e.experimental.fbs.Node()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + l) + a * 4), this.bb) : null;
          }
          nodesLength() {
            let a = this.bb.__offset(this.bb_pos, 8);
            return a ? this.bb.__vector_len(this.bb_pos + a) : 0;
          }
          maxNodeIndex() {
            let a = this.bb.__offset(this.bb_pos, 10);
            return a ? this.bb.readUint32(this.bb_pos + a) : 0;
          }
          nodeEdges(a, u) {
            let l = this.bb.__offset(this.bb_pos, 12);
            return l ? (u || new e.experimental.fbs.NodeEdge()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + l) + a * 4), this.bb) : null;
          }
          nodeEdgesLength() {
            let a = this.bb.__offset(this.bb_pos, 12);
            return a ? this.bb.__vector_len(this.bb_pos + a) : 0;
          }
          inputs(a, u) {
            let l = this.bb.__offset(this.bb_pos, 14);
            return l ? this.bb.__string(this.bb.__vector(this.bb_pos + l) + a * 4, u) : null;
          }
          inputsLength() {
            let a = this.bb.__offset(this.bb_pos, 14);
            return a ? this.bb.__vector_len(this.bb_pos + a) : 0;
          }
          outputs(a, u) {
            let l = this.bb.__offset(this.bb_pos, 16);
            return l ? this.bb.__string(this.bb.__vector(this.bb_pos + l) + a * 4, u) : null;
          }
          outputsLength() {
            let a = this.bb.__offset(this.bb_pos, 16);
            return a ? this.bb.__vector_len(this.bb_pos + a) : 0;
          }
          sparseInitializers(a, u) {
            let l = this.bb.__offset(this.bb_pos, 18);
            return l ? (u || new e.experimental.fbs.SparseTensor()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + l) + a * 4), this.bb) : null;
          }
          sparseInitializersLength() {
            let a = this.bb.__offset(this.bb_pos, 18);
            return a ? this.bb.__vector_len(this.bb_pos + a) : 0;
          }
          static startGraph(a) {
            a.startObject(8);
          }
          static addInitializers(a, u) {
            a.addFieldOffset(0, u, 0);
          }
          static createInitializersVector(a, u) {
            a.startVector(4, u.length, 4);
            for (let l = u.length - 1; l >= 0; l--) a.addOffset(u[l]);
            return a.endVector();
          }
          static startInitializersVector(a, u) {
            a.startVector(4, u, 4);
          }
          static addNodeArgs(a, u) {
            a.addFieldOffset(1, u, 0);
          }
          static createNodeArgsVector(a, u) {
            a.startVector(4, u.length, 4);
            for (let l = u.length - 1; l >= 0; l--) a.addOffset(u[l]);
            return a.endVector();
          }
          static startNodeArgsVector(a, u) {
            a.startVector(4, u, 4);
          }
          static addNodes(a, u) {
            a.addFieldOffset(2, u, 0);
          }
          static createNodesVector(a, u) {
            a.startVector(4, u.length, 4);
            for (let l = u.length - 1; l >= 0; l--) a.addOffset(u[l]);
            return a.endVector();
          }
          static startNodesVector(a, u) {
            a.startVector(4, u, 4);
          }
          static addMaxNodeIndex(a, u) {
            a.addFieldInt32(3, u, 0);
          }
          static addNodeEdges(a, u) {
            a.addFieldOffset(4, u, 0);
          }
          static createNodeEdgesVector(a, u) {
            a.startVector(4, u.length, 4);
            for (let l = u.length - 1; l >= 0; l--) a.addOffset(u[l]);
            return a.endVector();
          }
          static startNodeEdgesVector(a, u) {
            a.startVector(4, u, 4);
          }
          static addInputs(a, u) {
            a.addFieldOffset(5, u, 0);
          }
          static createInputsVector(a, u) {
            a.startVector(4, u.length, 4);
            for (let l = u.length - 1; l >= 0; l--) a.addOffset(u[l]);
            return a.endVector();
          }
          static startInputsVector(a, u) {
            a.startVector(4, u, 4);
          }
          static addOutputs(a, u) {
            a.addFieldOffset(6, u, 0);
          }
          static createOutputsVector(a, u) {
            a.startVector(4, u.length, 4);
            for (let l = u.length - 1; l >= 0; l--) a.addOffset(u[l]);
            return a.endVector();
          }
          static startOutputsVector(a, u) {
            a.startVector(4, u, 4);
          }
          static addSparseInitializers(a, u) {
            a.addFieldOffset(7, u, 0);
          }
          static createSparseInitializersVector(a, u) {
            a.startVector(4, u.length, 4);
            for (let l = u.length - 1; l >= 0; l--) a.addOffset(u[l]);
            return a.endVector();
          }
          static startSparseInitializersVector(a, u) {
            a.startVector(4, u, 4);
          }
          static endGraph(a) {
            return a.endObject();
          }
          static createGraph(a, u, l, f, p2, d, y, w, v) {
            return r.startGraph(a), r.addInitializers(a, u), r.addNodeArgs(a, l), r.addNodes(a, f), r.addMaxNodeIndex(a, p2), r.addNodeEdges(a, d), r.addInputs(a, y), r.addOutputs(a, w), r.addSparseInitializers(a, v), r.endGraph(a);
          }
        }
        n.Graph = r;
      })(t.fbs || (t.fbs = {}));
    })(e.experimental || (e.experimental = {}));
  })(F || (F = {}));
  ((e) => {
    ((t) => {
      ((n) => {
        class r {
          constructor() {
            this.bb = null;
            this.bb_pos = 0;
          }
          __init(a, u) {
            return this.bb_pos = a, this.bb = u, this;
          }
          static getRootAsModel(a, u) {
            return (u || new r()).__init(a.readInt32(a.position()) + a.position(), a);
          }
          static getSizePrefixedRootAsModel(a, u) {
            return a.setPosition(a.position() + T.SIZE_PREFIX_LENGTH), (u || new r()).__init(a.readInt32(a.position()) + a.position(), a);
          }
          irVersion() {
            let a = this.bb.__offset(this.bb_pos, 4);
            return a ? this.bb.readInt64(this.bb_pos + a) : this.bb.createLong(0, 0);
          }
          opsetImport(a, u) {
            let l = this.bb.__offset(this.bb_pos, 6);
            return l ? (u || new e.experimental.fbs.OperatorSetId()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + l) + a * 4), this.bb) : null;
          }
          opsetImportLength() {
            let a = this.bb.__offset(this.bb_pos, 6);
            return a ? this.bb.__vector_len(this.bb_pos + a) : 0;
          }
          producerName(a) {
            let u = this.bb.__offset(this.bb_pos, 8);
            return u ? this.bb.__string(this.bb_pos + u, a) : null;
          }
          producerVersion(a) {
            let u = this.bb.__offset(this.bb_pos, 10);
            return u ? this.bb.__string(this.bb_pos + u, a) : null;
          }
          domain(a) {
            let u = this.bb.__offset(this.bb_pos, 12);
            return u ? this.bb.__string(this.bb_pos + u, a) : null;
          }
          modelVersion() {
            let a = this.bb.__offset(this.bb_pos, 14);
            return a ? this.bb.readInt64(this.bb_pos + a) : this.bb.createLong(0, 0);
          }
          docString(a) {
            let u = this.bb.__offset(this.bb_pos, 16);
            return u ? this.bb.__string(this.bb_pos + u, a) : null;
          }
          graph(a) {
            let u = this.bb.__offset(this.bb_pos, 18);
            return u ? (a || new e.experimental.fbs.Graph()).__init(this.bb.__indirect(this.bb_pos + u), this.bb) : null;
          }
          graphDocString(a) {
            let u = this.bb.__offset(this.bb_pos, 20);
            return u ? this.bb.__string(this.bb_pos + u, a) : null;
          }
          static startModel(a) {
            a.startObject(9);
          }
          static addIrVersion(a, u) {
            a.addFieldInt64(0, u, a.createLong(0, 0));
          }
          static addOpsetImport(a, u) {
            a.addFieldOffset(1, u, 0);
          }
          static createOpsetImportVector(a, u) {
            a.startVector(4, u.length, 4);
            for (let l = u.length - 1; l >= 0; l--) a.addOffset(u[l]);
            return a.endVector();
          }
          static startOpsetImportVector(a, u) {
            a.startVector(4, u, 4);
          }
          static addProducerName(a, u) {
            a.addFieldOffset(2, u, 0);
          }
          static addProducerVersion(a, u) {
            a.addFieldOffset(3, u, 0);
          }
          static addDomain(a, u) {
            a.addFieldOffset(4, u, 0);
          }
          static addModelVersion(a, u) {
            a.addFieldInt64(5, u, a.createLong(0, 0));
          }
          static addDocString(a, u) {
            a.addFieldOffset(6, u, 0);
          }
          static addGraph(a, u) {
            a.addFieldOffset(7, u, 0);
          }
          static addGraphDocString(a, u) {
            a.addFieldOffset(8, u, 0);
          }
          static endModel(a) {
            return a.endObject();
          }
          static createModel(a, u, l, f, p2, d, y, w, v, S) {
            return r.startModel(a), r.addIrVersion(a, u), r.addOpsetImport(a, l), r.addProducerName(a, f), r.addProducerVersion(a, p2), r.addDomain(a, d), r.addModelVersion(a, y), r.addDocString(a, w), r.addGraph(a, v), r.addGraphDocString(a, S), r.endModel(a);
          }
        }
        n.Model = r;
      })(t.fbs || (t.fbs = {}));
    })(e.experimental || (e.experimental = {}));
  })(F || (F = {}));
  ((e) => {
    ((t) => {
      ((n) => {
        class r {
          constructor() {
            this.bb = null;
            this.bb_pos = 0;
          }
          __init(a, u) {
            return this.bb_pos = a, this.bb = u, this;
          }
          static getRootAsKernelCreateInfos(a, u) {
            return (u || new r()).__init(a.readInt32(a.position()) + a.position(), a);
          }
          static getSizePrefixedRootAsKernelCreateInfos(a, u) {
            return a.setPosition(a.position() + T.SIZE_PREFIX_LENGTH), (u || new r()).__init(a.readInt32(a.position()) + a.position(), a);
          }
          nodeIndices(a) {
            let u = this.bb.__offset(this.bb_pos, 4);
            return u ? this.bb.readUint32(this.bb.__vector(this.bb_pos + u) + a * 4) : 0;
          }
          nodeIndicesLength() {
            let a = this.bb.__offset(this.bb_pos, 4);
            return a ? this.bb.__vector_len(this.bb_pos + a) : 0;
          }
          nodeIndicesArray() {
            let a = this.bb.__offset(this.bb_pos, 4);
            return a ? new Uint32Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + a), this.bb.__vector_len(this.bb_pos + a)) : null;
          }
          kernelDefHashes(a) {
            let u = this.bb.__offset(this.bb_pos, 6);
            return u ? this.bb.readUint64(this.bb.__vector(this.bb_pos + u) + a * 8) : this.bb.createLong(0, 0);
          }
          kernelDefHashesLength() {
            let a = this.bb.__offset(this.bb_pos, 6);
            return a ? this.bb.__vector_len(this.bb_pos + a) : 0;
          }
          static startKernelCreateInfos(a) {
            a.startObject(2);
          }
          static addNodeIndices(a, u) {
            a.addFieldOffset(0, u, 0);
          }
          static createNodeIndicesVector(a, u) {
            a.startVector(4, u.length, 4);
            for (let l = u.length - 1; l >= 0; l--) a.addInt32(u[l]);
            return a.endVector();
          }
          static startNodeIndicesVector(a, u) {
            a.startVector(4, u, 4);
          }
          static addKernelDefHashes(a, u) {
            a.addFieldOffset(1, u, 0);
          }
          static createKernelDefHashesVector(a, u) {
            a.startVector(8, u.length, 8);
            for (let l = u.length - 1; l >= 0; l--) a.addInt64(u[l]);
            return a.endVector();
          }
          static startKernelDefHashesVector(a, u) {
            a.startVector(8, u, 8);
          }
          static endKernelCreateInfos(a) {
            return a.endObject();
          }
          static createKernelCreateInfos(a, u, l) {
            return r.startKernelCreateInfos(a), r.addNodeIndices(a, u), r.addKernelDefHashes(a, l), r.endKernelCreateInfos(a);
          }
        }
        n.KernelCreateInfos = r;
      })(t.fbs || (t.fbs = {}));
    })(e.experimental || (e.experimental = {}));
  })(F || (F = {}));
  ((e) => {
    ((t) => {
      ((n) => {
        class r {
          constructor() {
            this.bb = null;
            this.bb_pos = 0;
          }
          __init(a, u) {
            return this.bb_pos = a, this.bb = u, this;
          }
          static getRootAsSubGraphSessionState(a, u) {
            return (u || new r()).__init(a.readInt32(a.position()) + a.position(), a);
          }
          static getSizePrefixedRootAsSubGraphSessionState(a, u) {
            return a.setPosition(a.position() + T.SIZE_PREFIX_LENGTH), (u || new r()).__init(a.readInt32(a.position()) + a.position(), a);
          }
          graphId(a) {
            let u = this.bb.__offset(this.bb_pos, 4);
            return u ? this.bb.__string(this.bb_pos + u, a) : null;
          }
          sessionState(a) {
            let u = this.bb.__offset(this.bb_pos, 6);
            return u ? (a || new e.experimental.fbs.SessionState()).__init(this.bb.__indirect(this.bb_pos + u), this.bb) : null;
          }
          static startSubGraphSessionState(a) {
            a.startObject(2);
          }
          static addGraphId(a, u) {
            a.addFieldOffset(0, u, 0);
          }
          static addSessionState(a, u) {
            a.addFieldOffset(1, u, 0);
          }
          static endSubGraphSessionState(a) {
            let u = a.endObject();
            return a.requiredField(u, 4), u;
          }
          static createSubGraphSessionState(a, u, l) {
            return r.startSubGraphSessionState(a), r.addGraphId(a, u), r.addSessionState(a, l), r.endSubGraphSessionState(a);
          }
        }
        n.SubGraphSessionState = r;
      })(t.fbs || (t.fbs = {}));
    })(e.experimental || (e.experimental = {}));
  })(F || (F = {}));
  ((e) => {
    ((t) => {
      ((n) => {
        class r {
          constructor() {
            this.bb = null;
            this.bb_pos = 0;
          }
          __init(a, u) {
            return this.bb_pos = a, this.bb = u, this;
          }
          static getRootAsSessionState(a, u) {
            return (u || new r()).__init(a.readInt32(a.position()) + a.position(), a);
          }
          static getSizePrefixedRootAsSessionState(a, u) {
            return a.setPosition(a.position() + T.SIZE_PREFIX_LENGTH), (u || new r()).__init(a.readInt32(a.position()) + a.position(), a);
          }
          kernels(a) {
            let u = this.bb.__offset(this.bb_pos, 4);
            return u ? (a || new e.experimental.fbs.KernelCreateInfos()).__init(this.bb.__indirect(this.bb_pos + u), this.bb) : null;
          }
          subGraphSessionStates(a, u) {
            let l = this.bb.__offset(this.bb_pos, 6);
            return l ? (u || new e.experimental.fbs.SubGraphSessionState()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + l) + a * 4), this.bb) : null;
          }
          subGraphSessionStatesLength() {
            let a = this.bb.__offset(this.bb_pos, 6);
            return a ? this.bb.__vector_len(this.bb_pos + a) : 0;
          }
          static startSessionState(a) {
            a.startObject(2);
          }
          static addKernels(a, u) {
            a.addFieldOffset(0, u, 0);
          }
          static addSubGraphSessionStates(a, u) {
            a.addFieldOffset(1, u, 0);
          }
          static createSubGraphSessionStatesVector(a, u) {
            a.startVector(4, u.length, 4);
            for (let l = u.length - 1; l >= 0; l--) a.addOffset(u[l]);
            return a.endVector();
          }
          static startSubGraphSessionStatesVector(a, u) {
            a.startVector(4, u, 4);
          }
          static endSessionState(a) {
            return a.endObject();
          }
          static createSessionState(a, u, l) {
            return r.startSessionState(a), r.addKernels(a, u), r.addSubGraphSessionStates(a, l), r.endSessionState(a);
          }
        }
        n.SessionState = r;
      })(t.fbs || (t.fbs = {}));
    })(e.experimental || (e.experimental = {}));
  })(F || (F = {}));
  ((e) => {
    ((t) => {
      ((n) => {
        class r {
          constructor() {
            this.bb = null;
            this.bb_pos = 0;
          }
          __init(a, u) {
            return this.bb_pos = a, this.bb = u, this;
          }
          static getRootAsInferenceSession(a, u) {
            return (u || new r()).__init(a.readInt32(a.position()) + a.position(), a);
          }
          static getSizePrefixedRootAsInferenceSession(a, u) {
            return a.setPosition(a.position() + T.SIZE_PREFIX_LENGTH), (u || new r()).__init(a.readInt32(a.position()) + a.position(), a);
          }
          static bufferHasIdentifier(a) {
            return a.__has_identifier("ORTM");
          }
          ortVersion(a) {
            let u = this.bb.__offset(this.bb_pos, 4);
            return u ? this.bb.__string(this.bb_pos + u, a) : null;
          }
          model(a) {
            let u = this.bb.__offset(this.bb_pos, 6);
            return u ? (a || new e.experimental.fbs.Model()).__init(this.bb.__indirect(this.bb_pos + u), this.bb) : null;
          }
          sessionState(a) {
            let u = this.bb.__offset(this.bb_pos, 8);
            return u ? (a || new e.experimental.fbs.SessionState()).__init(this.bb.__indirect(this.bb_pos + u), this.bb) : null;
          }
          static startInferenceSession(a) {
            a.startObject(3);
          }
          static addOrtVersion(a, u) {
            a.addFieldOffset(0, u, 0);
          }
          static addModel(a, u) {
            a.addFieldOffset(1, u, 0);
          }
          static addSessionState(a, u) {
            a.addFieldOffset(2, u, 0);
          }
          static endInferenceSession(a) {
            return a.endObject();
          }
          static finishInferenceSessionBuffer(a, u) {
            a.finish(u, "ORTM");
          }
          static finishSizePrefixedInferenceSessionBuffer(a, u) {
            a.finish(u, "ORTM", true);
          }
          static createInferenceSession(a, u, l, f) {
            return r.startInferenceSession(a), r.addOrtVersion(a, u), r.addModel(a, l), r.addSessionState(a, f), r.endInferenceSession(a);
          }
        }
        n.InferenceSession = r;
      })(t.fbs || (t.fbs = {}));
    })(e.experimental || (e.experimental = {}));
  })(F || (F = {}));
});
var Hs = mt((Uy, Ws) => {
  Ws.exports = nh;
  function nh(i, e) {
    for (var o = new Array(arguments.length - 1), t = 0, r = 2, n = true; r < arguments.length; ) o[t++] = arguments[r++];
    return new Promise(function(a, u) {
      o[t] = function(f) {
        if (n) if (n = false, f) u(f);
        else {
          for (var p2 = new Array(arguments.length - 1), d = 0; d < p2.length; ) p2[d++] = arguments[d];
          a.apply(null, p2);
        }
      };
      try {
        i.apply(e || null, o);
      } catch (l) {
        n && (n = false, u(l));
      }
    });
  }
});
var Ks = mt((Xs) => {
  var Tn = Xs;
  Tn.length = function(e) {
    var o = e.length;
    if (!o) return 0;
    for (var t = 0; --o % 4 > 1 && e.charAt(o) === "="; ) ++t;
    return Math.ceil(e.length * 3) / 4 - t;
  };
  var ar = new Array(64), js = new Array(123);
  for (Zt = 0; Zt < 64; ) js[ar[Zt] = Zt < 26 ? Zt + 65 : Zt < 52 ? Zt + 71 : Zt < 62 ? Zt - 4 : Zt - 59 | 43] = Zt++;
  var Zt;
  Tn.encode = function(e, o, t) {
    for (var r = null, n = [], s = 0, a = 0, u; o < t; ) {
      var l = e[o++];
      switch (a) {
        case 0:
          n[s++] = ar[l >> 2], u = (l & 3) << 4, a = 1;
          break;
        case 1:
          n[s++] = ar[u | l >> 4], u = (l & 15) << 2, a = 2;
          break;
        case 2:
          n[s++] = ar[u | l >> 6], n[s++] = ar[l & 63], a = 0;
          break;
      }
      s > 8191 && ((r || (r = [])).push(String.fromCharCode.apply(String, n)), s = 0);
    }
    return a && (n[s++] = ar[u], n[s++] = 61, a === 1 && (n[s++] = 61)), r ? (s && r.push(String.fromCharCode.apply(String, n.slice(0, s))), r.join("")) : String.fromCharCode.apply(String, n.slice(0, s));
  };
  var qs = "invalid encoding";
  Tn.decode = function(e, o, t) {
    for (var r = t, n = 0, s, a = 0; a < e.length; ) {
      var u = e.charCodeAt(a++);
      if (u === 61 && n > 1) break;
      if ((u = js[u]) === void 0) throw Error(qs);
      switch (n) {
        case 0:
          s = u, n = 1;
          break;
        case 1:
          o[t++] = s << 2 | (u & 48) >> 4, s = u, n = 2;
          break;
        case 2:
          o[t++] = (s & 15) << 4 | (u & 60) >> 2, s = u, n = 3;
          break;
        case 3:
          o[t++] = (s & 3) << 6 | u, n = 0;
          break;
      }
    }
    if (n === 1) throw Error(qs);
    return t - r;
  };
  Tn.test = function(e) {
    return /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/.test(e);
  };
});
var Ys = mt((zy, Js) => {
  Js.exports = wn;
  function wn() {
    this._listeners = {};
  }
  wn.prototype.on = function(e, o, t) {
    return (this._listeners[e] || (this._listeners[e] = [])).push({ fn: o, ctx: t || this }), this;
  };
  wn.prototype.off = function(e, o) {
    if (e === void 0) this._listeners = {};
    else if (o === void 0) this._listeners[e] = [];
    else for (var t = this._listeners[e], r = 0; r < t.length; ) t[r].fn === o ? t.splice(r, 1) : ++r;
    return this;
  };
  wn.prototype.emit = function(e) {
    var o = this._listeners[e];
    if (o) {
      for (var t = [], r = 1; r < arguments.length; ) t.push(arguments[r++]);
      for (r = 0; r < o.length; ) o[r].fn.apply(o[r++].ctx, t);
    }
    return this;
  };
});
var ou = mt((Wy, nu) => {
  nu.exports = Zs(Zs);
  function Zs(i) {
    return typeof Float32Array < "u" ? function() {
      var e = new Float32Array([-0]), o = new Uint8Array(e.buffer), t = o[3] === 128;
      function r(u, l, f) {
        e[0] = u, l[f] = o[0], l[f + 1] = o[1], l[f + 2] = o[2], l[f + 3] = o[3];
      }
      function n(u, l, f) {
        e[0] = u, l[f] = o[3], l[f + 1] = o[2], l[f + 2] = o[1], l[f + 3] = o[0];
      }
      i.writeFloatLE = t ? r : n, i.writeFloatBE = t ? n : r;
      function s(u, l) {
        return o[0] = u[l], o[1] = u[l + 1], o[2] = u[l + 2], o[3] = u[l + 3], e[0];
      }
      function a(u, l) {
        return o[3] = u[l], o[2] = u[l + 1], o[1] = u[l + 2], o[0] = u[l + 3], e[0];
      }
      i.readFloatLE = t ? s : a, i.readFloatBE = t ? a : s;
    }() : function() {
      function e(t, r, n, s) {
        var a = r < 0 ? 1 : 0;
        if (a && (r = -r), r === 0) t(1 / r > 0 ? 0 : 2147483648, n, s);
        else if (isNaN(r)) t(2143289344, n, s);
        else if (r > 34028234663852886e22) t((a << 31 | 2139095040) >>> 0, n, s);
        else if (r < 11754943508222875e-54) t((a << 31 | Math.round(r / 1401298464324817e-60)) >>> 0, n, s);
        else {
          var u = Math.floor(Math.log(r) / Math.LN2), l = Math.round(r * Math.pow(2, -u) * 8388608) & 8388607;
          t((a << 31 | u + 127 << 23 | l) >>> 0, n, s);
        }
      }
      i.writeFloatLE = e.bind(null, Qs), i.writeFloatBE = e.bind(null, tu);
      function o(t, r, n) {
        var s = t(r, n), a = (s >> 31) * 2 + 1, u = s >>> 23 & 255, l = s & 8388607;
        return u === 255 ? l ? NaN : a * (1 / 0) : u === 0 ? a * 1401298464324817e-60 * l : a * Math.pow(2, u - 150) * (l + 8388608);
      }
      i.readFloatLE = o.bind(null, eu), i.readFloatBE = o.bind(null, ru);
    }(), typeof Float64Array < "u" ? function() {
      var e = new Float64Array([-0]), o = new Uint8Array(e.buffer), t = o[7] === 128;
      function r(u, l, f) {
        e[0] = u, l[f] = o[0], l[f + 1] = o[1], l[f + 2] = o[2], l[f + 3] = o[3], l[f + 4] = o[4], l[f + 5] = o[5], l[f + 6] = o[6], l[f + 7] = o[7];
      }
      function n(u, l, f) {
        e[0] = u, l[f] = o[7], l[f + 1] = o[6], l[f + 2] = o[5], l[f + 3] = o[4], l[f + 4] = o[3], l[f + 5] = o[2], l[f + 6] = o[1], l[f + 7] = o[0];
      }
      i.writeDoubleLE = t ? r : n, i.writeDoubleBE = t ? n : r;
      function s(u, l) {
        return o[0] = u[l], o[1] = u[l + 1], o[2] = u[l + 2], o[3] = u[l + 3], o[4] = u[l + 4], o[5] = u[l + 5], o[6] = u[l + 6], o[7] = u[l + 7], e[0];
      }
      function a(u, l) {
        return o[7] = u[l], o[6] = u[l + 1], o[5] = u[l + 2], o[4] = u[l + 3], o[3] = u[l + 4], o[2] = u[l + 5], o[1] = u[l + 6], o[0] = u[l + 7], e[0];
      }
      i.readDoubleLE = t ? s : a, i.readDoubleBE = t ? a : s;
    }() : function() {
      function e(t, r, n, s, a, u) {
        var l = s < 0 ? 1 : 0;
        if (l && (s = -s), s === 0) t(0, a, u + r), t(1 / s > 0 ? 0 : 2147483648, a, u + n);
        else if (isNaN(s)) t(0, a, u + r), t(2146959360, a, u + n);
        else if (s > 17976931348623157e292) t(0, a, u + r), t((l << 31 | 2146435072) >>> 0, a, u + n);
        else {
          var f;
          if (s < 22250738585072014e-324) f = s / 5e-324, t(f >>> 0, a, u + r), t((l << 31 | f / 4294967296) >>> 0, a, u + n);
          else {
            var p2 = Math.floor(Math.log(s) / Math.LN2);
            p2 === 1024 && (p2 = 1023), f = s * Math.pow(2, -p2), t(f * 4503599627370496 >>> 0, a, u + r), t((l << 31 | p2 + 1023 << 20 | f * 1048576 & 1048575) >>> 0, a, u + n);
          }
        }
      }
      i.writeDoubleLE = e.bind(null, Qs, 0, 4), i.writeDoubleBE = e.bind(null, tu, 4, 0);
      function o(t, r, n, s, a) {
        var u = t(s, a + r), l = t(s, a + n), f = (l >> 31) * 2 + 1, p2 = l >>> 20 & 2047, d = 4294967296 * (l & 1048575) + u;
        return p2 === 2047 ? d ? NaN : f * (1 / 0) : p2 === 0 ? f * 5e-324 * d : f * Math.pow(2, p2 - 1075) * (d + 4503599627370496);
      }
      i.readDoubleLE = o.bind(null, eu, 0, 4), i.readDoubleBE = o.bind(null, ru, 4, 0);
    }(), i;
  }
  function Qs(i, e, o) {
    e[o] = i & 255, e[o + 1] = i >>> 8 & 255, e[o + 2] = i >>> 16 & 255, e[o + 3] = i >>> 24;
  }
  function tu(i, e, o) {
    e[o] = i >>> 24, e[o + 1] = i >>> 16 & 255, e[o + 2] = i >>> 8 & 255, e[o + 3] = i & 255;
  }
  function eu(i, e) {
    return (i[e] | i[e + 1] << 8 | i[e + 2] << 16 | i[e + 3] << 24) >>> 0;
  }
  function ru(i, e) {
    return (i[e] << 24 | i[e + 1] << 16 | i[e + 2] << 8 | i[e + 3]) >>> 0;
  }
});
var iu = mt((exports, module) => {
  module.exports = inquire;
  function inquire(moduleName) {
    try {
      var mod = eval("quire".replace(/^/, "re"))(moduleName);
      if (mod && (mod.length || Object.keys(mod).length)) return mod;
    } catch (i) {
    }
    return null;
  }
});
var su = mt((au) => {
  var Wo = au;
  Wo.length = function(e) {
    for (var o = 0, t = 0, r = 0; r < e.length; ++r) t = e.charCodeAt(r), t < 128 ? o += 1 : t < 2048 ? o += 2 : (t & 64512) === 55296 && (e.charCodeAt(r + 1) & 64512) === 56320 ? (++r, o += 4) : o += 3;
    return o;
  };
  Wo.read = function(e, o, t) {
    var r = t - o;
    if (r < 1) return "";
    for (var n = null, s = [], a = 0, u; o < t; ) u = e[o++], u < 128 ? s[a++] = u : u > 191 && u < 224 ? s[a++] = (u & 31) << 6 | e[o++] & 63 : u > 239 && u < 365 ? (u = ((u & 7) << 18 | (e[o++] & 63) << 12 | (e[o++] & 63) << 6 | e[o++] & 63) - 65536, s[a++] = 55296 + (u >> 10), s[a++] = 56320 + (u & 1023)) : s[a++] = (u & 15) << 12 | (e[o++] & 63) << 6 | e[o++] & 63, a > 8191 && ((n || (n = [])).push(String.fromCharCode.apply(String, s)), a = 0);
    return n ? (a && n.push(String.fromCharCode.apply(String, s.slice(0, a))), n.join("")) : String.fromCharCode.apply(String, s.slice(0, a));
  };
  Wo.write = function(e, o, t) {
    for (var r = t, n, s, a = 0; a < e.length; ++a) n = e.charCodeAt(a), n < 128 ? o[t++] = n : n < 2048 ? (o[t++] = n >> 6 | 192, o[t++] = n & 63 | 128) : (n & 64512) === 55296 && ((s = e.charCodeAt(a + 1)) & 64512) === 56320 ? (n = 65536 + ((n & 1023) << 10) + (s & 1023), ++a, o[t++] = n >> 18 | 240, o[t++] = n >> 12 & 63 | 128, o[t++] = n >> 6 & 63 | 128, o[t++] = n & 63 | 128) : (o[t++] = n >> 12 | 224, o[t++] = n >> 6 & 63 | 128, o[t++] = n & 63 | 128);
    return t - r;
  };
});
var lu = mt((qy, uu) => {
  uu.exports = oh;
  function oh(i, e, o) {
    var t = o || 8192, r = t >>> 1, n = null, s = t;
    return function(u) {
      if (u < 1 || u > r) return i(u);
      s + u > t && (n = i(t), s = 0);
      var l = e.call(n, s, s += u);
      return s & 7 && (s = (s | 7) + 1), l;
    };
  }
});
var cu = mt((jy, fu) => {
  fu.exports = wt;
  var Er = Oe();
  function wt(i, e) {
    this.lo = i >>> 0, this.hi = e >>> 0;
  }
  var Ne = wt.zero = new wt(0, 0);
  Ne.toNumber = function() {
    return 0;
  };
  Ne.zzEncode = Ne.zzDecode = function() {
    return this;
  };
  Ne.length = function() {
    return 1;
  };
  var ih = wt.zeroHash = "\0\0\0\0\0\0\0\0";
  wt.fromNumber = function(e) {
    if (e === 0) return Ne;
    var o = e < 0;
    o && (e = -e);
    var t = e >>> 0, r = (e - t) / 4294967296 >>> 0;
    return o && (r = ~r >>> 0, t = ~t >>> 0, ++t > 4294967295 && (t = 0, ++r > 4294967295 && (r = 0))), new wt(t, r);
  };
  wt.from = function(e) {
    if (typeof e == "number") return wt.fromNumber(e);
    if (Er.isString(e)) if (Er.Long) e = Er.Long.fromString(e);
    else return wt.fromNumber(parseInt(e, 10));
    return e.low || e.high ? new wt(e.low >>> 0, e.high >>> 0) : Ne;
  };
  wt.prototype.toNumber = function(e) {
    if (!e && this.hi >>> 31) {
      var o = ~this.lo + 1 >>> 0, t = ~this.hi >>> 0;
      return o || (t = t + 1 >>> 0), -(o + t * 4294967296);
    }
    return this.lo + this.hi * 4294967296;
  };
  wt.prototype.toLong = function(e) {
    return Er.Long ? new Er.Long(this.lo | 0, this.hi | 0, !!e) : { low: this.lo | 0, high: this.hi | 0, unsigned: !!e };
  };
  var _e = String.prototype.charCodeAt;
  wt.fromHash = function(e) {
    return e === ih ? Ne : new wt((_e.call(e, 0) | _e.call(e, 1) << 8 | _e.call(e, 2) << 16 | _e.call(e, 3) << 24) >>> 0, (_e.call(e, 4) | _e.call(e, 5) << 8 | _e.call(e, 6) << 16 | _e.call(e, 7) << 24) >>> 0);
  };
  wt.prototype.toHash = function() {
    return String.fromCharCode(this.lo & 255, this.lo >>> 8 & 255, this.lo >>> 16 & 255, this.lo >>> 24, this.hi & 255, this.hi >>> 8 & 255, this.hi >>> 16 & 255, this.hi >>> 24);
  };
  wt.prototype.zzEncode = function() {
    var e = this.hi >> 31;
    return this.hi = ((this.hi << 1 | this.lo >>> 31) ^ e) >>> 0, this.lo = (this.lo << 1 ^ e) >>> 0, this;
  };
  wt.prototype.zzDecode = function() {
    var e = -(this.lo & 1);
    return this.lo = ((this.lo >>> 1 | this.hi << 31) ^ e) >>> 0, this.hi = (this.hi >>> 1 ^ e) >>> 0, this;
  };
  wt.prototype.length = function() {
    var e = this.lo, o = (this.lo >>> 28 | this.hi << 4) >>> 0, t = this.hi >>> 24;
    return t === 0 ? o === 0 ? e < 16384 ? e < 128 ? 1 : 2 : e < 2097152 ? 3 : 4 : o < 16384 ? o < 128 ? 5 : 6 : o < 2097152 ? 7 : 8 : t < 128 ? 9 : 10;
  };
});
var Oe = mt((Ho) => {
  var N = Ho;
  N.asPromise = Hs();
  N.base64 = Ks();
  N.EventEmitter = Ys();
  N.float = ou();
  N.inquire = iu();
  N.utf8 = su();
  N.pool = lu();
  N.LongBits = cu();
  N.isNode = !!(typeof global < "u" && global && global.process && global.process.versions && global.process.versions.node);
  N.global = N.isNode && global || typeof window < "u" && window || typeof self < "u" && self || Ho;
  N.emptyArray = Object.freeze ? Object.freeze([]) : [];
  N.emptyObject = Object.freeze ? Object.freeze({}) : {};
  N.isInteger = Number.isInteger || function(e) {
    return typeof e == "number" && isFinite(e) && Math.floor(e) === e;
  };
  N.isString = function(e) {
    return typeof e == "string" || e instanceof String;
  };
  N.isObject = function(e) {
    return e && typeof e == "object";
  };
  N.isset = N.isSet = function(e, o) {
    var t = e[o];
    return t != null && e.hasOwnProperty(o) ? typeof t != "object" || (Array.isArray(t) ? t.length : Object.keys(t).length) > 0 : false;
  };
  N.Buffer = function() {
    try {
      var i = N.inquire("buffer").Buffer;
      return i.prototype.utf8Write ? i : null;
    } catch {
      return null;
    }
  }();
  N._Buffer_from = null;
  N._Buffer_allocUnsafe = null;
  N.newBuffer = function(e) {
    return typeof e == "number" ? N.Buffer ? N._Buffer_allocUnsafe(e) : new N.Array(e) : N.Buffer ? N._Buffer_from(e) : typeof Uint8Array > "u" ? e : new Uint8Array(e);
  };
  N.Array = typeof Uint8Array < "u" ? Uint8Array : Array;
  N.Long = N.global.dcodeIO && N.global.dcodeIO.Long || N.global.Long || N.inquire("long");
  N.key2Re = /^true|false|0|1$/;
  N.key32Re = /^-?(?:0|[1-9][0-9]*)$/;
  N.key64Re = /^(?:[\\x00-\\xff]{8}|-?(?:0|[1-9][0-9]*))$/;
  N.longToHash = function(e) {
    return e ? N.LongBits.from(e).toHash() : N.LongBits.zeroHash;
  };
  N.longFromHash = function(e, o) {
    var t = N.LongBits.fromHash(e);
    return N.Long ? N.Long.fromBits(t.lo, t.hi, o) : t.toNumber(!!o);
  };
  function pu(i, e, o) {
    for (var t = Object.keys(e), r = 0; r < t.length; ++r) (i[t[r]] === void 0 || !o) && (i[t[r]] = e[t[r]]);
    return i;
  }
  N.merge = pu;
  N.lcFirst = function(e) {
    return e.charAt(0).toLowerCase() + e.substring(1);
  };
  function du(i) {
    function e(o, t) {
      if (!(this instanceof e)) return new e(o, t);
      Object.defineProperty(this, "message", { get: function() {
        return o;
      } }), Error.captureStackTrace ? Error.captureStackTrace(this, e) : Object.defineProperty(this, "stack", { value: new Error().stack || "" }), t && pu(this, t);
    }
    return e.prototype = Object.create(Error.prototype, { constructor: { value: e, writable: true, enumerable: false, configurable: true }, name: { get: function() {
      return i;
    }, set: void 0, enumerable: false, configurable: true }, toString: { value: function() {
      return this.name + ": " + this.message;
    }, writable: true, enumerable: false, configurable: true } }), e;
  }
  N.newError = du;
  N.ProtocolError = du("ProtocolError");
  N.oneOfGetter = function(e) {
    for (var o = {}, t = 0; t < e.length; ++t) o[e[t]] = 1;
    return function() {
      for (var r = Object.keys(this), n = r.length - 1; n > -1; --n) if (o[r[n]] === 1 && this[r[n]] !== void 0 && this[r[n]] !== null) return r[n];
    };
  };
  N.oneOfSetter = function(e) {
    return function(o) {
      for (var t = 0; t < e.length; ++t) e[t] !== o && delete this[e[t]];
    };
  };
  N.toJSONOptions = { longs: String, enums: String, bytes: String, json: true };
  N._configure = function() {
    var i = N.Buffer;
    if (!i) {
      N._Buffer_from = N._Buffer_allocUnsafe = null;
      return;
    }
    N._Buffer_from = i.from !== Uint8Array.from && i.from || function(o, t) {
      return new i(o, t);
    }, N._Buffer_allocUnsafe = i.allocUnsafe || function(o) {
      return new i(o);
    };
  };
});
var Zo = mt((Ky, gu) => {
  gu.exports = X;
  var zt = Oe(), qo, vn = zt.LongBits, hu = zt.base64, mu = zt.utf8;
  function Dr(i, e, o) {
    this.fn = i, this.len = e, this.next = void 0, this.val = o;
  }
  function Xo() {
  }
  function ah(i) {
    this.head = i.head, this.tail = i.tail, this.len = i.len, this.next = i.states;
  }
  function X() {
    this.len = 0, this.head = new Dr(Xo, 0, 0), this.tail = this.head, this.states = null;
  }
  var bu = function() {
    return zt.Buffer ? function() {
      return (X.create = function() {
        return new qo();
      })();
    } : function() {
      return new X();
    };
  };
  X.create = bu();
  X.alloc = function(e) {
    return new zt.Array(e);
  };
  zt.Array !== Array && (X.alloc = zt.pool(X.alloc, zt.Array.prototype.subarray));
  X.prototype._push = function(e, o, t) {
    return this.tail = this.tail.next = new Dr(e, o, t), this.len += o, this;
  };
  function Ko(i, e, o) {
    e[o] = i & 255;
  }
  function sh(i, e, o) {
    for (; i > 127; ) e[o++] = i & 127 | 128, i >>>= 7;
    e[o] = i;
  }
  function Jo(i, e) {
    this.len = i, this.next = void 0, this.val = e;
  }
  Jo.prototype = Object.create(Dr.prototype);
  Jo.prototype.fn = sh;
  X.prototype.uint32 = function(e) {
    return this.len += (this.tail = this.tail.next = new Jo((e = e >>> 0) < 128 ? 1 : e < 16384 ? 2 : e < 2097152 ? 3 : e < 268435456 ? 4 : 5, e)).len, this;
  };
  X.prototype.int32 = function(e) {
    return e < 0 ? this._push(Yo, 10, vn.fromNumber(e)) : this.uint32(e);
  };
  X.prototype.sint32 = function(e) {
    return this.uint32((e << 1 ^ e >> 31) >>> 0);
  };
  function Yo(i, e, o) {
    for (; i.hi; ) e[o++] = i.lo & 127 | 128, i.lo = (i.lo >>> 7 | i.hi << 25) >>> 0, i.hi >>>= 7;
    for (; i.lo > 127; ) e[o++] = i.lo & 127 | 128, i.lo = i.lo >>> 7;
    e[o++] = i.lo;
  }
  X.prototype.uint64 = function(e) {
    var o = vn.from(e);
    return this._push(Yo, o.length(), o);
  };
  X.prototype.int64 = X.prototype.uint64;
  X.prototype.sint64 = function(e) {
    var o = vn.from(e).zzEncode();
    return this._push(Yo, o.length(), o);
  };
  X.prototype.bool = function(e) {
    return this._push(Ko, 1, e ? 1 : 0);
  };
  function jo(i, e, o) {
    e[o] = i & 255, e[o + 1] = i >>> 8 & 255, e[o + 2] = i >>> 16 & 255, e[o + 3] = i >>> 24;
  }
  X.prototype.fixed32 = function(e) {
    return this._push(jo, 4, e >>> 0);
  };
  X.prototype.sfixed32 = X.prototype.fixed32;
  X.prototype.fixed64 = function(e) {
    var o = vn.from(e);
    return this._push(jo, 4, o.lo)._push(jo, 4, o.hi);
  };
  X.prototype.sfixed64 = X.prototype.fixed64;
  X.prototype.float = function(e) {
    return this._push(zt.float.writeFloatLE, 4, e);
  };
  X.prototype.double = function(e) {
    return this._push(zt.float.writeDoubleLE, 8, e);
  };
  var uh = zt.Array.prototype.set ? function(e, o, t) {
    o.set(e, t);
  } : function(e, o, t) {
    for (var r = 0; r < e.length; ++r) o[t + r] = e[r];
  };
  X.prototype.bytes = function(e) {
    var o = e.length >>> 0;
    if (!o) return this._push(Ko, 1, 0);
    if (zt.isString(e)) {
      var t = X.alloc(o = hu.length(e));
      hu.decode(e, t, 0), e = t;
    }
    return this.uint32(o)._push(uh, o, e);
  };
  X.prototype.string = function(e) {
    var o = mu.length(e);
    return o ? this.uint32(o)._push(mu.write, o, e) : this._push(Ko, 1, 0);
  };
  X.prototype.fork = function() {
    return this.states = new ah(this), this.head = this.tail = new Dr(Xo, 0, 0), this.len = 0, this;
  };
  X.prototype.reset = function() {
    return this.states ? (this.head = this.states.head, this.tail = this.states.tail, this.len = this.states.len, this.states = this.states.next) : (this.head = this.tail = new Dr(Xo, 0, 0), this.len = 0), this;
  };
  X.prototype.ldelim = function() {
    var e = this.head, o = this.tail, t = this.len;
    return this.reset().uint32(t), t && (this.tail.next = e.next, this.tail = o, this.len += t), this;
  };
  X.prototype.finish = function() {
    for (var e = this.head.next, o = this.constructor.alloc(this.len), t = 0; e; ) e.fn(e.val, o, t), t += e.len, e = e.next;
    return o;
  };
  X._configure = function(i) {
    qo = i, X.create = bu(), qo._configure();
  };
});
var Tu = mt((Jy, xu) => {
  xu.exports = se;
  var yu = Zo();
  (se.prototype = Object.create(yu.prototype)).constructor = se;
  var Se = Oe();
  function se() {
    yu.call(this);
  }
  se._configure = function() {
    se.alloc = Se._Buffer_allocUnsafe, se.writeBytesBuffer = Se.Buffer && Se.Buffer.prototype instanceof Uint8Array && Se.Buffer.prototype.set.name === "set" ? function(e, o, t) {
      o.set(e, t);
    } : function(e, o, t) {
      if (e.copy) e.copy(o, t, 0, e.length);
      else for (var r = 0; r < e.length; ) o[t++] = e[r++];
    };
  };
  se.prototype.bytes = function(e) {
    Se.isString(e) && (e = Se._Buffer_from(e, "base64"));
    var o = e.length >>> 0;
    return this.uint32(o), o && this._push(se.writeBytesBuffer, o, e), this;
  };
  function lh(i, e, o) {
    i.length < 40 ? Se.utf8.write(i, e, o) : e.utf8Write ? e.utf8Write(i, o) : e.write(i, o);
  }
  se.prototype.string = function(e) {
    var o = Se.Buffer.byteLength(e);
    return this.uint32(o), o && this._push(lh, o, e), this;
  };
  se._configure();
});
var ei = mt((Yy, Ou) => {
  Ou.exports = ct;
  var Qt = Oe(), ti, Iu = Qt.LongBits, fh = Qt.utf8;
  function te(i, e) {
    return RangeError("index out of range: " + i.pos + " + " + (e || 1) + " > " + i.len);
  }
  function ct(i) {
    this.buf = i, this.pos = 0, this.len = i.length;
  }
  var wu = typeof Uint8Array < "u" ? function(e) {
    if (e instanceof Uint8Array || Array.isArray(e)) return new ct(e);
    throw Error("illegal buffer");
  } : function(e) {
    if (Array.isArray(e)) return new ct(e);
    throw Error("illegal buffer");
  }, _u = function() {
    return Qt.Buffer ? function(o) {
      return (ct.create = function(r) {
        return Qt.Buffer.isBuffer(r) ? new ti(r) : wu(r);
      })(o);
    } : wu;
  };
  ct.create = _u();
  ct.prototype._slice = Qt.Array.prototype.subarray || Qt.Array.prototype.slice;
  ct.prototype.uint32 = /* @__PURE__ */ function() {
    var e = 4294967295;
    return function() {
      if (e = (this.buf[this.pos] & 127) >>> 0, this.buf[this.pos++] < 128 || (e = (e | (this.buf[this.pos] & 127) << 7) >>> 0, this.buf[this.pos++] < 128) || (e = (e | (this.buf[this.pos] & 127) << 14) >>> 0, this.buf[this.pos++] < 128) || (e = (e | (this.buf[this.pos] & 127) << 21) >>> 0, this.buf[this.pos++] < 128) || (e = (e | (this.buf[this.pos] & 15) << 28) >>> 0, this.buf[this.pos++] < 128)) return e;
      if ((this.pos += 5) > this.len) throw this.pos = this.len, te(this, 10);
      return e;
    };
  }();
  ct.prototype.int32 = function() {
    return this.uint32() | 0;
  };
  ct.prototype.sint32 = function() {
    var e = this.uint32();
    return e >>> 1 ^ -(e & 1) | 0;
  };
  function Qo() {
    var i = new Iu(0, 0), e = 0;
    if (this.len - this.pos > 4) {
      for (; e < 4; ++e) if (i.lo = (i.lo | (this.buf[this.pos] & 127) << e * 7) >>> 0, this.buf[this.pos++] < 128) return i;
      if (i.lo = (i.lo | (this.buf[this.pos] & 127) << 28) >>> 0, i.hi = (i.hi | (this.buf[this.pos] & 127) >> 4) >>> 0, this.buf[this.pos++] < 128) return i;
      e = 0;
    } else {
      for (; e < 3; ++e) {
        if (this.pos >= this.len) throw te(this);
        if (i.lo = (i.lo | (this.buf[this.pos] & 127) << e * 7) >>> 0, this.buf[this.pos++] < 128) return i;
      }
      return i.lo = (i.lo | (this.buf[this.pos++] & 127) << e * 7) >>> 0, i;
    }
    if (this.len - this.pos > 4) {
      for (; e < 5; ++e) if (i.hi = (i.hi | (this.buf[this.pos] & 127) << e * 7 + 3) >>> 0, this.buf[this.pos++] < 128) return i;
    } else for (; e < 5; ++e) {
      if (this.pos >= this.len) throw te(this);
      if (i.hi = (i.hi | (this.buf[this.pos] & 127) << e * 7 + 3) >>> 0, this.buf[this.pos++] < 128) return i;
    }
    throw Error("invalid varint encoding");
  }
  ct.prototype.bool = function() {
    return this.uint32() !== 0;
  };
  function In(i, e) {
    return (i[e - 4] | i[e - 3] << 8 | i[e - 2] << 16 | i[e - 1] << 24) >>> 0;
  }
  ct.prototype.fixed32 = function() {
    if (this.pos + 4 > this.len) throw te(this, 4);
    return In(this.buf, this.pos += 4);
  };
  ct.prototype.sfixed32 = function() {
    if (this.pos + 4 > this.len) throw te(this, 4);
    return In(this.buf, this.pos += 4) | 0;
  };
  function vu() {
    if (this.pos + 8 > this.len) throw te(this, 8);
    return new Iu(In(this.buf, this.pos += 4), In(this.buf, this.pos += 4));
  }
  ct.prototype.float = function() {
    if (this.pos + 4 > this.len) throw te(this, 4);
    var e = Qt.float.readFloatLE(this.buf, this.pos);
    return this.pos += 4, e;
  };
  ct.prototype.double = function() {
    if (this.pos + 8 > this.len) throw te(this, 4);
    var e = Qt.float.readDoubleLE(this.buf, this.pos);
    return this.pos += 8, e;
  };
  ct.prototype.bytes = function() {
    var e = this.uint32(), o = this.pos, t = this.pos + e;
    if (t > this.len) throw te(this, e);
    if (this.pos += e, Array.isArray(this.buf)) return this.buf.slice(o, t);
    if (o === t) {
      var r = Qt.Buffer;
      return r ? r.alloc(0) : new this.buf.constructor(0);
    }
    return this._slice.call(this.buf, o, t);
  };
  ct.prototype.string = function() {
    var e = this.bytes();
    return fh.read(e, 0, e.length);
  };
  ct.prototype.skip = function(e) {
    if (typeof e == "number") {
      if (this.pos + e > this.len) throw te(this, e);
      this.pos += e;
    } else do
      if (this.pos >= this.len) throw te(this);
    while (this.buf[this.pos++] & 128);
    return this;
  };
  ct.prototype.skipType = function(i) {
    switch (i) {
      case 0:
        this.skip();
        break;
      case 1:
        this.skip(8);
        break;
      case 2:
        this.skip(this.uint32());
        break;
      case 3:
        for (; (i = this.uint32() & 7) !== 4; ) this.skipType(i);
        break;
      case 5:
        this.skip(4);
        break;
      default:
        throw Error("invalid wire type " + i + " at offset " + this.pos);
    }
    return this;
  };
  ct._configure = function(i) {
    ti = i, ct.create = _u(), ti._configure();
    var e = Qt.Long ? "toLong" : "toNumber";
    Qt.merge(ct.prototype, { int64: function() {
      return Qo.call(this)[e](false);
    }, uint64: function() {
      return Qo.call(this)[e](true);
    }, sint64: function() {
      return Qo.call(this).zzDecode()[e](false);
    }, fixed64: function() {
      return vu.call(this)[e](true);
    }, sfixed64: function() {
      return vu.call(this)[e](false);
    } });
  };
});
var Eu = mt((Zy, Pu) => {
  Pu.exports = Re;
  var Au = ei();
  (Re.prototype = Object.create(Au.prototype)).constructor = Re;
  var Su = Oe();
  function Re(i) {
    Au.call(this, i);
  }
  Re._configure = function() {
    Su.Buffer && (Re.prototype._slice = Su.Buffer.prototype.slice);
  };
  Re.prototype.string = function() {
    var e = this.uint32();
    return this.buf.utf8Slice ? this.buf.utf8Slice(this.pos, this.pos = Math.min(this.pos + e, this.len)) : this.buf.toString("utf-8", this.pos, this.pos = Math.min(this.pos + e, this.len));
  };
  Re._configure();
});
var Lu = mt((Qy, Du) => {
  Du.exports = Lr;
  var ri = Oe();
  (Lr.prototype = Object.create(ri.EventEmitter.prototype)).constructor = Lr;
  function Lr(i, e, o) {
    if (typeof i != "function") throw TypeError("rpcImpl must be a function");
    ri.EventEmitter.call(this), this.rpcImpl = i, this.requestDelimited = !!e, this.responseDelimited = !!o;
  }
  Lr.prototype.rpcCall = function i(e, o, t, r, n) {
    if (!r) throw TypeError("request must be specified");
    var s = this;
    if (!n) return ri.asPromise(i, s, e, o, t, r);
    if (!s.rpcImpl) {
      setTimeout(function() {
        n(Error("already ended"));
      }, 0);
      return;
    }
    try {
      return s.rpcImpl(e, o[s.requestDelimited ? "encodeDelimited" : "encode"](r).finish(), function(u, l) {
        if (u) return s.emit("error", u, e), n(u);
        if (l === null) {
          s.end(true);
          return;
        }
        if (!(l instanceof t)) try {
          l = t[s.responseDelimited ? "decodeDelimited" : "decode"](l);
        } catch (f) {
          return s.emit("error", f, e), n(f);
        }
        return s.emit("data", l, e), n(null, l);
      });
    } catch (a) {
      s.emit("error", a, e), setTimeout(function() {
        n(a);
      }, 0);
      return;
    }
  };
  Lr.prototype.end = function(e) {
    return this.rpcImpl && (e || this.rpcImpl(null, null, null), this.rpcImpl = null, this.emit("end").off()), this;
  };
});
var ku = mt(($u) => {
  var ch = $u;
  ch.Service = Lu();
});
var Fu = mt((ex, Bu) => {
  Bu.exports = {};
});
var Ru = mt((Nu) => {
  var Ct = Nu;
  Ct.build = "minimal";
  Ct.Writer = Zo();
  Ct.BufferWriter = Tu();
  Ct.Reader = ei();
  Ct.BufferReader = Eu();
  Ct.util = Oe();
  Ct.rpc = ku();
  Ct.roots = Fu();
  Ct.configure = Cu;
  function Cu() {
    Ct.util._configure(), Ct.Writer._configure(Ct.BufferWriter), Ct.Reader._configure(Ct.BufferReader);
  }
  Cu();
});
var Mu = mt((nx, Gu) => {
  Gu.exports = Ru();
});
var sr = mt((ox, Uu) => {
  var nt = Mu(), $ = nt.Reader, pt = nt.Writer, b = nt.util, h2 = nt.roots.default || (nt.roots.default = {});
  h2.onnx = function() {
    var i = {};
    return i.Version = function() {
      var e = {}, o = Object.create(e);
      return o[e[0] = "_START_VERSION"] = 0, o[e[1] = "IR_VERSION_2017_10_10"] = 1, o[e[2] = "IR_VERSION_2017_10_30"] = 2, o[e[3] = "IR_VERSION_2017_11_3"] = 3, o[e[4] = "IR_VERSION_2019_1_22"] = 4, o[e[5] = "IR_VERSION_2019_3_18"] = 5, o[e[6] = "IR_VERSION_2019_9_19"] = 6, o[e[7] = "IR_VERSION_2020_5_8"] = 7, o[e[8] = "IR_VERSION_2021_7_30"] = 8, o[e[9] = "IR_VERSION"] = 9, o;
    }(), i.AttributeProto = function() {
      function e(o) {
        if (this.floats = [], this.ints = [], this.strings = [], this.tensors = [], this.graphs = [], this.sparseTensors = [], this.typeProtos = [], o) for (var t = Object.keys(o), r = 0; r < t.length; ++r) o[t[r]] != null && (this[t[r]] = o[t[r]]);
      }
      return e.prototype.name = "", e.prototype.refAttrName = "", e.prototype.docString = "", e.prototype.type = 0, e.prototype.f = 0, e.prototype.i = b.Long ? b.Long.fromBits(0, 0, false) : 0, e.prototype.s = b.newBuffer([]), e.prototype.t = null, e.prototype.g = null, e.prototype.sparseTensor = null, e.prototype.tp = null, e.prototype.floats = b.emptyArray, e.prototype.ints = b.emptyArray, e.prototype.strings = b.emptyArray, e.prototype.tensors = b.emptyArray, e.prototype.graphs = b.emptyArray, e.prototype.sparseTensors = b.emptyArray, e.prototype.typeProtos = b.emptyArray, e.create = function(t) {
        return new e(t);
      }, e.encode = function(t, r) {
        if (r || (r = pt.create()), t.name != null && Object.hasOwnProperty.call(t, "name") && r.uint32(10).string(t.name), t.f != null && Object.hasOwnProperty.call(t, "f") && r.uint32(21).float(t.f), t.i != null && Object.hasOwnProperty.call(t, "i") && r.uint32(24).int64(t.i), t.s != null && Object.hasOwnProperty.call(t, "s") && r.uint32(34).bytes(t.s), t.t != null && Object.hasOwnProperty.call(t, "t") && h2.onnx.TensorProto.encode(t.t, r.uint32(42).fork()).ldelim(), t.g != null && Object.hasOwnProperty.call(t, "g") && h2.onnx.GraphProto.encode(t.g, r.uint32(50).fork()).ldelim(), t.floats != null && t.floats.length) {
          r.uint32(58).fork();
          for (var n = 0; n < t.floats.length; ++n) r.float(t.floats[n]);
          r.ldelim();
        }
        if (t.ints != null && t.ints.length) {
          r.uint32(66).fork();
          for (var n = 0; n < t.ints.length; ++n) r.int64(t.ints[n]);
          r.ldelim();
        }
        if (t.strings != null && t.strings.length) for (var n = 0; n < t.strings.length; ++n) r.uint32(74).bytes(t.strings[n]);
        if (t.tensors != null && t.tensors.length) for (var n = 0; n < t.tensors.length; ++n) h2.onnx.TensorProto.encode(t.tensors[n], r.uint32(82).fork()).ldelim();
        if (t.graphs != null && t.graphs.length) for (var n = 0; n < t.graphs.length; ++n) h2.onnx.GraphProto.encode(t.graphs[n], r.uint32(90).fork()).ldelim();
        if (t.docString != null && Object.hasOwnProperty.call(t, "docString") && r.uint32(106).string(t.docString), t.tp != null && Object.hasOwnProperty.call(t, "tp") && h2.onnx.TypeProto.encode(t.tp, r.uint32(114).fork()).ldelim(), t.typeProtos != null && t.typeProtos.length) for (var n = 0; n < t.typeProtos.length; ++n) h2.onnx.TypeProto.encode(t.typeProtos[n], r.uint32(122).fork()).ldelim();
        if (t.type != null && Object.hasOwnProperty.call(t, "type") && r.uint32(160).int32(t.type), t.refAttrName != null && Object.hasOwnProperty.call(t, "refAttrName") && r.uint32(170).string(t.refAttrName), t.sparseTensor != null && Object.hasOwnProperty.call(t, "sparseTensor") && h2.onnx.SparseTensorProto.encode(t.sparseTensor, r.uint32(178).fork()).ldelim(), t.sparseTensors != null && t.sparseTensors.length) for (var n = 0; n < t.sparseTensors.length; ++n) h2.onnx.SparseTensorProto.encode(t.sparseTensors[n], r.uint32(186).fork()).ldelim();
        return r;
      }, e.encodeDelimited = function(t, r) {
        return this.encode(t, r).ldelim();
      }, e.decode = function(t, r) {
        t instanceof $ || (t = $.create(t));
        for (var n = r === void 0 ? t.len : t.pos + r, s = new h2.onnx.AttributeProto(); t.pos < n; ) {
          var a = t.uint32();
          switch (a >>> 3) {
            case 1: {
              s.name = t.string();
              break;
            }
            case 21: {
              s.refAttrName = t.string();
              break;
            }
            case 13: {
              s.docString = t.string();
              break;
            }
            case 20: {
              s.type = t.int32();
              break;
            }
            case 2: {
              s.f = t.float();
              break;
            }
            case 3: {
              s.i = t.int64();
              break;
            }
            case 4: {
              s.s = t.bytes();
              break;
            }
            case 5: {
              s.t = h2.onnx.TensorProto.decode(t, t.uint32());
              break;
            }
            case 6: {
              s.g = h2.onnx.GraphProto.decode(t, t.uint32());
              break;
            }
            case 22: {
              s.sparseTensor = h2.onnx.SparseTensorProto.decode(t, t.uint32());
              break;
            }
            case 14: {
              s.tp = h2.onnx.TypeProto.decode(t, t.uint32());
              break;
            }
            case 7: {
              if (s.floats && s.floats.length || (s.floats = []), (a & 7) === 2) for (var u = t.uint32() + t.pos; t.pos < u; ) s.floats.push(t.float());
              else s.floats.push(t.float());
              break;
            }
            case 8: {
              if (s.ints && s.ints.length || (s.ints = []), (a & 7) === 2) for (var u = t.uint32() + t.pos; t.pos < u; ) s.ints.push(t.int64());
              else s.ints.push(t.int64());
              break;
            }
            case 9: {
              s.strings && s.strings.length || (s.strings = []), s.strings.push(t.bytes());
              break;
            }
            case 10: {
              s.tensors && s.tensors.length || (s.tensors = []), s.tensors.push(h2.onnx.TensorProto.decode(t, t.uint32()));
              break;
            }
            case 11: {
              s.graphs && s.graphs.length || (s.graphs = []), s.graphs.push(h2.onnx.GraphProto.decode(t, t.uint32()));
              break;
            }
            case 23: {
              s.sparseTensors && s.sparseTensors.length || (s.sparseTensors = []), s.sparseTensors.push(h2.onnx.SparseTensorProto.decode(t, t.uint32()));
              break;
            }
            case 15: {
              s.typeProtos && s.typeProtos.length || (s.typeProtos = []), s.typeProtos.push(h2.onnx.TypeProto.decode(t, t.uint32()));
              break;
            }
            default:
              t.skipType(a & 7);
              break;
          }
        }
        return s;
      }, e.decodeDelimited = function(t) {
        return t instanceof $ || (t = new $(t)), this.decode(t, t.uint32());
      }, e.verify = function(t) {
        if (typeof t != "object" || t === null) return "object expected";
        if (t.name != null && t.hasOwnProperty("name") && !b.isString(t.name)) return "name: string expected";
        if (t.refAttrName != null && t.hasOwnProperty("refAttrName") && !b.isString(t.refAttrName)) return "refAttrName: string expected";
        if (t.docString != null && t.hasOwnProperty("docString") && !b.isString(t.docString)) return "docString: string expected";
        if (t.type != null && t.hasOwnProperty("type")) switch (t.type) {
          default:
            return "type: enum value expected";
          case 0:
          case 1:
          case 2:
          case 3:
          case 4:
          case 5:
          case 11:
          case 13:
          case 6:
          case 7:
          case 8:
          case 9:
          case 10:
          case 12:
          case 14:
            break;
        }
        if (t.f != null && t.hasOwnProperty("f") && typeof t.f != "number") return "f: number expected";
        if (t.i != null && t.hasOwnProperty("i") && !b.isInteger(t.i) && !(t.i && b.isInteger(t.i.low) && b.isInteger(t.i.high))) return "i: integer|Long expected";
        if (t.s != null && t.hasOwnProperty("s") && !(t.s && typeof t.s.length == "number" || b.isString(t.s))) return "s: buffer expected";
        if (t.t != null && t.hasOwnProperty("t")) {
          var r = h2.onnx.TensorProto.verify(t.t);
          if (r) return "t." + r;
        }
        if (t.g != null && t.hasOwnProperty("g")) {
          var r = h2.onnx.GraphProto.verify(t.g);
          if (r) return "g." + r;
        }
        if (t.sparseTensor != null && t.hasOwnProperty("sparseTensor")) {
          var r = h2.onnx.SparseTensorProto.verify(t.sparseTensor);
          if (r) return "sparseTensor." + r;
        }
        if (t.tp != null && t.hasOwnProperty("tp")) {
          var r = h2.onnx.TypeProto.verify(t.tp);
          if (r) return "tp." + r;
        }
        if (t.floats != null && t.hasOwnProperty("floats")) {
          if (!Array.isArray(t.floats)) return "floats: array expected";
          for (var n = 0; n < t.floats.length; ++n) if (typeof t.floats[n] != "number") return "floats: number[] expected";
        }
        if (t.ints != null && t.hasOwnProperty("ints")) {
          if (!Array.isArray(t.ints)) return "ints: array expected";
          for (var n = 0; n < t.ints.length; ++n) if (!b.isInteger(t.ints[n]) && !(t.ints[n] && b.isInteger(t.ints[n].low) && b.isInteger(t.ints[n].high))) return "ints: integer|Long[] expected";
        }
        if (t.strings != null && t.hasOwnProperty("strings")) {
          if (!Array.isArray(t.strings)) return "strings: array expected";
          for (var n = 0; n < t.strings.length; ++n) if (!(t.strings[n] && typeof t.strings[n].length == "number" || b.isString(t.strings[n]))) return "strings: buffer[] expected";
        }
        if (t.tensors != null && t.hasOwnProperty("tensors")) {
          if (!Array.isArray(t.tensors)) return "tensors: array expected";
          for (var n = 0; n < t.tensors.length; ++n) {
            var r = h2.onnx.TensorProto.verify(t.tensors[n]);
            if (r) return "tensors." + r;
          }
        }
        if (t.graphs != null && t.hasOwnProperty("graphs")) {
          if (!Array.isArray(t.graphs)) return "graphs: array expected";
          for (var n = 0; n < t.graphs.length; ++n) {
            var r = h2.onnx.GraphProto.verify(t.graphs[n]);
            if (r) return "graphs." + r;
          }
        }
        if (t.sparseTensors != null && t.hasOwnProperty("sparseTensors")) {
          if (!Array.isArray(t.sparseTensors)) return "sparseTensors: array expected";
          for (var n = 0; n < t.sparseTensors.length; ++n) {
            var r = h2.onnx.SparseTensorProto.verify(t.sparseTensors[n]);
            if (r) return "sparseTensors." + r;
          }
        }
        if (t.typeProtos != null && t.hasOwnProperty("typeProtos")) {
          if (!Array.isArray(t.typeProtos)) return "typeProtos: array expected";
          for (var n = 0; n < t.typeProtos.length; ++n) {
            var r = h2.onnx.TypeProto.verify(t.typeProtos[n]);
            if (r) return "typeProtos." + r;
          }
        }
        return null;
      }, e.fromObject = function(t) {
        if (t instanceof h2.onnx.AttributeProto) return t;
        var r = new h2.onnx.AttributeProto();
        switch (t.name != null && (r.name = String(t.name)), t.refAttrName != null && (r.refAttrName = String(t.refAttrName)), t.docString != null && (r.docString = String(t.docString)), t.type) {
          default:
            if (typeof t.type == "number") {
              r.type = t.type;
              break;
            }
            break;
          case "UNDEFINED":
          case 0:
            r.type = 0;
            break;
          case "FLOAT":
          case 1:
            r.type = 1;
            break;
          case "INT":
          case 2:
            r.type = 2;
            break;
          case "STRING":
          case 3:
            r.type = 3;
            break;
          case "TENSOR":
          case 4:
            r.type = 4;
            break;
          case "GRAPH":
          case 5:
            r.type = 5;
            break;
          case "SPARSE_TENSOR":
          case 11:
            r.type = 11;
            break;
          case "TYPE_PROTO":
          case 13:
            r.type = 13;
            break;
          case "FLOATS":
          case 6:
            r.type = 6;
            break;
          case "INTS":
          case 7:
            r.type = 7;
            break;
          case "STRINGS":
          case 8:
            r.type = 8;
            break;
          case "TENSORS":
          case 9:
            r.type = 9;
            break;
          case "GRAPHS":
          case 10:
            r.type = 10;
            break;
          case "SPARSE_TENSORS":
          case 12:
            r.type = 12;
            break;
          case "TYPE_PROTOS":
          case 14:
            r.type = 14;
            break;
        }
        if (t.f != null && (r.f = Number(t.f)), t.i != null && (b.Long ? (r.i = b.Long.fromValue(t.i)).unsigned = false : typeof t.i == "string" ? r.i = parseInt(t.i, 10) : typeof t.i == "number" ? r.i = t.i : typeof t.i == "object" && (r.i = new b.LongBits(t.i.low >>> 0, t.i.high >>> 0).toNumber())), t.s != null && (typeof t.s == "string" ? b.base64.decode(t.s, r.s = b.newBuffer(b.base64.length(t.s)), 0) : t.s.length >= 0 && (r.s = t.s)), t.t != null) {
          if (typeof t.t != "object") throw TypeError(".onnx.AttributeProto.t: object expected");
          r.t = h2.onnx.TensorProto.fromObject(t.t);
        }
        if (t.g != null) {
          if (typeof t.g != "object") throw TypeError(".onnx.AttributeProto.g: object expected");
          r.g = h2.onnx.GraphProto.fromObject(t.g);
        }
        if (t.sparseTensor != null) {
          if (typeof t.sparseTensor != "object") throw TypeError(".onnx.AttributeProto.sparseTensor: object expected");
          r.sparseTensor = h2.onnx.SparseTensorProto.fromObject(t.sparseTensor);
        }
        if (t.tp != null) {
          if (typeof t.tp != "object") throw TypeError(".onnx.AttributeProto.tp: object expected");
          r.tp = h2.onnx.TypeProto.fromObject(t.tp);
        }
        if (t.floats) {
          if (!Array.isArray(t.floats)) throw TypeError(".onnx.AttributeProto.floats: array expected");
          r.floats = [];
          for (var n = 0; n < t.floats.length; ++n) r.floats[n] = Number(t.floats[n]);
        }
        if (t.ints) {
          if (!Array.isArray(t.ints)) throw TypeError(".onnx.AttributeProto.ints: array expected");
          r.ints = [];
          for (var n = 0; n < t.ints.length; ++n) b.Long ? (r.ints[n] = b.Long.fromValue(t.ints[n])).unsigned = false : typeof t.ints[n] == "string" ? r.ints[n] = parseInt(t.ints[n], 10) : typeof t.ints[n] == "number" ? r.ints[n] = t.ints[n] : typeof t.ints[n] == "object" && (r.ints[n] = new b.LongBits(t.ints[n].low >>> 0, t.ints[n].high >>> 0).toNumber());
        }
        if (t.strings) {
          if (!Array.isArray(t.strings)) throw TypeError(".onnx.AttributeProto.strings: array expected");
          r.strings = [];
          for (var n = 0; n < t.strings.length; ++n) typeof t.strings[n] == "string" ? b.base64.decode(t.strings[n], r.strings[n] = b.newBuffer(b.base64.length(t.strings[n])), 0) : t.strings[n].length >= 0 && (r.strings[n] = t.strings[n]);
        }
        if (t.tensors) {
          if (!Array.isArray(t.tensors)) throw TypeError(".onnx.AttributeProto.tensors: array expected");
          r.tensors = [];
          for (var n = 0; n < t.tensors.length; ++n) {
            if (typeof t.tensors[n] != "object") throw TypeError(".onnx.AttributeProto.tensors: object expected");
            r.tensors[n] = h2.onnx.TensorProto.fromObject(t.tensors[n]);
          }
        }
        if (t.graphs) {
          if (!Array.isArray(t.graphs)) throw TypeError(".onnx.AttributeProto.graphs: array expected");
          r.graphs = [];
          for (var n = 0; n < t.graphs.length; ++n) {
            if (typeof t.graphs[n] != "object") throw TypeError(".onnx.AttributeProto.graphs: object expected");
            r.graphs[n] = h2.onnx.GraphProto.fromObject(t.graphs[n]);
          }
        }
        if (t.sparseTensors) {
          if (!Array.isArray(t.sparseTensors)) throw TypeError(".onnx.AttributeProto.sparseTensors: array expected");
          r.sparseTensors = [];
          for (var n = 0; n < t.sparseTensors.length; ++n) {
            if (typeof t.sparseTensors[n] != "object") throw TypeError(".onnx.AttributeProto.sparseTensors: object expected");
            r.sparseTensors[n] = h2.onnx.SparseTensorProto.fromObject(t.sparseTensors[n]);
          }
        }
        if (t.typeProtos) {
          if (!Array.isArray(t.typeProtos)) throw TypeError(".onnx.AttributeProto.typeProtos: array expected");
          r.typeProtos = [];
          for (var n = 0; n < t.typeProtos.length; ++n) {
            if (typeof t.typeProtos[n] != "object") throw TypeError(".onnx.AttributeProto.typeProtos: object expected");
            r.typeProtos[n] = h2.onnx.TypeProto.fromObject(t.typeProtos[n]);
          }
        }
        return r;
      }, e.toObject = function(t, r) {
        r || (r = {});
        var n = {};
        if ((r.arrays || r.defaults) && (n.floats = [], n.ints = [], n.strings = [], n.tensors = [], n.graphs = [], n.typeProtos = [], n.sparseTensors = []), r.defaults) {
          if (n.name = "", n.f = 0, b.Long) {
            var s = new b.Long(0, 0, false);
            n.i = r.longs === String ? s.toString() : r.longs === Number ? s.toNumber() : s;
          } else n.i = r.longs === String ? "0" : 0;
          r.bytes === String ? n.s = "" : (n.s = [], r.bytes !== Array && (n.s = b.newBuffer(n.s))), n.t = null, n.g = null, n.docString = "", n.tp = null, n.type = r.enums === String ? "UNDEFINED" : 0, n.refAttrName = "", n.sparseTensor = null;
        }
        if (t.name != null && t.hasOwnProperty("name") && (n.name = t.name), t.f != null && t.hasOwnProperty("f") && (n.f = r.json && !isFinite(t.f) ? String(t.f) : t.f), t.i != null && t.hasOwnProperty("i") && (typeof t.i == "number" ? n.i = r.longs === String ? String(t.i) : t.i : n.i = r.longs === String ? b.Long.prototype.toString.call(t.i) : r.longs === Number ? new b.LongBits(t.i.low >>> 0, t.i.high >>> 0).toNumber() : t.i), t.s != null && t.hasOwnProperty("s") && (n.s = r.bytes === String ? b.base64.encode(t.s, 0, t.s.length) : r.bytes === Array ? Array.prototype.slice.call(t.s) : t.s), t.t != null && t.hasOwnProperty("t") && (n.t = h2.onnx.TensorProto.toObject(t.t, r)), t.g != null && t.hasOwnProperty("g") && (n.g = h2.onnx.GraphProto.toObject(t.g, r)), t.floats && t.floats.length) {
          n.floats = [];
          for (var a = 0; a < t.floats.length; ++a) n.floats[a] = r.json && !isFinite(t.floats[a]) ? String(t.floats[a]) : t.floats[a];
        }
        if (t.ints && t.ints.length) {
          n.ints = [];
          for (var a = 0; a < t.ints.length; ++a) typeof t.ints[a] == "number" ? n.ints[a] = r.longs === String ? String(t.ints[a]) : t.ints[a] : n.ints[a] = r.longs === String ? b.Long.prototype.toString.call(t.ints[a]) : r.longs === Number ? new b.LongBits(t.ints[a].low >>> 0, t.ints[a].high >>> 0).toNumber() : t.ints[a];
        }
        if (t.strings && t.strings.length) {
          n.strings = [];
          for (var a = 0; a < t.strings.length; ++a) n.strings[a] = r.bytes === String ? b.base64.encode(t.strings[a], 0, t.strings[a].length) : r.bytes === Array ? Array.prototype.slice.call(t.strings[a]) : t.strings[a];
        }
        if (t.tensors && t.tensors.length) {
          n.tensors = [];
          for (var a = 0; a < t.tensors.length; ++a) n.tensors[a] = h2.onnx.TensorProto.toObject(t.tensors[a], r);
        }
        if (t.graphs && t.graphs.length) {
          n.graphs = [];
          for (var a = 0; a < t.graphs.length; ++a) n.graphs[a] = h2.onnx.GraphProto.toObject(t.graphs[a], r);
        }
        if (t.docString != null && t.hasOwnProperty("docString") && (n.docString = t.docString), t.tp != null && t.hasOwnProperty("tp") && (n.tp = h2.onnx.TypeProto.toObject(t.tp, r)), t.typeProtos && t.typeProtos.length) {
          n.typeProtos = [];
          for (var a = 0; a < t.typeProtos.length; ++a) n.typeProtos[a] = h2.onnx.TypeProto.toObject(t.typeProtos[a], r);
        }
        if (t.type != null && t.hasOwnProperty("type") && (n.type = r.enums === String ? h2.onnx.AttributeProto.AttributeType[t.type] === void 0 ? t.type : h2.onnx.AttributeProto.AttributeType[t.type] : t.type), t.refAttrName != null && t.hasOwnProperty("refAttrName") && (n.refAttrName = t.refAttrName), t.sparseTensor != null && t.hasOwnProperty("sparseTensor") && (n.sparseTensor = h2.onnx.SparseTensorProto.toObject(t.sparseTensor, r)), t.sparseTensors && t.sparseTensors.length) {
          n.sparseTensors = [];
          for (var a = 0; a < t.sparseTensors.length; ++a) n.sparseTensors[a] = h2.onnx.SparseTensorProto.toObject(t.sparseTensors[a], r);
        }
        return n;
      }, e.prototype.toJSON = function() {
        return this.constructor.toObject(this, nt.util.toJSONOptions);
      }, e.getTypeUrl = function(t) {
        return t === void 0 && (t = "type.googleapis.com"), t + "/onnx.AttributeProto";
      }, e.AttributeType = function() {
        var o = {}, t = Object.create(o);
        return t[o[0] = "UNDEFINED"] = 0, t[o[1] = "FLOAT"] = 1, t[o[2] = "INT"] = 2, t[o[3] = "STRING"] = 3, t[o[4] = "TENSOR"] = 4, t[o[5] = "GRAPH"] = 5, t[o[11] = "SPARSE_TENSOR"] = 11, t[o[13] = "TYPE_PROTO"] = 13, t[o[6] = "FLOATS"] = 6, t[o[7] = "INTS"] = 7, t[o[8] = "STRINGS"] = 8, t[o[9] = "TENSORS"] = 9, t[o[10] = "GRAPHS"] = 10, t[o[12] = "SPARSE_TENSORS"] = 12, t[o[14] = "TYPE_PROTOS"] = 14, t;
      }(), e;
    }(), i.ValueInfoProto = function() {
      function e(o) {
        if (o) for (var t = Object.keys(o), r = 0; r < t.length; ++r) o[t[r]] != null && (this[t[r]] = o[t[r]]);
      }
      return e.prototype.name = "", e.prototype.type = null, e.prototype.docString = "", e.create = function(t) {
        return new e(t);
      }, e.encode = function(t, r) {
        return r || (r = pt.create()), t.name != null && Object.hasOwnProperty.call(t, "name") && r.uint32(10).string(t.name), t.type != null && Object.hasOwnProperty.call(t, "type") && h2.onnx.TypeProto.encode(t.type, r.uint32(18).fork()).ldelim(), t.docString != null && Object.hasOwnProperty.call(t, "docString") && r.uint32(26).string(t.docString), r;
      }, e.encodeDelimited = function(t, r) {
        return this.encode(t, r).ldelim();
      }, e.decode = function(t, r) {
        t instanceof $ || (t = $.create(t));
        for (var n = r === void 0 ? t.len : t.pos + r, s = new h2.onnx.ValueInfoProto(); t.pos < n; ) {
          var a = t.uint32();
          switch (a >>> 3) {
            case 1: {
              s.name = t.string();
              break;
            }
            case 2: {
              s.type = h2.onnx.TypeProto.decode(t, t.uint32());
              break;
            }
            case 3: {
              s.docString = t.string();
              break;
            }
            default:
              t.skipType(a & 7);
              break;
          }
        }
        return s;
      }, e.decodeDelimited = function(t) {
        return t instanceof $ || (t = new $(t)), this.decode(t, t.uint32());
      }, e.verify = function(t) {
        if (typeof t != "object" || t === null) return "object expected";
        if (t.name != null && t.hasOwnProperty("name") && !b.isString(t.name)) return "name: string expected";
        if (t.type != null && t.hasOwnProperty("type")) {
          var r = h2.onnx.TypeProto.verify(t.type);
          if (r) return "type." + r;
        }
        return t.docString != null && t.hasOwnProperty("docString") && !b.isString(t.docString) ? "docString: string expected" : null;
      }, e.fromObject = function(t) {
        if (t instanceof h2.onnx.ValueInfoProto) return t;
        var r = new h2.onnx.ValueInfoProto();
        if (t.name != null && (r.name = String(t.name)), t.type != null) {
          if (typeof t.type != "object") throw TypeError(".onnx.ValueInfoProto.type: object expected");
          r.type = h2.onnx.TypeProto.fromObject(t.type);
        }
        return t.docString != null && (r.docString = String(t.docString)), r;
      }, e.toObject = function(t, r) {
        r || (r = {});
        var n = {};
        return r.defaults && (n.name = "", n.type = null, n.docString = ""), t.name != null && t.hasOwnProperty("name") && (n.name = t.name), t.type != null && t.hasOwnProperty("type") && (n.type = h2.onnx.TypeProto.toObject(t.type, r)), t.docString != null && t.hasOwnProperty("docString") && (n.docString = t.docString), n;
      }, e.prototype.toJSON = function() {
        return this.constructor.toObject(this, nt.util.toJSONOptions);
      }, e.getTypeUrl = function(t) {
        return t === void 0 && (t = "type.googleapis.com"), t + "/onnx.ValueInfoProto";
      }, e;
    }(), i.NodeProto = function() {
      function e(o) {
        if (this.input = [], this.output = [], this.attribute = [], o) for (var t = Object.keys(o), r = 0; r < t.length; ++r) o[t[r]] != null && (this[t[r]] = o[t[r]]);
      }
      return e.prototype.input = b.emptyArray, e.prototype.output = b.emptyArray, e.prototype.name = "", e.prototype.opType = "", e.prototype.domain = "", e.prototype.attribute = b.emptyArray, e.prototype.docString = "", e.create = function(t) {
        return new e(t);
      }, e.encode = function(t, r) {
        if (r || (r = pt.create()), t.input != null && t.input.length) for (var n = 0; n < t.input.length; ++n) r.uint32(10).string(t.input[n]);
        if (t.output != null && t.output.length) for (var n = 0; n < t.output.length; ++n) r.uint32(18).string(t.output[n]);
        if (t.name != null && Object.hasOwnProperty.call(t, "name") && r.uint32(26).string(t.name), t.opType != null && Object.hasOwnProperty.call(t, "opType") && r.uint32(34).string(t.opType), t.attribute != null && t.attribute.length) for (var n = 0; n < t.attribute.length; ++n) h2.onnx.AttributeProto.encode(t.attribute[n], r.uint32(42).fork()).ldelim();
        return t.docString != null && Object.hasOwnProperty.call(t, "docString") && r.uint32(50).string(t.docString), t.domain != null && Object.hasOwnProperty.call(t, "domain") && r.uint32(58).string(t.domain), r;
      }, e.encodeDelimited = function(t, r) {
        return this.encode(t, r).ldelim();
      }, e.decode = function(t, r) {
        t instanceof $ || (t = $.create(t));
        for (var n = r === void 0 ? t.len : t.pos + r, s = new h2.onnx.NodeProto(); t.pos < n; ) {
          var a = t.uint32();
          switch (a >>> 3) {
            case 1: {
              s.input && s.input.length || (s.input = []), s.input.push(t.string());
              break;
            }
            case 2: {
              s.output && s.output.length || (s.output = []), s.output.push(t.string());
              break;
            }
            case 3: {
              s.name = t.string();
              break;
            }
            case 4: {
              s.opType = t.string();
              break;
            }
            case 7: {
              s.domain = t.string();
              break;
            }
            case 5: {
              s.attribute && s.attribute.length || (s.attribute = []), s.attribute.push(h2.onnx.AttributeProto.decode(t, t.uint32()));
              break;
            }
            case 6: {
              s.docString = t.string();
              break;
            }
            default:
              t.skipType(a & 7);
              break;
          }
        }
        return s;
      }, e.decodeDelimited = function(t) {
        return t instanceof $ || (t = new $(t)), this.decode(t, t.uint32());
      }, e.verify = function(t) {
        if (typeof t != "object" || t === null) return "object expected";
        if (t.input != null && t.hasOwnProperty("input")) {
          if (!Array.isArray(t.input)) return "input: array expected";
          for (var r = 0; r < t.input.length; ++r) if (!b.isString(t.input[r])) return "input: string[] expected";
        }
        if (t.output != null && t.hasOwnProperty("output")) {
          if (!Array.isArray(t.output)) return "output: array expected";
          for (var r = 0; r < t.output.length; ++r) if (!b.isString(t.output[r])) return "output: string[] expected";
        }
        if (t.name != null && t.hasOwnProperty("name") && !b.isString(t.name)) return "name: string expected";
        if (t.opType != null && t.hasOwnProperty("opType") && !b.isString(t.opType)) return "opType: string expected";
        if (t.domain != null && t.hasOwnProperty("domain") && !b.isString(t.domain)) return "domain: string expected";
        if (t.attribute != null && t.hasOwnProperty("attribute")) {
          if (!Array.isArray(t.attribute)) return "attribute: array expected";
          for (var r = 0; r < t.attribute.length; ++r) {
            var n = h2.onnx.AttributeProto.verify(t.attribute[r]);
            if (n) return "attribute." + n;
          }
        }
        return t.docString != null && t.hasOwnProperty("docString") && !b.isString(t.docString) ? "docString: string expected" : null;
      }, e.fromObject = function(t) {
        if (t instanceof h2.onnx.NodeProto) return t;
        var r = new h2.onnx.NodeProto();
        if (t.input) {
          if (!Array.isArray(t.input)) throw TypeError(".onnx.NodeProto.input: array expected");
          r.input = [];
          for (var n = 0; n < t.input.length; ++n) r.input[n] = String(t.input[n]);
        }
        if (t.output) {
          if (!Array.isArray(t.output)) throw TypeError(".onnx.NodeProto.output: array expected");
          r.output = [];
          for (var n = 0; n < t.output.length; ++n) r.output[n] = String(t.output[n]);
        }
        if (t.name != null && (r.name = String(t.name)), t.opType != null && (r.opType = String(t.opType)), t.domain != null && (r.domain = String(t.domain)), t.attribute) {
          if (!Array.isArray(t.attribute)) throw TypeError(".onnx.NodeProto.attribute: array expected");
          r.attribute = [];
          for (var n = 0; n < t.attribute.length; ++n) {
            if (typeof t.attribute[n] != "object") throw TypeError(".onnx.NodeProto.attribute: object expected");
            r.attribute[n] = h2.onnx.AttributeProto.fromObject(t.attribute[n]);
          }
        }
        return t.docString != null && (r.docString = String(t.docString)), r;
      }, e.toObject = function(t, r) {
        r || (r = {});
        var n = {};
        if ((r.arrays || r.defaults) && (n.input = [], n.output = [], n.attribute = []), r.defaults && (n.name = "", n.opType = "", n.docString = "", n.domain = ""), t.input && t.input.length) {
          n.input = [];
          for (var s = 0; s < t.input.length; ++s) n.input[s] = t.input[s];
        }
        if (t.output && t.output.length) {
          n.output = [];
          for (var s = 0; s < t.output.length; ++s) n.output[s] = t.output[s];
        }
        if (t.name != null && t.hasOwnProperty("name") && (n.name = t.name), t.opType != null && t.hasOwnProperty("opType") && (n.opType = t.opType), t.attribute && t.attribute.length) {
          n.attribute = [];
          for (var s = 0; s < t.attribute.length; ++s) n.attribute[s] = h2.onnx.AttributeProto.toObject(t.attribute[s], r);
        }
        return t.docString != null && t.hasOwnProperty("docString") && (n.docString = t.docString), t.domain != null && t.hasOwnProperty("domain") && (n.domain = t.domain), n;
      }, e.prototype.toJSON = function() {
        return this.constructor.toObject(this, nt.util.toJSONOptions);
      }, e.getTypeUrl = function(t) {
        return t === void 0 && (t = "type.googleapis.com"), t + "/onnx.NodeProto";
      }, e;
    }(), i.TrainingInfoProto = function() {
      function e(o) {
        if (this.initializationBinding = [], this.updateBinding = [], o) for (var t = Object.keys(o), r = 0; r < t.length; ++r) o[t[r]] != null && (this[t[r]] = o[t[r]]);
      }
      return e.prototype.initialization = null, e.prototype.algorithm = null, e.prototype.initializationBinding = b.emptyArray, e.prototype.updateBinding = b.emptyArray, e.create = function(t) {
        return new e(t);
      }, e.encode = function(t, r) {
        if (r || (r = pt.create()), t.initialization != null && Object.hasOwnProperty.call(t, "initialization") && h2.onnx.GraphProto.encode(t.initialization, r.uint32(10).fork()).ldelim(), t.algorithm != null && Object.hasOwnProperty.call(t, "algorithm") && h2.onnx.GraphProto.encode(t.algorithm, r.uint32(18).fork()).ldelim(), t.initializationBinding != null && t.initializationBinding.length) for (var n = 0; n < t.initializationBinding.length; ++n) h2.onnx.StringStringEntryProto.encode(t.initializationBinding[n], r.uint32(26).fork()).ldelim();
        if (t.updateBinding != null && t.updateBinding.length) for (var n = 0; n < t.updateBinding.length; ++n) h2.onnx.StringStringEntryProto.encode(t.updateBinding[n], r.uint32(34).fork()).ldelim();
        return r;
      }, e.encodeDelimited = function(t, r) {
        return this.encode(t, r).ldelim();
      }, e.decode = function(t, r) {
        t instanceof $ || (t = $.create(t));
        for (var n = r === void 0 ? t.len : t.pos + r, s = new h2.onnx.TrainingInfoProto(); t.pos < n; ) {
          var a = t.uint32();
          switch (a >>> 3) {
            case 1: {
              s.initialization = h2.onnx.GraphProto.decode(t, t.uint32());
              break;
            }
            case 2: {
              s.algorithm = h2.onnx.GraphProto.decode(t, t.uint32());
              break;
            }
            case 3: {
              s.initializationBinding && s.initializationBinding.length || (s.initializationBinding = []), s.initializationBinding.push(h2.onnx.StringStringEntryProto.decode(t, t.uint32()));
              break;
            }
            case 4: {
              s.updateBinding && s.updateBinding.length || (s.updateBinding = []), s.updateBinding.push(h2.onnx.StringStringEntryProto.decode(t, t.uint32()));
              break;
            }
            default:
              t.skipType(a & 7);
              break;
          }
        }
        return s;
      }, e.decodeDelimited = function(t) {
        return t instanceof $ || (t = new $(t)), this.decode(t, t.uint32());
      }, e.verify = function(t) {
        if (typeof t != "object" || t === null) return "object expected";
        if (t.initialization != null && t.hasOwnProperty("initialization")) {
          var r = h2.onnx.GraphProto.verify(t.initialization);
          if (r) return "initialization." + r;
        }
        if (t.algorithm != null && t.hasOwnProperty("algorithm")) {
          var r = h2.onnx.GraphProto.verify(t.algorithm);
          if (r) return "algorithm." + r;
        }
        if (t.initializationBinding != null && t.hasOwnProperty("initializationBinding")) {
          if (!Array.isArray(t.initializationBinding)) return "initializationBinding: array expected";
          for (var n = 0; n < t.initializationBinding.length; ++n) {
            var r = h2.onnx.StringStringEntryProto.verify(t.initializationBinding[n]);
            if (r) return "initializationBinding." + r;
          }
        }
        if (t.updateBinding != null && t.hasOwnProperty("updateBinding")) {
          if (!Array.isArray(t.updateBinding)) return "updateBinding: array expected";
          for (var n = 0; n < t.updateBinding.length; ++n) {
            var r = h2.onnx.StringStringEntryProto.verify(t.updateBinding[n]);
            if (r) return "updateBinding." + r;
          }
        }
        return null;
      }, e.fromObject = function(t) {
        if (t instanceof h2.onnx.TrainingInfoProto) return t;
        var r = new h2.onnx.TrainingInfoProto();
        if (t.initialization != null) {
          if (typeof t.initialization != "object") throw TypeError(".onnx.TrainingInfoProto.initialization: object expected");
          r.initialization = h2.onnx.GraphProto.fromObject(t.initialization);
        }
        if (t.algorithm != null) {
          if (typeof t.algorithm != "object") throw TypeError(".onnx.TrainingInfoProto.algorithm: object expected");
          r.algorithm = h2.onnx.GraphProto.fromObject(t.algorithm);
        }
        if (t.initializationBinding) {
          if (!Array.isArray(t.initializationBinding)) throw TypeError(".onnx.TrainingInfoProto.initializationBinding: array expected");
          r.initializationBinding = [];
          for (var n = 0; n < t.initializationBinding.length; ++n) {
            if (typeof t.initializationBinding[n] != "object") throw TypeError(".onnx.TrainingInfoProto.initializationBinding: object expected");
            r.initializationBinding[n] = h2.onnx.StringStringEntryProto.fromObject(t.initializationBinding[n]);
          }
        }
        if (t.updateBinding) {
          if (!Array.isArray(t.updateBinding)) throw TypeError(".onnx.TrainingInfoProto.updateBinding: array expected");
          r.updateBinding = [];
          for (var n = 0; n < t.updateBinding.length; ++n) {
            if (typeof t.updateBinding[n] != "object") throw TypeError(".onnx.TrainingInfoProto.updateBinding: object expected");
            r.updateBinding[n] = h2.onnx.StringStringEntryProto.fromObject(t.updateBinding[n]);
          }
        }
        return r;
      }, e.toObject = function(t, r) {
        r || (r = {});
        var n = {};
        if ((r.arrays || r.defaults) && (n.initializationBinding = [], n.updateBinding = []), r.defaults && (n.initialization = null, n.algorithm = null), t.initialization != null && t.hasOwnProperty("initialization") && (n.initialization = h2.onnx.GraphProto.toObject(t.initialization, r)), t.algorithm != null && t.hasOwnProperty("algorithm") && (n.algorithm = h2.onnx.GraphProto.toObject(t.algorithm, r)), t.initializationBinding && t.initializationBinding.length) {
          n.initializationBinding = [];
          for (var s = 0; s < t.initializationBinding.length; ++s) n.initializationBinding[s] = h2.onnx.StringStringEntryProto.toObject(t.initializationBinding[s], r);
        }
        if (t.updateBinding && t.updateBinding.length) {
          n.updateBinding = [];
          for (var s = 0; s < t.updateBinding.length; ++s) n.updateBinding[s] = h2.onnx.StringStringEntryProto.toObject(t.updateBinding[s], r);
        }
        return n;
      }, e.prototype.toJSON = function() {
        return this.constructor.toObject(this, nt.util.toJSONOptions);
      }, e.getTypeUrl = function(t) {
        return t === void 0 && (t = "type.googleapis.com"), t + "/onnx.TrainingInfoProto";
      }, e;
    }(), i.ModelProto = function() {
      function e(o) {
        if (this.opsetImport = [], this.metadataProps = [], this.trainingInfo = [], this.functions = [], o) for (var t = Object.keys(o), r = 0; r < t.length; ++r) o[t[r]] != null && (this[t[r]] = o[t[r]]);
      }
      return e.prototype.irVersion = b.Long ? b.Long.fromBits(0, 0, false) : 0, e.prototype.opsetImport = b.emptyArray, e.prototype.producerName = "", e.prototype.producerVersion = "", e.prototype.domain = "", e.prototype.modelVersion = b.Long ? b.Long.fromBits(0, 0, false) : 0, e.prototype.docString = "", e.prototype.graph = null, e.prototype.metadataProps = b.emptyArray, e.prototype.trainingInfo = b.emptyArray, e.prototype.functions = b.emptyArray, e.create = function(t) {
        return new e(t);
      }, e.encode = function(t, r) {
        if (r || (r = pt.create()), t.irVersion != null && Object.hasOwnProperty.call(t, "irVersion") && r.uint32(8).int64(t.irVersion), t.producerName != null && Object.hasOwnProperty.call(t, "producerName") && r.uint32(18).string(t.producerName), t.producerVersion != null && Object.hasOwnProperty.call(t, "producerVersion") && r.uint32(26).string(t.producerVersion), t.domain != null && Object.hasOwnProperty.call(t, "domain") && r.uint32(34).string(t.domain), t.modelVersion != null && Object.hasOwnProperty.call(t, "modelVersion") && r.uint32(40).int64(t.modelVersion), t.docString != null && Object.hasOwnProperty.call(t, "docString") && r.uint32(50).string(t.docString), t.graph != null && Object.hasOwnProperty.call(t, "graph") && h2.onnx.GraphProto.encode(t.graph, r.uint32(58).fork()).ldelim(), t.opsetImport != null && t.opsetImport.length) for (var n = 0; n < t.opsetImport.length; ++n) h2.onnx.OperatorSetIdProto.encode(t.opsetImport[n], r.uint32(66).fork()).ldelim();
        if (t.metadataProps != null && t.metadataProps.length) for (var n = 0; n < t.metadataProps.length; ++n) h2.onnx.StringStringEntryProto.encode(t.metadataProps[n], r.uint32(114).fork()).ldelim();
        if (t.trainingInfo != null && t.trainingInfo.length) for (var n = 0; n < t.trainingInfo.length; ++n) h2.onnx.TrainingInfoProto.encode(t.trainingInfo[n], r.uint32(162).fork()).ldelim();
        if (t.functions != null && t.functions.length) for (var n = 0; n < t.functions.length; ++n) h2.onnx.FunctionProto.encode(t.functions[n], r.uint32(202).fork()).ldelim();
        return r;
      }, e.encodeDelimited = function(t, r) {
        return this.encode(t, r).ldelim();
      }, e.decode = function(t, r) {
        t instanceof $ || (t = $.create(t));
        for (var n = r === void 0 ? t.len : t.pos + r, s = new h2.onnx.ModelProto(); t.pos < n; ) {
          var a = t.uint32();
          switch (a >>> 3) {
            case 1: {
              s.irVersion = t.int64();
              break;
            }
            case 8: {
              s.opsetImport && s.opsetImport.length || (s.opsetImport = []), s.opsetImport.push(h2.onnx.OperatorSetIdProto.decode(t, t.uint32()));
              break;
            }
            case 2: {
              s.producerName = t.string();
              break;
            }
            case 3: {
              s.producerVersion = t.string();
              break;
            }
            case 4: {
              s.domain = t.string();
              break;
            }
            case 5: {
              s.modelVersion = t.int64();
              break;
            }
            case 6: {
              s.docString = t.string();
              break;
            }
            case 7: {
              s.graph = h2.onnx.GraphProto.decode(t, t.uint32());
              break;
            }
            case 14: {
              s.metadataProps && s.metadataProps.length || (s.metadataProps = []), s.metadataProps.push(h2.onnx.StringStringEntryProto.decode(t, t.uint32()));
              break;
            }
            case 20: {
              s.trainingInfo && s.trainingInfo.length || (s.trainingInfo = []), s.trainingInfo.push(h2.onnx.TrainingInfoProto.decode(t, t.uint32()));
              break;
            }
            case 25: {
              s.functions && s.functions.length || (s.functions = []), s.functions.push(h2.onnx.FunctionProto.decode(t, t.uint32()));
              break;
            }
            default:
              t.skipType(a & 7);
              break;
          }
        }
        return s;
      }, e.decodeDelimited = function(t) {
        return t instanceof $ || (t = new $(t)), this.decode(t, t.uint32());
      }, e.verify = function(t) {
        if (typeof t != "object" || t === null) return "object expected";
        if (t.irVersion != null && t.hasOwnProperty("irVersion") && !b.isInteger(t.irVersion) && !(t.irVersion && b.isInteger(t.irVersion.low) && b.isInteger(t.irVersion.high))) return "irVersion: integer|Long expected";
        if (t.opsetImport != null && t.hasOwnProperty("opsetImport")) {
          if (!Array.isArray(t.opsetImport)) return "opsetImport: array expected";
          for (var r = 0; r < t.opsetImport.length; ++r) {
            var n = h2.onnx.OperatorSetIdProto.verify(t.opsetImport[r]);
            if (n) return "opsetImport." + n;
          }
        }
        if (t.producerName != null && t.hasOwnProperty("producerName") && !b.isString(t.producerName)) return "producerName: string expected";
        if (t.producerVersion != null && t.hasOwnProperty("producerVersion") && !b.isString(t.producerVersion)) return "producerVersion: string expected";
        if (t.domain != null && t.hasOwnProperty("domain") && !b.isString(t.domain)) return "domain: string expected";
        if (t.modelVersion != null && t.hasOwnProperty("modelVersion") && !b.isInteger(t.modelVersion) && !(t.modelVersion && b.isInteger(t.modelVersion.low) && b.isInteger(t.modelVersion.high))) return "modelVersion: integer|Long expected";
        if (t.docString != null && t.hasOwnProperty("docString") && !b.isString(t.docString)) return "docString: string expected";
        if (t.graph != null && t.hasOwnProperty("graph")) {
          var n = h2.onnx.GraphProto.verify(t.graph);
          if (n) return "graph." + n;
        }
        if (t.metadataProps != null && t.hasOwnProperty("metadataProps")) {
          if (!Array.isArray(t.metadataProps)) return "metadataProps: array expected";
          for (var r = 0; r < t.metadataProps.length; ++r) {
            var n = h2.onnx.StringStringEntryProto.verify(t.metadataProps[r]);
            if (n) return "metadataProps." + n;
          }
        }
        if (t.trainingInfo != null && t.hasOwnProperty("trainingInfo")) {
          if (!Array.isArray(t.trainingInfo)) return "trainingInfo: array expected";
          for (var r = 0; r < t.trainingInfo.length; ++r) {
            var n = h2.onnx.TrainingInfoProto.verify(t.trainingInfo[r]);
            if (n) return "trainingInfo." + n;
          }
        }
        if (t.functions != null && t.hasOwnProperty("functions")) {
          if (!Array.isArray(t.functions)) return "functions: array expected";
          for (var r = 0; r < t.functions.length; ++r) {
            var n = h2.onnx.FunctionProto.verify(t.functions[r]);
            if (n) return "functions." + n;
          }
        }
        return null;
      }, e.fromObject = function(t) {
        if (t instanceof h2.onnx.ModelProto) return t;
        var r = new h2.onnx.ModelProto();
        if (t.irVersion != null && (b.Long ? (r.irVersion = b.Long.fromValue(t.irVersion)).unsigned = false : typeof t.irVersion == "string" ? r.irVersion = parseInt(t.irVersion, 10) : typeof t.irVersion == "number" ? r.irVersion = t.irVersion : typeof t.irVersion == "object" && (r.irVersion = new b.LongBits(t.irVersion.low >>> 0, t.irVersion.high >>> 0).toNumber())), t.opsetImport) {
          if (!Array.isArray(t.opsetImport)) throw TypeError(".onnx.ModelProto.opsetImport: array expected");
          r.opsetImport = [];
          for (var n = 0; n < t.opsetImport.length; ++n) {
            if (typeof t.opsetImport[n] != "object") throw TypeError(".onnx.ModelProto.opsetImport: object expected");
            r.opsetImport[n] = h2.onnx.OperatorSetIdProto.fromObject(t.opsetImport[n]);
          }
        }
        if (t.producerName != null && (r.producerName = String(t.producerName)), t.producerVersion != null && (r.producerVersion = String(t.producerVersion)), t.domain != null && (r.domain = String(t.domain)), t.modelVersion != null && (b.Long ? (r.modelVersion = b.Long.fromValue(t.modelVersion)).unsigned = false : typeof t.modelVersion == "string" ? r.modelVersion = parseInt(t.modelVersion, 10) : typeof t.modelVersion == "number" ? r.modelVersion = t.modelVersion : typeof t.modelVersion == "object" && (r.modelVersion = new b.LongBits(t.modelVersion.low >>> 0, t.modelVersion.high >>> 0).toNumber())), t.docString != null && (r.docString = String(t.docString)), t.graph != null) {
          if (typeof t.graph != "object") throw TypeError(".onnx.ModelProto.graph: object expected");
          r.graph = h2.onnx.GraphProto.fromObject(t.graph);
        }
        if (t.metadataProps) {
          if (!Array.isArray(t.metadataProps)) throw TypeError(".onnx.ModelProto.metadataProps: array expected");
          r.metadataProps = [];
          for (var n = 0; n < t.metadataProps.length; ++n) {
            if (typeof t.metadataProps[n] != "object") throw TypeError(".onnx.ModelProto.metadataProps: object expected");
            r.metadataProps[n] = h2.onnx.StringStringEntryProto.fromObject(t.metadataProps[n]);
          }
        }
        if (t.trainingInfo) {
          if (!Array.isArray(t.trainingInfo)) throw TypeError(".onnx.ModelProto.trainingInfo: array expected");
          r.trainingInfo = [];
          for (var n = 0; n < t.trainingInfo.length; ++n) {
            if (typeof t.trainingInfo[n] != "object") throw TypeError(".onnx.ModelProto.trainingInfo: object expected");
            r.trainingInfo[n] = h2.onnx.TrainingInfoProto.fromObject(t.trainingInfo[n]);
          }
        }
        if (t.functions) {
          if (!Array.isArray(t.functions)) throw TypeError(".onnx.ModelProto.functions: array expected");
          r.functions = [];
          for (var n = 0; n < t.functions.length; ++n) {
            if (typeof t.functions[n] != "object") throw TypeError(".onnx.ModelProto.functions: object expected");
            r.functions[n] = h2.onnx.FunctionProto.fromObject(t.functions[n]);
          }
        }
        return r;
      }, e.toObject = function(t, r) {
        r || (r = {});
        var n = {};
        if ((r.arrays || r.defaults) && (n.opsetImport = [], n.metadataProps = [], n.trainingInfo = [], n.functions = []), r.defaults) {
          if (b.Long) {
            var s = new b.Long(0, 0, false);
            n.irVersion = r.longs === String ? s.toString() : r.longs === Number ? s.toNumber() : s;
          } else n.irVersion = r.longs === String ? "0" : 0;
          if (n.producerName = "", n.producerVersion = "", n.domain = "", b.Long) {
            var s = new b.Long(0, 0, false);
            n.modelVersion = r.longs === String ? s.toString() : r.longs === Number ? s.toNumber() : s;
          } else n.modelVersion = r.longs === String ? "0" : 0;
          n.docString = "", n.graph = null;
        }
        if (t.irVersion != null && t.hasOwnProperty("irVersion") && (typeof t.irVersion == "number" ? n.irVersion = r.longs === String ? String(t.irVersion) : t.irVersion : n.irVersion = r.longs === String ? b.Long.prototype.toString.call(t.irVersion) : r.longs === Number ? new b.LongBits(t.irVersion.low >>> 0, t.irVersion.high >>> 0).toNumber() : t.irVersion), t.producerName != null && t.hasOwnProperty("producerName") && (n.producerName = t.producerName), t.producerVersion != null && t.hasOwnProperty("producerVersion") && (n.producerVersion = t.producerVersion), t.domain != null && t.hasOwnProperty("domain") && (n.domain = t.domain), t.modelVersion != null && t.hasOwnProperty("modelVersion") && (typeof t.modelVersion == "number" ? n.modelVersion = r.longs === String ? String(t.modelVersion) : t.modelVersion : n.modelVersion = r.longs === String ? b.Long.prototype.toString.call(t.modelVersion) : r.longs === Number ? new b.LongBits(t.modelVersion.low >>> 0, t.modelVersion.high >>> 0).toNumber() : t.modelVersion), t.docString != null && t.hasOwnProperty("docString") && (n.docString = t.docString), t.graph != null && t.hasOwnProperty("graph") && (n.graph = h2.onnx.GraphProto.toObject(t.graph, r)), t.opsetImport && t.opsetImport.length) {
          n.opsetImport = [];
          for (var a = 0; a < t.opsetImport.length; ++a) n.opsetImport[a] = h2.onnx.OperatorSetIdProto.toObject(t.opsetImport[a], r);
        }
        if (t.metadataProps && t.metadataProps.length) {
          n.metadataProps = [];
          for (var a = 0; a < t.metadataProps.length; ++a) n.metadataProps[a] = h2.onnx.StringStringEntryProto.toObject(t.metadataProps[a], r);
        }
        if (t.trainingInfo && t.trainingInfo.length) {
          n.trainingInfo = [];
          for (var a = 0; a < t.trainingInfo.length; ++a) n.trainingInfo[a] = h2.onnx.TrainingInfoProto.toObject(t.trainingInfo[a], r);
        }
        if (t.functions && t.functions.length) {
          n.functions = [];
          for (var a = 0; a < t.functions.length; ++a) n.functions[a] = h2.onnx.FunctionProto.toObject(t.functions[a], r);
        }
        return n;
      }, e.prototype.toJSON = function() {
        return this.constructor.toObject(this, nt.util.toJSONOptions);
      }, e.getTypeUrl = function(t) {
        return t === void 0 && (t = "type.googleapis.com"), t + "/onnx.ModelProto";
      }, e;
    }(), i.StringStringEntryProto = function() {
      function e(o) {
        if (o) for (var t = Object.keys(o), r = 0; r < t.length; ++r) o[t[r]] != null && (this[t[r]] = o[t[r]]);
      }
      return e.prototype.key = "", e.prototype.value = "", e.create = function(t) {
        return new e(t);
      }, e.encode = function(t, r) {
        return r || (r = pt.create()), t.key != null && Object.hasOwnProperty.call(t, "key") && r.uint32(10).string(t.key), t.value != null && Object.hasOwnProperty.call(t, "value") && r.uint32(18).string(t.value), r;
      }, e.encodeDelimited = function(t, r) {
        return this.encode(t, r).ldelim();
      }, e.decode = function(t, r) {
        t instanceof $ || (t = $.create(t));
        for (var n = r === void 0 ? t.len : t.pos + r, s = new h2.onnx.StringStringEntryProto(); t.pos < n; ) {
          var a = t.uint32();
          switch (a >>> 3) {
            case 1: {
              s.key = t.string();
              break;
            }
            case 2: {
              s.value = t.string();
              break;
            }
            default:
              t.skipType(a & 7);
              break;
          }
        }
        return s;
      }, e.decodeDelimited = function(t) {
        return t instanceof $ || (t = new $(t)), this.decode(t, t.uint32());
      }, e.verify = function(t) {
        return typeof t != "object" || t === null ? "object expected" : t.key != null && t.hasOwnProperty("key") && !b.isString(t.key) ? "key: string expected" : t.value != null && t.hasOwnProperty("value") && !b.isString(t.value) ? "value: string expected" : null;
      }, e.fromObject = function(t) {
        if (t instanceof h2.onnx.StringStringEntryProto) return t;
        var r = new h2.onnx.StringStringEntryProto();
        return t.key != null && (r.key = String(t.key)), t.value != null && (r.value = String(t.value)), r;
      }, e.toObject = function(t, r) {
        r || (r = {});
        var n = {};
        return r.defaults && (n.key = "", n.value = ""), t.key != null && t.hasOwnProperty("key") && (n.key = t.key), t.value != null && t.hasOwnProperty("value") && (n.value = t.value), n;
      }, e.prototype.toJSON = function() {
        return this.constructor.toObject(this, nt.util.toJSONOptions);
      }, e.getTypeUrl = function(t) {
        return t === void 0 && (t = "type.googleapis.com"), t + "/onnx.StringStringEntryProto";
      }, e;
    }(), i.TensorAnnotation = function() {
      function e(o) {
        if (this.quantParameterTensorNames = [], o) for (var t = Object.keys(o), r = 0; r < t.length; ++r) o[t[r]] != null && (this[t[r]] = o[t[r]]);
      }
      return e.prototype.tensorName = "", e.prototype.quantParameterTensorNames = b.emptyArray, e.create = function(t) {
        return new e(t);
      }, e.encode = function(t, r) {
        if (r || (r = pt.create()), t.tensorName != null && Object.hasOwnProperty.call(t, "tensorName") && r.uint32(10).string(t.tensorName), t.quantParameterTensorNames != null && t.quantParameterTensorNames.length) for (var n = 0; n < t.quantParameterTensorNames.length; ++n) h2.onnx.StringStringEntryProto.encode(t.quantParameterTensorNames[n], r.uint32(18).fork()).ldelim();
        return r;
      }, e.encodeDelimited = function(t, r) {
        return this.encode(t, r).ldelim();
      }, e.decode = function(t, r) {
        t instanceof $ || (t = $.create(t));
        for (var n = r === void 0 ? t.len : t.pos + r, s = new h2.onnx.TensorAnnotation(); t.pos < n; ) {
          var a = t.uint32();
          switch (a >>> 3) {
            case 1: {
              s.tensorName = t.string();
              break;
            }
            case 2: {
              s.quantParameterTensorNames && s.quantParameterTensorNames.length || (s.quantParameterTensorNames = []), s.quantParameterTensorNames.push(h2.onnx.StringStringEntryProto.decode(t, t.uint32()));
              break;
            }
            default:
              t.skipType(a & 7);
              break;
          }
        }
        return s;
      }, e.decodeDelimited = function(t) {
        return t instanceof $ || (t = new $(t)), this.decode(t, t.uint32());
      }, e.verify = function(t) {
        if (typeof t != "object" || t === null) return "object expected";
        if (t.tensorName != null && t.hasOwnProperty("tensorName") && !b.isString(t.tensorName)) return "tensorName: string expected";
        if (t.quantParameterTensorNames != null && t.hasOwnProperty("quantParameterTensorNames")) {
          if (!Array.isArray(t.quantParameterTensorNames)) return "quantParameterTensorNames: array expected";
          for (var r = 0; r < t.quantParameterTensorNames.length; ++r) {
            var n = h2.onnx.StringStringEntryProto.verify(t.quantParameterTensorNames[r]);
            if (n) return "quantParameterTensorNames." + n;
          }
        }
        return null;
      }, e.fromObject = function(t) {
        if (t instanceof h2.onnx.TensorAnnotation) return t;
        var r = new h2.onnx.TensorAnnotation();
        if (t.tensorName != null && (r.tensorName = String(t.tensorName)), t.quantParameterTensorNames) {
          if (!Array.isArray(t.quantParameterTensorNames)) throw TypeError(".onnx.TensorAnnotation.quantParameterTensorNames: array expected");
          r.quantParameterTensorNames = [];
          for (var n = 0; n < t.quantParameterTensorNames.length; ++n) {
            if (typeof t.quantParameterTensorNames[n] != "object") throw TypeError(".onnx.TensorAnnotation.quantParameterTensorNames: object expected");
            r.quantParameterTensorNames[n] = h2.onnx.StringStringEntryProto.fromObject(t.quantParameterTensorNames[n]);
          }
        }
        return r;
      }, e.toObject = function(t, r) {
        r || (r = {});
        var n = {};
        if ((r.arrays || r.defaults) && (n.quantParameterTensorNames = []), r.defaults && (n.tensorName = ""), t.tensorName != null && t.hasOwnProperty("tensorName") && (n.tensorName = t.tensorName), t.quantParameterTensorNames && t.quantParameterTensorNames.length) {
          n.quantParameterTensorNames = [];
          for (var s = 0; s < t.quantParameterTensorNames.length; ++s) n.quantParameterTensorNames[s] = h2.onnx.StringStringEntryProto.toObject(t.quantParameterTensorNames[s], r);
        }
        return n;
      }, e.prototype.toJSON = function() {
        return this.constructor.toObject(this, nt.util.toJSONOptions);
      }, e.getTypeUrl = function(t) {
        return t === void 0 && (t = "type.googleapis.com"), t + "/onnx.TensorAnnotation";
      }, e;
    }(), i.GraphProto = function() {
      function e(o) {
        if (this.node = [], this.initializer = [], this.sparseInitializer = [], this.input = [], this.output = [], this.valueInfo = [], this.quantizationAnnotation = [], o) for (var t = Object.keys(o), r = 0; r < t.length; ++r) o[t[r]] != null && (this[t[r]] = o[t[r]]);
      }
      return e.prototype.node = b.emptyArray, e.prototype.name = "", e.prototype.initializer = b.emptyArray, e.prototype.sparseInitializer = b.emptyArray, e.prototype.docString = "", e.prototype.input = b.emptyArray, e.prototype.output = b.emptyArray, e.prototype.valueInfo = b.emptyArray, e.prototype.quantizationAnnotation = b.emptyArray, e.create = function(t) {
        return new e(t);
      }, e.encode = function(t, r) {
        if (r || (r = pt.create()), t.node != null && t.node.length) for (var n = 0; n < t.node.length; ++n) h2.onnx.NodeProto.encode(t.node[n], r.uint32(10).fork()).ldelim();
        if (t.name != null && Object.hasOwnProperty.call(t, "name") && r.uint32(18).string(t.name), t.initializer != null && t.initializer.length) for (var n = 0; n < t.initializer.length; ++n) h2.onnx.TensorProto.encode(t.initializer[n], r.uint32(42).fork()).ldelim();
        if (t.docString != null && Object.hasOwnProperty.call(t, "docString") && r.uint32(82).string(t.docString), t.input != null && t.input.length) for (var n = 0; n < t.input.length; ++n) h2.onnx.ValueInfoProto.encode(t.input[n], r.uint32(90).fork()).ldelim();
        if (t.output != null && t.output.length) for (var n = 0; n < t.output.length; ++n) h2.onnx.ValueInfoProto.encode(t.output[n], r.uint32(98).fork()).ldelim();
        if (t.valueInfo != null && t.valueInfo.length) for (var n = 0; n < t.valueInfo.length; ++n) h2.onnx.ValueInfoProto.encode(t.valueInfo[n], r.uint32(106).fork()).ldelim();
        if (t.quantizationAnnotation != null && t.quantizationAnnotation.length) for (var n = 0; n < t.quantizationAnnotation.length; ++n) h2.onnx.TensorAnnotation.encode(t.quantizationAnnotation[n], r.uint32(114).fork()).ldelim();
        if (t.sparseInitializer != null && t.sparseInitializer.length) for (var n = 0; n < t.sparseInitializer.length; ++n) h2.onnx.SparseTensorProto.encode(t.sparseInitializer[n], r.uint32(122).fork()).ldelim();
        return r;
      }, e.encodeDelimited = function(t, r) {
        return this.encode(t, r).ldelim();
      }, e.decode = function(t, r) {
        t instanceof $ || (t = $.create(t));
        for (var n = r === void 0 ? t.len : t.pos + r, s = new h2.onnx.GraphProto(); t.pos < n; ) {
          var a = t.uint32();
          switch (a >>> 3) {
            case 1: {
              s.node && s.node.length || (s.node = []), s.node.push(h2.onnx.NodeProto.decode(t, t.uint32()));
              break;
            }
            case 2: {
              s.name = t.string();
              break;
            }
            case 5: {
              s.initializer && s.initializer.length || (s.initializer = []), s.initializer.push(h2.onnx.TensorProto.decode(t, t.uint32()));
              break;
            }
            case 15: {
              s.sparseInitializer && s.sparseInitializer.length || (s.sparseInitializer = []), s.sparseInitializer.push(h2.onnx.SparseTensorProto.decode(t, t.uint32()));
              break;
            }
            case 10: {
              s.docString = t.string();
              break;
            }
            case 11: {
              s.input && s.input.length || (s.input = []), s.input.push(h2.onnx.ValueInfoProto.decode(t, t.uint32()));
              break;
            }
            case 12: {
              s.output && s.output.length || (s.output = []), s.output.push(h2.onnx.ValueInfoProto.decode(t, t.uint32()));
              break;
            }
            case 13: {
              s.valueInfo && s.valueInfo.length || (s.valueInfo = []), s.valueInfo.push(h2.onnx.ValueInfoProto.decode(t, t.uint32()));
              break;
            }
            case 14: {
              s.quantizationAnnotation && s.quantizationAnnotation.length || (s.quantizationAnnotation = []), s.quantizationAnnotation.push(h2.onnx.TensorAnnotation.decode(t, t.uint32()));
              break;
            }
            default:
              t.skipType(a & 7);
              break;
          }
        }
        return s;
      }, e.decodeDelimited = function(t) {
        return t instanceof $ || (t = new $(t)), this.decode(t, t.uint32());
      }, e.verify = function(t) {
        if (typeof t != "object" || t === null) return "object expected";
        if (t.node != null && t.hasOwnProperty("node")) {
          if (!Array.isArray(t.node)) return "node: array expected";
          for (var r = 0; r < t.node.length; ++r) {
            var n = h2.onnx.NodeProto.verify(t.node[r]);
            if (n) return "node." + n;
          }
        }
        if (t.name != null && t.hasOwnProperty("name") && !b.isString(t.name)) return "name: string expected";
        if (t.initializer != null && t.hasOwnProperty("initializer")) {
          if (!Array.isArray(t.initializer)) return "initializer: array expected";
          for (var r = 0; r < t.initializer.length; ++r) {
            var n = h2.onnx.TensorProto.verify(t.initializer[r]);
            if (n) return "initializer." + n;
          }
        }
        if (t.sparseInitializer != null && t.hasOwnProperty("sparseInitializer")) {
          if (!Array.isArray(t.sparseInitializer)) return "sparseInitializer: array expected";
          for (var r = 0; r < t.sparseInitializer.length; ++r) {
            var n = h2.onnx.SparseTensorProto.verify(t.sparseInitializer[r]);
            if (n) return "sparseInitializer." + n;
          }
        }
        if (t.docString != null && t.hasOwnProperty("docString") && !b.isString(t.docString)) return "docString: string expected";
        if (t.input != null && t.hasOwnProperty("input")) {
          if (!Array.isArray(t.input)) return "input: array expected";
          for (var r = 0; r < t.input.length; ++r) {
            var n = h2.onnx.ValueInfoProto.verify(t.input[r]);
            if (n) return "input." + n;
          }
        }
        if (t.output != null && t.hasOwnProperty("output")) {
          if (!Array.isArray(t.output)) return "output: array expected";
          for (var r = 0; r < t.output.length; ++r) {
            var n = h2.onnx.ValueInfoProto.verify(t.output[r]);
            if (n) return "output." + n;
          }
        }
        if (t.valueInfo != null && t.hasOwnProperty("valueInfo")) {
          if (!Array.isArray(t.valueInfo)) return "valueInfo: array expected";
          for (var r = 0; r < t.valueInfo.length; ++r) {
            var n = h2.onnx.ValueInfoProto.verify(t.valueInfo[r]);
            if (n) return "valueInfo." + n;
          }
        }
        if (t.quantizationAnnotation != null && t.hasOwnProperty("quantizationAnnotation")) {
          if (!Array.isArray(t.quantizationAnnotation)) return "quantizationAnnotation: array expected";
          for (var r = 0; r < t.quantizationAnnotation.length; ++r) {
            var n = h2.onnx.TensorAnnotation.verify(t.quantizationAnnotation[r]);
            if (n) return "quantizationAnnotation." + n;
          }
        }
        return null;
      }, e.fromObject = function(t) {
        if (t instanceof h2.onnx.GraphProto) return t;
        var r = new h2.onnx.GraphProto();
        if (t.node) {
          if (!Array.isArray(t.node)) throw TypeError(".onnx.GraphProto.node: array expected");
          r.node = [];
          for (var n = 0; n < t.node.length; ++n) {
            if (typeof t.node[n] != "object") throw TypeError(".onnx.GraphProto.node: object expected");
            r.node[n] = h2.onnx.NodeProto.fromObject(t.node[n]);
          }
        }
        if (t.name != null && (r.name = String(t.name)), t.initializer) {
          if (!Array.isArray(t.initializer)) throw TypeError(".onnx.GraphProto.initializer: array expected");
          r.initializer = [];
          for (var n = 0; n < t.initializer.length; ++n) {
            if (typeof t.initializer[n] != "object") throw TypeError(".onnx.GraphProto.initializer: object expected");
            r.initializer[n] = h2.onnx.TensorProto.fromObject(t.initializer[n]);
          }
        }
        if (t.sparseInitializer) {
          if (!Array.isArray(t.sparseInitializer)) throw TypeError(".onnx.GraphProto.sparseInitializer: array expected");
          r.sparseInitializer = [];
          for (var n = 0; n < t.sparseInitializer.length; ++n) {
            if (typeof t.sparseInitializer[n] != "object") throw TypeError(".onnx.GraphProto.sparseInitializer: object expected");
            r.sparseInitializer[n] = h2.onnx.SparseTensorProto.fromObject(t.sparseInitializer[n]);
          }
        }
        if (t.docString != null && (r.docString = String(t.docString)), t.input) {
          if (!Array.isArray(t.input)) throw TypeError(".onnx.GraphProto.input: array expected");
          r.input = [];
          for (var n = 0; n < t.input.length; ++n) {
            if (typeof t.input[n] != "object") throw TypeError(".onnx.GraphProto.input: object expected");
            r.input[n] = h2.onnx.ValueInfoProto.fromObject(t.input[n]);
          }
        }
        if (t.output) {
          if (!Array.isArray(t.output)) throw TypeError(".onnx.GraphProto.output: array expected");
          r.output = [];
          for (var n = 0; n < t.output.length; ++n) {
            if (typeof t.output[n] != "object") throw TypeError(".onnx.GraphProto.output: object expected");
            r.output[n] = h2.onnx.ValueInfoProto.fromObject(t.output[n]);
          }
        }
        if (t.valueInfo) {
          if (!Array.isArray(t.valueInfo)) throw TypeError(".onnx.GraphProto.valueInfo: array expected");
          r.valueInfo = [];
          for (var n = 0; n < t.valueInfo.length; ++n) {
            if (typeof t.valueInfo[n] != "object") throw TypeError(".onnx.GraphProto.valueInfo: object expected");
            r.valueInfo[n] = h2.onnx.ValueInfoProto.fromObject(t.valueInfo[n]);
          }
        }
        if (t.quantizationAnnotation) {
          if (!Array.isArray(t.quantizationAnnotation)) throw TypeError(".onnx.GraphProto.quantizationAnnotation: array expected");
          r.quantizationAnnotation = [];
          for (var n = 0; n < t.quantizationAnnotation.length; ++n) {
            if (typeof t.quantizationAnnotation[n] != "object") throw TypeError(".onnx.GraphProto.quantizationAnnotation: object expected");
            r.quantizationAnnotation[n] = h2.onnx.TensorAnnotation.fromObject(t.quantizationAnnotation[n]);
          }
        }
        return r;
      }, e.toObject = function(t, r) {
        r || (r = {});
        var n = {};
        if ((r.arrays || r.defaults) && (n.node = [], n.initializer = [], n.input = [], n.output = [], n.valueInfo = [], n.quantizationAnnotation = [], n.sparseInitializer = []), r.defaults && (n.name = "", n.docString = ""), t.node && t.node.length) {
          n.node = [];
          for (var s = 0; s < t.node.length; ++s) n.node[s] = h2.onnx.NodeProto.toObject(t.node[s], r);
        }
        if (t.name != null && t.hasOwnProperty("name") && (n.name = t.name), t.initializer && t.initializer.length) {
          n.initializer = [];
          for (var s = 0; s < t.initializer.length; ++s) n.initializer[s] = h2.onnx.TensorProto.toObject(t.initializer[s], r);
        }
        if (t.docString != null && t.hasOwnProperty("docString") && (n.docString = t.docString), t.input && t.input.length) {
          n.input = [];
          for (var s = 0; s < t.input.length; ++s) n.input[s] = h2.onnx.ValueInfoProto.toObject(t.input[s], r);
        }
        if (t.output && t.output.length) {
          n.output = [];
          for (var s = 0; s < t.output.length; ++s) n.output[s] = h2.onnx.ValueInfoProto.toObject(t.output[s], r);
        }
        if (t.valueInfo && t.valueInfo.length) {
          n.valueInfo = [];
          for (var s = 0; s < t.valueInfo.length; ++s) n.valueInfo[s] = h2.onnx.ValueInfoProto.toObject(t.valueInfo[s], r);
        }
        if (t.quantizationAnnotation && t.quantizationAnnotation.length) {
          n.quantizationAnnotation = [];
          for (var s = 0; s < t.quantizationAnnotation.length; ++s) n.quantizationAnnotation[s] = h2.onnx.TensorAnnotation.toObject(t.quantizationAnnotation[s], r);
        }
        if (t.sparseInitializer && t.sparseInitializer.length) {
          n.sparseInitializer = [];
          for (var s = 0; s < t.sparseInitializer.length; ++s) n.sparseInitializer[s] = h2.onnx.SparseTensorProto.toObject(t.sparseInitializer[s], r);
        }
        return n;
      }, e.prototype.toJSON = function() {
        return this.constructor.toObject(this, nt.util.toJSONOptions);
      }, e.getTypeUrl = function(t) {
        return t === void 0 && (t = "type.googleapis.com"), t + "/onnx.GraphProto";
      }, e;
    }(), i.TensorProto = function() {
      function e(o) {
        if (this.dims = [], this.floatData = [], this.int32Data = [], this.stringData = [], this.int64Data = [], this.externalData = [], this.doubleData = [], this.uint64Data = [], o) for (var t = Object.keys(o), r = 0; r < t.length; ++r) o[t[r]] != null && (this[t[r]] = o[t[r]]);
      }
      return e.prototype.dims = b.emptyArray, e.prototype.dataType = 0, e.prototype.segment = null, e.prototype.floatData = b.emptyArray, e.prototype.int32Data = b.emptyArray, e.prototype.stringData = b.emptyArray, e.prototype.int64Data = b.emptyArray, e.prototype.name = "", e.prototype.docString = "", e.prototype.rawData = b.newBuffer([]), e.prototype.externalData = b.emptyArray, e.prototype.dataLocation = 0, e.prototype.doubleData = b.emptyArray, e.prototype.uint64Data = b.emptyArray, e.create = function(t) {
        return new e(t);
      }, e.encode = function(t, r) {
        if (r || (r = pt.create()), t.dims != null && t.dims.length) {
          r.uint32(10).fork();
          for (var n = 0; n < t.dims.length; ++n) r.int64(t.dims[n]);
          r.ldelim();
        }
        if (t.dataType != null && Object.hasOwnProperty.call(t, "dataType") && r.uint32(16).int32(t.dataType), t.segment != null && Object.hasOwnProperty.call(t, "segment") && h2.onnx.TensorProto.Segment.encode(t.segment, r.uint32(26).fork()).ldelim(), t.floatData != null && t.floatData.length) {
          r.uint32(34).fork();
          for (var n = 0; n < t.floatData.length; ++n) r.float(t.floatData[n]);
          r.ldelim();
        }
        if (t.int32Data != null && t.int32Data.length) {
          r.uint32(42).fork();
          for (var n = 0; n < t.int32Data.length; ++n) r.int32(t.int32Data[n]);
          r.ldelim();
        }
        if (t.stringData != null && t.stringData.length) for (var n = 0; n < t.stringData.length; ++n) r.uint32(50).bytes(t.stringData[n]);
        if (t.int64Data != null && t.int64Data.length) {
          r.uint32(58).fork();
          for (var n = 0; n < t.int64Data.length; ++n) r.int64(t.int64Data[n]);
          r.ldelim();
        }
        if (t.name != null && Object.hasOwnProperty.call(t, "name") && r.uint32(66).string(t.name), t.rawData != null && Object.hasOwnProperty.call(t, "rawData") && r.uint32(74).bytes(t.rawData), t.doubleData != null && t.doubleData.length) {
          r.uint32(82).fork();
          for (var n = 0; n < t.doubleData.length; ++n) r.double(t.doubleData[n]);
          r.ldelim();
        }
        if (t.uint64Data != null && t.uint64Data.length) {
          r.uint32(90).fork();
          for (var n = 0; n < t.uint64Data.length; ++n) r.uint64(t.uint64Data[n]);
          r.ldelim();
        }
        if (t.docString != null && Object.hasOwnProperty.call(t, "docString") && r.uint32(98).string(t.docString), t.externalData != null && t.externalData.length) for (var n = 0; n < t.externalData.length; ++n) h2.onnx.StringStringEntryProto.encode(t.externalData[n], r.uint32(106).fork()).ldelim();
        return t.dataLocation != null && Object.hasOwnProperty.call(t, "dataLocation") && r.uint32(112).int32(t.dataLocation), r;
      }, e.encodeDelimited = function(t, r) {
        return this.encode(t, r).ldelim();
      }, e.decode = function(t, r) {
        t instanceof $ || (t = $.create(t));
        for (var n = r === void 0 ? t.len : t.pos + r, s = new h2.onnx.TensorProto(); t.pos < n; ) {
          var a = t.uint32();
          switch (a >>> 3) {
            case 1: {
              if (s.dims && s.dims.length || (s.dims = []), (a & 7) === 2) for (var u = t.uint32() + t.pos; t.pos < u; ) s.dims.push(t.int64());
              else s.dims.push(t.int64());
              break;
            }
            case 2: {
              s.dataType = t.int32();
              break;
            }
            case 3: {
              s.segment = h2.onnx.TensorProto.Segment.decode(t, t.uint32());
              break;
            }
            case 4: {
              if (s.floatData && s.floatData.length || (s.floatData = []), (a & 7) === 2) for (var u = t.uint32() + t.pos; t.pos < u; ) s.floatData.push(t.float());
              else s.floatData.push(t.float());
              break;
            }
            case 5: {
              if (s.int32Data && s.int32Data.length || (s.int32Data = []), (a & 7) === 2) for (var u = t.uint32() + t.pos; t.pos < u; ) s.int32Data.push(t.int32());
              else s.int32Data.push(t.int32());
              break;
            }
            case 6: {
              s.stringData && s.stringData.length || (s.stringData = []), s.stringData.push(t.bytes());
              break;
            }
            case 7: {
              if (s.int64Data && s.int64Data.length || (s.int64Data = []), (a & 7) === 2) for (var u = t.uint32() + t.pos; t.pos < u; ) s.int64Data.push(t.int64());
              else s.int64Data.push(t.int64());
              break;
            }
            case 8: {
              s.name = t.string();
              break;
            }
            case 12: {
              s.docString = t.string();
              break;
            }
            case 9: {
              s.rawData = t.bytes();
              break;
            }
            case 13: {
              s.externalData && s.externalData.length || (s.externalData = []), s.externalData.push(h2.onnx.StringStringEntryProto.decode(t, t.uint32()));
              break;
            }
            case 14: {
              s.dataLocation = t.int32();
              break;
            }
            case 10: {
              if (s.doubleData && s.doubleData.length || (s.doubleData = []), (a & 7) === 2) for (var u = t.uint32() + t.pos; t.pos < u; ) s.doubleData.push(t.double());
              else s.doubleData.push(t.double());
              break;
            }
            case 11: {
              if (s.uint64Data && s.uint64Data.length || (s.uint64Data = []), (a & 7) === 2) for (var u = t.uint32() + t.pos; t.pos < u; ) s.uint64Data.push(t.uint64());
              else s.uint64Data.push(t.uint64());
              break;
            }
            default:
              t.skipType(a & 7);
              break;
          }
        }
        return s;
      }, e.decodeDelimited = function(t) {
        return t instanceof $ || (t = new $(t)), this.decode(t, t.uint32());
      }, e.verify = function(t) {
        if (typeof t != "object" || t === null) return "object expected";
        if (t.dims != null && t.hasOwnProperty("dims")) {
          if (!Array.isArray(t.dims)) return "dims: array expected";
          for (var r = 0; r < t.dims.length; ++r) if (!b.isInteger(t.dims[r]) && !(t.dims[r] && b.isInteger(t.dims[r].low) && b.isInteger(t.dims[r].high))) return "dims: integer|Long[] expected";
        }
        if (t.dataType != null && t.hasOwnProperty("dataType") && !b.isInteger(t.dataType)) return "dataType: integer expected";
        if (t.segment != null && t.hasOwnProperty("segment")) {
          var n = h2.onnx.TensorProto.Segment.verify(t.segment);
          if (n) return "segment." + n;
        }
        if (t.floatData != null && t.hasOwnProperty("floatData")) {
          if (!Array.isArray(t.floatData)) return "floatData: array expected";
          for (var r = 0; r < t.floatData.length; ++r) if (typeof t.floatData[r] != "number") return "floatData: number[] expected";
        }
        if (t.int32Data != null && t.hasOwnProperty("int32Data")) {
          if (!Array.isArray(t.int32Data)) return "int32Data: array expected";
          for (var r = 0; r < t.int32Data.length; ++r) if (!b.isInteger(t.int32Data[r])) return "int32Data: integer[] expected";
        }
        if (t.stringData != null && t.hasOwnProperty("stringData")) {
          if (!Array.isArray(t.stringData)) return "stringData: array expected";
          for (var r = 0; r < t.stringData.length; ++r) if (!(t.stringData[r] && typeof t.stringData[r].length == "number" || b.isString(t.stringData[r]))) return "stringData: buffer[] expected";
        }
        if (t.int64Data != null && t.hasOwnProperty("int64Data")) {
          if (!Array.isArray(t.int64Data)) return "int64Data: array expected";
          for (var r = 0; r < t.int64Data.length; ++r) if (!b.isInteger(t.int64Data[r]) && !(t.int64Data[r] && b.isInteger(t.int64Data[r].low) && b.isInteger(t.int64Data[r].high))) return "int64Data: integer|Long[] expected";
        }
        if (t.name != null && t.hasOwnProperty("name") && !b.isString(t.name)) return "name: string expected";
        if (t.docString != null && t.hasOwnProperty("docString") && !b.isString(t.docString)) return "docString: string expected";
        if (t.rawData != null && t.hasOwnProperty("rawData") && !(t.rawData && typeof t.rawData.length == "number" || b.isString(t.rawData))) return "rawData: buffer expected";
        if (t.externalData != null && t.hasOwnProperty("externalData")) {
          if (!Array.isArray(t.externalData)) return "externalData: array expected";
          for (var r = 0; r < t.externalData.length; ++r) {
            var n = h2.onnx.StringStringEntryProto.verify(t.externalData[r]);
            if (n) return "externalData." + n;
          }
        }
        if (t.dataLocation != null && t.hasOwnProperty("dataLocation")) switch (t.dataLocation) {
          default:
            return "dataLocation: enum value expected";
          case 0:
          case 1:
            break;
        }
        if (t.doubleData != null && t.hasOwnProperty("doubleData")) {
          if (!Array.isArray(t.doubleData)) return "doubleData: array expected";
          for (var r = 0; r < t.doubleData.length; ++r) if (typeof t.doubleData[r] != "number") return "doubleData: number[] expected";
        }
        if (t.uint64Data != null && t.hasOwnProperty("uint64Data")) {
          if (!Array.isArray(t.uint64Data)) return "uint64Data: array expected";
          for (var r = 0; r < t.uint64Data.length; ++r) if (!b.isInteger(t.uint64Data[r]) && !(t.uint64Data[r] && b.isInteger(t.uint64Data[r].low) && b.isInteger(t.uint64Data[r].high))) return "uint64Data: integer|Long[] expected";
        }
        return null;
      }, e.fromObject = function(t) {
        if (t instanceof h2.onnx.TensorProto) return t;
        var r = new h2.onnx.TensorProto();
        if (t.dims) {
          if (!Array.isArray(t.dims)) throw TypeError(".onnx.TensorProto.dims: array expected");
          r.dims = [];
          for (var n = 0; n < t.dims.length; ++n) b.Long ? (r.dims[n] = b.Long.fromValue(t.dims[n])).unsigned = false : typeof t.dims[n] == "string" ? r.dims[n] = parseInt(t.dims[n], 10) : typeof t.dims[n] == "number" ? r.dims[n] = t.dims[n] : typeof t.dims[n] == "object" && (r.dims[n] = new b.LongBits(t.dims[n].low >>> 0, t.dims[n].high >>> 0).toNumber());
        }
        if (t.dataType != null && (r.dataType = t.dataType | 0), t.segment != null) {
          if (typeof t.segment != "object") throw TypeError(".onnx.TensorProto.segment: object expected");
          r.segment = h2.onnx.TensorProto.Segment.fromObject(t.segment);
        }
        if (t.floatData) {
          if (!Array.isArray(t.floatData)) throw TypeError(".onnx.TensorProto.floatData: array expected");
          r.floatData = [];
          for (var n = 0; n < t.floatData.length; ++n) r.floatData[n] = Number(t.floatData[n]);
        }
        if (t.int32Data) {
          if (!Array.isArray(t.int32Data)) throw TypeError(".onnx.TensorProto.int32Data: array expected");
          r.int32Data = [];
          for (var n = 0; n < t.int32Data.length; ++n) r.int32Data[n] = t.int32Data[n] | 0;
        }
        if (t.stringData) {
          if (!Array.isArray(t.stringData)) throw TypeError(".onnx.TensorProto.stringData: array expected");
          r.stringData = [];
          for (var n = 0; n < t.stringData.length; ++n) typeof t.stringData[n] == "string" ? b.base64.decode(t.stringData[n], r.stringData[n] = b.newBuffer(b.base64.length(t.stringData[n])), 0) : t.stringData[n].length >= 0 && (r.stringData[n] = t.stringData[n]);
        }
        if (t.int64Data) {
          if (!Array.isArray(t.int64Data)) throw TypeError(".onnx.TensorProto.int64Data: array expected");
          r.int64Data = [];
          for (var n = 0; n < t.int64Data.length; ++n) b.Long ? (r.int64Data[n] = b.Long.fromValue(t.int64Data[n])).unsigned = false : typeof t.int64Data[n] == "string" ? r.int64Data[n] = parseInt(t.int64Data[n], 10) : typeof t.int64Data[n] == "number" ? r.int64Data[n] = t.int64Data[n] : typeof t.int64Data[n] == "object" && (r.int64Data[n] = new b.LongBits(t.int64Data[n].low >>> 0, t.int64Data[n].high >>> 0).toNumber());
        }
        if (t.name != null && (r.name = String(t.name)), t.docString != null && (r.docString = String(t.docString)), t.rawData != null && (typeof t.rawData == "string" ? b.base64.decode(t.rawData, r.rawData = b.newBuffer(b.base64.length(t.rawData)), 0) : t.rawData.length >= 0 && (r.rawData = t.rawData)), t.externalData) {
          if (!Array.isArray(t.externalData)) throw TypeError(".onnx.TensorProto.externalData: array expected");
          r.externalData = [];
          for (var n = 0; n < t.externalData.length; ++n) {
            if (typeof t.externalData[n] != "object") throw TypeError(".onnx.TensorProto.externalData: object expected");
            r.externalData[n] = h2.onnx.StringStringEntryProto.fromObject(t.externalData[n]);
          }
        }
        switch (t.dataLocation) {
          default:
            if (typeof t.dataLocation == "number") {
              r.dataLocation = t.dataLocation;
              break;
            }
            break;
          case "DEFAULT":
          case 0:
            r.dataLocation = 0;
            break;
          case "EXTERNAL":
          case 1:
            r.dataLocation = 1;
            break;
        }
        if (t.doubleData) {
          if (!Array.isArray(t.doubleData)) throw TypeError(".onnx.TensorProto.doubleData: array expected");
          r.doubleData = [];
          for (var n = 0; n < t.doubleData.length; ++n) r.doubleData[n] = Number(t.doubleData[n]);
        }
        if (t.uint64Data) {
          if (!Array.isArray(t.uint64Data)) throw TypeError(".onnx.TensorProto.uint64Data: array expected");
          r.uint64Data = [];
          for (var n = 0; n < t.uint64Data.length; ++n) b.Long ? (r.uint64Data[n] = b.Long.fromValue(t.uint64Data[n])).unsigned = true : typeof t.uint64Data[n] == "string" ? r.uint64Data[n] = parseInt(t.uint64Data[n], 10) : typeof t.uint64Data[n] == "number" ? r.uint64Data[n] = t.uint64Data[n] : typeof t.uint64Data[n] == "object" && (r.uint64Data[n] = new b.LongBits(t.uint64Data[n].low >>> 0, t.uint64Data[n].high >>> 0).toNumber(true));
        }
        return r;
      }, e.toObject = function(t, r) {
        r || (r = {});
        var n = {};
        if ((r.arrays || r.defaults) && (n.dims = [], n.floatData = [], n.int32Data = [], n.stringData = [], n.int64Data = [], n.doubleData = [], n.uint64Data = [], n.externalData = []), r.defaults && (n.dataType = 0, n.segment = null, n.name = "", r.bytes === String ? n.rawData = "" : (n.rawData = [], r.bytes !== Array && (n.rawData = b.newBuffer(n.rawData))), n.docString = "", n.dataLocation = r.enums === String ? "DEFAULT" : 0), t.dims && t.dims.length) {
          n.dims = [];
          for (var s = 0; s < t.dims.length; ++s) typeof t.dims[s] == "number" ? n.dims[s] = r.longs === String ? String(t.dims[s]) : t.dims[s] : n.dims[s] = r.longs === String ? b.Long.prototype.toString.call(t.dims[s]) : r.longs === Number ? new b.LongBits(t.dims[s].low >>> 0, t.dims[s].high >>> 0).toNumber() : t.dims[s];
        }
        if (t.dataType != null && t.hasOwnProperty("dataType") && (n.dataType = t.dataType), t.segment != null && t.hasOwnProperty("segment") && (n.segment = h2.onnx.TensorProto.Segment.toObject(t.segment, r)), t.floatData && t.floatData.length) {
          n.floatData = [];
          for (var s = 0; s < t.floatData.length; ++s) n.floatData[s] = r.json && !isFinite(t.floatData[s]) ? String(t.floatData[s]) : t.floatData[s];
        }
        if (t.int32Data && t.int32Data.length) {
          n.int32Data = [];
          for (var s = 0; s < t.int32Data.length; ++s) n.int32Data[s] = t.int32Data[s];
        }
        if (t.stringData && t.stringData.length) {
          n.stringData = [];
          for (var s = 0; s < t.stringData.length; ++s) n.stringData[s] = r.bytes === String ? b.base64.encode(t.stringData[s], 0, t.stringData[s].length) : r.bytes === Array ? Array.prototype.slice.call(t.stringData[s]) : t.stringData[s];
        }
        if (t.int64Data && t.int64Data.length) {
          n.int64Data = [];
          for (var s = 0; s < t.int64Data.length; ++s) typeof t.int64Data[s] == "number" ? n.int64Data[s] = r.longs === String ? String(t.int64Data[s]) : t.int64Data[s] : n.int64Data[s] = r.longs === String ? b.Long.prototype.toString.call(t.int64Data[s]) : r.longs === Number ? new b.LongBits(t.int64Data[s].low >>> 0, t.int64Data[s].high >>> 0).toNumber() : t.int64Data[s];
        }
        if (t.name != null && t.hasOwnProperty("name") && (n.name = t.name), t.rawData != null && t.hasOwnProperty("rawData") && (n.rawData = r.bytes === String ? b.base64.encode(t.rawData, 0, t.rawData.length) : r.bytes === Array ? Array.prototype.slice.call(t.rawData) : t.rawData), t.doubleData && t.doubleData.length) {
          n.doubleData = [];
          for (var s = 0; s < t.doubleData.length; ++s) n.doubleData[s] = r.json && !isFinite(t.doubleData[s]) ? String(t.doubleData[s]) : t.doubleData[s];
        }
        if (t.uint64Data && t.uint64Data.length) {
          n.uint64Data = [];
          for (var s = 0; s < t.uint64Data.length; ++s) typeof t.uint64Data[s] == "number" ? n.uint64Data[s] = r.longs === String ? String(t.uint64Data[s]) : t.uint64Data[s] : n.uint64Data[s] = r.longs === String ? b.Long.prototype.toString.call(t.uint64Data[s]) : r.longs === Number ? new b.LongBits(t.uint64Data[s].low >>> 0, t.uint64Data[s].high >>> 0).toNumber(true) : t.uint64Data[s];
        }
        if (t.docString != null && t.hasOwnProperty("docString") && (n.docString = t.docString), t.externalData && t.externalData.length) {
          n.externalData = [];
          for (var s = 0; s < t.externalData.length; ++s) n.externalData[s] = h2.onnx.StringStringEntryProto.toObject(t.externalData[s], r);
        }
        return t.dataLocation != null && t.hasOwnProperty("dataLocation") && (n.dataLocation = r.enums === String ? h2.onnx.TensorProto.DataLocation[t.dataLocation] === void 0 ? t.dataLocation : h2.onnx.TensorProto.DataLocation[t.dataLocation] : t.dataLocation), n;
      }, e.prototype.toJSON = function() {
        return this.constructor.toObject(this, nt.util.toJSONOptions);
      }, e.getTypeUrl = function(t) {
        return t === void 0 && (t = "type.googleapis.com"), t + "/onnx.TensorProto";
      }, e.DataType = function() {
        var o = {}, t = Object.create(o);
        return t[o[0] = "UNDEFINED"] = 0, t[o[1] = "FLOAT"] = 1, t[o[2] = "UINT8"] = 2, t[o[3] = "INT8"] = 3, t[o[4] = "UINT16"] = 4, t[o[5] = "INT16"] = 5, t[o[6] = "INT32"] = 6, t[o[7] = "INT64"] = 7, t[o[8] = "STRING"] = 8, t[o[9] = "BOOL"] = 9, t[o[10] = "FLOAT16"] = 10, t[o[11] = "DOUBLE"] = 11, t[o[12] = "UINT32"] = 12, t[o[13] = "UINT64"] = 13, t[o[14] = "COMPLEX64"] = 14, t[o[15] = "COMPLEX128"] = 15, t[o[16] = "BFLOAT16"] = 16, t[o[17] = "FLOAT8E4M3FN"] = 17, t[o[18] = "FLOAT8E4M3FNUZ"] = 18, t[o[19] = "FLOAT8E5M2"] = 19, t[o[20] = "FLOAT8E5M2FNUZ"] = 20, t;
      }(), e.Segment = function() {
        function o(t) {
          if (t) for (var r = Object.keys(t), n = 0; n < r.length; ++n) t[r[n]] != null && (this[r[n]] = t[r[n]]);
        }
        return o.prototype.begin = b.Long ? b.Long.fromBits(0, 0, false) : 0, o.prototype.end = b.Long ? b.Long.fromBits(0, 0, false) : 0, o.create = function(r) {
          return new o(r);
        }, o.encode = function(r, n) {
          return n || (n = pt.create()), r.begin != null && Object.hasOwnProperty.call(r, "begin") && n.uint32(8).int64(r.begin), r.end != null && Object.hasOwnProperty.call(r, "end") && n.uint32(16).int64(r.end), n;
        }, o.encodeDelimited = function(r, n) {
          return this.encode(r, n).ldelim();
        }, o.decode = function(r, n) {
          r instanceof $ || (r = $.create(r));
          for (var s = n === void 0 ? r.len : r.pos + n, a = new h2.onnx.TensorProto.Segment(); r.pos < s; ) {
            var u = r.uint32();
            switch (u >>> 3) {
              case 1: {
                a.begin = r.int64();
                break;
              }
              case 2: {
                a.end = r.int64();
                break;
              }
              default:
                r.skipType(u & 7);
                break;
            }
          }
          return a;
        }, o.decodeDelimited = function(r) {
          return r instanceof $ || (r = new $(r)), this.decode(r, r.uint32());
        }, o.verify = function(r) {
          return typeof r != "object" || r === null ? "object expected" : r.begin != null && r.hasOwnProperty("begin") && !b.isInteger(r.begin) && !(r.begin && b.isInteger(r.begin.low) && b.isInteger(r.begin.high)) ? "begin: integer|Long expected" : r.end != null && r.hasOwnProperty("end") && !b.isInteger(r.end) && !(r.end && b.isInteger(r.end.low) && b.isInteger(r.end.high)) ? "end: integer|Long expected" : null;
        }, o.fromObject = function(r) {
          if (r instanceof h2.onnx.TensorProto.Segment) return r;
          var n = new h2.onnx.TensorProto.Segment();
          return r.begin != null && (b.Long ? (n.begin = b.Long.fromValue(r.begin)).unsigned = false : typeof r.begin == "string" ? n.begin = parseInt(r.begin, 10) : typeof r.begin == "number" ? n.begin = r.begin : typeof r.begin == "object" && (n.begin = new b.LongBits(r.begin.low >>> 0, r.begin.high >>> 0).toNumber())), r.end != null && (b.Long ? (n.end = b.Long.fromValue(r.end)).unsigned = false : typeof r.end == "string" ? n.end = parseInt(r.end, 10) : typeof r.end == "number" ? n.end = r.end : typeof r.end == "object" && (n.end = new b.LongBits(r.end.low >>> 0, r.end.high >>> 0).toNumber())), n;
        }, o.toObject = function(r, n) {
          n || (n = {});
          var s = {};
          if (n.defaults) {
            if (b.Long) {
              var a = new b.Long(0, 0, false);
              s.begin = n.longs === String ? a.toString() : n.longs === Number ? a.toNumber() : a;
            } else s.begin = n.longs === String ? "0" : 0;
            if (b.Long) {
              var a = new b.Long(0, 0, false);
              s.end = n.longs === String ? a.toString() : n.longs === Number ? a.toNumber() : a;
            } else s.end = n.longs === String ? "0" : 0;
          }
          return r.begin != null && r.hasOwnProperty("begin") && (typeof r.begin == "number" ? s.begin = n.longs === String ? String(r.begin) : r.begin : s.begin = n.longs === String ? b.Long.prototype.toString.call(r.begin) : n.longs === Number ? new b.LongBits(r.begin.low >>> 0, r.begin.high >>> 0).toNumber() : r.begin), r.end != null && r.hasOwnProperty("end") && (typeof r.end == "number" ? s.end = n.longs === String ? String(r.end) : r.end : s.end = n.longs === String ? b.Long.prototype.toString.call(r.end) : n.longs === Number ? new b.LongBits(r.end.low >>> 0, r.end.high >>> 0).toNumber() : r.end), s;
        }, o.prototype.toJSON = function() {
          return this.constructor.toObject(this, nt.util.toJSONOptions);
        }, o.getTypeUrl = function(r) {
          return r === void 0 && (r = "type.googleapis.com"), r + "/onnx.TensorProto.Segment";
        }, o;
      }(), e.DataLocation = function() {
        var o = {}, t = Object.create(o);
        return t[o[0] = "DEFAULT"] = 0, t[o[1] = "EXTERNAL"] = 1, t;
      }(), e;
    }(), i.SparseTensorProto = function() {
      function e(o) {
        if (this.dims = [], o) for (var t = Object.keys(o), r = 0; r < t.length; ++r) o[t[r]] != null && (this[t[r]] = o[t[r]]);
      }
      return e.prototype.values = null, e.prototype.indices = null, e.prototype.dims = b.emptyArray, e.create = function(t) {
        return new e(t);
      }, e.encode = function(t, r) {
        if (r || (r = pt.create()), t.values != null && Object.hasOwnProperty.call(t, "values") && h2.onnx.TensorProto.encode(t.values, r.uint32(10).fork()).ldelim(), t.indices != null && Object.hasOwnProperty.call(t, "indices") && h2.onnx.TensorProto.encode(t.indices, r.uint32(18).fork()).ldelim(), t.dims != null && t.dims.length) {
          r.uint32(26).fork();
          for (var n = 0; n < t.dims.length; ++n) r.int64(t.dims[n]);
          r.ldelim();
        }
        return r;
      }, e.encodeDelimited = function(t, r) {
        return this.encode(t, r).ldelim();
      }, e.decode = function(t, r) {
        t instanceof $ || (t = $.create(t));
        for (var n = r === void 0 ? t.len : t.pos + r, s = new h2.onnx.SparseTensorProto(); t.pos < n; ) {
          var a = t.uint32();
          switch (a >>> 3) {
            case 1: {
              s.values = h2.onnx.TensorProto.decode(t, t.uint32());
              break;
            }
            case 2: {
              s.indices = h2.onnx.TensorProto.decode(t, t.uint32());
              break;
            }
            case 3: {
              if (s.dims && s.dims.length || (s.dims = []), (a & 7) === 2) for (var u = t.uint32() + t.pos; t.pos < u; ) s.dims.push(t.int64());
              else s.dims.push(t.int64());
              break;
            }
            default:
              t.skipType(a & 7);
              break;
          }
        }
        return s;
      }, e.decodeDelimited = function(t) {
        return t instanceof $ || (t = new $(t)), this.decode(t, t.uint32());
      }, e.verify = function(t) {
        if (typeof t != "object" || t === null) return "object expected";
        if (t.values != null && t.hasOwnProperty("values")) {
          var r = h2.onnx.TensorProto.verify(t.values);
          if (r) return "values." + r;
        }
        if (t.indices != null && t.hasOwnProperty("indices")) {
          var r = h2.onnx.TensorProto.verify(t.indices);
          if (r) return "indices." + r;
        }
        if (t.dims != null && t.hasOwnProperty("dims")) {
          if (!Array.isArray(t.dims)) return "dims: array expected";
          for (var n = 0; n < t.dims.length; ++n) if (!b.isInteger(t.dims[n]) && !(t.dims[n] && b.isInteger(t.dims[n].low) && b.isInteger(t.dims[n].high))) return "dims: integer|Long[] expected";
        }
        return null;
      }, e.fromObject = function(t) {
        if (t instanceof h2.onnx.SparseTensorProto) return t;
        var r = new h2.onnx.SparseTensorProto();
        if (t.values != null) {
          if (typeof t.values != "object") throw TypeError(".onnx.SparseTensorProto.values: object expected");
          r.values = h2.onnx.TensorProto.fromObject(t.values);
        }
        if (t.indices != null) {
          if (typeof t.indices != "object") throw TypeError(".onnx.SparseTensorProto.indices: object expected");
          r.indices = h2.onnx.TensorProto.fromObject(t.indices);
        }
        if (t.dims) {
          if (!Array.isArray(t.dims)) throw TypeError(".onnx.SparseTensorProto.dims: array expected");
          r.dims = [];
          for (var n = 0; n < t.dims.length; ++n) b.Long ? (r.dims[n] = b.Long.fromValue(t.dims[n])).unsigned = false : typeof t.dims[n] == "string" ? r.dims[n] = parseInt(t.dims[n], 10) : typeof t.dims[n] == "number" ? r.dims[n] = t.dims[n] : typeof t.dims[n] == "object" && (r.dims[n] = new b.LongBits(t.dims[n].low >>> 0, t.dims[n].high >>> 0).toNumber());
        }
        return r;
      }, e.toObject = function(t, r) {
        r || (r = {});
        var n = {};
        if ((r.arrays || r.defaults) && (n.dims = []), r.defaults && (n.values = null, n.indices = null), t.values != null && t.hasOwnProperty("values") && (n.values = h2.onnx.TensorProto.toObject(t.values, r)), t.indices != null && t.hasOwnProperty("indices") && (n.indices = h2.onnx.TensorProto.toObject(t.indices, r)), t.dims && t.dims.length) {
          n.dims = [];
          for (var s = 0; s < t.dims.length; ++s) typeof t.dims[s] == "number" ? n.dims[s] = r.longs === String ? String(t.dims[s]) : t.dims[s] : n.dims[s] = r.longs === String ? b.Long.prototype.toString.call(t.dims[s]) : r.longs === Number ? new b.LongBits(t.dims[s].low >>> 0, t.dims[s].high >>> 0).toNumber() : t.dims[s];
        }
        return n;
      }, e.prototype.toJSON = function() {
        return this.constructor.toObject(this, nt.util.toJSONOptions);
      }, e.getTypeUrl = function(t) {
        return t === void 0 && (t = "type.googleapis.com"), t + "/onnx.SparseTensorProto";
      }, e;
    }(), i.TensorShapeProto = function() {
      function e(o) {
        if (this.dim = [], o) for (var t = Object.keys(o), r = 0; r < t.length; ++r) o[t[r]] != null && (this[t[r]] = o[t[r]]);
      }
      return e.prototype.dim = b.emptyArray, e.create = function(t) {
        return new e(t);
      }, e.encode = function(t, r) {
        if (r || (r = pt.create()), t.dim != null && t.dim.length) for (var n = 0; n < t.dim.length; ++n) h2.onnx.TensorShapeProto.Dimension.encode(t.dim[n], r.uint32(10).fork()).ldelim();
        return r;
      }, e.encodeDelimited = function(t, r) {
        return this.encode(t, r).ldelim();
      }, e.decode = function(t, r) {
        t instanceof $ || (t = $.create(t));
        for (var n = r === void 0 ? t.len : t.pos + r, s = new h2.onnx.TensorShapeProto(); t.pos < n; ) {
          var a = t.uint32();
          switch (a >>> 3) {
            case 1: {
              s.dim && s.dim.length || (s.dim = []), s.dim.push(h2.onnx.TensorShapeProto.Dimension.decode(t, t.uint32()));
              break;
            }
            default:
              t.skipType(a & 7);
              break;
          }
        }
        return s;
      }, e.decodeDelimited = function(t) {
        return t instanceof $ || (t = new $(t)), this.decode(t, t.uint32());
      }, e.verify = function(t) {
        if (typeof t != "object" || t === null) return "object expected";
        if (t.dim != null && t.hasOwnProperty("dim")) {
          if (!Array.isArray(t.dim)) return "dim: array expected";
          for (var r = 0; r < t.dim.length; ++r) {
            var n = h2.onnx.TensorShapeProto.Dimension.verify(t.dim[r]);
            if (n) return "dim." + n;
          }
        }
        return null;
      }, e.fromObject = function(t) {
        if (t instanceof h2.onnx.TensorShapeProto) return t;
        var r = new h2.onnx.TensorShapeProto();
        if (t.dim) {
          if (!Array.isArray(t.dim)) throw TypeError(".onnx.TensorShapeProto.dim: array expected");
          r.dim = [];
          for (var n = 0; n < t.dim.length; ++n) {
            if (typeof t.dim[n] != "object") throw TypeError(".onnx.TensorShapeProto.dim: object expected");
            r.dim[n] = h2.onnx.TensorShapeProto.Dimension.fromObject(t.dim[n]);
          }
        }
        return r;
      }, e.toObject = function(t, r) {
        r || (r = {});
        var n = {};
        if ((r.arrays || r.defaults) && (n.dim = []), t.dim && t.dim.length) {
          n.dim = [];
          for (var s = 0; s < t.dim.length; ++s) n.dim[s] = h2.onnx.TensorShapeProto.Dimension.toObject(t.dim[s], r);
        }
        return n;
      }, e.prototype.toJSON = function() {
        return this.constructor.toObject(this, nt.util.toJSONOptions);
      }, e.getTypeUrl = function(t) {
        return t === void 0 && (t = "type.googleapis.com"), t + "/onnx.TensorShapeProto";
      }, e.Dimension = function() {
        function o(r) {
          if (r) for (var n = Object.keys(r), s = 0; s < n.length; ++s) r[n[s]] != null && (this[n[s]] = r[n[s]]);
        }
        o.prototype.dimValue = null, o.prototype.dimParam = null, o.prototype.denotation = "";
        var t;
        return Object.defineProperty(o.prototype, "value", { get: b.oneOfGetter(t = ["dimValue", "dimParam"]), set: b.oneOfSetter(t) }), o.create = function(n) {
          return new o(n);
        }, o.encode = function(n, s) {
          return s || (s = pt.create()), n.dimValue != null && Object.hasOwnProperty.call(n, "dimValue") && s.uint32(8).int64(n.dimValue), n.dimParam != null && Object.hasOwnProperty.call(n, "dimParam") && s.uint32(18).string(n.dimParam), n.denotation != null && Object.hasOwnProperty.call(n, "denotation") && s.uint32(26).string(n.denotation), s;
        }, o.encodeDelimited = function(n, s) {
          return this.encode(n, s).ldelim();
        }, o.decode = function(n, s) {
          n instanceof $ || (n = $.create(n));
          for (var a = s === void 0 ? n.len : n.pos + s, u = new h2.onnx.TensorShapeProto.Dimension(); n.pos < a; ) {
            var l = n.uint32();
            switch (l >>> 3) {
              case 1: {
                u.dimValue = n.int64();
                break;
              }
              case 2: {
                u.dimParam = n.string();
                break;
              }
              case 3: {
                u.denotation = n.string();
                break;
              }
              default:
                n.skipType(l & 7);
                break;
            }
          }
          return u;
        }, o.decodeDelimited = function(n) {
          return n instanceof $ || (n = new $(n)), this.decode(n, n.uint32());
        }, o.verify = function(n) {
          if (typeof n != "object" || n === null) return "object expected";
          var s = {};
          if (n.dimValue != null && n.hasOwnProperty("dimValue") && (s.value = 1, !b.isInteger(n.dimValue) && !(n.dimValue && b.isInteger(n.dimValue.low) && b.isInteger(n.dimValue.high)))) return "dimValue: integer|Long expected";
          if (n.dimParam != null && n.hasOwnProperty("dimParam")) {
            if (s.value === 1) return "value: multiple values";
            if (s.value = 1, !b.isString(n.dimParam)) return "dimParam: string expected";
          }
          return n.denotation != null && n.hasOwnProperty("denotation") && !b.isString(n.denotation) ? "denotation: string expected" : null;
        }, o.fromObject = function(n) {
          if (n instanceof h2.onnx.TensorShapeProto.Dimension) return n;
          var s = new h2.onnx.TensorShapeProto.Dimension();
          return n.dimValue != null && (b.Long ? (s.dimValue = b.Long.fromValue(n.dimValue)).unsigned = false : typeof n.dimValue == "string" ? s.dimValue = parseInt(n.dimValue, 10) : typeof n.dimValue == "number" ? s.dimValue = n.dimValue : typeof n.dimValue == "object" && (s.dimValue = new b.LongBits(n.dimValue.low >>> 0, n.dimValue.high >>> 0).toNumber())), n.dimParam != null && (s.dimParam = String(n.dimParam)), n.denotation != null && (s.denotation = String(n.denotation)), s;
        }, o.toObject = function(n, s) {
          s || (s = {});
          var a = {};
          return s.defaults && (a.denotation = ""), n.dimValue != null && n.hasOwnProperty("dimValue") && (typeof n.dimValue == "number" ? a.dimValue = s.longs === String ? String(n.dimValue) : n.dimValue : a.dimValue = s.longs === String ? b.Long.prototype.toString.call(n.dimValue) : s.longs === Number ? new b.LongBits(n.dimValue.low >>> 0, n.dimValue.high >>> 0).toNumber() : n.dimValue, s.oneofs && (a.value = "dimValue")), n.dimParam != null && n.hasOwnProperty("dimParam") && (a.dimParam = n.dimParam, s.oneofs && (a.value = "dimParam")), n.denotation != null && n.hasOwnProperty("denotation") && (a.denotation = n.denotation), a;
        }, o.prototype.toJSON = function() {
          return this.constructor.toObject(this, nt.util.toJSONOptions);
        }, o.getTypeUrl = function(n) {
          return n === void 0 && (n = "type.googleapis.com"), n + "/onnx.TensorShapeProto.Dimension";
        }, o;
      }(), e;
    }(), i.TypeProto = function() {
      function e(t) {
        if (t) for (var r = Object.keys(t), n = 0; n < r.length; ++n) t[r[n]] != null && (this[r[n]] = t[r[n]]);
      }
      e.prototype.tensorType = null, e.prototype.sequenceType = null, e.prototype.mapType = null, e.prototype.optionalType = null, e.prototype.sparseTensorType = null, e.prototype.denotation = "";
      var o;
      return Object.defineProperty(e.prototype, "value", { get: b.oneOfGetter(o = ["tensorType", "sequenceType", "mapType", "optionalType", "sparseTensorType"]), set: b.oneOfSetter(o) }), e.create = function(r) {
        return new e(r);
      }, e.encode = function(r, n) {
        return n || (n = pt.create()), r.tensorType != null && Object.hasOwnProperty.call(r, "tensorType") && h2.onnx.TypeProto.Tensor.encode(r.tensorType, n.uint32(10).fork()).ldelim(), r.sequenceType != null && Object.hasOwnProperty.call(r, "sequenceType") && h2.onnx.TypeProto.Sequence.encode(r.sequenceType, n.uint32(34).fork()).ldelim(), r.mapType != null && Object.hasOwnProperty.call(r, "mapType") && h2.onnx.TypeProto.Map.encode(r.mapType, n.uint32(42).fork()).ldelim(), r.denotation != null && Object.hasOwnProperty.call(r, "denotation") && n.uint32(50).string(r.denotation), r.sparseTensorType != null && Object.hasOwnProperty.call(r, "sparseTensorType") && h2.onnx.TypeProto.SparseTensor.encode(r.sparseTensorType, n.uint32(66).fork()).ldelim(), r.optionalType != null && Object.hasOwnProperty.call(r, "optionalType") && h2.onnx.TypeProto.Optional.encode(r.optionalType, n.uint32(74).fork()).ldelim(), n;
      }, e.encodeDelimited = function(r, n) {
        return this.encode(r, n).ldelim();
      }, e.decode = function(r, n) {
        r instanceof $ || (r = $.create(r));
        for (var s = n === void 0 ? r.len : r.pos + n, a = new h2.onnx.TypeProto(); r.pos < s; ) {
          var u = r.uint32();
          switch (u >>> 3) {
            case 1: {
              a.tensorType = h2.onnx.TypeProto.Tensor.decode(r, r.uint32());
              break;
            }
            case 4: {
              a.sequenceType = h2.onnx.TypeProto.Sequence.decode(r, r.uint32());
              break;
            }
            case 5: {
              a.mapType = h2.onnx.TypeProto.Map.decode(r, r.uint32());
              break;
            }
            case 9: {
              a.optionalType = h2.onnx.TypeProto.Optional.decode(r, r.uint32());
              break;
            }
            case 8: {
              a.sparseTensorType = h2.onnx.TypeProto.SparseTensor.decode(r, r.uint32());
              break;
            }
            case 6: {
              a.denotation = r.string();
              break;
            }
            default:
              r.skipType(u & 7);
              break;
          }
        }
        return a;
      }, e.decodeDelimited = function(r) {
        return r instanceof $ || (r = new $(r)), this.decode(r, r.uint32());
      }, e.verify = function(r) {
        if (typeof r != "object" || r === null) return "object expected";
        var n = {};
        if (r.tensorType != null && r.hasOwnProperty("tensorType")) {
          n.value = 1;
          {
            var s = h2.onnx.TypeProto.Tensor.verify(r.tensorType);
            if (s) return "tensorType." + s;
          }
        }
        if (r.sequenceType != null && r.hasOwnProperty("sequenceType")) {
          if (n.value === 1) return "value: multiple values";
          n.value = 1;
          {
            var s = h2.onnx.TypeProto.Sequence.verify(r.sequenceType);
            if (s) return "sequenceType." + s;
          }
        }
        if (r.mapType != null && r.hasOwnProperty("mapType")) {
          if (n.value === 1) return "value: multiple values";
          n.value = 1;
          {
            var s = h2.onnx.TypeProto.Map.verify(r.mapType);
            if (s) return "mapType." + s;
          }
        }
        if (r.optionalType != null && r.hasOwnProperty("optionalType")) {
          if (n.value === 1) return "value: multiple values";
          n.value = 1;
          {
            var s = h2.onnx.TypeProto.Optional.verify(r.optionalType);
            if (s) return "optionalType." + s;
          }
        }
        if (r.sparseTensorType != null && r.hasOwnProperty("sparseTensorType")) {
          if (n.value === 1) return "value: multiple values";
          n.value = 1;
          {
            var s = h2.onnx.TypeProto.SparseTensor.verify(r.sparseTensorType);
            if (s) return "sparseTensorType." + s;
          }
        }
        return r.denotation != null && r.hasOwnProperty("denotation") && !b.isString(r.denotation) ? "denotation: string expected" : null;
      }, e.fromObject = function(r) {
        if (r instanceof h2.onnx.TypeProto) return r;
        var n = new h2.onnx.TypeProto();
        if (r.tensorType != null) {
          if (typeof r.tensorType != "object") throw TypeError(".onnx.TypeProto.tensorType: object expected");
          n.tensorType = h2.onnx.TypeProto.Tensor.fromObject(r.tensorType);
        }
        if (r.sequenceType != null) {
          if (typeof r.sequenceType != "object") throw TypeError(".onnx.TypeProto.sequenceType: object expected");
          n.sequenceType = h2.onnx.TypeProto.Sequence.fromObject(r.sequenceType);
        }
        if (r.mapType != null) {
          if (typeof r.mapType != "object") throw TypeError(".onnx.TypeProto.mapType: object expected");
          n.mapType = h2.onnx.TypeProto.Map.fromObject(r.mapType);
        }
        if (r.optionalType != null) {
          if (typeof r.optionalType != "object") throw TypeError(".onnx.TypeProto.optionalType: object expected");
          n.optionalType = h2.onnx.TypeProto.Optional.fromObject(r.optionalType);
        }
        if (r.sparseTensorType != null) {
          if (typeof r.sparseTensorType != "object") throw TypeError(".onnx.TypeProto.sparseTensorType: object expected");
          n.sparseTensorType = h2.onnx.TypeProto.SparseTensor.fromObject(r.sparseTensorType);
        }
        return r.denotation != null && (n.denotation = String(r.denotation)), n;
      }, e.toObject = function(r, n) {
        n || (n = {});
        var s = {};
        return n.defaults && (s.denotation = ""), r.tensorType != null && r.hasOwnProperty("tensorType") && (s.tensorType = h2.onnx.TypeProto.Tensor.toObject(r.tensorType, n), n.oneofs && (s.value = "tensorType")), r.sequenceType != null && r.hasOwnProperty("sequenceType") && (s.sequenceType = h2.onnx.TypeProto.Sequence.toObject(r.sequenceType, n), n.oneofs && (s.value = "sequenceType")), r.mapType != null && r.hasOwnProperty("mapType") && (s.mapType = h2.onnx.TypeProto.Map.toObject(r.mapType, n), n.oneofs && (s.value = "mapType")), r.denotation != null && r.hasOwnProperty("denotation") && (s.denotation = r.denotation), r.sparseTensorType != null && r.hasOwnProperty("sparseTensorType") && (s.sparseTensorType = h2.onnx.TypeProto.SparseTensor.toObject(r.sparseTensorType, n), n.oneofs && (s.value = "sparseTensorType")), r.optionalType != null && r.hasOwnProperty("optionalType") && (s.optionalType = h2.onnx.TypeProto.Optional.toObject(r.optionalType, n), n.oneofs && (s.value = "optionalType")), s;
      }, e.prototype.toJSON = function() {
        return this.constructor.toObject(this, nt.util.toJSONOptions);
      }, e.getTypeUrl = function(r) {
        return r === void 0 && (r = "type.googleapis.com"), r + "/onnx.TypeProto";
      }, e.Tensor = function() {
        function t(r) {
          if (r) for (var n = Object.keys(r), s = 0; s < n.length; ++s) r[n[s]] != null && (this[n[s]] = r[n[s]]);
        }
        return t.prototype.elemType = 0, t.prototype.shape = null, t.create = function(n) {
          return new t(n);
        }, t.encode = function(n, s) {
          return s || (s = pt.create()), n.elemType != null && Object.hasOwnProperty.call(n, "elemType") && s.uint32(8).int32(n.elemType), n.shape != null && Object.hasOwnProperty.call(n, "shape") && h2.onnx.TensorShapeProto.encode(n.shape, s.uint32(18).fork()).ldelim(), s;
        }, t.encodeDelimited = function(n, s) {
          return this.encode(n, s).ldelim();
        }, t.decode = function(n, s) {
          n instanceof $ || (n = $.create(n));
          for (var a = s === void 0 ? n.len : n.pos + s, u = new h2.onnx.TypeProto.Tensor(); n.pos < a; ) {
            var l = n.uint32();
            switch (l >>> 3) {
              case 1: {
                u.elemType = n.int32();
                break;
              }
              case 2: {
                u.shape = h2.onnx.TensorShapeProto.decode(n, n.uint32());
                break;
              }
              default:
                n.skipType(l & 7);
                break;
            }
          }
          return u;
        }, t.decodeDelimited = function(n) {
          return n instanceof $ || (n = new $(n)), this.decode(n, n.uint32());
        }, t.verify = function(n) {
          if (typeof n != "object" || n === null) return "object expected";
          if (n.elemType != null && n.hasOwnProperty("elemType") && !b.isInteger(n.elemType)) return "elemType: integer expected";
          if (n.shape != null && n.hasOwnProperty("shape")) {
            var s = h2.onnx.TensorShapeProto.verify(n.shape);
            if (s) return "shape." + s;
          }
          return null;
        }, t.fromObject = function(n) {
          if (n instanceof h2.onnx.TypeProto.Tensor) return n;
          var s = new h2.onnx.TypeProto.Tensor();
          if (n.elemType != null && (s.elemType = n.elemType | 0), n.shape != null) {
            if (typeof n.shape != "object") throw TypeError(".onnx.TypeProto.Tensor.shape: object expected");
            s.shape = h2.onnx.TensorShapeProto.fromObject(n.shape);
          }
          return s;
        }, t.toObject = function(n, s) {
          s || (s = {});
          var a = {};
          return s.defaults && (a.elemType = 0, a.shape = null), n.elemType != null && n.hasOwnProperty("elemType") && (a.elemType = n.elemType), n.shape != null && n.hasOwnProperty("shape") && (a.shape = h2.onnx.TensorShapeProto.toObject(n.shape, s)), a;
        }, t.prototype.toJSON = function() {
          return this.constructor.toObject(this, nt.util.toJSONOptions);
        }, t.getTypeUrl = function(n) {
          return n === void 0 && (n = "type.googleapis.com"), n + "/onnx.TypeProto.Tensor";
        }, t;
      }(), e.Sequence = function() {
        function t(r) {
          if (r) for (var n = Object.keys(r), s = 0; s < n.length; ++s) r[n[s]] != null && (this[n[s]] = r[n[s]]);
        }
        return t.prototype.elemType = null, t.create = function(n) {
          return new t(n);
        }, t.encode = function(n, s) {
          return s || (s = pt.create()), n.elemType != null && Object.hasOwnProperty.call(n, "elemType") && h2.onnx.TypeProto.encode(n.elemType, s.uint32(10).fork()).ldelim(), s;
        }, t.encodeDelimited = function(n, s) {
          return this.encode(n, s).ldelim();
        }, t.decode = function(n, s) {
          n instanceof $ || (n = $.create(n));
          for (var a = s === void 0 ? n.len : n.pos + s, u = new h2.onnx.TypeProto.Sequence(); n.pos < a; ) {
            var l = n.uint32();
            switch (l >>> 3) {
              case 1: {
                u.elemType = h2.onnx.TypeProto.decode(n, n.uint32());
                break;
              }
              default:
                n.skipType(l & 7);
                break;
            }
          }
          return u;
        }, t.decodeDelimited = function(n) {
          return n instanceof $ || (n = new $(n)), this.decode(n, n.uint32());
        }, t.verify = function(n) {
          if (typeof n != "object" || n === null) return "object expected";
          if (n.elemType != null && n.hasOwnProperty("elemType")) {
            var s = h2.onnx.TypeProto.verify(n.elemType);
            if (s) return "elemType." + s;
          }
          return null;
        }, t.fromObject = function(n) {
          if (n instanceof h2.onnx.TypeProto.Sequence) return n;
          var s = new h2.onnx.TypeProto.Sequence();
          if (n.elemType != null) {
            if (typeof n.elemType != "object") throw TypeError(".onnx.TypeProto.Sequence.elemType: object expected");
            s.elemType = h2.onnx.TypeProto.fromObject(n.elemType);
          }
          return s;
        }, t.toObject = function(n, s) {
          s || (s = {});
          var a = {};
          return s.defaults && (a.elemType = null), n.elemType != null && n.hasOwnProperty("elemType") && (a.elemType = h2.onnx.TypeProto.toObject(n.elemType, s)), a;
        }, t.prototype.toJSON = function() {
          return this.constructor.toObject(this, nt.util.toJSONOptions);
        }, t.getTypeUrl = function(n) {
          return n === void 0 && (n = "type.googleapis.com"), n + "/onnx.TypeProto.Sequence";
        }, t;
      }(), e.Map = function() {
        function t(r) {
          if (r) for (var n = Object.keys(r), s = 0; s < n.length; ++s) r[n[s]] != null && (this[n[s]] = r[n[s]]);
        }
        return t.prototype.keyType = 0, t.prototype.valueType = null, t.create = function(n) {
          return new t(n);
        }, t.encode = function(n, s) {
          return s || (s = pt.create()), n.keyType != null && Object.hasOwnProperty.call(n, "keyType") && s.uint32(8).int32(n.keyType), n.valueType != null && Object.hasOwnProperty.call(n, "valueType") && h2.onnx.TypeProto.encode(n.valueType, s.uint32(18).fork()).ldelim(), s;
        }, t.encodeDelimited = function(n, s) {
          return this.encode(n, s).ldelim();
        }, t.decode = function(n, s) {
          n instanceof $ || (n = $.create(n));
          for (var a = s === void 0 ? n.len : n.pos + s, u = new h2.onnx.TypeProto.Map(); n.pos < a; ) {
            var l = n.uint32();
            switch (l >>> 3) {
              case 1: {
                u.keyType = n.int32();
                break;
              }
              case 2: {
                u.valueType = h2.onnx.TypeProto.decode(n, n.uint32());
                break;
              }
              default:
                n.skipType(l & 7);
                break;
            }
          }
          return u;
        }, t.decodeDelimited = function(n) {
          return n instanceof $ || (n = new $(n)), this.decode(n, n.uint32());
        }, t.verify = function(n) {
          if (typeof n != "object" || n === null) return "object expected";
          if (n.keyType != null && n.hasOwnProperty("keyType") && !b.isInteger(n.keyType)) return "keyType: integer expected";
          if (n.valueType != null && n.hasOwnProperty("valueType")) {
            var s = h2.onnx.TypeProto.verify(n.valueType);
            if (s) return "valueType." + s;
          }
          return null;
        }, t.fromObject = function(n) {
          if (n instanceof h2.onnx.TypeProto.Map) return n;
          var s = new h2.onnx.TypeProto.Map();
          if (n.keyType != null && (s.keyType = n.keyType | 0), n.valueType != null) {
            if (typeof n.valueType != "object") throw TypeError(".onnx.TypeProto.Map.valueType: object expected");
            s.valueType = h2.onnx.TypeProto.fromObject(n.valueType);
          }
          return s;
        }, t.toObject = function(n, s) {
          s || (s = {});
          var a = {};
          return s.defaults && (a.keyType = 0, a.valueType = null), n.keyType != null && n.hasOwnProperty("keyType") && (a.keyType = n.keyType), n.valueType != null && n.hasOwnProperty("valueType") && (a.valueType = h2.onnx.TypeProto.toObject(n.valueType, s)), a;
        }, t.prototype.toJSON = function() {
          return this.constructor.toObject(this, nt.util.toJSONOptions);
        }, t.getTypeUrl = function(n) {
          return n === void 0 && (n = "type.googleapis.com"), n + "/onnx.TypeProto.Map";
        }, t;
      }(), e.Optional = function() {
        function t(r) {
          if (r) for (var n = Object.keys(r), s = 0; s < n.length; ++s) r[n[s]] != null && (this[n[s]] = r[n[s]]);
        }
        return t.prototype.elemType = null, t.create = function(n) {
          return new t(n);
        }, t.encode = function(n, s) {
          return s || (s = pt.create()), n.elemType != null && Object.hasOwnProperty.call(n, "elemType") && h2.onnx.TypeProto.encode(n.elemType, s.uint32(10).fork()).ldelim(), s;
        }, t.encodeDelimited = function(n, s) {
          return this.encode(n, s).ldelim();
        }, t.decode = function(n, s) {
          n instanceof $ || (n = $.create(n));
          for (var a = s === void 0 ? n.len : n.pos + s, u = new h2.onnx.TypeProto.Optional(); n.pos < a; ) {
            var l = n.uint32();
            switch (l >>> 3) {
              case 1: {
                u.elemType = h2.onnx.TypeProto.decode(n, n.uint32());
                break;
              }
              default:
                n.skipType(l & 7);
                break;
            }
          }
          return u;
        }, t.decodeDelimited = function(n) {
          return n instanceof $ || (n = new $(n)), this.decode(n, n.uint32());
        }, t.verify = function(n) {
          if (typeof n != "object" || n === null) return "object expected";
          if (n.elemType != null && n.hasOwnProperty("elemType")) {
            var s = h2.onnx.TypeProto.verify(n.elemType);
            if (s) return "elemType." + s;
          }
          return null;
        }, t.fromObject = function(n) {
          if (n instanceof h2.onnx.TypeProto.Optional) return n;
          var s = new h2.onnx.TypeProto.Optional();
          if (n.elemType != null) {
            if (typeof n.elemType != "object") throw TypeError(".onnx.TypeProto.Optional.elemType: object expected");
            s.elemType = h2.onnx.TypeProto.fromObject(n.elemType);
          }
          return s;
        }, t.toObject = function(n, s) {
          s || (s = {});
          var a = {};
          return s.defaults && (a.elemType = null), n.elemType != null && n.hasOwnProperty("elemType") && (a.elemType = h2.onnx.TypeProto.toObject(n.elemType, s)), a;
        }, t.prototype.toJSON = function() {
          return this.constructor.toObject(this, nt.util.toJSONOptions);
        }, t.getTypeUrl = function(n) {
          return n === void 0 && (n = "type.googleapis.com"), n + "/onnx.TypeProto.Optional";
        }, t;
      }(), e.SparseTensor = function() {
        function t(r) {
          if (r) for (var n = Object.keys(r), s = 0; s < n.length; ++s) r[n[s]] != null && (this[n[s]] = r[n[s]]);
        }
        return t.prototype.elemType = 0, t.prototype.shape = null, t.create = function(n) {
          return new t(n);
        }, t.encode = function(n, s) {
          return s || (s = pt.create()), n.elemType != null && Object.hasOwnProperty.call(n, "elemType") && s.uint32(8).int32(n.elemType), n.shape != null && Object.hasOwnProperty.call(n, "shape") && h2.onnx.TensorShapeProto.encode(n.shape, s.uint32(18).fork()).ldelim(), s;
        }, t.encodeDelimited = function(n, s) {
          return this.encode(n, s).ldelim();
        }, t.decode = function(n, s) {
          n instanceof $ || (n = $.create(n));
          for (var a = s === void 0 ? n.len : n.pos + s, u = new h2.onnx.TypeProto.SparseTensor(); n.pos < a; ) {
            var l = n.uint32();
            switch (l >>> 3) {
              case 1: {
                u.elemType = n.int32();
                break;
              }
              case 2: {
                u.shape = h2.onnx.TensorShapeProto.decode(n, n.uint32());
                break;
              }
              default:
                n.skipType(l & 7);
                break;
            }
          }
          return u;
        }, t.decodeDelimited = function(n) {
          return n instanceof $ || (n = new $(n)), this.decode(n, n.uint32());
        }, t.verify = function(n) {
          if (typeof n != "object" || n === null) return "object expected";
          if (n.elemType != null && n.hasOwnProperty("elemType") && !b.isInteger(n.elemType)) return "elemType: integer expected";
          if (n.shape != null && n.hasOwnProperty("shape")) {
            var s = h2.onnx.TensorShapeProto.verify(n.shape);
            if (s) return "shape." + s;
          }
          return null;
        }, t.fromObject = function(n) {
          if (n instanceof h2.onnx.TypeProto.SparseTensor) return n;
          var s = new h2.onnx.TypeProto.SparseTensor();
          if (n.elemType != null && (s.elemType = n.elemType | 0), n.shape != null) {
            if (typeof n.shape != "object") throw TypeError(".onnx.TypeProto.SparseTensor.shape: object expected");
            s.shape = h2.onnx.TensorShapeProto.fromObject(n.shape);
          }
          return s;
        }, t.toObject = function(n, s) {
          s || (s = {});
          var a = {};
          return s.defaults && (a.elemType = 0, a.shape = null), n.elemType != null && n.hasOwnProperty("elemType") && (a.elemType = n.elemType), n.shape != null && n.hasOwnProperty("shape") && (a.shape = h2.onnx.TensorShapeProto.toObject(n.shape, s)), a;
        }, t.prototype.toJSON = function() {
          return this.constructor.toObject(this, nt.util.toJSONOptions);
        }, t.getTypeUrl = function(n) {
          return n === void 0 && (n = "type.googleapis.com"), n + "/onnx.TypeProto.SparseTensor";
        }, t;
      }(), e;
    }(), i.OperatorSetIdProto = function() {
      function e(o) {
        if (o) for (var t = Object.keys(o), r = 0; r < t.length; ++r) o[t[r]] != null && (this[t[r]] = o[t[r]]);
      }
      return e.prototype.domain = "", e.prototype.version = b.Long ? b.Long.fromBits(0, 0, false) : 0, e.create = function(t) {
        return new e(t);
      }, e.encode = function(t, r) {
        return r || (r = pt.create()), t.domain != null && Object.hasOwnProperty.call(t, "domain") && r.uint32(10).string(t.domain), t.version != null && Object.hasOwnProperty.call(t, "version") && r.uint32(16).int64(t.version), r;
      }, e.encodeDelimited = function(t, r) {
        return this.encode(t, r).ldelim();
      }, e.decode = function(t, r) {
        t instanceof $ || (t = $.create(t));
        for (var n = r === void 0 ? t.len : t.pos + r, s = new h2.onnx.OperatorSetIdProto(); t.pos < n; ) {
          var a = t.uint32();
          switch (a >>> 3) {
            case 1: {
              s.domain = t.string();
              break;
            }
            case 2: {
              s.version = t.int64();
              break;
            }
            default:
              t.skipType(a & 7);
              break;
          }
        }
        return s;
      }, e.decodeDelimited = function(t) {
        return t instanceof $ || (t = new $(t)), this.decode(t, t.uint32());
      }, e.verify = function(t) {
        return typeof t != "object" || t === null ? "object expected" : t.domain != null && t.hasOwnProperty("domain") && !b.isString(t.domain) ? "domain: string expected" : t.version != null && t.hasOwnProperty("version") && !b.isInteger(t.version) && !(t.version && b.isInteger(t.version.low) && b.isInteger(t.version.high)) ? "version: integer|Long expected" : null;
      }, e.fromObject = function(t) {
        if (t instanceof h2.onnx.OperatorSetIdProto) return t;
        var r = new h2.onnx.OperatorSetIdProto();
        return t.domain != null && (r.domain = String(t.domain)), t.version != null && (b.Long ? (r.version = b.Long.fromValue(t.version)).unsigned = false : typeof t.version == "string" ? r.version = parseInt(t.version, 10) : typeof t.version == "number" ? r.version = t.version : typeof t.version == "object" && (r.version = new b.LongBits(t.version.low >>> 0, t.version.high >>> 0).toNumber())), r;
      }, e.toObject = function(t, r) {
        r || (r = {});
        var n = {};
        if (r.defaults) if (n.domain = "", b.Long) {
          var s = new b.Long(0, 0, false);
          n.version = r.longs === String ? s.toString() : r.longs === Number ? s.toNumber() : s;
        } else n.version = r.longs === String ? "0" : 0;
        return t.domain != null && t.hasOwnProperty("domain") && (n.domain = t.domain), t.version != null && t.hasOwnProperty("version") && (typeof t.version == "number" ? n.version = r.longs === String ? String(t.version) : t.version : n.version = r.longs === String ? b.Long.prototype.toString.call(t.version) : r.longs === Number ? new b.LongBits(t.version.low >>> 0, t.version.high >>> 0).toNumber() : t.version), n;
      }, e.prototype.toJSON = function() {
        return this.constructor.toObject(this, nt.util.toJSONOptions);
      }, e.getTypeUrl = function(t) {
        return t === void 0 && (t = "type.googleapis.com"), t + "/onnx.OperatorSetIdProto";
      }, e;
    }(), i.OperatorStatus = function() {
      var e = {}, o = Object.create(e);
      return o[e[0] = "EXPERIMENTAL"] = 0, o[e[1] = "STABLE"] = 1, o;
    }(), i.FunctionProto = function() {
      function e(o) {
        if (this.input = [], this.output = [], this.attribute = [], this.attributeProto = [], this.node = [], this.opsetImport = [], o) for (var t = Object.keys(o), r = 0; r < t.length; ++r) o[t[r]] != null && (this[t[r]] = o[t[r]]);
      }
      return e.prototype.name = "", e.prototype.input = b.emptyArray, e.prototype.output = b.emptyArray, e.prototype.attribute = b.emptyArray, e.prototype.attributeProto = b.emptyArray, e.prototype.node = b.emptyArray, e.prototype.docString = "", e.prototype.opsetImport = b.emptyArray, e.prototype.domain = "", e.create = function(t) {
        return new e(t);
      }, e.encode = function(t, r) {
        if (r || (r = pt.create()), t.name != null && Object.hasOwnProperty.call(t, "name") && r.uint32(10).string(t.name), t.input != null && t.input.length) for (var n = 0; n < t.input.length; ++n) r.uint32(34).string(t.input[n]);
        if (t.output != null && t.output.length) for (var n = 0; n < t.output.length; ++n) r.uint32(42).string(t.output[n]);
        if (t.attribute != null && t.attribute.length) for (var n = 0; n < t.attribute.length; ++n) r.uint32(50).string(t.attribute[n]);
        if (t.node != null && t.node.length) for (var n = 0; n < t.node.length; ++n) h2.onnx.NodeProto.encode(t.node[n], r.uint32(58).fork()).ldelim();
        if (t.docString != null && Object.hasOwnProperty.call(t, "docString") && r.uint32(66).string(t.docString), t.opsetImport != null && t.opsetImport.length) for (var n = 0; n < t.opsetImport.length; ++n) h2.onnx.OperatorSetIdProto.encode(t.opsetImport[n], r.uint32(74).fork()).ldelim();
        if (t.domain != null && Object.hasOwnProperty.call(t, "domain") && r.uint32(82).string(t.domain), t.attributeProto != null && t.attributeProto.length) for (var n = 0; n < t.attributeProto.length; ++n) h2.onnx.AttributeProto.encode(t.attributeProto[n], r.uint32(90).fork()).ldelim();
        return r;
      }, e.encodeDelimited = function(t, r) {
        return this.encode(t, r).ldelim();
      }, e.decode = function(t, r) {
        t instanceof $ || (t = $.create(t));
        for (var n = r === void 0 ? t.len : t.pos + r, s = new h2.onnx.FunctionProto(); t.pos < n; ) {
          var a = t.uint32();
          switch (a >>> 3) {
            case 1: {
              s.name = t.string();
              break;
            }
            case 4: {
              s.input && s.input.length || (s.input = []), s.input.push(t.string());
              break;
            }
            case 5: {
              s.output && s.output.length || (s.output = []), s.output.push(t.string());
              break;
            }
            case 6: {
              s.attribute && s.attribute.length || (s.attribute = []), s.attribute.push(t.string());
              break;
            }
            case 11: {
              s.attributeProto && s.attributeProto.length || (s.attributeProto = []), s.attributeProto.push(h2.onnx.AttributeProto.decode(t, t.uint32()));
              break;
            }
            case 7: {
              s.node && s.node.length || (s.node = []), s.node.push(h2.onnx.NodeProto.decode(t, t.uint32()));
              break;
            }
            case 8: {
              s.docString = t.string();
              break;
            }
            case 9: {
              s.opsetImport && s.opsetImport.length || (s.opsetImport = []), s.opsetImport.push(h2.onnx.OperatorSetIdProto.decode(t, t.uint32()));
              break;
            }
            case 10: {
              s.domain = t.string();
              break;
            }
            default:
              t.skipType(a & 7);
              break;
          }
        }
        return s;
      }, e.decodeDelimited = function(t) {
        return t instanceof $ || (t = new $(t)), this.decode(t, t.uint32());
      }, e.verify = function(t) {
        if (typeof t != "object" || t === null) return "object expected";
        if (t.name != null && t.hasOwnProperty("name") && !b.isString(t.name)) return "name: string expected";
        if (t.input != null && t.hasOwnProperty("input")) {
          if (!Array.isArray(t.input)) return "input: array expected";
          for (var r = 0; r < t.input.length; ++r) if (!b.isString(t.input[r])) return "input: string[] expected";
        }
        if (t.output != null && t.hasOwnProperty("output")) {
          if (!Array.isArray(t.output)) return "output: array expected";
          for (var r = 0; r < t.output.length; ++r) if (!b.isString(t.output[r])) return "output: string[] expected";
        }
        if (t.attribute != null && t.hasOwnProperty("attribute")) {
          if (!Array.isArray(t.attribute)) return "attribute: array expected";
          for (var r = 0; r < t.attribute.length; ++r) if (!b.isString(t.attribute[r])) return "attribute: string[] expected";
        }
        if (t.attributeProto != null && t.hasOwnProperty("attributeProto")) {
          if (!Array.isArray(t.attributeProto)) return "attributeProto: array expected";
          for (var r = 0; r < t.attributeProto.length; ++r) {
            var n = h2.onnx.AttributeProto.verify(t.attributeProto[r]);
            if (n) return "attributeProto." + n;
          }
        }
        if (t.node != null && t.hasOwnProperty("node")) {
          if (!Array.isArray(t.node)) return "node: array expected";
          for (var r = 0; r < t.node.length; ++r) {
            var n = h2.onnx.NodeProto.verify(t.node[r]);
            if (n) return "node." + n;
          }
        }
        if (t.docString != null && t.hasOwnProperty("docString") && !b.isString(t.docString)) return "docString: string expected";
        if (t.opsetImport != null && t.hasOwnProperty("opsetImport")) {
          if (!Array.isArray(t.opsetImport)) return "opsetImport: array expected";
          for (var r = 0; r < t.opsetImport.length; ++r) {
            var n = h2.onnx.OperatorSetIdProto.verify(t.opsetImport[r]);
            if (n) return "opsetImport." + n;
          }
        }
        return t.domain != null && t.hasOwnProperty("domain") && !b.isString(t.domain) ? "domain: string expected" : null;
      }, e.fromObject = function(t) {
        if (t instanceof h2.onnx.FunctionProto) return t;
        var r = new h2.onnx.FunctionProto();
        if (t.name != null && (r.name = String(t.name)), t.input) {
          if (!Array.isArray(t.input)) throw TypeError(".onnx.FunctionProto.input: array expected");
          r.input = [];
          for (var n = 0; n < t.input.length; ++n) r.input[n] = String(t.input[n]);
        }
        if (t.output) {
          if (!Array.isArray(t.output)) throw TypeError(".onnx.FunctionProto.output: array expected");
          r.output = [];
          for (var n = 0; n < t.output.length; ++n) r.output[n] = String(t.output[n]);
        }
        if (t.attribute) {
          if (!Array.isArray(t.attribute)) throw TypeError(".onnx.FunctionProto.attribute: array expected");
          r.attribute = [];
          for (var n = 0; n < t.attribute.length; ++n) r.attribute[n] = String(t.attribute[n]);
        }
        if (t.attributeProto) {
          if (!Array.isArray(t.attributeProto)) throw TypeError(".onnx.FunctionProto.attributeProto: array expected");
          r.attributeProto = [];
          for (var n = 0; n < t.attributeProto.length; ++n) {
            if (typeof t.attributeProto[n] != "object") throw TypeError(".onnx.FunctionProto.attributeProto: object expected");
            r.attributeProto[n] = h2.onnx.AttributeProto.fromObject(t.attributeProto[n]);
          }
        }
        if (t.node) {
          if (!Array.isArray(t.node)) throw TypeError(".onnx.FunctionProto.node: array expected");
          r.node = [];
          for (var n = 0; n < t.node.length; ++n) {
            if (typeof t.node[n] != "object") throw TypeError(".onnx.FunctionProto.node: object expected");
            r.node[n] = h2.onnx.NodeProto.fromObject(t.node[n]);
          }
        }
        if (t.docString != null && (r.docString = String(t.docString)), t.opsetImport) {
          if (!Array.isArray(t.opsetImport)) throw TypeError(".onnx.FunctionProto.opsetImport: array expected");
          r.opsetImport = [];
          for (var n = 0; n < t.opsetImport.length; ++n) {
            if (typeof t.opsetImport[n] != "object") throw TypeError(".onnx.FunctionProto.opsetImport: object expected");
            r.opsetImport[n] = h2.onnx.OperatorSetIdProto.fromObject(t.opsetImport[n]);
          }
        }
        return t.domain != null && (r.domain = String(t.domain)), r;
      }, e.toObject = function(t, r) {
        r || (r = {});
        var n = {};
        if ((r.arrays || r.defaults) && (n.input = [], n.output = [], n.attribute = [], n.node = [], n.opsetImport = [], n.attributeProto = []), r.defaults && (n.name = "", n.docString = "", n.domain = ""), t.name != null && t.hasOwnProperty("name") && (n.name = t.name), t.input && t.input.length) {
          n.input = [];
          for (var s = 0; s < t.input.length; ++s) n.input[s] = t.input[s];
        }
        if (t.output && t.output.length) {
          n.output = [];
          for (var s = 0; s < t.output.length; ++s) n.output[s] = t.output[s];
        }
        if (t.attribute && t.attribute.length) {
          n.attribute = [];
          for (var s = 0; s < t.attribute.length; ++s) n.attribute[s] = t.attribute[s];
        }
        if (t.node && t.node.length) {
          n.node = [];
          for (var s = 0; s < t.node.length; ++s) n.node[s] = h2.onnx.NodeProto.toObject(t.node[s], r);
        }
        if (t.docString != null && t.hasOwnProperty("docString") && (n.docString = t.docString), t.opsetImport && t.opsetImport.length) {
          n.opsetImport = [];
          for (var s = 0; s < t.opsetImport.length; ++s) n.opsetImport[s] = h2.onnx.OperatorSetIdProto.toObject(t.opsetImport[s], r);
        }
        if (t.domain != null && t.hasOwnProperty("domain") && (n.domain = t.domain), t.attributeProto && t.attributeProto.length) {
          n.attributeProto = [];
          for (var s = 0; s < t.attributeProto.length; ++s) n.attributeProto[s] = h2.onnx.AttributeProto.toObject(t.attributeProto[s], r);
        }
        return n;
      }, e.prototype.toJSON = function() {
        return this.constructor.toObject(this, nt.util.toJSONOptions);
      }, e.getTypeUrl = function(t) {
        return t === void 0 && (t = "type.googleapis.com"), t + "/onnx.FunctionProto";
      }, e;
    }(), i;
  }();
  Uu.exports = h2;
});
function ur(i, e) {
  if (!i) throw new Error(typeof e == "string" ? e : e());
}
function kr(i) {
  return new TextDecoder().decode(i);
}
var ot, Ge, ni, $t, _n, _t, Nt, B, $r, Me, Ue, Ve, Y = O(() => {
  xn();
  zo();
  ot = rr(sr());
  ze();
  Ge = class {
    static arraysEqual(e, o) {
      if (e.length !== o.length) return false;
      for (let t = 0; t < e.length; t++) if (e[t] !== o[t]) return false;
      return true;
    }
  }, ni = class {
    static preprocessInputShapes(e, o) {
      let t = e.length === 1 ? [1, e[0]] : e, r = o.length === 1 ? [o[0], 1] : o;
      return [t, r];
    }
    static postprocessOutputShape(e, o, t) {
      o === 1 && e.splice(e.length - 2, 1), t === 1 && e.pop();
    }
    static calcMatMulShape(e, o) {
      return e[1] !== o[0] ? void 0 : [e[0], o[1]];
    }
  }, $t = class i {
    static calcShape(e, o, t = false) {
      let r = e.length, n = o.length;
      if (r === 0) return o;
      if (n === 0) return e;
      let s = Math.max(e.length, o.length), a = new Array(s);
      if (t) {
        if (r < 2 || n < 2) return;
        let u = ni.calcMatMulShape([e[r - 2], e[r - 1]], [o[n - 2], o[n - 1]]);
        if (u === void 0) return;
        [a[s - 2], a[s - 1]] = u;
      }
      for (let u = t ? 3 : 1; u <= s; u++) {
        let l = r - u < 0 ? 1 : e[r - u], f = n - u < 0 ? 1 : o[n - u];
        if (l !== f && l > 1 && f > 1) return;
        a[s - u] = Math.max(l, f);
      }
      return a;
    }
    static index(e, o) {
      let t = new Array(o.length);
      return i.fillIndex(e, o, t), t;
    }
    static fillIndex(e, o, t) {
      let r = e.length - o.length;
      for (let n = 0; n < o.length; n++) t[n] = e[r + n] % o[n];
    }
    static calc(e, o, t, r, n) {
      let s = i.calcShape(e.dims, o.dims);
      if (s) {
        if (r && !B.areEqual(s, e.dims)) return;
        let a = B.size(s), u = r ? e : new bt(s, n || e.type);
        if (s.length === 0) u.set([], t(e.get([]), o.get([])));
        else {
          let l = new Array(s.length), f = new Array(e.dims.length), p2 = new Array(o.dims.length), d = 0, y = 0, w = false, v = false;
          e.dims.length === 0 && (d = e.get([]), w = true), o.dims.length === 0 && (y = o.get([]), v = true);
          let S;
          for (let L = 0; L < a; L++) {
            S = L;
            for (let A = s.length - 1; A >= 0; A--) l[A] = S % s[A], S = Math.floor(S / s[A]);
            w || (i.fillIndex(l, e.dims, f), d = e.get(f)), v || (i.fillIndex(l, o.dims, p2), y = o.get(p2)), u.set(l, t(d, y));
          }
        }
        return u;
      }
    }
    static isValidBroadcast(e, o) {
      let t = e.length, r = o.length;
      if (t > r) return false;
      for (let n = 1; n <= t; n++) if (e[t - n] !== 1 && e[t - n] !== o[r - n]) return false;
      return true;
    }
    static getBroadcastDims(e, o) {
      let t = e.length, r = [];
      for (let n = 0; n < t; n++) {
        let s = t - 1 - n, a = e[s] || 1;
        (o[o.length - 1 - n] || 1) > 1 && a === 1 && r.unshift(s);
      }
      return r;
    }
  }, _n = class {
    static getShapeOfGemmResult(e, o, t, r, n) {
      if (e.length !== 2 || t.length !== 2) throw new Error("shape need to be of size 2");
      let s, a, u;
      o ? (s = e[1], a = e[0]) : (s = e[0], a = e[1]);
      let l = -1;
      if (r ? (u = t[0], l = 1) : (u = t[1], l = 0), t[l] !== a) throw new Error("dimension mismatch");
      if (s <= 0 || u <= 0 || a <= 0) throw new Error("invalid shape specified");
      if (n && !$t.isValidBroadcast(n, [s, u])) throw new Error("gemm: invalid bias shape for broadcast");
      return [s, u, a];
    }
  }, _t = class i {
    static tensorDataTypeFromProto(e) {
      switch (e) {
        case ot.onnx.TensorProto.DataType.INT8:
          return "int8";
        case ot.onnx.TensorProto.DataType.UINT8:
          return "uint8";
        case ot.onnx.TensorProto.DataType.BOOL:
          return "bool";
        case ot.onnx.TensorProto.DataType.INT16:
          return "int16";
        case ot.onnx.TensorProto.DataType.UINT16:
          return "uint16";
        case ot.onnx.TensorProto.DataType.INT32:
          return "int32";
        case ot.onnx.TensorProto.DataType.UINT32:
          return "uint32";
        case ot.onnx.TensorProto.DataType.FLOAT:
          return "float32";
        case ot.onnx.TensorProto.DataType.DOUBLE:
          return "float64";
        case ot.onnx.TensorProto.DataType.STRING:
          return "string";
        case ot.onnx.TensorProto.DataType.INT64:
          return "int32";
        case ot.onnx.TensorProto.DataType.UINT64:
          return "uint32";
        default:
          throw new Error(`unsupported data type: ${ot.onnx.TensorProto.DataType[e]}`);
      }
    }
    static tensorDataTypeStringToEnum(e) {
      switch (e) {
        case "int8":
          return ot.onnx.TensorProto.DataType.INT8;
        case "uint8":
          return ot.onnx.TensorProto.DataType.UINT8;
        case "bool":
          return ot.onnx.TensorProto.DataType.BOOL;
        case "int16":
          return ot.onnx.TensorProto.DataType.INT16;
        case "uint16":
          return ot.onnx.TensorProto.DataType.UINT16;
        case "int32":
          return ot.onnx.TensorProto.DataType.INT32;
        case "uint32":
          return ot.onnx.TensorProto.DataType.UINT32;
        case "float32":
          return ot.onnx.TensorProto.DataType.FLOAT;
        case "float64":
          return ot.onnx.TensorProto.DataType.DOUBLE;
        case "string":
          return ot.onnx.TensorProto.DataType.STRING;
        case "int64":
          return ot.onnx.TensorProto.DataType.INT64;
        case "uint64":
          return ot.onnx.TensorProto.DataType.UINT64;
        default:
          throw new Error(`unsupported data type: ${e}`);
      }
    }
    static tensorDimsFromProto(e) {
      return e.map((o) => me.isLong(o) ? o.toNumber() : o);
    }
    static tensorValueTypeFromProto(e) {
      return { tensorType: i.tensorDataTypeFromProto(e.elemType), shape: { dims: i.tensorDimsFromProto(e.shape.dim.map((o) => o.dimValue)) } };
    }
    static tensorDimsFromORTFormat(e) {
      let o = [];
      for (let t = 0; t < e.dimsLength(); t++) o.push(Nt.longToNumber(e.dims(t)));
      return o;
    }
    static tensorAttributesFromORTFormat(e) {
      let o = [];
      for (let t = 0; t < e.attributesLength(); t++) o.push(e.attributes(t));
      return o;
    }
  }, Nt = class {
    static longToNumber(e, o) {
      return me.isLong(e) ? e.toNumber() : e instanceof T.Long ? me.fromValue({ low: e.low, high: e.high, unsigned: o ?? false }).toNumber() : e;
    }
    static isLong(e) {
      return me.isLong(e) || e instanceof T.Long;
    }
  }, B = class i {
    static size(e) {
      return i.getSizeFromDimensionRange(e, 0, e.length);
    }
    static sizeFromDimension(e, o) {
      if (o < 0 || o > e.length) throw new Error(`invalid dimension of ${o} for sizeFromDimension as Tensor has ${e.length} dimensions.`);
      return i.getSizeFromDimensionRange(e, o, e.length);
    }
    static sizeToDimension(e, o) {
      if (o < 0 || o > e.length) throw new Error(`invalid dimension of ${o} for sizeToDimension as Tensor has ${e.length} dimensions.`);
      return i.getSizeFromDimensionRange(e, 0, o);
    }
    static getSizeFromDimensionRange(e, o, t) {
      let r = 1;
      for (let n = o; n < t; n++) {
        if (e[n] <= 0) throw new Error("cannot get valid size from specified dimension range. Most likely the range contains 0 or negative values in them.");
        r *= e[n];
      }
      return r;
    }
    static computeStrides(e) {
      let o = e.length;
      if (o === 0) return [];
      if (o === 1) return [1];
      let t = new Array(o);
      t[o - 1] = 1, t[o - 2] = e[o - 1];
      for (let r = o - 3; r >= 0; --r) t[r] = t[r + 1] * e[r + 1];
      return t;
    }
    static transpose(e) {
      return e.slice().reverse();
    }
    static indicesToOffset(e, o, t) {
      t === void 0 && (t = e.length);
      let r = 0;
      for (let n = 0; n < t; ++n) r += o[n] * e[n];
      return r;
    }
    static offsetToIndices(e, o) {
      let t = o.length;
      if (t === 0) return [];
      if (t === 1) return [e * o[0]];
      let r = new Array(o.length);
      for (let n = 0; n < r.length - 1; ++n) r[n] = Math.floor(e / o[n]), e -= r[n] * o[n];
      return r[r.length - 1] = e, r;
    }
    static normalizeAxis(e, o) {
      if (e < -o && e >= o) throw new Error("unsupported axis for this operation.");
      return e < 0 ? e + o : e;
    }
    static normalizeAxes(e, o) {
      return e.map((t) => this.normalizeAxis(t, o));
    }
    static incrementIndex(e, o, t) {
      if (o.length === 0 || e.length === 0) throw new Error("Index incrementing unsupported for scalar Tensor");
      if (t === void 0) t = o.length;
      else if (t <= 0 || t > o.length) throw new Error("Incorrect axis to increment on");
      for (let r = t - 1; r >= 0 && (e[r]++, !(e[r] < o[r])); --r) e[r] = 0;
    }
    static calculateReshapedDims(e, o) {
      if (o.length === 0) {
        if (e.length === 0 || i.size(e) === 1) return [];
        throw new Error("cannot reshape to a scalar Tensor");
      }
      let t = o.length, r = new Array(t), n = -1, s = 1;
      for (let u = 0; u < t; u++) {
        if (o[u] < -1) throw new Error("a dimension in shape hints cannot be less than -1");
        if (o[u] === -1) {
          if (n !== -1) throw new Error("at most one dimension in shape hints can be -1");
          n = u;
        } else {
          if (o[u] === 0) {
            if (u >= e.length) throw new Error("the dimension with value zero exceeds the dimension size of the input tensor");
            r[u] = e[u];
          } else r[u] = o[u];
          s *= r[u];
        }
      }
      let a = i.size(e);
      if (n !== -1) {
        if (a % s !== 0) throw new Error(`the input tensor cannot be reshaped to the requested shape. Input shape: [${e}] Output shape: [${o}]`);
        r[n] = a / s;
      } else if (s !== a) throw new Error("reshapedDims and originalDims don't have matching sizes");
      return r;
    }
    static sortBasedOnPerm(e, o) {
      return o ? o.map((t) => e[t]) : e.slice().reverse();
    }
    static padShape(e, o) {
      let t = e.length;
      return e.map((r, n) => r + o[n] + o[n + t]);
    }
    static areEqual(e, o) {
      return e.length !== o.length ? false : e.every((t, r) => t === o[r]);
    }
    static validateDimsAndCalcSize(e) {
      if (e.length > 6) throw new TypeError("Only rank 0 to 6 is supported for tensor shape.");
      let o = 1;
      for (let t of e) {
        if (!Number.isInteger(t)) throw new TypeError(`Invalid shape: ${t} is not an integer`);
        if (t < 0 || t > 2147483647) throw new TypeError(`Invalid shape: length ${t} is not allowed`);
        o *= t;
      }
      return o;
    }
    static flattenShape(e, o) {
      o < 0 && (o += e.length);
      let t = e.reduce((s, a) => s * a, 1), r = e.slice(o).reduce((s, a) => s * a, 1);
      return [t / r, r];
    }
    static squeezeShape(e, o) {
      let t = new Array();
      o = i.normalizeAxes(o, e.length);
      for (let r = 0; r < e.length; r++) {
        let n = o.indexOf(r) >= 0;
        if (n && e[r] !== 1) throw new Error("squeeze an axis of size different than 1");
        (o.length === 0 && e[r] > 1 || o.length > 0 && !n) && t.push(e[r]);
      }
      return t;
    }
    static unsqueezeShape(e, o) {
      let t = new Array(e.length + o.length);
      t.fill(0);
      for (let n = 0; n < o.length; n++) {
        let s = i.normalizeAxis(o[n], t.length);
        if (s >= t.length) throw new Error("'axes' has an out of range axis");
        if (t[s] !== 0) throw new Error("'axes' has a duplicate axis");
        t[s] = 1;
      }
      let r = 0;
      for (let n = 0; n < t.length; n++) t[n] === 0 && (t[n] = e[r++]);
      if (r !== e.length) throw new Error("the unsqueezed dimension could not be established");
      return t;
    }
  }, $r = class i {
    static splitShape(e, o, t, r) {
      if (t.length === 0) {
        if (!r) throw new Error("need to know number of outputs when the 'split' attribute is not specified");
        i.determineSplit(e[o], r, t);
      }
      let n = [], s = [0];
      for (let a = 0; a < t.length; ++a) {
        a !== 0 && s.push(s[a - 1] + t[a - 1]);
        let u = e.slice();
        u[o] = t[a], n.push(u);
      }
      return [n, s];
    }
    static determineSplit(e, o, t) {
      if (e % o !== 0) throw new Error("cannot split tensor to equal sized parts");
      for (let r = 0; r < o; ++r) t.push(e / o);
    }
  }, Me = class i {
    static adjustPoolAttributes(e, o, t, r, n, s) {
      if (!e && t.length !== o.length - 2) throw new Error("length of specified kernel shapes should be 2 less than length of input dimensions");
      if (e) for (let a = 0; a < o.length - 2; a++) a >= t.length ? t.push(o[a + 2]) : t[a] = o[a + 2];
      for (let a = 0; a < t.length; a++) if (a < r.length) {
        if (r[a] < 0) throw new Error("strides should be greater than or equal to 1");
      } else r.push(1);
      for (let a = 0; a < t.length; a++) if (a < n.length) {
        if (n[a] < 0) throw new Error("dilations should be greater than or equal to 1");
      } else n.push(1);
      for (let a = 0; a < t.length * 2; a++) if (a < s.length) {
        if (s[a] < 0) throw new Error("pad should be greater than or equal to 1");
      } else s.push(0);
      for (let a = 0; a < t.length; a++) {
        if (t[a] <= 0) throw new Error("kernel shapes need to be greater than 0");
        if (s[a] >= t[a] || s[a + t.length] >= t[a]) throw new Error("pads should be smaller than kernel");
      }
    }
    static adjustPadsBasedOnAutoPad(e, o, t, r, n, s) {
      if (s) {
        if (n.length !== 2 * (e.length - 2)) throw new Error("length of pads should be twice the length of data dimensions");
        if (o.length !== e.length - 2) throw new Error("length of strides should be the length of data dimensions");
        if (r.length !== e.length - 2) throw new Error("length of kernel shapes should be the length of data dimensions");
        for (let a = 0; a < e.length - 2; a++) i.adjustPadAndReturnShape(e[a + 2], o[a], t[a], r[a], n, a, a + e.length - 2, s);
      }
    }
    static computePoolOutputShape(e, o, t, r, n, s, a) {
      if (o.length <= 0) throw new Error("input shape must be of size greater than 0");
      let u = [o[0], o[1]];
      return i.computeShapeHelper(e, o, u, t, r, n, s, a), u;
    }
    static computeConvOutputShape(e, o, t, r, n, s, a) {
      if (e.length <= 0 || o.length <= 0) throw new Error("invalid input tensor dims or invalid filter tensor dims");
      let u = [e[0], o[0]];
      return i.computeShapeHelper(false, e, u, t, r, n, s, a), u;
    }
    static computeShapeHelper(e, o, t, r, n, s, a, u) {
      if (e) for (let l = 0; l < o.length - 2; l++) t.push(1);
      else for (let l = 0; l < o.length - 2; l++) t.push(i.adjustPadAndReturnShape(o[l + 2], r[l], n[l], s[l], a, l, l + o.length - 2, u));
    }
    static adjustPadAndReturnShape(e, o, t, r, n, s, a, u) {
      let l = t * (r - 1) + 1;
      if (u && u !== "NOTSET") switch (u) {
        case "VALID":
          return n[s] = 0, n[a] = 0, Math.floor((e - l) / o + 1);
        case "SAME_LOWER":
        case "SAME_UPPER":
          if (t !== 1) throw new Error("Dilation not supported for SAME_UPPER or SAME_LOWER");
          {
            let p2 = ((e + o - 1) / o - 1) * o + r - e;
            return n[s] = Math.floor(u === "SAME_LOWER" ? (p2 + 1) / 2 : p2 / 2), n[a] = p2 - n[s], Math.floor((e + p2 - r) / o + 1);
          }
        default:
          throw new Error("Unsupported AutoPad type");
      }
      else return Math.floor((e + n[s] + n[a] - l) / o + 1);
    }
  }, Ue = -34028234663852886e22, Ve = 34028234663852886e22;
});
function ph(i) {
  switch (i) {
    case "bool":
    case "int8":
    case "uint8":
      return 1;
    case "int16":
    case "uint16":
      return 2;
    case "int32":
    case "uint32":
    case "float32":
      return 4;
    case "float64":
      return 8;
    default:
      throw new Error(`cannot calculate sizeof() on type ${i}`);
  }
}
function Vu(i) {
  switch (i) {
    case H.onnx.TensorProto.DataType.UINT8:
    case H.onnx.TensorProto.DataType.INT8:
    case H.onnx.TensorProto.DataType.BOOL:
      return 1;
    case H.onnx.TensorProto.DataType.UINT16:
    case H.onnx.TensorProto.DataType.INT16:
      return 2;
    case H.onnx.TensorProto.DataType.FLOAT:
    case H.onnx.TensorProto.DataType.INT32:
    case H.onnx.TensorProto.DataType.UINT32:
      return 4;
    case H.onnx.TensorProto.DataType.INT64:
    case H.onnx.TensorProto.DataType.DOUBLE:
    case H.onnx.TensorProto.DataType.UINT64:
      return 8;
    default:
      throw new Error(`cannot calculate sizeof() on type ${H.onnx.TensorProto.DataType[i]}`);
  }
}
function dh(i, e) {
  return new (Hu(e))(i);
}
function Hu(i) {
  switch (i) {
    case "bool":
    case "uint8":
      return Uint8Array;
    case "int8":
      return Int8Array;
    case "int16":
      return Int16Array;
    case "uint16":
      return Uint16Array;
    case "int32":
      return Int32Array;
    case "uint32":
      return Uint32Array;
    case "int64":
      return BigInt64Array;
    case "float32":
      return Float32Array;
    case "float64":
      return Float64Array;
    default:
      throw new Error("unspecified error");
  }
}
function ii(i, e) {
  if (e === H.onnx.TensorProto.DataType.INT64 || e === oi.TensorDataType.INT64) {
    if (i.greaterThanOrEqual(2147483648) || i.lessThan(-2147483648)) throw new TypeError("int64 is not supported");
  } else if (e === H.onnx.TensorProto.DataType.UINT32 || e === oi.TensorDataType.UINT32 || e === H.onnx.TensorProto.DataType.UINT64 || e === oi.TensorDataType.UINT64) {
    if (i.greaterThanOrEqual(4294967296) || i.lessThan(0)) throw new TypeError("uint64 is not supported");
  } else throw new TypeError(`not a LONG type: ${H.onnx.TensorProto.DataType[e]}`);
  return i.toNumber();
}
function zu(i, e, o) {
  switch (e) {
    case H.onnx.TensorProto.DataType.BOOL:
    case H.onnx.TensorProto.DataType.UINT8:
      return i.getUint8(o);
    case H.onnx.TensorProto.DataType.INT8:
      return i.getInt8(o);
    case H.onnx.TensorProto.DataType.UINT16:
      return i.getUint16(o, true);
    case H.onnx.TensorProto.DataType.INT16:
      return i.getInt16(o, true);
    case H.onnx.TensorProto.DataType.FLOAT:
      return i.getFloat32(o, true);
    case H.onnx.TensorProto.DataType.INT32:
      return i.getInt32(o, true);
    case H.onnx.TensorProto.DataType.UINT32:
      return i.getUint32(o, true);
    case H.onnx.TensorProto.DataType.INT64:
      return ii(me.fromBits(i.getUint32(o, true), i.getUint32(o + 4, true), false), e);
    case H.onnx.TensorProto.DataType.DOUBLE:
      return i.getFloat64(o, true);
    case H.onnx.TensorProto.DataType.UINT64:
      return ii(me.fromBits(i.getUint32(o, true), i.getUint32(o + 4, true), true), e);
    default:
      throw new Error(`cannot read from DataView for type ${H.onnx.TensorProto.DataType[e]}`);
  }
}
var Wu, H, oi, bt, ze = O(() => {
  Wu = rr(ks());
  zo();
  Pr();
  H = rr(sr());
  Y();
  oi = F.experimental.fbs, bt = class i {
    constructor(e, o, t, r, n, s = Wu.Guid.create()) {
      this.dims = e;
      this.type = o;
      this.dataProvider = t;
      this.asyncDataProvider = r;
      this.cache = n;
      this.dataId = s;
      this.size = B.validateDimsAndCalcSize(e);
      let a = this.size, u = t === void 0 && r === void 0 && n === void 0;
      if (n !== void 0 && n.length !== a) throw new RangeError("Input dims doesn't match data length.");
      if (o === "string") {
        if (n !== void 0 && (!Array.isArray(n) || !n.every((l) => typeof l == "string"))) throw new TypeError("cache should be a string array");
        u && (this.cache = new Array(a));
      } else {
        if (n !== void 0) {
          let l = Hu(o);
          if (!(n instanceof l)) throw new TypeError(`cache should be type ${l.name}`);
        }
        if (u) {
          let l = new ArrayBuffer(a * ph(o));
          this.cache = dh(l, o);
        }
      }
    }
    get data() {
      if (this.cache === void 0) {
        let e = this.dataProvider(this.dataId);
        if (e.length !== this.size) throw new Error("Length of data provided by the Data Provider is inconsistent with the dims of this Tensor.");
        this.cache = e;
      }
      return this.cache;
    }
    get stringData() {
      if (this.type !== "string") throw new TypeError("data type is not string");
      return this.data;
    }
    get integerData() {
      switch (this.type) {
        case "uint8":
        case "int8":
        case "uint16":
        case "int16":
        case "int32":
        case "uint32":
        case "bool":
          return this.data;
        default:
          throw new TypeError("data type is not integer (uint8, int8, uint16, int16, int32, uint32, bool)");
      }
    }
    get floatData() {
      switch (this.type) {
        case "float32":
        case "float64":
          return this.data;
        default:
          throw new TypeError("data type is not float (float32, float64)");
      }
    }
    get numberData() {
      if (this.type !== "string") return this.data;
      throw new TypeError("type cannot be non-number (string)");
    }
    get(e) {
      return this.data[B.indicesToOffset(e, this.strides)];
    }
    set(e, o) {
      this.data[B.indicesToOffset(e, this.strides)] = o;
    }
    async getData() {
      return this.cache === void 0 && (this.cache = await this.asyncDataProvider(this.dataId)), this.cache;
    }
    get strides() {
      return this._strides || (this._strides = B.computeStrides(this.dims)), this._strides;
    }
    static fromProto(e) {
      if (!e) throw new Error("cannot construct Value from an empty tensor");
      let o = _t.tensorDataTypeFromProto(e.dataType), t = _t.tensorDimsFromProto(e.dims), r = new i(t, o);
      if (o === "string") e.stringData.forEach((n, s) => {
        r.data[s] = kr(n);
      });
      else if (e.rawData && typeof e.rawData.byteLength == "number" && e.rawData.byteLength > 0) {
        let n = r.data, s = new DataView(e.rawData.buffer, e.rawData.byteOffset, e.rawData.byteLength), a = Vu(e.dataType), u = e.rawData.byteLength / a;
        if (e.rawData.byteLength % a !== 0) throw new Error("invalid buffer length");
        if (n.length !== u) throw new Error("buffer length mismatch");
        for (let l = 0; l < u; l++) {
          let f = zu(s, e.dataType, l * a);
          n[l] = f;
        }
      } else {
        let n;
        switch (e.dataType) {
          case H.onnx.TensorProto.DataType.FLOAT:
            n = e.floatData;
            break;
          case H.onnx.TensorProto.DataType.INT32:
          case H.onnx.TensorProto.DataType.INT16:
          case H.onnx.TensorProto.DataType.UINT16:
          case H.onnx.TensorProto.DataType.INT8:
          case H.onnx.TensorProto.DataType.UINT8:
          case H.onnx.TensorProto.DataType.BOOL:
            n = e.int32Data;
            break;
          case H.onnx.TensorProto.DataType.INT64:
            n = e.int64Data;
            break;
          case H.onnx.TensorProto.DataType.DOUBLE:
            n = e.doubleData;
            break;
          case H.onnx.TensorProto.DataType.UINT32:
          case H.onnx.TensorProto.DataType.UINT64:
            n = e.uint64Data;
            break;
          default:
            throw new Error("unspecific error");
        }
        if (n == null) throw new Error("failed to populate data from a tensorproto value");
        let s = r.data;
        if (s.length !== n.length) throw new Error("array length mismatch");
        for (let a = 0; a < n.length; a++) {
          let u = n[a];
          me.isLong(u) ? s[a] = ii(u, e.dataType) : s[a] = u;
        }
      }
      return r;
    }
    static fromData(e, o, t) {
      return new i(o, t, void 0, void 0, e);
    }
    static fromOrtTensor(e) {
      if (!e) throw new Error("cannot construct Value from an empty tensor");
      let o = _t.tensorDimsFromORTFormat(e), t = _t.tensorDataTypeFromProto(e.dataType()), r = new i(o, t);
      if (t === "string") for (let n = 0; n < e.stringDataLength(); n++) r.data[n] = e.stringData(n);
      else if (e.rawDataArray() && typeof e.rawDataLength() == "number" && e.rawDataLength() > 0) {
        let n = r.data, s = new DataView(e.rawDataArray().buffer, e.rawDataArray().byteOffset, e.rawDataLength()), a = Vu(e.dataType()), u = e.rawDataLength() / a;
        if (e.rawDataLength() % a !== 0) throw new Error("invalid buffer length");
        if (n.length !== u) throw new Error("buffer length mismatch");
        for (let l = 0; l < u; l++) {
          let f = zu(s, e.dataType(), l * a);
          n[l] = f;
        }
      }
      return r;
    }
  };
});
function G(i) {
  return i === 1 ? hh : mh;
}
function qu(i) {
  let e = G(i);
  return `${e.version}
      precision highp float;
      ${e.attribute} vec3 position;
      ${e.attribute} vec2 textureCoord;

      ${e.varyingVertex} vec2 TexCoords;

      void main()
      {
          gl_Position = vec4(position, 1.0);
          TexCoords = textureCoord;
      }`;
}
function ju(i) {
  let e = G(i);
  return `${e.version}
    precision highp float;
    precision highp int;
    precision highp sampler2D;
    ${e.varyingFrag} vec2 TexCoords;
    ${e.outputDeclaration}
    const vec2 halfCR = vec2(0.5, 0.5);

    // Custom vector types to handle higher dimenalities.
    struct ivec5
    {
      int x;
      int y;
      int z;
      int w;
      int u;
    };

    struct ivec6
    {
      int x;
      int y;
      int z;
      int w;
      int u;
      int v;
    };

    int imod(int x, int y) {
      return x - y * (x / y);
    }

    `;
}
function Xu(i, e) {
  let o = G(i);
  return `
  void main() {
    int indices[${e}];
    toVec(TexCoords, indices);
    vec4 result = vec4(process(indices));
    ${o.output} = result;
  }
  `;
}
var hh, mh, st = O(() => {
  hh = { version: "", attribute: "attribute", varyingVertex: "varying", varyingFrag: "varying", texture2D: "texture2D", output: "gl_FragColor", outputDeclaration: "" }, mh = { version: "#version 300 es", attribute: "in", varyingVertex: "out", varyingFrag: "in", texture2D: "texture", output: "outputColor", outputDeclaration: "out vec4 outputColor;" };
});
var j = O(() => {
});
async function ai(i, e = (t) => 0, o) {
  return new Promise((t, r) => {
    let n = 0, s = () => {
      if (i()) {
        t();
        return;
      }
      n++;
      let a = e(n);
      setTimeout(s, a);
    };
    s();
  });
}
function On(i) {
  return ur(typeof i < "u" && i.length !== 0, () => "empty string found for sampler name"), "get" + i.charAt(0).toUpperCase() + i.slice(1);
}
function Ku(i) {
  return ur(typeof i < "u" && i.length !== 0, () => "empty string found for sampler name"), "get" + i.charAt(0).toUpperCase() + i.slice(1) + "AtOutCoords";
}
function lr(i, e) {
  let o = JSON.parse(JSON.stringify(i));
  return o = e, o;
}
function fr(i, e) {
  return e.map((o) => i[o]).join(", ");
}
function kt(i) {
  if (i <= 1) return "int";
  if (i === 2) return "ivec2";
  if (i === 3) return "ivec3";
  if (i === 4) return "ivec4";
  if (i === 5) return "ivec5";
  if (i === 6) return "ivec6";
  throw Error(`GPU for rank ${i} is not yet supported`);
}
function ee(i = 6) {
  return ["x", "y", "z", "w", "u", "v"].slice(0, i);
}
var ue = O(() => {
  Y();
});
function bh(i, e) {
  return ee(e).map((o) => `${i}.${o}`);
}
function cr(i, e) {
  return e === 1 ? [i] : bh(i, e);
}
function le() {
  return `
    float getChannel(vec4 frag, int dim) {
      int modCoord = imod(dim, 2);
      return modCoord == 0 ? frag.r : frag.g;
    }

    float getChannel(vec4 frag, vec2 innerDims) {
      vec2 modCoord = mod(innerDims, 2.);
      return modCoord.x == 0. ?
        (modCoord.y == 0. ? frag.r : frag.g) :
        (modCoord.y == 0. ? frag.b : frag.a);
    }
  `;
}
var We = O(() => {
  ue();
});
function yh(i, e, o) {
  if (i === 0) return "false";
  if (i === 1) return `rc > ${e[0]}`;
  let t = "";
  for (let r = i - 2; r < i; r++) t += `${o[r]} >= ${e[r - i + 2]}`, r < i - 1 && (t += "||");
  return t;
}
function xh(i, e) {
  let o = i.length;
  if (o === 0) return "getA(), 0, 0, 0";
  if (o === 1) return `getA(rc),
            rc + 1 >= ${i[0]} ? 0. : getA(rc + 1),
            0, 0`;
  let t = "r, c", r = "r, cp1", n = "rp1, c", s = "rp1, cp1", a = "";
  if (o > 2) for (let u = 0; u < o - 2; ++u) a = a + `${e[u]},`;
  return `getA(${a}${t}),
          rEdge ? 0. : getA(${a}${n}),
          cEdge ? 0. : getA(${a}${r}),
          rEdge || cEdge ? 0. : getA(${a}${s})`;
}
function Th(i, e, o, t) {
  return i === 0 || i === 1 ? "" : `
    int r = ${e[i - 2]};
    int c = ${e[i - 1]};
    int rp1 = ${e[i - 2]} + 1;
    int cp1 = ${e[i - 1]} + 1;
    bool rEdge = rp1 >= ${t};
    bool cEdge = cp1 >= ${o};
    `;
}
var Ju, gh, Yu, Zu = O(() => {
  st();
  j();
  ue();
  We();
  Ju = { name: "pack", inputNames: ["A"], inputTypes: [1] }, gh = (i, e) => {
    let o = G(i.session.backend.glContext.version), t = e.dims, r = t.length, n = e.dims.length, s = kt(n), a = cr("rc", n), u = Th(n, a, t[t.length - 2], t[t.length - 1]), l;
    r === 0 ? l = [1, 1] : r === 1 ? l = [t[0], 1] : l = [t[n - 1], t[n - 2]];
    let f = yh(n, l, a), p2 = xh(t, a), d = `
        void main() {
          ${s} rc = getOutputCoords();

          if(${f}) {
            ${o.output} = vec4(0);
          } else {
            ${u}

            ${o.output} = vec4(${p2});
          }
        }
      `;
    return { ...Ju, hasMain: true, output: { dims: e.dims, type: e.type, textureType: 2 }, shaderSource: d };
  }, Yu = (i, e) => ({ ...Ju, get: () => gh(i, e) });
});
function si(i) {
  if (i.length === 0) return [1, 1, 1];
  let e = 1;
  for (let o = 0; o < i.length - 2; ++o) e *= i[o];
  return [e, i.length > 1 ? i[i.length - 2] : 1, i[i.length - 1]];
}
function tl(i, e) {
  let o = false;
  return i.length === 0 || e.length === 0 ? o = true : i.length < 2 || e.length < 2 ? o = i[i.length - 1] === e[e.length - 1] : o = i[i.length - 1] === e[e.length - 1] && i[i.length - 2] === e[e.length - 2], o;
}
function Ih(i) {
  let e = B.computeStrides(i), o = ["b", "r", "c"], t = "index";
  return `
    ivec3 inputCoordsFromReshapedOutCoords(int index) {
      ${e.map((n, s) => {
    let a = `int ${o[s]} = ${t} / ${n}`, u = s === e.length - 1 ? `int ${o[s + 1]} = ${t} - ${o[s]} * ${n}` : `index -= ${o[s]} * ${n}`;
    return `${a}; ${u};`;
  }).join("")}
      return ivec3(b, r, c);
    }
  `;
}
function _h(i) {
  let e = B.computeStrides(i);
  return `
  int getFlattenedIndex(ivec3 coords) {
    // reverse y, z order
    return coords.x * ${e[0]} + coords.z * ${e[1]} + coords.y;
  }
`;
}
var wh, vh, Qu, el = O(() => {
  Y();
  st();
  j();
  We();
  wh = (i) => ({ name: "Reshape (packed)", inputTypes: [2], inputNames: ["A"], cacheHint: `${i}` }), vh = (i, e, o, t) => {
    let r = e.dims, n = t, s = "";
    for (let l = 0; l < 4; l++) {
      let f = "";
      switch (l) {
        case 0:
          f = "outputCoords = rc;";
          break;
        case 1:
          f = "outputCoords = ivec3(rc.x, rc.y+1, rc.z);";
          break;
        case 2:
          f = "outputCoords = ivec3(rc.x, rc.y, rc.z+1);";
          break;
        case 3:
          f = "outputCoords = ivec3(rc.x, rc.y+1, rc.z+1);";
          break;
        default:
          throw new Error();
      }
      s += `
        ${f}
        ${l > 0 ? "if(outputCoords.y < rows && outputCoords.z < cols){" : ""}
          int flattenedIndex = getFlattenedIndex(outputCoords);

          ivec3 inputRC = inputCoordsFromReshapedOutCoords(flattenedIndex);
          vec2 innerDims = vec2(float(inputRC.y),float(inputRC.z));

          result[${l}] = getChannel(getA(inputRC.x, inputRC.y, inputRC.z), innerDims);

        ${l > 0 ? "}" : ""}
      `;
    }
    let a = G(i.session.backend.glContext.version), u = `
      ${Ih(r)}
      ${_h(n)}
      ${le()}

      void main() {
        ivec3 rc = getOutputCoords();

        vec4 result = vec4(0.0);

        ivec3 outputCoords;
        int rows = ${n[2]};
        int cols = ${n[1]};

        ${s}
        ${a.output} = result;
      }
    `;
    return { ...o, output: { dims: n, type: e.type, textureType: 2 }, shaderSource: u, hasMain: true };
  }, Qu = (i, e, o) => {
    let t = wh(o);
    return { ...t, get: () => vh(i, e, t, o) };
  };
});
var ui, rl = O(() => {
  st();
  j();
  ui = (i, e) => {
    let o = e.shape, t = G(i.session.backend.glContext.version), r = `
    const float FLOAT_MAX = 1.70141184e38;
    const float FLOAT_MIN = 1.17549435e-38;

    bool isNaN(float val) {
      return (val < 1.0 || 0.0 < val || val == 0.0) ? false : true;
    }

    highp vec4 encodeAsUint8(highp float v) {
      if (isNaN(v)) {
        return vec4(255, 255, 255, 255);
      }

      highp float av = abs(v);

      if(av < FLOAT_MIN) {
        return vec4(0.0, 0.0, 0.0, 0.0);
      } else if(v > FLOAT_MAX) {
        return vec4(0.0, 0.0, 128.0, 127.0) / 255.0;
      } else if(v < -FLOAT_MAX) {
        return vec4(0.0, 0.0,  128.0, 255.0) / 255.0;
      }

      highp vec4 c = vec4(0,0,0,0);

      highp float e = floor(log2(av));
      highp float m = exp2(fract(log2(av))) - 1.0;

      c[2] = floor(128.0 * m);
      m -= c[2] / 128.0;
      c[1] = floor(32768.0 * m);
      m -= c[1] / 32768.0;
      c[0] = floor(8388608.0 * m);

      highp float ebias = e + 127.0;
      c[3] = floor(ebias / 2.0);
      ebias -= c[3] * 2.0;
      c[2] += floor(ebias) * 128.0;

      c[3] += 128.0 * step(0.0, -v);

      return c / 255.0;
    }

    void main() {
      float value = ${t.texture2D}(X,TexCoords).r;
      ${t.output} = encodeAsUint8(value);
    }`, n = { name: "Uint8Encode", inputTypes: [0], inputNames: ["X"], output: { dims: o, type: e.tensor.type, textureType: 3 }, shaderSource: r, hasMain: true };
    return i.executeProgram(n, [e.tensor]);
  };
});
function Sh(i, e) {
  if (i === 1) return "rc";
  let o = "";
  for (let t = 0; t < i; t++) o += e[t], t < i - 1 && (o += ",");
  return o;
}
var nl, Oh, ol, il = O(() => {
  st();
  j();
  ue();
  We();
  nl = { name: "unpack", inputNames: ["A"], inputTypes: [2] }, Oh = (i, e) => {
    let o = e.dims.length, t = cr("rc", o), r = t.slice(-2), n = kt(o), s = le(), u = e.dims.length === 0 ? "" : Sh(o, t), l = o <= 1 ? "rc" : `vec2(${r.join(",")})`, f = G(i.session.backend.glContext.version), p2 = `
    ${s}
    void main() {
      ${n} rc = getOutputCoords();

       // Sample the texture with the coords to get the rgba channel value.
       vec4 packedInput = getA(${u});

       ${f.output} = vec4(getChannel(packedInput, ${l}), 0, 0, 0);
     }
   `;
    return { ...nl, hasMain: true, output: { dims: e.dims, type: e.type, textureType: 0 }, shaderSource: p2 };
  }, ol = (i, e) => ({ ...nl, get: () => Oh(i, e) });
});
var Sn, Br, An, Fr = O(() => {
  Mt();
  Sn = class {
    constructor(e, o = 1) {
      if (o === 1) this.internalFormat = e.R32F, this.format = e.RED, this.textureType = e.FLOAT, this.channelSize = o;
      else if (o === 4) this.internalFormat = e.RGBA32F, this.format = e.RGBA, this.textureType = e.FLOAT, this.channelSize = o;
      else throw new Error(`Invalid number of channels: ${o}`);
    }
    encode(e, o) {
      let t, r;
      return e.constructor !== Float32Array && (tt.warning("Encoder", "data was not of type Float32; creating new Float32Array"), r = new Float32Array(e)), o * this.channelSize > e.length ? (tt.warning("Encoder", "Source data too small. Allocating larger array"), r = e, t = this.allocate(o * this.channelSize), r.forEach((n, s) => t[s] = n)) : (r = e, t = r), t;
    }
    allocate(e) {
      return new Float32Array(e * 4);
    }
    decode(e, o) {
      return this.channelSize === 1 ? e.filter((r, n) => n % 4 === 0).subarray(0, o) : e.subarray(0, o);
    }
  }, Br = class {
    constructor(e, o = 1, t) {
      if (o !== 1 && o !== 4) throw new Error(`Invalid number of channels: ${o}`);
      this.internalFormat = e.RGBA, this.format = e.RGBA, this.channelSize = o, this.textureType = t || e.FLOAT;
    }
    encode(e, o) {
      let t = e;
      return this.channelSize === 1 && (tt.verbose("Encoder", "Exploding into a larger array"), t = this.allocate(o), e.forEach((r, n) => t[n * 4] = r)), t;
    }
    allocate(e) {
      return new Float32Array(e * 4);
    }
    decode(e, o) {
      return this.channelSize === 1 ? e.filter((r, n) => n % 4 === 0).subarray(0, o) : e.subarray(0, o);
    }
  }, An = class {
    constructor(e, o = 1) {
      this.channelSize = 4;
      if (o === 1) this.internalFormat = e.ALPHA, this.format = e.ALPHA, this.textureType = e.UNSIGNED_BYTE, this.channelSize = o;
      else if (o === 4) this.internalFormat = e.RGBA, this.format = e.RGBA, this.textureType = e.UNSIGNED_BYTE, this.channelSize = o;
      else throw new Error(`Invalid number of channels: ${o}`);
    }
    encode(e, o) {
      return new Uint8Array(e.buffer, e.byteOffset, e.byteLength);
    }
    allocate(e) {
      return new Uint8Array(e * this.channelSize);
    }
    decode(e, o) {
      if (e instanceof Uint8Array) return e.subarray(0, o);
      throw new Error(`Invalid array type: ${e.constructor}`);
    }
  };
});
var Cr, al, li, sl = O(() => {
  Y();
  j();
  Cr = (i, e, o) => {
    let t = o === 0 || o === 1 ? 1 : 4, r = o === 2, n = o === 1 || o === 2, s = o === 4 ? e.length - 1 : void 0, a = o === 4 ? e.map((u, l) => l === e.length - 1 ? u * 4 : u) : void 0;
    return li(i, e, t, a, { isPacked: r, reverseWH: n, breakAxis: s });
  }, al = (i, e, o) => {
    let t = Cr(i, e, o);
    return [t.width, t.height];
  }, li = (i, e, o = 1, t, r) => {
    let n = !!(r && r.isPacked), [s, a] = i.computeTextureWH(n && t || e, r), u = e.length, l = e.slice(0);
    if (u === 0 && (l = [1]), o === 1) t = e;
    else if (n) {
      if (o !== 4) throw new Error("a packed texture must be 4-channel");
      t = e, u > 0 && (l[u - 1] = Math.ceil(l[u - 1] / 2)), u > 1 && (l[u - 2] = Math.ceil(l[u - 2] / 2));
    } else if (!t) throw new Error("Unpacked shape is needed when using channels > 1");
    return { width: s, height: a, channels: o, isPacked: n, shape: l, strides: B.computeStrides(l), unpackedShape: t, reversedWH: r && r.reverseWH };
  };
});
var Ph, Pn, ll = O(() => {
  Mt();
  ze();
  Y();
  Zu();
  el();
  rl();
  il();
  Fr();
  sl();
  j();
  Ph = (i, e) => {
    let o = e.map((r) => `${r.unpackedShape.join(",")};${r.width}x${r.height}`).join("_"), t = i.name;
    return i.cacheHint && (t += "[" + i.cacheHint + "]"), t += ":" + o, t;
  }, Pn = class {
    constructor(e) {
      this.session = e;
      this.packedTextureDataCache = /* @__PURE__ */ new Map(), this.unpackedTextureDataCache = /* @__PURE__ */ new Map();
    }
    calculateTextureWidthAndHeight(e, o) {
      return al(this.session.layoutStrategy, e, o);
    }
    executeProgram(e, o) {
      if (o.length < e.inputNames.length) throw new Error(`Input size mustn't be less than ${e.inputNames.length}.`);
      if (e.inputNames.length !== e.inputTypes.length) throw new Error("input names size does not match input types");
      let t = [];
      for (let l = 0; l < e.inputNames.length; ++l) t[l] = this.getOrCreateTextureData(o[l], e.inputTypes[l]);
      let r = Ph(e, t), n = this.session.programManager.getArtifact(r), s = n ? n.programInfo : typeof e.get == "function" ? e.get() : e, a = Cr(this.session.layoutStrategy, s.output.dims, s.output.textureType), u = this.createTextureData(a, s.output.type);
      return n || (n = this.session.programManager.build(s, t, u), this.session.programManager.setArtifact(r, n)), this.runProgram(n, t, u), u;
    }
    run(e, o) {
      return this.executeProgram(e, o).tensor;
    }
    runProgram(e, o, t) {
      for (let r = 0; r < o.length; ++r) if (!!o[r].isPacked != (e.programInfo.inputTypes[r] === 2)) throw new Error(`input[${r}] property packed inconsistent`);
      if (!!t.isPacked != (e.programInfo.output.textureType === 2)) throw new Error("output property packed inconsistent");
      this.session.programManager.run(e, o, t);
    }
    getOrCreateTextureData(e, o) {
      let t = this.getTextureData(e.dataId, o === 2);
      if (!t && (t = this.getTextureData(e.dataId, o !== 2), t)) return o === 2 ? this.pack(t) : this.unpack(t);
      if (!t) {
        let r = Cr(this.session.layoutStrategy, e.dims, o);
        if (o === 4) {
          let a = e.dims;
          if (a.length === 4) {
            let u = [a[0], Math.ceil(a[1] * a[2] * a[3] / 4)], l = Cr(this.session.layoutStrategy, u, o), f = e.numberData;
            if (a[1] * a[2] * a[3] % 4 !== 0) {
              let p2 = a[0], d = a[1] * a[2] * a[3], y = Math.ceil(d * 1 / 4) * 4, w = p2 * y;
              f = new Float32Array(w);
              for (let v = 0; v < p2; ++v) {
                let S = v * d, L = v * y + v % 1 * d;
                f.set(e.numberData.subarray(S, S + d), L);
              }
            }
            return this.createTextureData(l, e.type, f, e, 1);
          }
        }
        if (o === 2) {
          let n = li(this.session.layoutStrategy, e.dims, 1, [], { reverseWH: true }), s = this.createTextureData(n, e.type, e.numberData, e, 1);
          t = this.pack(s);
        } else t = this.createTextureData(r, e.type, e.numberData, e, 1);
      }
      return t;
    }
    createTextureDataFromLayoutBindTensor(e, o, t, r) {
      return this.createTextureData(e, o, t, r, 1);
    }
    createTextureData(e, o, t, r, n) {
      tt.verbose("InferenceHandler", `Creating TextureData: layout:[${JSON.stringify(e)}]`);
      let s = this.session.textureManager.createTextureFromLayout(o, e, t, n);
      return this.createTextureDataFromTexture(e, o, s, r);
    }
    reshapeUnpacked(e, o) {
      let t = this.getOrCreateTextureData(e, 0), r = { channels: t.channels, height: t.height, width: t.width, shape: o.length !== 0 ? o : [1], strides: B.computeStrides(o), unpackedShape: o };
      return this.createTextureDataFromTexture(r, e.type, t.texture).tensor;
    }
    reshapePacked(e, o) {
      let t = this.getOrCreateTextureData(e, 2);
      if (tl(e.dims, o)) {
        let l = { channels: t.channels, height: t.height, width: t.width, shape: o.length !== 0 ? o : [1], strides: B.computeStrides(o), unpackedShape: o, isPacked: true };
        return this.createTextureDataFromTexture(l, e.type, t.texture).tensor;
      }
      let r = si(e.dims), n = si(o), s = this.reshapePacked(e, r), a = this.run(Qu(this, s, n), [s]);
      return this.reshapePacked(a, o);
    }
    cast(e, o) {
      let t = this.getOrCreateTextureData(e, 0);
      return this.createTextureDataFromTexture(t, o, t.texture).tensor;
    }
    createTextureDataFromTexture(e, o, t, r, n) {
      let s = { ...e, tensor: r || new bt(e.unpackedShape, o, (a) => this.readTexture(s), async (a) => this.readTextureAsync(s), void 0, n), texture: t };
      return this.setTextureData(s.tensor.dataId, s, e.isPacked), s;
    }
    getTextureData(e, o = false) {
      return this.session.isInitializer(e) ? this.session.getTextureData(e, o) : o ? this.packedTextureDataCache.get(e) : this.unpackedTextureDataCache.get(e);
    }
    setTextureData(e, o, t = false) {
      this.session.isInitializer(e) ? this.session.setTextureData(e, o, t) : (t ? this.packedTextureDataCache : this.unpackedTextureDataCache).set(e, o);
    }
    isTextureLayoutCached(e, o = false) {
      return !!this.getTextureData(e.dataId, o);
    }
    dispose() {
      this.session.textureManager.clearActiveTextures(), this.packedTextureDataCache.forEach((e) => this.session.textureManager.releaseTexture(e)), this.packedTextureDataCache = /* @__PURE__ */ new Map(), this.unpackedTextureDataCache.forEach((e) => this.session.textureManager.releaseTexture(e)), this.unpackedTextureDataCache = /* @__PURE__ */ new Map();
    }
    readTexture(e) {
      return e.isPacked ? this.readTexture(this.unpack(e)) : this.session.backend.glContext.isFloat32DownloadSupported ? this.session.textureManager.readTexture(e, e.tensor.type, e.channels) : this.session.textureManager.readUint8TextureAsFloat(ui(this, e));
    }
    async readTextureAsync(e) {
      return e.isPacked ? this.readTextureAsync(this.unpack(e)) : this.session.backend.glContext.isFloat32DownloadSupported ? this.session.textureManager.readTextureAsync(e, e.tensor.type, e.channels) : this.session.textureManager.readUint8TextureAsFloat(ui(this, e));
    }
    pack(e) {
      return this.executeProgram(Yu(this, e.tensor), [e.tensor]);
    }
    unpack(e) {
      return this.executeProgram(ol(this, e.tensor), [e.tensor]);
    }
  };
});
var fi, W, vt = O(() => {
  fi = class {
    constructor(e) {
      Object.assign(this, e);
    }
    get cacheKey() {
      return this.key || (this.key = Object.getOwnPropertyNames(this).sort().map((e) => `${this[e]}`).join(";")), this.key;
    }
  }, W = (i) => new fi(i);
});
var fl, cl, pl, Eh, Dh, dl = O(() => {
  vt();
  st();
  j();
  fl = { name: "BatchNormalization", inputNames: ["A", "Scale", "B", "Mean", "Variance"], inputTypes: [0, 0, 0, 0, 0] }, cl = (i, e, o) => (Dh(e), [i.run({ ...fl, cacheHint: o.cacheKey, get: () => Eh(i, e, o) }, e)]), pl = (i) => {
    let e = i.attributes.getFloat("epsilon", 1e-5), o = i.attributes.getFloat("momentum", 0.9), t = i.attributes.getInt("spatial", 1);
    return W({ epsilon: e, momentum: o, spatial: t });
  }, Eh = (i, e, o) => {
    let t = G(i.session.backend.glContext.version), r = e[0].dims.length, [n, s] = i.calculateTextureWidthAndHeight(e[1].dims, 0), a = `
  float process(int[${r}] indices) {
    vec2 position = offsetToCoords(indices[1], ${n}, ${s});
    float scale = getColorAsFloat(${t.texture2D}(Scale, position));
    float mean = getColorAsFloat(${t.texture2D}(Mean, position));
    float variance = getColorAsFloat(${t.texture2D}(Variance, position));
    float b = getColorAsFloat(${t.texture2D}(B, position));

    return scale * ( (_A(indices) - mean) / sqrt(variance + float(${o.epsilon})) ) + b;
  }`;
    return { ...fl, output: { dims: e[0].dims, type: e[0].type, textureType: 0 }, shaderSource: a };
  }, Dh = (i) => {
    if (!i || i.length !== 5) throw new Error("BatchNormalization requires 5 inputs.");
    let e = i[0], o = i[1], t = i[2], r = i[3], n = i[4];
    if (e.dims.length < 3 || o.dims.length !== 1 || t.dims.length !== 1 || r.dims.length !== 1 || n.dims.length !== 1) throw new Error("invalid input shape.");
    if (o.dims[0] !== e.dims[1] || t.dims[0] !== e.dims[1] || r.dims[0] !== e.dims[1] || n.dims[0] !== e.dims[1]) throw new Error("invalid input shape.");
    if (e.type !== "float32" && e.type !== "float64" || o.type !== "float32" && o.type !== "float64" || t.type !== "float32" && t.type !== "float64" || r.type !== "float32" && r.type !== "float64" || n.type !== "float32" && n.type !== "float64") throw new Error("invalid input tensor types.");
  };
});
var En, Wt, k, Nr, Dn, be = O(() => {
  En = class {
    constructor(e, o, t, r) {
      this.glContext = e;
      this.programInfo = o;
      this.inputTextureLayouts = t;
      this.outputTextureLayout = r;
    }
  }, Wt = class {
    constructor(e) {
      this.context = e;
    }
  }, k = class {
    constructor(e, o) {
      this.routineBody = e;
      this.dependencies = o;
    }
  }, Nr = class {
    constructor(e, o, t) {
      this.name = e;
      t ? this.dependencies = t : this.dependencies = [], o && (this.routineBody = o);
    }
    addDependency(e) {
      e && this.dependencies.push(e);
    }
  }, Dn = class {
    static returnOrderedNodes(e) {
      if (!e || e.length === 0) return [];
      if (e.length === 1) return e;
      let o = /* @__PURE__ */ new Set(), t = /* @__PURE__ */ new Set(), r = new Array();
      return this.createOrderedNodes(e, o, t, r), r;
    }
    static createOrderedNodes(e, o, t, r) {
      for (let n = 0; n < e.length; ++n) this.dfsTraverse(e[n], o, t, r);
    }
    static dfsTraverse(e, o, t, r) {
      if (!e || t.has(e.name)) return;
      if (o.has(e.name)) throw new Error("Cyclic dependency detected. Can't topologically sort routines needed for shader.");
      o.add(e.name);
      let n = e.dependencies;
      if (n && n.length > 0) for (let s = 0; s < n.length; ++s) this.dfsTraverse(n[s], o, t, r);
      r.push(e), t.add(e.name), o.delete(e.name);
    }
  };
});
function $h() {
  let i = "add_";
  return { body: `
  float ${i}(float a, float b) {
    return a + b;
  }
  vec4 ${i}(vec4 v1, vec4 v2) {
    return v1 + v2;
  }
  `, name: i, type: 0 };
}
function kh() {
  let i = "div_";
  return { body: `
  float ${i}(float a, float b) {
    return a / b;
  }
  vec4 ${i}(vec4 v1, vec4 v2) {
    return v1 / v2;
  }
  `, name: i, type: 0 };
}
function Bh() {
  let i = "mul_";
  return { body: `
  float ${i}(float a, float b) {
    return a * b;
  }
  vec4 ${i}(vec4 v1, vec4 v2) {
    return v1 * v2;
  }
  `, name: i, type: 0 };
}
function Fh() {
  let i = "sub_";
  return { body: `
  float ${i}(float a, float b) {
    return a - b;
  }
  vec4 ${i}(vec4 v1, vec4 v2) {
    return v1 - v2;
  }
  `, name: i, type: 0 };
}
function Ch() {
  let i = "equal_";
  return { body: `
  float ${i}(float a, float b) {
    return float(a == b);
  }
  vec4 ${i}(vec4 v1, vec4 v2) {
    return vec4(equal(v1, v2));
  }
  `, name: i, type: 0 };
}
function Nh() {
  let i = "greater_";
  return { body: `
  float ${i}(float a, float b) {
    return float(a > b);
  }
  vec4 ${i}(vec4 v1, vec4 v2) {
    return vec4( v1.r > v2.r ,
      v1.g > v2.g,
      v1.b > v2.b,
      v1.a > v2.a );
  }
  `, name: i, type: 0 };
}
function Rh() {
  let i = "less_";
  return { body: `
  float ${i}(float a, float b) {
    return float(a < b);
  }
  vec4 ${i}(vec4 v1, vec4 v2) {
    return vec4( v1.r < v2.r ,
                v1.g < v2.g,
                v1.b < v2.b,
                v1.a < v2.a );
  }
  `, name: i, type: 0 };
}
function Gh() {
  let i = "and_";
  return { body: `
  float ${i}(float a, float b) {
    return float( bool(a) && bool(b) );
  }
  vec4 ${i}(vec4 v1, vec4 v2) {
    bvec4 b1 = bvec4(v1);
    bvec4 b2 = bvec4(v2);
    return vec4( b1.r && b2.r ,
                b1.g && b2.g,
                b1.b && b2.b,
                b1.a && b2.a );
  }
  `, name: i, type: 0 };
}
function Mh() {
  let i = "or_";
  return { body: `
  float ${i}(float a, float b) {
    return float( bool(a) || bool(b) );
  }
  vec4 ${i}(vec4 v1, vec4 v2) {
    bvec4 b1 = bvec4(v1);
    bvec4 b2 = bvec4(v2);
    return vec4( b1.r || b2.r ,
                b1.g || b2.g,
                b1.b || b2.b,
                b1.a || b2.a );
  }
  `, name: i, type: 0 };
}
function Uh() {
  let i = "xor_";
  return { body: `
  float ${i}(float a, float b) {
    return float( bool(a) ^^ bool(b) );
  }
  vec4 ${i}(vec4 v1, vec4 v2) {
    bvec4 b1 = bvec4(v1);
    bvec4 b2 = bvec4(v2);
    return vec4( b1.r ^^ b2.r ,
                b1.g ^^ b2.g,
                b1.b ^^ b2.b,
                b1.a ^^ b2.a );
  }
  `, name: i, type: 0 };
}
function Vh() {
  return Wh("pow");
}
function zh() {
  let i = "prelu_";
  return { body: `
  float ${i}(float a, float b) {
    return a < 0.0 ? a * b: a;
  }
  vec4 ${i}(vec4 v1, vec4 v2) {
    return vec4(
      v1.r < 0.0 ? v1.r * v2.r: v1.r,
      v1.g < 0.0 ? v1.g * v2.g: v1.g,
      v1.b < 0.0 ? v1.b * v2.b: v1.b,
      v1.a < 0.0 ? v1.a * v2.a: v1.a
      );
  }
  `, name: i, type: 0 };
}
function Wh(i) {
  let e = `${i}_`;
  return { body: `
  float ${e}(float a, float b) {
    return ${i}(a, b);
  }
  vec4 ${e}(vec4 v1, vec4 v2) {
    return ${i}(v1, v2);
  }
  `, name: e, type: 0 };
}
var Ht, Hh, hl, ml, bl, gl, yl, xl, Tl, wl, vl, Il, _l, Ol, Sl = O(() => {
  Y();
  be();
  st();
  j();
  Ht = (i, e, o, t = e[0].type, r) => {
    let n = i.session.pack ? 2 : 0;
    return { name: o.name, inputNames: ["A", "B"], inputTypes: [n, n], cacheHint: r, get: () => Hh(i, e, o, t) };
  }, Hh = (i, e, o, t = e[0].type) => {
    let r = i.session.pack ? 2 : 0, n = !B.areEqual(e[0].dims, e[1].dims), s = e[0].dims, a = i.session.pack;
    if (n) {
      let f = $t.calcShape(e[0].dims, e[1].dims, false);
      if (!f) throw new Error("Can't perform binary op on the given tensors");
      s = f;
      let p2 = s.length, d = e[0].dims.length !== 0 ? e[0].dims.length : 1, y = e[1].dims.length !== 0 ? e[1].dims.length : 1, w = e[0].dims.length !== 0 ? "bcastIndices_A(indices, aindices);" : "aindices[0] = 0;", v = e[1].dims.length !== 0 ? "bcastIndices_B(indices, bindices);" : "bindices[0] = 0;", S = G(i.session.backend.glContext.version), L = a ? `
      ${o.body}
      void main() {
        vec4 a = getAAtOutCoords();
        vec4 b = getBAtOutCoords();
        vec4 result = ${o.name}(a, b);
        ${S.output} = result;
      }` : `
      ${o.body}
      float process(int indices[${p2}]) {
        int aindices[${d}];
        int bindices[${y}];
        ${w}
        ${v}
        return ${o.name}(_A(aindices), _B(bindices));
      }`;
      return { name: o.name, inputNames: ["A", "B"], inputTypes: [r, r], output: { dims: s, type: t, textureType: r }, shaderSource: L, hasMain: a };
    }
    let u = G(i.session.backend.glContext.version), l = `
    ${o.body}
    void main() {
      vec4 v1 = ${u.texture2D}(A, TexCoords);
      vec4 v2 = ${u.texture2D}(B, TexCoords);
      vec4 result = ${o.name}(v1, v2);
      ${u.output} = result;
    }
    `;
    return { name: o.name, inputNames: ["A", "B"], inputTypes: [r, r], output: { dims: e[0].dims, type: t, textureType: r }, shaderSource: l, hasMain: true };
  }, hl = (i, e) => [i.run(Ht(i, e, $h()), e)], ml = (i, e) => [i.run(Ht(i, e, Gh(), "bool"), e)], bl = (i, e) => [i.run(Ht(i, e, kh()), e)], gl = (i, e) => [i.run(Ht(i, e, Ch(), "bool"), e)], yl = (i, e) => [i.run(Ht(i, e, Nh(), "bool"), e)], xl = (i, e) => [i.run(Ht(i, e, Rh(), "bool"), e)], Tl = (i, e) => [i.run(Ht(i, e, Bh()), e)], wl = (i, e) => [i.run(Ht(i, e, Mh(), "bool"), e)], vl = (i, e) => [i.run(Ht(i, e, Vh()), e)], Il = (i, e) => [i.run(Ht(i, e, zh()), e)], _l = (i, e) => [i.run(Ht(i, e, Fh()), e)], Ol = (i, e) => [i.run(Ht(i, e, Uh(), "bool"), e)];
});
var Al, Pl, jh, El = O(() => {
  Y();
  Al = (i, e, o) => (jh(e), [i.cast(e[0], o)]), Pl = (i) => _t.tensorDataTypeFromProto(i.attributes.getInt("to")), jh = (i) => {
    if (!i || i.length !== 1) throw new Error("Cast requires 1 input.");
    if (i[0].type === "string") throw new Error("Invalid input type.");
  };
});
var Xh, Kh, Dl, Ln, Ll = O(() => {
  st();
  j();
  ue();
  We();
  Xh = (i, e) => ({ name: "Concat (packed)", inputNames: Array.from({ length: i }, (o, t) => `X${t}`), inputTypes: Array(i).fill(2), cacheHint: e }), Kh = (i, e, o, t) => {
    let r = o[0].dims.slice();
    if (t >= r.length || t < -1 * r.length) throw new Error("axis specified for concat doesn't match input dimensionality");
    t < 0 && (t = r.length + t);
    let n = r.slice(0);
    for (let V = 1; V < o.length; V++) {
      let ut = o[V].dims.slice();
      for (let xt = 0; xt < r.length; xt++) if (xt === t) n[t] += ut[xt];
      else if (r[xt] !== ut[xt]) throw new Error("non concat dimensions must match");
    }
    let s = n.length, a = cr("coords", s), u = kt(s), l = le(), f = o.map((V) => V.dims), p2 = ee(s), d = new Array(f.length - 1);
    d[0] = f[0][t];
    for (let V = 1; V < d.length; V++) d[V] = d[V - 1] + f[V][t];
    let y = p2[t], w = p2.slice(-2), v = p2.join(), S = `if (${y} < ${d[0]}) {
        return getChannel(
            getX0(${v}), vec2(${w.join()}));
        }`;
    for (let V = 1; V < d.length; V++) {
      let ut = d[V - 1];
      S += `
            if (${y} < ${d[V]}  && ${y} >= ${d[V - 1]}) {
              return getChannel(
                getX${V}(${Ln(p2, y, ut)}),
                vec2(${Ln(w, y, ut)}));
            }`;
    }
    let L = d.length, A = d[d.length - 1];
    S += `
            return getChannel(
              getX${L}(${Ln(p2, y, A)}),
              vec2(${Ln(w, y, A)}));`;
    let P = G(i.session.backend.glContext.version), M = `
          ${l}
          float getValue(${p2.map((V) => "int " + V)}) {
            ${S}
          }

          void main() {
            ${u} coords = getOutputCoords();
            int lastDim = coords.${p2[s - 1]};
            coords.${p2[s - 1]} = coords.${p2[s - 2]};
            coords.${p2[s - 2]} = lastDim;

            vec4 result = vec4(getValue(${a}), 0., 0., 0.);

            ${a[s - 1]} = ${a[s - 1]} + 1;
            if (${a[s - 1]} < ${n[s - 1]}) {
              result.g = getValue(${a});
            }

            ${a[s - 2]} = ${a[s - 2]} + 1;
            if (${a[s - 2]} < ${n[s - 2]}) {
              result.a = getValue(${a});
            }

            ${a[s - 1]} = ${a[s - 1]} - 1;
            if (${a[s - 2]} < ${n[s - 2]} &&
                ${a[s - 1]} < ${n[s - 1]}) {
              result.b = getValue(${a});
            }
            ${P.output} = result;
          }
        `;
    return { ...e, output: { dims: n, type: o[0].type, textureType: 2 }, shaderSource: M, hasMain: true };
  }, Dl = (i, e, o) => {
    let t = Xh(e.length, o.cacheKey);
    return { ...t, get: () => Kh(i, t, e, o.axis) };
  }, Ln = (i, e, o) => {
    let t = i.indexOf(e);
    return i.map((n, s) => s === t ? `${n} - ${o}` : n).join();
  };
});
var $l, Jh, Yh, Zh, kl, Qh, tm, em, Bl, rm, Fl = O(() => {
  vt();
  j();
  Ll();
  $l = (i, e, o) => (rm(e), i.session.pack && e[0].dims.length > 1 ? [i.run(Dl(i, e, o), e)] : [i.run(Zh(i, e, o), e)]), Jh = (i, e) => ({ name: "Concat", inputNames: Array.from({ length: i }, (o, t) => `X${t}`), inputTypes: Array(i).fill(0), cacheHint: e }), Yh = (i, e, o, t) => {
    let r = o[0].dims.slice();
    if (t >= r.length || t < -1 * r.length) throw new Error("axis specified for concat doesn't match input dimensionality");
    t < 0 && (t = r.length + t);
    let n = r.slice(0);
    for (let y = 1; y < o.length; y++) {
      let w = o[y].dims.slice();
      for (let v = 0; v < r.length; v++) if (v === t) n[t] += w[v];
      else if (r[v] !== w[v]) throw new Error("non concat dimensions must match");
    }
    let s = n.length, a = new Array(o.length), u = 0;
    for (let y = 0; y < a.length; ++y) u += o[y].dims[t], a[y] = u;
    let l = "";
    o.length < 5 ? l = kl(a) : l = Qh(a);
    let f = tm(o.length, s), p2 = em(a), d = `
        ${f}
        ${p2}
        ${l}
        float process(int indices[${s}]) {
          int textureIndex = getTextureWhereDataResides (indices[${t}]);

          if(textureIndex != 0) {
            indices[${t}] = indices[${t}] - int(getSizeInConcatAxisValueFromIndex(textureIndex-int(1)));
          }

          return fetchDataFromCorrectTexture(textureIndex, indices);
        }`;
    return { ...e, output: { dims: n, type: o[0].type, textureType: 0 }, shaderSource: d };
  }, Zh = (i, e, o) => {
    let t = Jh(e.length, o.cacheKey);
    return { ...t, get: () => Yh(i, t, e, o.axis) };
  }, kl = (i) => `int getTextureWhereDataResides(int index) {
      ${i.map((o, t) => `if(index<${o}) {return ${t};}
`).join("")}
    }`, Qh = (i) => kl(i), tm = (i, e) => {
    let o = [`float fetchDataFromCorrectTexture(int textureIndex, int indices[${e}]) {`];
    for (let t = 0; t < i; ++t) t === 0 ? o.push(`	if (textureIndex == ${t}) { return _X${t}(indices); }`) : t === i - 1 ? o.push(`	else { return _X${t}(indices); }`) : o.push(`	else if (textureIndex == ${t}) { return _X${t}(indices); }`);
    return o.push("	}"), o.join(`
`);
  }, em = (i) => {
    let e = ["int getSizeInConcatAxisValueFromIndex(int index) {"];
    for (let o = 0; o < i.length; ++o) o === 0 ? e.push(`	if (index == ${o}) { return ${i[o]}; }`) : o === i.length - 1 ? e.push(`	else { return ${i[o]}; }`) : e.push(`	else if (index == ${o}) { return ${i[o]}; }`);
    return e.push("	}"), e.join(`
`);
  }, Bl = (i) => W({ axis: i.attributes.getInt("axis") }), rm = (i) => {
    if (!i || i.length < 1) throw new Error("too few inputs");
    let e = i[0].type, o = i[0].dims.length;
    if (e === "string") throw new Error("string tensor is not supported yet");
    for (let t of i) {
      if (t.type !== e) throw new Error("input tensors should be one type");
      if (t.dims.length !== o) throw new Error("input tensors should have the same shape");
    }
  };
});
function nm() {
  return qt("abs");
}
function om() {
  return qt("acos");
}
function im() {
  return qt("asin");
}
function am() {
  return qt("atan");
}
function sm() {
  return qt("ceil");
}
function um() {
  return qt("cos");
}
function lm(i) {
  let e = "elu";
  return { body: `
  const float alpha = float(${i});

  float ${e}_(float a) {
    return a >= 0.0 ? a: (exp(a) - 1.0) * alpha;
  }
  vec4 ${e}_(vec4 v) {
    return vec4(${e}_(v.x), ${e}_(v.y), ${e}_(v.z), ${e}_(v.w));
  }
  `, name: e, type: 0 };
}
function fm() {
  return qt("exp");
}
function cm() {
  return qt("floor");
}
function ci(i, e) {
  let o = "clip";
  return { body: `
  const float min = float(${i});
  const float max = float(${e});

  float ${o}_(float a) {
    return clamp(a, min, max);
  }
  vec4 ${o}_(vec4 v) {
    return clamp(v, min, max);
  }
  `, name: o, type: 0 };
}
function pm() {
  let i = "indentity";
  return { body: `
  float ${i}_(float a) {
    return a;
  }
  vec4 ${i}_(vec4 v) {
    return v;
  }
  `, name: i, type: 0 };
}
function dm(i) {
  let e = "leakyRelu";
  return { body: `
  const float alpha = float(${i});

  float ${e}_(float a) {
    return a < 0.0 ? a * alpha : a;
  }
  vec4 ${e}_(vec4 v) {
    return vec4(${e}_(v.x), ${e}_(v.y), ${e}_(v.z), ${e}_(v.w));
  }
  `, name: e, type: 0 };
}
function hm() {
  return qt("log");
}
function mm() {
  let i = "neg";
  return { body: `
  float ${i}_(float a) {
    return -a;
  }
  vec4 ${i}_(vec4 v) {
    return -v;
  }
  `, name: i, type: 0 };
}
function bm() {
  let i = "not";
  return { body: `
  float ${i}_(float a) {
    return float( ! bool(a) );
  }
  bool ${i}_(bool a) {
    return !a;
  }
  vec4 ${i}_(vec4 v) {
    return vec4(!bool(v.x), !bool(v.y), !bool(v.z), !bool(v.w));
  }
  bvec4 ${i}_(bvec4 v) {
    return bvec4(!v.x, !v.y, !v.z, !v.w);
  }
  `, name: i, type: 0 };
}
function gm() {
  return qt("sin");
}
function pi() {
  let i = "relu";
  return { body: `
  float ${i}_(float a) {
    return max( a, 0.0 );
  }
  vec4 ${i}_(vec4 v) {
    return max( v, 0.0 );
  }
  `, name: i, type: 0 };
}
function di() {
  let i = "sigmoid";
  return { body: `
  float ${i}_(float a) {
    return 1.0 / (1.0 + exp(-a));
  }
  vec4 ${i}_(vec4 v) {
    return 1.0 / (1.0 + exp(-v));
  }
  `, name: i, type: 0 };
}
function ym() {
  return qt("sqrt");
}
function xm() {
  return qt("tan");
}
function Tm() {
  let i = "tanh";
  return { body: `
  float ${i}_(float a) {
    a = clamp(a, -10., 10.);
    a = exp(2.*a);
    return (a - 1.) / (a + 1.);
  }
  vec4 ${i}_(vec4 v) {
    v = clamp(v, -10., 10.);
    v = exp(2.*v);
    return (v - 1.) / (v + 1.);
  }
  `, name: i, type: 0 };
}
function qt(i) {
  return { body: `
  float ${i}_(float a) {
    return ${i}(a);
  }
  vec4 ${i}_(vec4 v) {
    return ${i}(v);
  }
  `, name: i, type: 0 };
}
var wm, dt, Cl, Nl, Rl, Gl, hi, Ml, Ul, vm, Vl, zl, Wl, Hl, ql, jl, mi, Xl, Kl, Jl, Yl, Zl, Ql, tf, ef, rf, nf, of, bi = O(() => {
  vt();
  Y();
  be();
  st();
  j();
  wm = (i, e, o, t) => {
    let r = i.session.pack ? 2 : 0, n = G(i.session.backend.glContext.version);
    return { ...e, output: { dims: o.dims, type: o.type, textureType: r }, shaderSource: `
     ${t.body}
     void main() {
       vec4 v = ${n.texture2D}(A, TexCoords);
       v = ${t.name}_(v);
       ${n.output} = v;
     }
     `, hasMain: true };
  }, dt = (i, e, o, t) => {
    let r = i.session.pack ? 2 : 0, n = { name: o.name, inputTypes: [r], inputNames: ["A"], cacheHint: t };
    return { ...n, get: () => wm(i, n, e, o) };
  }, Cl = (i, e) => [i.run(dt(i, e[0], nm()), e)], Nl = (i, e) => [i.run(dt(i, e[0], om()), e)], Rl = (i, e) => [i.run(dt(i, e[0], im()), e)], Gl = (i, e) => [i.run(dt(i, e[0], am()), e)], hi = (i, e, o) => [i.run(dt(i, e[0], ci(o.min, o.max), o.cacheKey), e)], Ml = (i) => W({ min: i.attributes.getFloat("min", Ue), max: i.attributes.getFloat("max", Ve) }), Ul = (i, e) => {
    let o = vm(i, e);
    return hi(i, [e[0]], o);
  }, vm = (i, e) => {
    if (e.length >= 3 && (!i.session.isInitializer(e[1].dataId) || !i.session.isInitializer(e[2].dataId))) throw new Error("dynamic clip attributes are not allowed");
    let o = e.length >= 3 ? e[1].numberData[0] : Ue, t = e.length >= 3 ? e[2].numberData[0] : Ve;
    return W({ min: o, max: t });
  }, Vl = (i, e) => [i.run(dt(i, e[0], sm()), e)], zl = (i, e) => [i.run(dt(i, e[0], um()), e)], Wl = (i, e, o) => [i.run(dt(i, e[0], lm(o.alpha), o.cacheKey), e)], Hl = (i) => W({ alpha: i.attributes.getFloat("alpha", 1) }), ql = (i, e) => [i.run(dt(i, e[0], fm()), e)], jl = (i, e) => [i.run(dt(i, e[0], cm()), e)], mi = (i, e) => [i.run(dt(i, e[0], pm()), e)], Xl = (i, e, o) => [i.run(dt(i, e[0], dm(o.alpha), o.cacheKey), e)], Kl = (i) => W({ alpha: i.attributes.getFloat("alpha", 0.01) }), Jl = (i, e) => [i.run(dt(i, e[0], hm()), e)], Yl = (i, e) => [i.run(dt(i, e[0], mm()), e)], Zl = (i, e) => [i.run(dt(i, e[0], bm()), e)], Ql = (i, e) => [i.run(dt(i, e[0], pi()), e)], tf = (i, e) => [i.run(dt(i, e[0], di()), e)], ef = (i, e) => [i.run(dt(i, e[0], gm()), e)], rf = (i, e) => [i.run(dt(i, e[0], ym()), e)], nf = (i, e) => [i.run(dt(i, e[0], xm()), e)], of = (i, e) => [i.run(dt(i, e[0], Tm()), e)];
});
function fe(i) {
  let e;
  switch (i.activation) {
    case "Relu":
      e = pi();
      break;
    case "Sigmoid":
      e = di();
      break;
    case "Clip":
      e = ci(i.clipMin, i.clipMax);
      break;
    default:
      return { activationFunction: "", applyActivation: "" };
  }
  let o = e.name, t = e.body, r = `value = ${o}_(value);`;
  return { activationFunction: t, applyActivation: r };
}
var pr, He = O(() => {
  Y();
  bi();
  pr = (i) => {
    let e = i.getString("activation", "");
    if (e === "Clip") {
      let [o, t] = i.getFloats("activation_params", [Ue, Ve]);
      return { activation: e, clipMax: t, clipMin: o, activationCacheKey: `${e}:${o},${t}` };
    }
    return { activation: e, activationCacheKey: e };
  };
});
var _m, Om, af, sf = O(() => {
  Mt();
  st();
  j();
  $n();
  He();
  _m = (i, e) => ({ name: "GroupedConv", inputNames: i ? ["X", "W", "Bias"] : ["X", "W"], inputTypes: i ? [0, 0, 0] : [0, 0], cacheHint: e }), Om = (i, e, o, t) => {
    let n = e.length > 2 ? "value += getBias(output_channel);" : "", s = e[0].dims.slice(), a = e[1].dims.slice(), u = a[0] / t.group;
    tt.verbose("GroupedConv", `autpPad:${t.autoPad}, dilations:${t.dilations}, group:${t.group}, kernelShape:${t.kernelShape}, pads:${t.pads}, strides:${t.strides}`);
    let l = dr(s, a, t.dilations, t.pads, t.strides), f = G(i.session.backend.glContext.version), { activationFunction: p2, applyActivation: d } = fe(t), y = `
  const ivec2 strides = ivec2(${t.strides[0]}, ${t.strides[1]});
  const ivec2 pads = ivec2(${t.pads[0]}, ${t.pads[1]});
  ${p2}
  void main() {
    ivec4 coords = getOutputCoords();
    int batch = coords.x;
    int output_channel = coords.y;
    ivec2 xRCCorner = coords.zw * strides - pads;
    int group_id = output_channel / ${u};

    float value = 0.0;
    for (int wInChannel = 0; wInChannel < ${a[1]}; wInChannel++) {
      int input_channel = group_id * ${a[1]} + wInChannel;
      for (int wHeight = 0; wHeight < ${a[2]}; wHeight++) {
        int xHeight = xRCCorner.x + wHeight * ${t.dilations[0]};

        if (xHeight < 0 || xHeight >= ${s[2]}) {
          continue;
        }

        for (int wWidth = 0; wWidth < ${a[3]}; wWidth++) {
          int xWidth = xRCCorner.y + wWidth * ${t.dilations[1]};
          if (xWidth < 0 || xWidth >= ${s[3]}) {
            continue;
          }

          float xVal = getX(batch, input_channel, xWidth, xHeight);
          float wVal = getW(output_channel, wInChannel, wWidth, wHeight);
          value += xVal*wVal;
        }
      }
    }
    ${n}
    ${d}
    ${f.output} = vec4(value, .0, .0, .0);
  }
`;
    return { ...o, output: { dims: l, type: e[0].type, textureType: 0 }, shaderSource: y, hasMain: true };
  }, af = (i, e, o) => {
    let t = _m(e.length > 2, o.cacheKey);
    return { ...t, get: () => Om(i, e, t, o) };
  };
});
var Sm, Am, uf, lf = O(() => {
  st();
  j();
  We();
  Sm = (i) => ({ name: "Im2Col (packed)", inputNames: ["A"], inputTypes: [2], cacheHint: i }), Am = (i, e, o, t, r, n) => {
    let s = o.dims, a = t.dims, u = 2, l = 3, f = r.length, p2 = [a[1] * a[2] * a[3], r[2] * r[3]], d = a[2] * a[3], y = le(), w = G(i.session.backend.glContext.version), v = "";
    for (let L = 0; L <= 1; L++) for (let A = 0; A <= 1; A++) v += `
            blockIndex = rc.x + ${A};
            pos = rc.y + ${L};

            if(blockIndex < ${p2[1]} && pos < ${p2[0]}) {
              offsetY = int(blockIndex / (${r[f - 1]})) * ${n.strides[0]} -
                ${n.pads[0]};
              d0 = offsetY + ${n.dilations[0]} * (imod(pos, ${d}) / ${a[2]});

              if(d0 < ${s[u]} && d0 >= 0) {
                offsetX = imod(blockIndex, ${r[f - 1]}) * ${n.strides[1]} -
                  ${n.pads[1]};
                d1 = offsetX + ${n.dilations[1]} * imod(imod(pos, ${d}), ${a[2]});

                if(d1 < ${s[l]} && d1 >= 0) {

                  ch = int(float(pos)/ ${d}.);
                    innerDims = vec2(d0, d1);
                    result[${L * 2 + A}] = getChannel(
                      getA(0, ch, int(innerDims.x),
                      int(innerDims.y)), innerDims);
                }
              }
            }

          `;
    let S = `
      ${y}

      void main() {
        ivec2 rc = getOutputCoords();
          vec4 result = vec4(0.0);
          int blockIndex, pos, offsetY, d0, offsetX, d1, ch;
          vec2 innerDims;
          ${v}
          ${w.output} = result;
      }
            `;
    return { ...e, output: { dims: p2, type: o.type, textureType: 2 }, shaderSource: S, hasMain: true };
  }, uf = (i, e, o, t, r) => {
    let n = Sm(r.cacheKey);
    return { ...n, get: () => Am(i, n, e, o, t, r) };
  };
});
function Em(i, e, o) {
  let t = e[0].dims, r = e[1].dims, n = $t.calcShape(t, r, true);
  if (!n) throw new Error("Can't use matmul on the given tensors");
  let s = kt(n.length), a = ee(), { activationFunction: u, applyActivation: l } = fe(o), f = e.length > 2, p2 = f ? "value += getBiasForMatmul();" : "", d = f ? `${yi(s, a, e[2].dims, n, false)}` : "", y = n.length, w = t.length, v = r.length, S = t[t.length - 1], L = `
    ${u}
    ${d}
    float process(int indices[${y}]) {
        int a[${w}];
        int b[${v}];
        bcastMatmulIndices_A(indices, a);
        bcastMatmulIndices_B(indices, b);

        float value;
        for (int k=0; k<${S}; ++k) {
            a[${w - 1}] = k;
            b[${v - 2}] = k;
            value += _A(a) * _B(b);
        }
        ${p2}
        ${l}
        return value;
    }`;
  return { ...i, output: { dims: n, type: e[0].type, textureType: 0 }, shaderSource: L };
}
function gi(i, e) {
  let o = Pm(i.length > 2, e.activationCacheKey);
  return { ...o, get: () => Em(o, i, e) };
}
function yi(i, e, o, t, r) {
  let n = "", s = o.length, a = t.length, u = a - s;
  a < 2 && s > 0 ? n = "coords" : n = o.map((v, S) => `coords.${e[S + u]}`).join(", ");
  let f = $t.getBroadcastDims(o, t).map((v) => `coords.${e[v + u]} = 0;`).join(`
`), d = B.size(o) === 1, y = "vec4(outputValue.xx, outputValue.yy)";
  return d && (y = "vec4(outputValue.x)"), r ? `
vec4 getBiasForMatmul() {
  ${i} coords = getOutputCoords();
  ${f}
  vec4 outputValue = getBias(${n});
  return ${y};
}` : `
float getBiasForMatmul() {
  ${i} coords = getOutputCoords();
  ${f}
  return getBias(coords.x);
}`;
}
var ff, cf, Pm, Dm, kn = O(() => {
  Y();
  j();
  ue();
  He();
  xi();
  ff = (i, e, o) => (Dm(e), i.session.pack ? [i.run(Bn(i, e, o), e)] : [i.run(gi(e, o), e)]), cf = (i) => pr(i.attributes), Pm = (i, e) => ({ name: "MatMul", inputNames: i ? ["A", "B", "Bias"] : ["A", "B"], inputTypes: i ? [0, 0, 0] : [0, 0], cacheHint: e });
  Dm = (i) => {
    if (!i || i.length !== 2) throw new Error("MatMul requires 2 inputs.");
    if (i[0].dims[i[0].dims.length - 1] !== i[1].dims[i[1].dims.length - 2]) throw new Error("shared dimension does not match.");
    if (i[0].type !== "float32" && i[0].type !== "float64" || i[1].type !== "float32" && i[1].type !== "float64") throw new Error("inputs should be float type");
    if (i[0].type !== i[1].type) throw new Error("inputs types should match");
  };
});
function km(i, e, o, t) {
  let r = [], n = [], s = o[0].dims, a = o[1].dims, u = s.length, l = a.length, f = t.length, p2 = f - u, d = f - l;
  r = s.map((P, M) => `coords.${e[M + p2]}`), r[u - 1] = "i*2", r.join(", "), n = a.map((P, M) => `coords.${e[M + d]}`), n[l - 2] = "i*2", n.join(", ");
  let y = $t.getBroadcastDims(s, t), w = $t.getBroadcastDims(a, t), v = y.map((P) => `coords.${e[P + p2]} = 0;`).join(`
`), S = w.map((P) => `coords.${e[P + d]} = 0;`).join(`
`), L = `int lastDim = coords.${e[f - 1]};
  coords.${e[f - 1]} = coords.${e[f - 2]};
  coords.${e[f - 2]} = lastDim;`;
  return `
vec4 getAAtOutCoordsMatmul(int i) {
  ${i} coords = getOutputCoords();
  ${L}
  ${v}
  vec4 outputValue = getA(${r});
  return outputValue;
}

vec4 getBAtOutCoordsMatmul(int i) {
  ${i} coords = getOutputCoords();
  ${L}
  ${S}
  vec4 outputValue = getB(${n});
  return outputValue;
}`;
}
function Bm(i, e) {
  let o = "";
  for (let t = 0; t < e - 2; t++) o += `rc.${i[t]}, `;
  return o += `rc.${i[e - 2]}, i*2`, o;
}
function Fm(i, e) {
  let o = "";
  for (let t = 0; t < e - 2; t++) o += `rc.${i[t]}, `;
  return o += `i*2, rc.${i[e - 1]}`, o;
}
var Lm, $m, Bn, xi = O(() => {
  Y();
  st();
  j();
  ue();
  He();
  kn();
  Lm = (i, e) => ({ name: "MatMul (packed)", inputNames: i ? ["A", "B", "Bias"] : ["A", "B"], inputTypes: i ? [2, 2, 2] : [2, 2], cacheHint: e }), $m = (i, e, o, t) => {
    let r = o.length > 2, n = r ? "value += getBiasForMatmul();" : "", s = o[0].dims, a = o[1].dims, u = $t.calcShape(s, a, true), l = !B.areEqual(o[0].dims, o[1].dims);
    if (!u) throw new Error("Can't use matmul on the given tensors");
    let f = s[s.length - 1], p2 = Math.ceil(f / 2), d = s.length, y = a.length, w = G(i.session.backend.glContext.version), v = kt(u.length), S = u.length, L = ee(), { activationFunction: A, applyActivation: P } = fe(t), M = r ? `${yi(v, L, o[2].dims, u, true)}` : "", V = l ? `${km(v, L, o, u)}` : "", ut = l ? "getAAtOutCoordsMatmul(i)" : `getA(${Bm(L, d)})`, xt = l ? "getBAtOutCoordsMatmul(i)" : `getB(${Fm(L, y)})`, et = l ? "" : `${v} rc =
          getOutputCoords(); int lastDim = rc.${L[S - 1]}; rc.${L[S - 1]} =
          rc.${L[S - 2]}; rc.${L[S - 2]} = lastDim;
      `, Et = `
            ${V}
            ${M}
            ${A}
            void main() {
              ${et}

              vec4 value = vec4(0);
              for (int i = 0; i < ${p2}; i++) {
                vec4 a = ${ut};
                vec4 b = ${xt};

                value += (a.rrbb * b.rgrg);
                value += (a.ggaa * b.baba);
              }
              ${n}
              ${P}
              ${w.output} = value;
            }`;
    return { ...e, output: { dims: u, type: o[0].type, textureType: 2 }, shaderSource: Et, hasMain: true };
  }, Bn = (i, e, o) => {
    let t = Lm(e.length > 2, o.activationCacheKey);
    return { ...t, get: () => $m(i, t, e, o) };
  };
});
var pf, df = O(() => {
  $n();
  lf();
  xi();
  pf = (i, e, o) => {
    let t = e[0].dims, r = e[1].dims, n = dr(t, r, o.dilations, o.pads, o.strides), s = i.run(uf(i, e[0], e[1], n, o), [e[0]]), a = i.reshapePacked(e[1], [r[0], r[1] * r[2] * r[3]]), u = e.length === 3 ? [a, s, e[2]] : [a, s], l = i.run(Bn(i, u, o), u);
    return i.reshapePacked(l, n);
  };
});
var Cm, Nm, hf, Ti, wi = O(() => {
  j();
  Cm = (i) => ({ name: "Im2Col", inputNames: ["X"], inputTypes: [0], cacheHint: i }), Nm = (i, e, o, t, r, n) => {
    let s = o.dims, a = t.dims, u = r.length, l = Ti(s, a, r, 4), f = `
        const int XC = ${s[1]};
        const int XH = ${s[2]};
        const int XW = ${s[3]};
        const int KH = ${n.kernelShape[0]};
        const int KW = ${n.kernelShape[1]};
        const int dilationH = ${n.dilations[0]};
        const int dilationW = ${n.dilations[1]};
        const int strideH = ${n.strides[0]};
        const int strideW = ${n.strides[1]};
        const int padH = ${n.pads[0]};
        const int padW = ${n.pads[1]};
        const int KHKW = KH*KW;
        const int XCKHKW = XC * KHKW;
        const int outputChannels = 4;
        vec4 process(int indices[${u}]) {
          int b  = indices[0]; // batch size
          int oh = indices[1] * strideH - padH; //output height
          int ow = indices[2] * strideW - padW; //output width
          int p = indices[3] * outputChannels; //patch
          vec4 value = vec4(0.0);
          for(int i=0; i < outputChannels; ++i) {
            if(p < XCKHKW) {
              int patchC = p / KHKW;
              int patchH = (p - patchC*KHKW) / KW;
              int patchW = (p - patchC*KHKW) - patchH * KW;
              int xh2 = oh + patchH * dilationH;
              int xw2 = ow + patchW * dilationW;
              int x[${s.length}];
              x[0] = b;
              x[1] = patchC;
              x[2] = xh2;
              x[3] = xw2;
              if(xh2 >= 0 &&
                  xh2 < XH &&
                  xw2 >= 0 &&
                  xw2 < XW) {
                value[i] = _X(x);
              }
            }
            ++p;
          }
          return value;
        }
        `;
    return { ...e, output: { dims: l, type: o.type, textureType: 4 }, shaderSource: f };
  }, hf = (i, e, o, t, r) => {
    let n = Cm(r.cacheKey);
    return { ...n, get: () => Nm(i, n, e, o, t, r) };
  }, Ti = (i, e, o, t = 4) => [o[0], o[2], o[3], Math.ceil(i[1] * e[2] * e[3] / t)];
});
var Rm, Gm, mf, bf = O(() => {
  Y();
  st();
  j();
  He();
  wi();
  Rm = (i, e) => ({ name: "ConvDotProduct", inputNames: i ? ["Im2Col", "K", "B"] : ["Im2Col", "K"], inputTypes: i ? [0, 4, 0] : [0, 4], cacheKey: e.activationCacheKey }), Gm = (i, e, o, t, r) => {
    let n = o[0].dims, s = o[1].dims, a = [s[0], Math.ceil(n[1] * s[2] * s[3] / 4)], u = Ti(n, s, t), [l, f] = i.calculateTextureWidthAndHeight(a, 4), p2 = B.computeStrides(u), [d, y] = i.calculateTextureWidthAndHeight(u, 4), w = t.length, v = o.length < 3 ? "0.0" : "_B(b)", S = Math.ceil(n[1] * s[2] * s[3] / 4), { activationFunction: L, applyActivation: A } = fe(r), P = G(i.session.backend.glContext.version), M = `
${L}
float process(int indices[${w}]) {
  int b[1];
  b[0] = indices[1];
  int im2col[4];
  im2col[0] = indices[0];
  im2col[1] = indices[2];
  im2col[2] = indices[3];
  int im2colOffset = im2col[0] * ${p2[0]} + im2col[1] * ${p2[1]} + im2col[2] * ${p2[2]};
  int kernelOffset = indices[1] * ${a[1]};
  float value = ${v};
  for (int i = 0; i < ${S}; ++i) {
    vec2 im2colCoords = offsetToCoords(im2colOffset, ${d}, ${y});
    vec2 kernelCoords = offsetToCoords(kernelOffset, ${l}, ${f});
    value += dot(${P.texture2D}(Im2Col, im2colCoords), ${P.texture2D}(K, kernelCoords));
    ++im2colOffset;
    ++kernelOffset;
  }
  ${A}
  return value;
}`;
    return { ...e, output: { dims: t, type: o[0].type, textureType: 0 }, shaderSource: M };
  }, mf = (i, e, o, t) => {
    let r = Rm(e.length > 2, t);
    return { ...r, get: () => Gm(i, r, e, o, t) };
  };
});
var dr, vi, Mm, Um, Vm, zm, Ii, Wm, $n = O(() => {
  vt();
  Y();
  sf();
  df();
  bf();
  He();
  wi();
  kn();
  dr = (i, e, o, t, r) => {
    let n = i[0], s = i.slice(2), a = s.length, u = e[0], f = e.slice(2).map((w, v) => w + (w - 1) * (o[v] - 1)), d = s.map((w, v) => w + t[v] + t[v + a]).map((w, v) => Math.floor((w - f[v] + r[v]) / r[v]));
    return [n, u].concat(...d);
  }, vi = (i, e, o) => (Wm(e, o), Mm(i, e, o)), Mm = (i, e, o) => {
    let t = zm(o, e), r = i.session.pack, n = t.kernelShape[0] === 1 && t.kernelShape[1] === 1;
    return t.group > 1 ? [i.run(af(i, e, t), e)] : n && r ? [Um(i, e, t)] : r && e[0].dims.length === 4 && e[0].dims[0] === 1 && !n ? [pf(i, e, t)] : [Vm(i, e, t)];
  }, Um = (i, e, o) => {
    let t = e[0].dims, r = e[1].dims, n = dr(t, r, o.dilations, o.pads, o.strides), s = i.reshapeUnpacked(e[0], [t[1], t[2] * t[3]]), a = i.reshapeUnpacked(e[1], [r[0], r[1]]), u = e.length > 2 ? [a, s, e[2]] : [a, s], l = i.run(gi(u, o), u);
    return i.reshapeUnpacked(l, n);
  }, Vm = (i, e, o) => {
    let t = e[0].dims, r = e[1].dims, n = dr(t, r, o.dilations, o.pads, o.strides), s = i.run(hf(i, e[0], e[1], n, o), [e[0]]), a = e.length === 3 ? [s, e[1], e[2]] : [s, e[1]];
    return i.run(mf(i, e, n, o), a);
  }, zm = (i, e) => {
    let o = i.kernelShape.slice();
    if (i.kernelShape.length === 0) for (let n = 2; n < e[1].dims.length; ++n) o.push(e[1].dims[n]);
    let t = i.pads.slice();
    Me.adjustPadsBasedOnAutoPad(e[0].dims, i.strides, i.dilations, o, t, i.autoPad);
    let r = Object.assign({}, i);
    return Object.assign(r, { kernelShape: o, pads: t, cacheKey: i.cacheKey }), r;
  }, Ii = (i) => {
    let e = i.attributes, o = pr(e), t = e.getString("auto_pad", "NOTSET"), r = e.getInts("dilations", [1, 1]), n = e.getInt("group", 1), s = e.getInts("kernel_shape", []), a = e.getInts("pads", [0, 0, 0, 0]), u = e.getInts("strides", [1, 1]);
    return W({ autoPad: t, dilations: r, group: n, kernelShape: s, pads: a, strides: u, ...o });
  }, Wm = (i, e) => {
    if (!i || i.length !== 2 && i.length !== 3) throw new Error("Conv requires 2 or 3 inputs");
    if (i[0].dims.length !== 4 || i[1].dims.length !== 4) throw new Error("currently only support 2-dimensional conv");
    let o = i[0].dims[1], t = i[1].dims[1] * e.group;
    if (o !== t) throw new Error("FILTER_IN_CHANNEL should be equal to DATA_CHANNEL");
    if (i.length === 3 && (i[2].dims.length !== 1 || i[1].dims[0] !== i[2].dims[0])) throw new Error("invalid bias");
    let r = i[0].dims.length - 2;
    if (e.dilations.length !== r) throw new Error(`dilations should be ${r}D`);
    if (e.strides.length !== r) throw new Error(`strides should be ${r}D`);
    if (e.pads.length !== r * 2) throw new Error(`pads should be ${r * 2}D`);
    if (e.kernelShape.length !== 0 && e.kernelShape.length !== i[1].dims.length - 2) throw new Error("invalid kernel shape");
    if (i[0].type !== "float32" || i[1].type !== "float32") throw new Error("Conv input(X,W) should be float tensor");
    if (i.length === 3 && i[2].type !== "float32") throw new Error("Conv input(bias) should be float tensor");
  };
});
var Hm, qm, jm, gf, Xm, Km, Jm, Ym, Zm, Qm, yf, tb, xf = O(() => {
  vt();
  st();
  j();
  He();
  Hm = (i, e, o, t, r, n) => (i - 1) * e + o + (t - 1) * r + 1 - n, qm = (i, e, o, t, r) => {
    let n = Math.floor(i / 2);
    e === "SAME_UPPER" ? (o[t] = n, o[r] = i - n) : e === "SAME_LOWER" && (o[t] = i - n, o[r] = n);
  }, jm = (i, e, o, t, r, n, s, a) => {
    let u = i.length - 2, l = a.length === 0;
    for (let f = 0; f < u; ++f) {
      let p2 = l ? i[f + 2] * n[f] : a[f], d = Hm(i[f + 2], n[f], r[f], e[f], o[f], p2);
      qm(d, t, r, f, f + u), l && a.push(n[f] * (i[f + 2] - 1) + s[f] + (e[f] - 1) * o[f] + 1 - r[f] - r[f + u]);
    }
  }, gf = (i, e, o) => (tb(e, o), Xm(i, e, o)), Xm = (i, e, o) => {
    let t = Qm(o, e);
    return [Zm(i, e, t)];
  }, Km = (i, e) => ({ name: "ConvTranspose", inputNames: i ? ["X", "W", "B"] : ["X", "W"], inputTypes: i ? [0, 0, 0] : [0, 0], cacheHint: e }), Jm = (i, e, o, t) => {
    let n = e.length > 2 ? "getB(output_channel)" : "0.0", s = e[0].dims, a = e[1].dims, u = a[1], l = a[0] / t.group, f = [e[0].dims[0], e[1].dims[1] * t.group, ...t.outputShape], p2 = G(i.session.backend.glContext.version), { activationFunction: d, applyActivation: y } = fe(t), w = `
  const ivec2 strides = ivec2(${t.strides[0]}, ${t.strides[1]});
  const ivec2 pads = ivec2(${t.pads[0]}, ${t.pads[1]});
  ${d}
  void main() {
    ivec4 coords = getOutputCoords();
    int batch = coords.x;
    int output_channel = coords.y;

    ivec2 loc = coords.zw + pads;

    int group_id = output_channel / ${u};
    int wOutChannel = output_channel - group_id * ${u};

    float value = ${n};
    for (int inChannelOffset = 0; inChannelOffset < ${l}; inChannelOffset++) {
      int input_channel = group_id * ${l} + inChannelOffset;
      for (int wWOff = 0; wWOff < ${a[2]}; wWOff++) {
        for (int wHOff = 0; wHOff < ${a[3]}; wHOff++) {
          ivec2 wOff = ivec2(wWOff * ${t.dilations[0]}, wHOff * ${t.dilations[1]});
          ivec2 wLoc = loc - wOff;
          ivec2 wLocIn = wLoc / strides;
          if (
            wLocIn * strides == wLoc &&
            wLocIn.x >= 0 && wLocIn.x < ${s[2]} &&
            wLocIn.y >= 0 && wLocIn.y < ${s[3]}
          ) {
            float xVal = getX(batch, input_channel, wLocIn.y, wLocIn.x);
            float wVal = getW(input_channel, wOutChannel, wHOff, wWOff);
            value += xVal * wVal;
          }
        }
      }
    }
    ${y}
    ${p2.output} = vec4(value, .0, .0, .0);
  }
`;
    return { ...o, output: { dims: f, type: e[0].type, textureType: 0 }, shaderSource: w, hasMain: true };
  }, Ym = (i, e, o) => {
    let t = Km(e.length > 2, o.cacheKey);
    return { ...t, get: () => Jm(i, e, t, o) };
  }, Zm = (i, e, o) => i.run(Ym(i, e, o), e), Qm = (i, e) => {
    let o = i.kernelShape.slice();
    if (i.kernelShape.length === 0) for (let a = 2; a < e[1].dims.length; ++a) o.push(e[1].dims[a]);
    let t = i.pads.slice(), r = i.outputShape.slice(), n = e[0].dims;
    jm(n, o, i.dilations, i.autoPad, t, i.strides, i.outputPadding, r);
    let s = Object.assign({}, i);
    return Object.assign(s, { kernelShape: o, pads: t, outputShape: r, cacheKey: i.cacheKey }), s;
  }, yf = (i) => {
    let e = i.attributes, o = pr(e), t = e.getString("auto_pad", "NOTSET"), r = e.getInts("dilations", [1, 1]), n = e.getInt("group", 1), s = e.getInts("kernel_shape", []), a = e.getInts("output_padding", [0, 0]), u = e.getInts("output_shape", []), l = e.getInts("pads", [0, 0, 0, 0]), f = e.getInts("strides", [1, 1]);
    return W({ autoPad: t, dilations: r, group: n, kernelShape: s, outputPadding: a, outputShape: u, pads: l, strides: f, ...o });
  }, tb = (i, e) => {
    if (!i || i.length !== 2 && i.length !== 3) throw new Error("Conv requires 2 or 3 inputs");
    if (i[0].dims.length !== 4 || i[1].dims.length !== 4) throw new Error("currently only support 2-dimensional conv");
    let o = i[0].dims[1], t = i[1].dims[0];
    if (o !== t) throw new Error("FILTER_IN_CHANNEL should be equal to DATA_CHANNEL");
    let r = i[1].dims[1] * e.group;
    if (i.length === 3 && (i[2].dims.length !== 1 || i[2].dims[0] !== r)) throw new Error("invalid bias");
    let n = i[0].dims.length - 2;
    if (e.dilations.length !== n) throw new Error(`dilations should be ${n}D`);
    if (e.strides.length !== n) throw new Error(`strides should be ${n}D`);
    if (e.pads.length !== n * 2) throw new Error(`pads should be ${n * 2}D`);
    if (e.outputPadding.length !== n) throw new Error(`output_padding should be ${n}D`);
    if (e.kernelShape.length !== 0 && e.kernelShape.length !== i[1].dims.length - 2) throw new Error("invalid kernel shape");
    if (e.outputShape.length !== 0 && e.outputShape.length !== i[0].dims.length - 2) throw new Error("invalid output shape");
    if (i[0].type !== "float32" || i[1].type !== "float32") throw new Error("ConvTranspose input(X,W) should be float tensor");
    if (i.length === 3 && i[2].type !== "float32") throw new Error("ConvTranspose input(bias) should be float tensor");
  };
});
var Tf, qe, wf, eb, vf, rb, nb, ob, Fn = O(() => {
  vt();
  Y();
  j();
  Tf = { name: "Transpose", inputNames: ["A"], inputTypes: [0] }, qe = (i, e, o) => (ob(e), [i.run({ ...Tf, cacheHint: o.cacheKey, get: () => eb(i, e[0], o.perm) }, e)]), wf = (i) => W({ perm: i.attributes.getInts("perm", []) }), eb = (i, e, o) => {
    let t = e.dims;
    o = vf(t, o);
    let r = rb(t, o), n = t.length, s = `
      ${nb("perm", o, n)}
      float process(int indices[${n}]) {
        int a[${n}];
        perm(a, indices);
        return _A(a);
      }`;
    return { ...Tf, output: { dims: r, type: e.type, textureType: 0 }, shaderSource: s };
  }, vf = (i, e) => (e && e.length !== i.length && (e = [...i.keys()].reverse()), e), rb = (i, e) => (e = vf(i, e), B.sortBasedOnPerm(i, e)), nb = (i, e, o) => {
    let t = [];
    t.push(`void ${i}(out int a[${o}], int src[${o}]) {`);
    for (let r = 0; r < o; ++r) t.push(`	a[${e[r]}]=src[${r}];`);
    return t.push("	}"), t.join(`
`);
  }, ob = (i) => {
    if (!i || i.length !== 1) throw new Error("Transpose requires 1 input.");
    if (i[0].type !== "float32" && i[0].type !== "float64") throw new Error("input should be float tensor");
  };
});
var If, _f, ib, Of = O(() => {
  Fn();
  If = (i, e, o) => {
    ib(e);
    let t = o.blocksize, r = t * t, n = o.mode === "DCR" ? [0, 3, 4, 1, 5, 2] : [0, 1, 4, 2, 5, 3], s = o.mode === "DCR" ? [e[0].dims[0], t, t, e[0].dims[1] / r, e[0].dims[2], e[0].dims[3]] : [e[0].dims[0], e[0].dims[1] / r, t, t, e[0].dims[2], e[0].dims[3]], a = i.reshapeUnpacked(e[0], s), u = { perm: n, cacheKey: `${n}` }, [l] = qe(i, [a], u), f = [e[0].dims[0], e[0].dims[1] / r, e[0].dims[2] * t, e[0].dims[3] * t];
    return [i.reshapeUnpacked(l, f)];
  }, _f = (i) => {
    let e = i.attributes.getInt("blocksize");
    if (e < 1) throw new Error(`blocksize must be >= 1, but got : ${e} for DepthToSpace`);
    let o = i.attributes.getString("mode", "DCR");
    if (o !== "DCR" && o !== "CRD") throw new Error(`unrecognized mode: ${o} for DepthToSpace`);
    return { mode: o, blocksize: e };
  }, ib = (i) => {
    if (i.length !== 1) throw new Error(`DepthToSpace expect 1 inputs, but got ${i.length}`);
    if (i[0].type === "string" || i[0].dims.length !== 4) throw new TypeError("DepthToSpace input should be a 4-D numeric tensor");
  };
});
var Sf, Af, ab, Pf = O(() => {
  Y();
  Sf = (i, e, o) => {
    ab(e, o);
    let t = B.flattenShape(e[0].dims, o);
    return [i.reshapeUnpacked(e[0], t)];
  }, Af = (i) => i.attributes.getInt("axis", 1), ab = (i, e) => {
    if (!i || i.length !== 1) throw new Error("Flatten requires 1 input.");
    let o = i[0].dims.length;
    if (o === 0) throw new Error("scalar tensor is not supported.");
    if (e < -o || e > o) throw new Error("Invalid axis");
    if (i[0].type === "string") throw new Error("string tensor is not supported.");
  };
});
var Ae, Rr = O(() => {
  Ae = ["float32", "float64", "int32", "int16", "int8", "uint16", "uint32", "uint8"];
});
var Ef, Df, sb, ub, lb, fb, Lf = O(() => {
  vt();
  Rr();
  Y();
  j();
  Ef = (i, e, o) => (fb(e, o.axis), [i.run(lb(i, e, o), e)]), Df = (i) => W({ axis: i.attributes.getInt("axis", 0) }), sb = { name: "Gather", inputNames: ["A", "B"], inputTypes: [0, 0] }, ub = (i, e, o, t) => {
    let r = o[0].dims.slice(), n = o[1].dims.slice(), s = new Array(r.length + n.length - 1);
    t = B.normalizeAxis(t, r.length);
    let a = [];
    for (let d = 0; d < s.length; d++) d < t ? (s[d] = r[d], a.push(`inputIdx[${d}] = outputIdx[${d}];`)) : d < t + n.length ? (s[d] = n[d - t], a.push(`indexDataIdx[${d - t}] = outputIdx[${d}];`)) : (s[d] = r[d - n.length + 1], a.push(`inputIdx[${d - n.length + 1}] = outputIdx[${d}];`));
    let u = s.length || 1, l = r.length, f = n.length || 1, p2 = `
      float process(int outputIdx[${u}]) {
        int inputIdx[${l}];
        int indexDataIdx[${f}];
        indexDataIdx[0] = 0;
        ${a.join(`
        `)}
        int idx = int(_B(indexDataIdx));
        inputIdx[${t}] = idx < 0 ? idx + ${r[t]} : idx;
        return _A(inputIdx);
      }`;
    return { ...e, output: { dims: s, type: o[0].type, textureType: 0 }, shaderSource: p2 };
  }, lb = (i, e, o) => {
    let t = { ...sb, cacheHint: o.cacheKey };
    return { ...t, get: () => ub(i, t, e, o.axis) };
  }, fb = (i, e) => {
    if (!i || i.length !== 2) throw new Error("Gather requires 2 inputs.");
    let o = i[0].dims.length;
    if (o < 1) throw new Error("Invalid input shape.");
    if (e < -o || e > o - 1) throw new Error("Invalid axis.");
    if (Ae.indexOf(i[0].type) === -1) throw new Error("Invaid input type.");
    if (i[1].type !== "int32" && i[1].type !== "int16") throw new Error("Invaid input type.");
  };
});
var _i, $f, kf, Bf, cb, pb, db, Ff = O(() => {
  vt();
  Y();
  j();
  _i = (i, e, o) => (db(e, o), [i.run(cb(e, o), e)]), $f = (i, e) => {
    let o = i.attributes.getInt("transA", 0) !== 0, t = i.attributes.getInt("transB", 0) !== 0, r = i.attributes.getFloat("alpha", 1), n = i.attributes.getFloat("beta", 1);
    return W({ transA: o, transB: t, alpha: r, beta: n, isOptionalC: e });
  }, kf = (i) => $f(i, false), Bf = (i) => $f(i, true), cb = (i, e) => {
    let o = { name: "Gemm", inputNames: i.length === 3 ? ["A", "B", "C"] : ["A", "B"], inputTypes: i.length === 3 ? [0, 0, 0] : [0, 0], key: e.cacheKey };
    return { ...o, get: () => pb(o, i, e) };
  }, pb = (i, e, o) => {
    let t = e[0].dims.slice(), r = e[1].dims.slice(), [n, s] = _n.getShapeOfGemmResult(t, o.transA, r, o.transB, e.length === 3 ? e[2].dims : void 0), a = [n, s];
    if (!a) throw new Error("Can't use gemm on the given tensors");
    let u = t[t.length - 1], l = "";
    o.transA && (u = t[0]), o.transA && o.transB ? l = "value += _A_T(a) * _B_T(b);" : o.transA && !o.transB ? l = "value += _A_T(a) * _B(b);" : !o.transA && o.transB ? l = "value += _A(a) * _B_T(b);" : !o.transA && !o.transB && (l = "value += _A(a) * _B(b);");
    let f = a.length, p2 = e.length === 3 ? `int c[${e[2].dims.length}];` : "", d = e.length === 3 ? "bcastIndices_C(indices, c);" : "", y = e.length === 3 ? "value += beta * _C(c);" : "", w = `
      float process(int indices[${f}]) {
          int a[${f}];
          int b[${f}];
          ${p2}

          copyVec(indices, a);
          copyVec(indices, b);
          ${d}

          float value = 0.0;
          for (int k=0; k<${u}; ++k) {
              a[${f - 1}] = k;
              b[${f - 2}] = k;
              ${l}
          }

          value = value * alpha;
          ${y}
          return value;
      }`;
    return { ...i, output: { dims: a, type: e[0].type, textureType: 0 }, variables: [{ name: "alpha", type: "float", data: o.alpha }, { name: "beta", type: "float", data: o.beta }], shaderSource: w };
  }, db = (i, e) => {
    if (!i) throw new Error("Input is missing");
    if (e.isOptionalC && (i.length < 2 || i.length > 3)) throw new Error("Invaid input shape.");
    if (!e.isOptionalC && i.length !== 3) throw new Error("Gemm requires 3 inputs");
    if (i.length === 3 && i[2].dims.length !== 1 && i[2].dims.length !== 2) throw new Error("Invalid input shape of C");
    if (i[0].type !== "float32" && i[0].type !== "float64" || i[1].type !== "float32" && i[1].type !== "float64" || i.length === 3 && i[2].type !== "float32" && i[2].type !== "float64") throw new Error("Invalid input type.");
    if (i[0].type !== i[1].type || i.length === 3 && i[0].type !== i[2].type) throw new Error("Input types are mismatched");
  };
});
var Cf, Nf, hb, mb, bb, gb, yb, Rf = O(() => {
  vt();
  j();
  Cf = (i, e, o) => (yb(e), [i.run(bb(i, e, o), e)]), Nf = (i) => {
    let e = i.attributes.getFloat("scale"), o = i.attributes.getFloats("bias");
    return W({ scale: e, bias: o });
  }, hb = { name: "ImageScaler", inputNames: ["X"], inputTypes: [0] }, mb = (i, e, o, t) => {
    let r = o[0].dims.slice(), n = r.length, a = `
      ${gb(t.bias.length)}
      float process(int indices[${n}]) {
        return _X(indices) * scale + getBias(bias, indices[1]);
      }`;
    return { ...e, output: { dims: r, type: o[0].type, textureType: 0 }, variables: [{ name: "bias", type: "float", arrayLength: t.bias.length, data: t.bias }, { name: "scale", type: "float", data: t.scale }], shaderSource: a };
  }, bb = (i, e, o) => {
    let t = { ...hb, cacheHint: o.cacheKey };
    return { ...t, get: () => mb(i, t, e, o) };
  }, gb = (i) => {
    let e = [`float getBias(float bias[${i}], int channel) {`];
    for (let o = 0; o < i; ++o) o === 0 ? e.push(`	if (channel == ${o}) { return bias[${o}]; }`) : o === i - 1 ? e.push(`	else { return bias[${o}]; }`) : e.push(`	else if (channel == ${o}) { return bias[${o}]; }`);
    return e.push("	}"), e.join(`
`);
  }, yb = (i) => {
    if (!i || i.length !== 1) throw new Error("ImageScaler requires 1 input.");
    if (i[0].dims.length !== 4) throw new Error("Invalid input shape.");
    if (i[0].type !== "float32" && i[0].type !== "float64") throw new Error("Invalid input type.");
  };
});
var Mf, Uf, Gf, xb, Tb, wb, vb, Ib, _b, Vf = O(() => {
  st();
  j();
  Mf = (i, e, o) => {
    _b(e);
    let t = i.run(Tb(e[0]), e);
    return [i.run(Ib(i, e[0], o, t.dims), [e[0], t, e[1], e[2]])];
  }, Uf = (i) => i.attributes.getFloat("epsilon", 1e-5), Gf = { name: "InstanceNormalization_MeanAndVariance", inputNames: ["X"], inputTypes: [0] }, xb = (i, e) => {
    let o = e.dims.slice(), t = o[1], r = o[2] * o[3], n = [o[0], t], s = `
      vec4 process(int[2] indices) {
        vec4 v = vec4(0.0);
        int a[4];
        a[0] = indices[0];
        a[1] = indices[1];
        float temp = 0.0;
        for(int a2=0; a2<${o[2]}; a2++) {
          a[2] = a2;
          for(int a3=0; a3<${o[3]}; a3++) {
            a[3] = a3;
            float x = _X(a);
            temp += x;
          }
        }
        float mean = temp / float(${r});
        temp = 0.0;
        for(int a2=0; a2<${o[2]}; a2++) {
          a[2] = a2;
          for(int a3=0; a3<${o[3]}; a3++) {
            a[3] = a3;
            float x = _X(a);
            temp += (x - mean) * (x - mean);
          }
        }
        v.r = mean;
        v.g = temp / float(${r});

        return v;
      }`;
    return { ...i, output: { dims: n, type: e.type, textureType: 4 }, shaderSource: s };
  }, Tb = (i) => ({ ...Gf, get: () => xb(Gf, i) }), wb = { name: "InstanceNormalization_ComputeOutput", inputNames: ["X", "MeanAndVariance", "Scale", "B"], inputTypes: [0, 4, 0, 0] }, vb = (i, e, o, t, r) => {
    let n = G(i.session.backend.glContext.version), [s, a] = i.calculateTextureWidthAndHeight(r, 4), [u, l] = [s / 4, a], f = `
      vec4 get_MeanAndVariance(int[2] mv) {
        int offset = indicesToOffset_MeanAndVariance(mv);
        vec2 coords = offsetToCoords(offset, ${u}, ${l});
        return ${n.texture2D}(MeanAndVariance, coords);
      }

      float process(int[4] indices) {
        int mv[2];
        mv[0] = indices[0];
        mv[1] = indices[1];
        vec4 mean_and_variance = get_MeanAndVariance(mv);
        float mean = mean_and_variance.r;
        float variance = mean_and_variance.g;

        int sb[1];
        sb[0] = indices[1];
        float scale = _Scale(sb);
        float b = _B(sb);

        return scale * (_X(indices) - mean) / sqrt(variance + epsilon) + b;
      }`;
    return { ...e, output: { dims: o.dims, type: o.type, textureType: 0 }, variables: [{ name: "epsilon", type: "float", data: t }], shaderSource: f };
  }, Ib = (i, e, o, t) => {
    let r = { ...wb, cacheHint: `${o}` };
    return { ...r, get: () => vb(i, r, e, o, t) };
  }, _b = (i) => {
    if (!i || i.length !== 3) throw new Error("InstanceNormalization requires 3 inputs.");
    let e = i[0], o = i[1], t = i[2];
    if (e.dims.length < 3 || o.dims.length !== 1 || t.dims.length !== 1) throw new Error("Invalid input shape.");
    if (o.dims[0] !== e.dims[1] || t.dims[0] !== e.dims[1]) throw new Error("Input shapes are mismatched.");
    if (e.type !== "float32" && e.type !== "float64" || o.type !== "float32" && o.type !== "float64" || t.type !== "float32" && t.type !== "float64") throw new Error("Invalid input type.");
    if (i[0].dims.length !== 4) throw new Error("Only support 4-D input shape.");
  };
});
function Ob(i, e) {
  let o = i[0].dims[1], t = i[0].dims.length, r = -Math.floor((e.size - 1) / 2), n = Math.ceil((e.size - 1) / 2), s = `float(${e.alpha}) / float(${e.size})`, a = `float(${e.bias})`, u = `float(${e.beta})`, l = `
    float process(int indices[${t}]) {
        int c = indices[1];
        float x = _X(indices);
        float square_sum = 0.0;

        for (int i = ${r}; i <= ${n}; i++) {
          int idx = c + i;
          if (c >= 0 && c < ${o}) {
            indices[1] = idx;
            float j = _X(indices);
            square_sum += j * j;
          }
        }
        return x / pow(${a} + ${s} * square_sum, ${u});
    }`;
  return { ...Hf, cacheHint: e.cacheKey, output: { dims: i[0].dims, type: i[0].type, textureType: 0 }, shaderSource: l };
}
function Sb(i, e) {
  return { ...Hf, cacheHint: e.cacheKey, get: () => Ob(i, e) };
}
var zf, Wf, Hf, Ab, qf = O(() => {
  vt();
  j();
  zf = (i, e, o) => (Ab(e), [i.run(Sb(e, o), e)]), Wf = (i) => {
    let e = i.attributes.getFloat("alpha", 1e-4), o = i.attributes.getFloat("beta", 0.75), t = i.attributes.getFloat("bias", 1), r = i.attributes.getInt("size");
    return W({ alpha: e, beta: o, bias: t, size: r });
  }, Hf = { name: "LRN", inputNames: ["X"], inputTypes: [0] };
  Ab = (i) => {
    if (!i || i.length !== 1) throw new Error("LRN requires 1 input.");
    if (i[0].dims.length !== 4) throw new Error('currently only support LRN for input with "NCHW" format');
    if (i[0].type !== "float32") throw new Error("input should be float type");
  };
});
var Pb, Oi, jf, Xf, Kf, Eb, Db, Lb, $b, kb, Bb, Fb, Cb, Jf = O(() => {
  vt();
  Y();
  st();
  j();
  Pb = { name: "Pad", inputNames: ["A"], inputTypes: [0] }, Oi = (i, e, o) => (Lb(e), [i.run({ ...Pb, cacheHint: o.cacheKey, get: () => Db(i, e[0], o) }, e)]), jf = (i) => {
    let e = i.attributes.getString("mode", "constant"), o = i.attributes.getFloat("value", 0), t = i.attributes.getInts("pads");
    return W({ mode: e, value: o, pads: t });
  }, Xf = (i, e, o) => {
    $b(e);
    let t = Eb(i, e, o);
    return Oi(i, [e[0]], t);
  }, Kf = (i) => i.attributes.getString("mode", "constant"), Eb = (i, e, o) => {
    if (!i.session.isInitializer(e[1].dataId) || e.length >= 3 && !i.session.isInitializer(e[2].dataId)) throw new Error("dynamic pad attributes are not allowed");
    let t = Array.from(e[1].integerData), r = e.length >= 3 ? e[2].floatData[0] : 0;
    return W({ mode: o, pads: t, value: r });
  }, Db = (i, e, o) => {
    let t = B.padShape(e.dims.slice(), o.pads), r = t.length, s = `
      ${kb(i, e, o)}
      float process(int[${r}] indices) {
          return padA(indices);
      }`;
    return { name: "Pad", inputNames: ["A"], inputTypes: [0], output: { dims: t, type: e.type, textureType: 0 }, shaderSource: s };
  }, Lb = (i) => {
    if (!i || i.length !== 1) throw new Error("Pad requires 1 input");
    if (i[0].type !== "float32" && i[0].type !== "float64") throw new Error("Invalid input type.");
  }, $b = (i) => {
    if (!i || i.length !== 2 && i.length !== 3) throw new Error("Pad requires 2 or 3 inputs");
    if (i[1].type !== "int32") throw new Error("Invalid input type.");
    if (i.length >= 3 && i[2].type === "string") throw new Error("Invalid input type.");
  }, kb = (i, e, o) => {
    let t = G(i.session.backend.glContext.version), [r, n] = i.calculateTextureWidthAndHeight(e.dims, 0), s = B.computeStrides(e.dims);
    switch (o.mode) {
      case "constant":
        return Bb(t, e.dims, s, r, n, o.pads, o.value);
      case "reflect":
        return Fb(t, e.dims, s, r, n, o.pads);
      case "edge":
        return Cb(t, e.dims, s, r, n, o.pads);
      default:
        throw new Error("Invalid mode");
    }
  }, Bb = (i, e, o, t, r, n, s) => {
    let a = e.length, u = "";
    for (let l = a - 1; l >= 0; --l) u += `
        k = m[${l}] - ${n[l]};
        if (k < 0)  return constant;
        if (k >= ${e[l]}) return constant;
        offset += k * ${o[l]};
        `;
    return `
      float padA(int m[${a}]) {
        const float constant = float(${s});
        int offset = 0;
        int k = 0;
        ${u}
        vec2 coords = offsetToCoords(offset, ${t}, ${r});
        float value = getColorAsFloat(${i.texture2D}(A, coords));
        return value;
      }
      `;
  }, Fb = (i, e, o, t, r, n) => {
    let s = e.length, a = "";
    for (let u = s - 1; u >= 0; --u) a += `
        k = m[${u}] - ${n[u]};
        if (k < 0) { k = -k; }
        {
          const int _2n_1 = ${2 * (e[u] - 1)};
          k = int( mod( float(k), float(_2n_1) ) ) ;
          if(k >= ${e[u]}) { k = _2n_1 - k; }
        }
        offset += k * ${o[u]};
        `;
    return `
      float padA(int m[${s}]) {
        int offset = 0;
        int k = 0;
        ${a}
        vec2 coords = offsetToCoords(offset, ${t}, ${r});
        float value = getColorAsFloat(${i.texture2D}(A, coords));
        return value;
      }
      `;
  }, Cb = (i, e, o, t, r, n) => {
    let s = e.length, a = "";
    for (let u = s - 1; u >= 0; --u) a += `
        k = m[${u}] - ${n[u]};
        if (k < 0)  k = 0;
        if (k >= ${e[u]}) k = ${e[u] - 1};
        offset += k * ${o[u]};
      `;
    return `
      float padA(int m[${s}]) {
        int offset = 0;
        int k = 0;
        ${a}
        vec2 coords = offsetToCoords(offset, ${t}, ${r});
        float value = getColorAsFloat(${i.texture2D}(A, coords));
        return value;
      }
      `;
  };
});
var Zf, Qf, tc, ec, rc, nc, oc, ic, ac, Nb, Yf, sc, Nn, uc, Cn, Rb, lc = O(() => {
  vt();
  Y();
  j();
  Zf = (i, e, o) => {
    Nn(e);
    let t = { name: "AveragePool", inputNames: ["X"], inputTypes: [0], cacheHint: o.cacheKey };
    return [i.run({ ...t, get: () => tc(e, t, false, o) }, e)];
  }, Qf = (i) => {
    let e = i.attributes.getString("auto_pad", "NOTSET"), o = i.attributes.getInt("ceil_mode", 0), t = i.attributes.getInt("count_include_pad", 0) !== 0, r = i.attributes.getInts("kernel_shape"), n = i.attributes.getInts("strides", []), s = i.attributes.getInts("pads", []);
    if (o !== 0) throw new Error("using ceil() in shape computation is not yet supported for AveragePool");
    return W({ autoPad: e, ceilMode: o, countIncludePad: t, kernelShape: r, strides: n, pads: s });
  }, tc = (i, e, o, t) => {
    let [r, n] = ac(i, t, o), s = B.size(r.kernelShape), a = "value += _X(x);", u = "";
    r.countIncludePad ? u += `value /= float(${s});` : u += `value /= float(${s} - pad);`;
    let f = `
        ${uc(i[0].dims, r, a, u, "0.0")}
      `;
    return { ...e, output: { dims: n, type: i[0].type, textureType: 0 }, shaderSource: f };
  }, ec = (i, e, o) => {
    Nn(e);
    let t = { name: "GlobalAveragePool", inputNames: ["X"], inputTypes: [0], cacheHint: `${o.countIncludePad}` };
    return [i.run({ ...t, get: () => tc(e, t, true, o) }, e)];
  }, rc = (i) => {
    let e = i.attributes.getInt("count_include_pad", 0) !== 0;
    return W({ autoPad: "", ceilMode: 0, countIncludePad: e, kernelShape: [], strides: [], pads: [] });
  }, nc = (i, e, o) => {
    Nn(e);
    let t = { name: "MaxPool", inputNames: ["X"], inputTypes: [0], cacheHint: o.cacheKey };
    return [i.run({ ...t, get: () => ic(e, t, false, o) }, e)];
  }, oc = (i) => {
    let e = i.attributes.getString("auto_pad", "NOTSET"), o = i.attributes.getInt("ceil_mode", 0), t = i.attributes.getInts("kernel_shape"), r = i.attributes.getInts("strides", []), n = i.attributes.getInts("pads", []), s = i.attributes.getInt("storage_order", 0), a = i.attributes.getInts("dilations", []);
    if (s !== 0) throw new Error("column major storage order is not yet supported for MaxPool");
    if (o !== 0) throw new Error("using ceil() in shape computation is not yet supported for MaxPool");
    return W({ autoPad: e, ceilMode: o, countIncludePad: false, kernelShape: t, strides: r, pads: n, storageOrder: s, dilations: a });
  }, ic = (i, e, o, t) => {
    let [r, n] = ac(i, t, o), s = `
      value = max(_X(x), value);
    `, a = "", l = `
      ${uc(i[0].dims, r, s, a, "-1e5")}
    `;
    return { ...e, output: { dims: n, type: i[0].type, textureType: 0 }, shaderSource: l };
  }, ac = (i, e, o) => {
    let t = i[0].dims.slice(), r = Object.hasOwnProperty.call(e, "dilations"), n = e.kernelShape.slice(), s = e.strides.slice(), a = r ? e.dilations.slice() : [], u = e.pads.slice();
    Me.adjustPoolAttributes(o, t, n, s, a, u);
    let l = Me.computePoolOutputShape(o, t, s, a, n, u, e.autoPad), f = Object.assign({}, e);
    return r ? Object.assign(f, { kernelShape: n, strides: s, pads: u, dilations: a, cacheKey: e.cacheKey }) : Object.assign(f, { kernelShape: n, strides: s, pads: u, cacheKey: e.cacheKey }), [f, l];
  }, Nb = { autoPad: "", ceilMode: 0, countIncludePad: false, kernelShape: [], strides: [], pads: [], storageOrder: 0, dilations: [], cacheKey: "" }, Yf = { name: "GlobalMaxPool", inputNames: ["X"], inputTypes: [0] }, sc = (i, e) => (Nn(e), [i.run({ ...Yf, get: () => ic(e, Yf, true, Nb) }, e)]), Nn = (i) => {
    if (!i || i.length !== 1) throw new Error("Pool ops requires 1 input.");
    if (i[0].type !== "float32" && i[0].type !== "float64") throw new Error("Invalid input type.");
  }, uc = (i, e, o, t, r) => {
    let n = i.length;
    if (e.kernelShape.length <= 2) {
      let s = e.kernelShape[e.kernelShape.length - 1], a = e.strides[e.strides.length - 1], u = e.pads[e.pads.length / 2 - 1], l = e.pads[e.pads.length - 1], f = i[n - 1], p2 = "", d = "", y = "";
      if (u + l !== 0 ? p2 = `
          for (int i = 0; i < ${s}; i++) {
            x[${n} - 1] = indices[${n} - 1] * ${a} - ${u} + i;
            if (x[${n} - 1] < 0 || x[${n} - 1] >= ${f}) {
              pad++;
              continue;
            }
            ${o}
          }` : p2 = `
          for (int i = 0; i < ${s}; i++) {
            x[${n} - 1] = indices[${n} - 1] * ${a} - ${u} + i;
            ${o}
          }`, e.kernelShape.length === 2) {
        let v = e.kernelShape[e.kernelShape.length - 2], S = e.strides[e.strides.length - 2], L = e.pads[e.pads.length / 2 - 2], A = e.pads[e.pads.length - 2], P = i[n - 2];
        L + A !== 0 ? d = `
            for (int j = 0; j < ${v}; j++) {
              x[${n} - 2] = indices[${n} - 2] * ${S} - ${L} + j;
              if (x[${n} - 2] < 0 || x[${n} - 2] >= ${P}) {
                pad+= ${s};
                continue;
              }
          ` : d = `
            for (int j = 0; j < ${v}; j++) {
              x[${n} - 2] = indices[${n} - 2] * ${S} - ${L} + j;
            `, y = `
          }
        `;
      }
      return `
        float process(int indices[${n}]) {
          int x[${n}];
          copyVec(indices, x);

          float value = ${r};
          int pad = 0;
          ${d}
          ${p2}
          ${y}
          ${t}
          return value;
        }
      `;
    } else {
      let s = B.size(e.kernelShape), a = B.computeStrides(e.kernelShape), u = a.length, l = e.pads.length, f = Rb(u), p2 = Cn(i, "inputDims"), d = Cn(e.pads, "pads"), y = Cn(a, "kernelStrides"), w = Cn(e.strides, "strides"), v = e.pads.reduce((A, P) => A + P), S = "";
      return v ? S = `
            if (x[j] >= inputDims[j] || x[j] < 0) {
              pad++;
              isPad = true;
              break;
            }
          }
          if (!isPad) {
            ${o}
          }` : S = `
          }
          ${o}
        `, `
        ${f}
        float process(int indices[${n}]) {
          int x[${n}];
          copyVec(indices, x);
          int offset[${u}];
          int pads[${l}];
          int inputDims[${n}];
          int kernelStrides[${u}];
          int strides[${u}];
          ${d}
          ${p2}
          ${w}
          ${y}

          float value = ${r};
          int pad = 0;
          bool isPad = false;
          for (int i = 0; i < ${s}; i++) {
            offsetToIndices(i, kernelStrides, offset);
            isPad = false;
            for (int j = ${n} - ${u}; j < ${n}; j++) {
              x[j] = indices[j] * strides[j - ${n} + ${u}]
                + offset[j - ${n} + ${u}] - pads[j - 2];
              ${S}
          }
          ${t}

          return value;
        }
      `;
    }
  }, Cn = (i, e) => {
    let o = "";
    for (let t = 0; t < i.length; t++) o += `
      ${e}[${t}] = ${i[t]};
    `;
    return o;
  }, Rb = (i) => `
  void offsetToIndices(int offset, int[${i}] strides, out int[${i}] indices) {
    if (${i} == 0) {
      return;
    }
    for (int i = 0; i < ${i} - 1; ++i) {
      indices[i] = offset / strides[i];
      offset -= indices[i] * strides[i];
    }
    indices[${i} - 1] = offset;
  }`;
});
var je, Pe, Gb, Mb, fc, cc, pc, dc, hc, mc, bc, gc = O(() => {
  vt();
  Rr();
  Y();
  j();
  je = (i, e, o, t, r) => {
    Mb(e);
    let n = { name: t, inputNames: ["A"], inputTypes: [0] };
    return [i.run({ ...n, cacheHint: o.cacheKey, get: () => Gb(i, e, o, t, r, n) }, e)];
  }, Pe = (i) => {
    let e = i.attributes.getInts("axes", []), o = i.attributes.getInt("keepdims", 1) === 1;
    return W({ axes: e, keepDims: o });
  }, Gb = (i, e, o, t, r, n) => {
    let s = [], a = e[0].dims.length || 1, u = [], l = B.normalizeAxes(o.axes, e[0].dims.length), f = r(e, l), p2 = f[1];
    for (let w = 0; w < e[0].dims.length; w++) l.indexOf(w) >= 0 || l.length === 0 ? (o.keepDims && s.push(1), p2 = `
          for(int j${w} = 0; j${w} < ${e[0].dims[w]}; j${w}++) {
            inputIdx[${w}] = j${w};
            ${p2}
          }`) : (u.push(`inputIdx[${w}] = outputIdx[${s.length}];`), s.push(e[0].dims[w]));
    let y = `
      float process(int outputIdx[${s.length || 1}]) {
        float value;                 // final result
        int inputIdx[${a}];      // addressing input data
        ${u.join(`
`)}
        ${f[0]}       // init ops for reduce max/min
        ${p2}
        ${f[2]}       // final computation for reduce mean
        return value;
      }`;
    return { ...n, output: { dims: s, type: e[0].type, textureType: 0 }, shaderSource: y };
  }, Mb = (i) => {
    if (!i || i.length !== 1) throw new Error("Reduce op requires 1 input.");
    if (Ae.indexOf(i[0].type) === -1) throw new Error("Invalid input type.");
  }, fc = (i, e, o) => je(i, e, o, "ReduceSum", () => ["value = 0.0;", "value += _A(inputIdx);", ""]), cc = (i, e, o) => je(i, e, o, "ReduceMean", (r, n) => {
    let s = 1;
    for (let a = 0; a < r[0].dims.length; a++) (n.indexOf(a) >= 0 || n.length === 0) && (s *= r[0].dims[a]);
    return ["value = 0.0;", "value += _A(inputIdx);", `value /= ${s}.;`];
  }), pc = (i, e, o) => je(i, e, o, "ReduceMax", (r, n) => {
    let s = [];
    for (let a = 0; a < r[0].dims.length; a++) (n.indexOf(a) >= 0 || n.length === 0) && s.push(`inputIdx[${a}] = 0;`);
    return [`${s.join(`
`)}
value = _A(inputIdx);`, "value = max(value, _A(inputIdx));", ""];
  }), dc = (i, e, o) => je(i, e, o, "ReduceMin", (r, n) => {
    let s = [];
    for (let a = 0; a < r[0].dims.length; a++) (n.indexOf(a) >= 0 || n.length === 0) && s.push(`inputIdx[${a}] = 0;`);
    return [`${s.join(`
`)}
value = _A(inputIdx);`, "value = min(value, _A(inputIdx));", ""];
  }), hc = (i, e, o) => je(i, e, o, "ReduceProd", () => ["value = 1.0;", "value *= _A(inputIdx);", ""]), mc = (i, e, o) => je(i, e, o, "ReduceLogSum", () => ["value = 0.0;", "value += _A(inputIdx);", "value = log(value);"]), bc = (i, e, o) => je(i, e, o, "ReduceLogSumSquare", () => ["float t; value = 0.0;", "t = _A(inputIdx); value += t * t;", ""]);
});
var yc, xc = O(() => {
  Y();
  yc = (i, e) => {
    let o = B.calculateReshapedDims(e[0].dims, e[1].integerData);
    return i.session.pack ? [i.reshapePacked(e[0], o)] : [i.reshapeUnpacked(e[0], o)];
  };
});
var Tc, Si, wc, vc, Gr, Ub, Ai, Rn, Pi = O(() => {
  vt();
  st();
  j();
  Tc = { name: "Upsample", inputNames: ["X"], inputTypes: [0] }, Si = (i, e, o) => (Ai(e, o), [i.run({ ...Tc, cacheHint: o.cacheKey, get: () => Ub(i, e, o) }, e)]), wc = (i) => Gr(i, 7), vc = (i) => Gr(i, 9), Gr = (i, e) => {
    let o = e >= 10, t = i.attributes.getString("mode", "nearest");
    if (t !== "nearest" && t !== "linear" && (e < 11 || t !== "cubic")) throw new Error(`unrecognized mode: ${t}`);
    let r = [];
    e < 9 && (r = i.attributes.getFloats("scales"), Rn(r, t, o));
    let n = i.attributes.getFloat("extrapolation_value", 0), s = e > 10 ? i.attributes.getString("coordinate_transformation_mode", "half_pixel") : "asymmetric";
    if (["asymmetric", "pytorch_half_pixel", "tf_half_pixel_for_nn", "align_corners", "tf_crop_and_resize", "half_pixel"].indexOf(s) === -1) throw new Error(`coordinate_transform_mode '${s}' is not supported`);
    let a = s === "tf_crop_and_resize", u = a, l = t === "nearest" && e >= 11 ? i.attributes.getString("nearest_mode", "round_prefer_floor") : "";
    if (["round_prefer_floor", "round_prefer_ceil", "floor", "ceil", ""].indexOf(l) === -1) throw new Error(`nearest_mode '${l}' is not supported`);
    let f = i.attributes.getFloat("cubic_coeff_a", -0.75), p2 = i.attributes.getInt("exclude_outside", 0) !== 0;
    if (p2 && t !== "cubic") throw new Error("exclude_outside can be set to 1 only when mode is CUBIC.");
    let d = e < 11 ? true : t === "nearest" && s === "asymmetric" && l === "floor", y = 0, w = 0, v = 0;
    return e > 10 ? i.inputs.length > 2 ? (y = 1, w = 2, v = 3) : (w = 1, v = 2) : e === 9 && (w = 1), W({ opset: e, isResize: o, mode: t, scales: r, extrapolationValue: n, coordinateTransformMode: s, useExtrapolation: u, needRoiInput: a, nearestMode: l, cubicCoefficientA: f, excludeOutside: p2, useNearest2xOptimization: d, roiInputIdx: y, scalesInputIdx: w, sizesInputIdx: v });
  }, Ub = (i, e, o) => {
    let t = G(i.session.backend.glContext.version), [r, n] = i.calculateTextureWidthAndHeight(e[0].dims, 0), s = e[0].dims.map((v, S) => Math.floor(v * o.scales[S])), [a, u] = i.calculateTextureWidthAndHeight(s, 0), l = s.length, f = new Array(l), p2 = new Array(l), d = `
      int output_pitches[${l}];
      int input_pitches[${l}];
      `;
    for (let v = l - 1; v >= 0; v--) f[v] = v === l - 1 ? 1 : f[v + 1] * s[v + 1], p2[v] = v === l - 1 ? 1 : p2[v + 1] * e[0].dims[v + 1], d += `
        output_pitches[${v}] = ${f[v]};
        input_pitches[${v}] = ${p2[v]};
        `;
    let y = `
      float getInputFloat(int index) {
        vec2 coords = offsetToCoords(index, ${r}, ${n});
        float value = getColorAsFloat(${t.texture2D}(X, coords));
        return value;
      }
      `, w = o.mode === "nearest" ? `
    ${y}
    float process(int indices[${l}]) {
      int input_index = 0;
      int output_index = coordsToOffset(TexCoords, ${a}, ${u});

      ${d}

      int d, m;
      for (int dim = 0; dim < ${l}; ++dim) {
        d = output_index / output_pitches[dim];
        m = output_index - d * output_pitches[dim];
        output_index = m;

        if (scales[dim] != 1 && d > 0) {
          int d2 = d / scales[dim];
          m = d - d2 * scales[dim];
          d = d2;
        }
        input_index += input_pitches[dim] * d;
      }

      return getInputFloat(input_index);
    }` : l === 4 ? `
    ${y}
    float process(int indices[4]) {
      int input_index = 0;
      int output_index = coordsToOffset(TexCoords, ${a}, ${u});

      ${d}

      int m;
      int index_of_dim0, index_of_dim1, index_of_dim2, index_of_dim3;
      index_of_dim0 = output_index / output_pitches[0];
      m = output_index - index_of_dim0 * output_pitches[0];
      index_of_dim1 = m / output_pitches[1];
      m = m - index_of_dim1 * output_pitches[1];
      index_of_dim2 = m / output_pitches[2];
      m = m - index_of_dim2 * output_pitches[2];
      index_of_dim3 = m;

      int index_of_input_dim2, index_of_input_dim3, x_offset, y_offset;
      index_of_input_dim2 = index_of_dim2 / scales[2];
      y_offset = index_of_dim2 - index_of_input_dim2 * scales[2];
      index_of_input_dim3 = index_of_dim3 / scales[3];
      x_offset = index_of_dim3 - index_of_input_dim3 * scales[3];

      input_index = index_of_dim0 * input_pitches[0] +
            index_of_dim1 * input_pitches[1] +
            index_of_input_dim2 * input_pitches[2] +
            index_of_input_dim3;

      float x00 = getInputFloat(input_index);
      float x10, x01, x11;

      bool end_of_dim2 = false;
      if (index_of_input_dim2 == (${e[0].dims[2]} - 1)) {
        // It's the end in dimension 2
        x01 = x00;
        end_of_dim2 = true;
      } else {
        x01 = getInputFloat(input_index + input_pitches[2]);
      }

      if (index_of_input_dim3 == (input_pitches[2] - 1)) {
        // It's the end in dimension 3
        x10 = x00;
        x11 = x01;
      }
      else {
        x10 = getInputFloat(input_index + 1);
        x11 = end_of_dim2 ? x10 : getInputFloat(input_index + input_pitches[2] + 1);
      }

      float y0 = x00 + float(y_offset) * (x01 - x00) / float(scales[2]);
      float y1 = x10 + float(y_offset) * (x11 - x10) / float(scales[2]);
      return y0 + float(x_offset) * (y1 - y0) / float(scales[3]);
    }` : `
    ${y}
    float process(int indices[2]) {
      int input_index = 0;
      int output_index = coordsToOffset(TexCoords, ${a}, ${u});

      ${d}

      int m;
      int index_of_dim0, index_of_dim1;
      index_of_dim0 = output_index / output_pitches[0];
      m = output_index - index_of_dim0 * output_pitches[0];
      index_of_dim1 = m;

      int index_of_input_dim0, index_of_input_dim1, x_offset, y_offset;
      index_of_input_dim0 = index_of_dim0 / scales[0];
      y_offset = index_of_dim0 - index_of_input_dim0 * scales[0];
      index_of_input_dim1 = index_of_dim1 / scales[1];
      x_offset = index_of_dim1 - index_of_input_dim1 * scales[1];

      input_index = index_of_input_dim0 * input_pitches[0] + index_of_input_dim1;

      float x00 = getInputFloat(input_index);
      float x10, x01, x11;

      bool end_of_dim0 = false;
      if (index_of_input_dim0 == (${e[0].dims[0]} - 1)) {
        // It's the end in dimension 0
        x01 = x00;
        end_of_dim0 = true;
      } else {
        x01 = getInputFloat(input_index + input_pitches[0]);
      }

      if (index_of_input_dim1 == (input_pitches[0] - 1)) {
        // It's the end in dimension 1
        x10 = x00;
        x11 = x01;
      }
      else {
        x10 = getInputFloat(input_index + 1);
        x11 = end_of_dim0 ? x10 : getInputFloat(input_index + input_pitches[0] + 1);
      }

      float y0 = x00 + float(y_offset) * (x01 - x00) / float(scales[0]);
      float y1 = x10 + float(y_offset) * (x11 - x10) / float(scales[0]);
      return y0 + float(x_offset) * (y1 - y0) / float(scales[1]);
    }`;
    return { ...Tc, output: { dims: s, type: e[0].type, textureType: 0 }, shaderSource: w, variables: [{ name: "scales", type: "int", arrayLength: o.scales.length, data: o.scales.map((v) => Math.ceil(v)) }] };
  }, Ai = (i, e) => {
    if (!i || e.opset < 9 && i.length !== 1 || e.opset >= 9 && e.opset < 11 && i.length !== 2 || e.opset >= 11 && i.length < 2) throw new Error("invalid inputs.");
    if (e.scales.length > 0 && i[0].dims.length !== e.scales.length) throw new Error("Invalid input shape.");
    if (i[0].type === "string") throw new Error("Invalid input tensor types.");
  }, Rn = (i, e, o) => {
    if (o) {
      for (let t of i) if (t <= 0) throw new Error("Scale value should be greater than 0.");
    } else for (let t of i) if (t < 1) throw new Error("Scale value should be greater than or equal to 1.");
    if ((e === "linear" || e === "cubic") && i.length !== 2 && (i.length !== 4 || i[0] !== 1 || i[1] !== 1)) throw new Error(`'Linear' mode and 'Cubic' mode only support 2-D inputs ('Bilinear', 'Bicubic')         or 4-D inputs with the corresponding outermost 2 scale values being 1         in the ${o ? "Resize" : "Upsample"} opeartor.`);
  };
});
var Ei, Di, Ic, _c, Vb, zb, Wb, Hb, Oc = O(() => {
  st();
  j();
  ue();
  We();
  Pi();
  Ei = { name: "Resize", inputNames: ["A"], inputTypes: [2] }, Di = (i, e, o) => (Ai(e, o), [i.run({ ...Ei, cacheHint: o.cacheKey, get: () => Vb(i, e, o) }, e)]), Ic = (i) => Gr(i, 10), _c = (i) => Gr(i, 11), Vb = (i, e, o) => {
    let t = G(i.session.backend.glContext.version), [r, n] = zb(e, o);
    if (r.every((P) => P === 1) && o.coordinateTransformMode !== "tf_crop_and_resize") return { ...Ei, output: { dims: n, type: e[0].type, textureType: 2 }, hasMain: true, shaderSource: `void main() {
                    vec4 v = ${t.texture2D}(X, TexCoords);
                    ${t.output} = v;
                }` };
    let a = n.length;
    if (a < 2) throw new Error(`output dimension should be at least 2, but got ${a}`);
    let u = n[a - 2], l = n[a - 1], f = e[0].dims;
    if (a !== f.length) throw new Error(`output dimension should match input ${f.length}, but got ${a}`);
    let p2 = f[a - 2], d = f[a - 1], y = r[a - 2], w = r[a - 1], v = "";
    if (o.mode !== "linear") throw new Error(`resize (packed) does not support mode: '${o.mode}'`);
    switch (o.coordinateTransformMode) {
      case "asymmetric":
        v = `
                    vec4 getSourceFracIndex(ivec4 coords) {
                        return vec4(coords) / scaleWHWH;
                    }
                `;
        break;
      case "half_pixel":
        v = `
                    vec4 getSourceFracIndex(ivec4 coords) {
                        return (vec4(coords) + 0.5) / scaleWHWH - 0.5;
                    }
                `;
        break;
      case "pytorch_half_pixel":
        v = `
                    vec4 getSourceFracIndex(ivec4 coords) {
                        vec4 fcoords = vec4(coords);
                        return vec4(
                            ${l}.0 > 1.0 ? (fcoords.x + 0.5) / scaleWHWH.x - 0.5 : 0.0,
                            ${u}.0 > 1.0 ? (fcoords.y + 0.5) / scaleWHWH.y - 0.5 : 0.0,
                            ${l}.0 > 1.0 ? (fcoords.z + 0.5) / scaleWHWH.z - 0.5 : 0.0,
                            ${u}.0 > 1.0 ? (fcoords.w + 0.5) / scaleWHWH.w - 0.5 : 0.0
                          );
                    }
                `;
        break;
      case "align_corners":
        v = `
                    vec4 getSourceFracIndex(ivec4 coords) {
                        vec4 resized = vec4(${l}.0 - 1.0, ${u}.0 - 1.0, ${l}.0 - 1.0,
                            ${u}.0 - 1.0);
                        vec4 original = vec4(${d}.0 - 1.0, ${p2}.0 - 1.0, ${d}.0 - 1.0,
                            ${p2}.0 - 1.0);
                        vec4 new_scale = original / resized;
                        return vec4(coords) * new_scale;
                    }
                `;
        break;
      default:
        throw new Error(`resize (packed) does not support coordinateTransformMode:                                 '${o.coordinateTransformMode}'`);
    }
    let S = kt(a), L = le(), A = `
            const vec2 inputWH = vec2(${p2}.0, ${d}.0);
            const vec4 scaleWHWH = vec4(float(${y}), float(${w}), float(${y}), float(${w}));
            ${L}
            ${v}
            float getAValue(int x10, int r, int c, int d) {
                return getChannel(getA(x10, r, c, d), vec2(c, d));
            }
            void main() {
                ${S} rc = getOutputCoords();

                int batch = rc[0];
                int depth = rc[1];

                // retrieve the 4 coordinates that is used in the 4 packed output values.
                ivec4 coords = ivec4(rc.wz, rc.w + 1, rc.z + 1);

                // calculate the source index in fraction
                vec4 sourceFrac = getSourceFracIndex(coords);

                // get the lower and upper bound of the 4 values that will be packed into one texel.
                ivec4 x00 = ivec4(max(sourceFrac.xy, vec2(0.0)), min(inputWH - 1.0, ceil(sourceFrac.xy)));
                ivec4 x01 = ivec4(max(sourceFrac.xw, vec2(0.0)), min(inputWH - 1.0, ceil(sourceFrac.xw)));
                ivec4 x10 = ivec4(max(sourceFrac.zy, vec2(0.0)), min(inputWH - 1.0, ceil(sourceFrac.zy)));
                ivec4 x11 = ivec4(max(sourceFrac.zw, vec2(0.0)), min(inputWH - 1.0, ceil(sourceFrac.zw)));

                bool hasNextRow = rc.w < ${u - 1};
                bool hasNextCol = rc.z < ${l - 1};

                // pack x00, x01, x10, x11's top-left corner into one vec4 structure
                vec4 topLeft = vec4(
                    getAValue(batch, depth, x00.x, x00.y),
                    hasNextCol ? getAValue(batch, depth, x01.x, x01.y) : 0.0,
                    hasNextRow ? getAValue(batch, depth, x10.x, x10.y) : 0.0,
                    (hasNextRow && hasNextCol) ? getAValue(batch, depth, x11.x, x11.y) : 0.0);

                // pack x00, x01, x10, x11's top-right corner into one vec4 structure
                vec4 topRight = vec4(
                    getAValue(batch, depth, x00.x, x00.w),
                    hasNextCol ? getAValue(batch, depth, x01.x, x01.w) : 0.0,
                    hasNextRow ? getAValue(batch, depth, x10.x, x10.w) : 0.0,
                    (hasNextRow && hasNextCol) ? getAValue(batch, depth, x11.x, x11.w) : 0.0);

                // pack x00, x01, x10, x11's bottom-left corner into one vec4 structure
                vec4 bottomLeft = vec4(
                    getAValue(batch, depth, x00.z, x00.y),
                    hasNextCol ? getAValue(batch, depth, x01.z, x01.y) : 0.0,
                    hasNextRow ? getAValue(batch, depth, x10.z, x10.y) : 0.0,
                    (hasNextRow && hasNextCol) ? getAValue(batch, depth, x11.z, x11.y) : 0.0);

                // pack x00, x01, x10, x11's bottom-right corner into one vec4 structure
                vec4 bottomRight = vec4(
                    getAValue(batch, depth, x00.z, x00.w),
                    hasNextCol ? getAValue(batch, depth, x01.z, x01.w) : 0.0,
                    hasNextRow ? getAValue(batch, depth, x10.z, x10.w) : 0.0,
                    (hasNextRow && hasNextCol) ? getAValue(batch, depth, x11.z, x11.w) : 0.0);

                // calculate the interpolation fraction on u and v direction
                vec4 frac = vec4(sourceFrac) - floor(sourceFrac);
                vec4 clampFrac = clamp(frac, vec4(0.0), vec4(1.0));

                vec4 top = mix(topLeft, topRight, clampFrac.ywyw);
                vec4 bottom = mix(bottomLeft, bottomRight, clampFrac.ywyw);
                vec4 newValue = mix(top, bottom, clampFrac.xxzz);

                ${t.output} = vec4(newValue);
            }
        `;
    return { ...Ei, output: { dims: n, type: e[0].type, textureType: 2 }, hasMain: true, shaderSource: A };
  }, zb = (i, e) => {
    let t = i[0].dims, r = e.scales, n;
    if (r.length === 0) {
      let a = i[e.scalesInputIdx];
      if (a && a.size !== 0) {
        if (i[e.sizesInputIdx]) throw new Error("Only one of scales or sizes must be provided as input.");
        r = Wb(a, e.mode, e.isResize);
      } else {
        let u = i[e.sizesInputIdx];
        if (!u || u.size === 0) throw new Error("Either scales or sizes MUST be provided as input.");
        n = Array.from(u.integerData), r = Hb(n, t, e.mode, e.isResize);
      }
    } else if (i[e.sizesInputIdx]) throw new Error("Only one of scales or sizes must be provided as input.");
    let s = n || t.map((a, u) => Math.floor(a * r[u]));
    return [r, s];
  }, Wb = (i, e, o) => {
    let t = Array.from(i.floatData);
    return Rn(t, e, o), t;
  }, Hb = (i, e, o, t) => {
    let r = e.length, n = new Array(r);
    for (let s = 0, a = r; s < a; s++) if (e[s] === 0) {
      if (i[s] !== 0) throw new Error("Input dim is zero but required output dim is non-zero.");
      n[s] = 1;
    } else n[s] = i[s] / e[s];
    return Rn(n, o, t), n;
  };
});
var Sc, qb, Ac = O(() => {
  ze();
  Sc = (i, e) => (qb(e), [new bt([e[0].dims.length], "int32", void 0, void 0, new Int32Array(e[0].dims))]), qb = (i) => {
    if (!i || i.length !== 1) throw new Error("Shape requires 1 input.");
  };
});
var Li, Pc, Ec, Dc, jb, Lc, Xb, Kb, $c = O(() => {
  vt();
  Rr();
  Y();
  j();
  Li = { name: "Slice", inputNames: ["A"], inputTypes: [0] }, Pc = (i, e, o) => (jb(e), [i.run({ ...Li, cacheHint: o.cacheKey, get: () => Dc(i, e[0], o) }, e)]), Ec = (i) => {
    let e = i.attributes.getInts("starts"), o = i.attributes.getInts("ends"), t = i.attributes.getInts("axes", []);
    return W({ starts: e, ends: o, axes: t });
  }, Dc = (i, e, o) => {
    let t = o.axes.length === 0 ? e.dims.slice(0).map((p2, d) => d) : o.axes, r = B.normalizeAxes(t, e.dims.length), n = o.starts.map((p2, d) => p2 > e.dims[r[d]] - 1 ? e.dims[r[d]] : B.normalizeAxis(p2, e.dims[r[d]])), s = o.ends.map((p2, d) => p2 > e.dims[r[d]] - 1 ? e.dims[r[d]] : B.normalizeAxis(p2, e.dims[r[d]])), a = e.dims.slice(), u = [];
    for (let p2 = 0; p2 < r.length; p2++) a[r[p2]] = s[p2] - n[p2], n[p2] > 0 && u.push(`outputIdx[${r[p2]}] += ${n[p2]};`);
    let f = `
      float process(int outputIdx[${a.length}]) {
        ${u.join(`
      `)}
        return _A(outputIdx);
      }`;
    return { ...Li, output: { dims: a, type: e.type, textureType: 0 }, shaderSource: f };
  }, jb = (i) => {
    if (!i || i.length !== 1) throw new Error("Slice requires 1 input.");
    if (Ae.indexOf(i[0].type) === -1) throw new Error("Invalid input type.");
  }, Lc = (i, e) => {
    Kb(e);
    let o = Xb(i, e);
    return [i.run({ ...Li, cacheHint: o.cacheKey, get: () => Dc(i, e[0], o) }, [e[0]])];
  }, Xb = (i, e) => {
    if (!i.session.isInitializer(e[1].dataId) || !i.session.isInitializer(e[2].dataId) || e.length >= 4 && !i.session.isInitializer(e[3].dataId) || e.length >= 5 && !i.session.isInitializer(e[4].dataId)) throw new Error("dynamic slice attributes are not allowed");
    if (e.length >= 5 && e[4].integerData.some((s) => s !== 1)) throw new Error("currently non-1 steps is not supported for Slice");
    let o = Array.from(e[1].integerData), t = Array.from(e[2].integerData), r = e.length >= 4 ? Array.from(e[3].integerData) : [], n = `${r};${o};${t}`;
    return { starts: o, ends: t, axes: r, cacheKey: n };
  }, Kb = (i) => {
    if (!i || i.length < 3 || i.length > 5) throw new Error("Invalid input number.");
    if (i[1].type !== "int32" || i[1].dims.length !== 1) throw new Error("Invalid input type.");
    if (i[2].type !== "int32" || i[2].dims.length !== 1) throw new Error("Invalid input type.");
    if (i.length >= 4 && (i[3].type !== "int32" || i[3].dims.length !== 1)) throw new Error("Invalid input type.");
    if (i.length >= 5 && (i[4].type !== "int32" || i[4].dims.length !== 1)) throw new Error("Invalid input type.");
  };
});
var kc, Bc, Fc, Cc, Nc, Rc, Gc, Mc, Jb, Yb, Zb, Uc, Vc = O(() => {
  vt();
  Y();
  st();
  j();
  Fn();
  kc = { name: "SoftmaxComputeMax", inputNames: ["A"], inputTypes: [0] }, Bc = { name: "SoftmaxComputeScale", inputNames: ["A", "Max"], inputTypes: [0, 0] }, Fc = { name: "SoftMax", inputNames: ["A", "Max", "Norm"], inputTypes: [0, 0, 0] }, Cc = (i, e, o) => {
    Uc(e);
    let t = e[0].dims.slice(), r = B.normalizeAxis(o.axis, t.length), n = B.sizeToDimension(t, r), s = B.sizeFromDimension(t, r);
    return Mc(i, e, o, n, s);
  }, Nc = (i) => W({ axis: i.attributes.getInt("axis", 1) }), Rc = (i) => W({ axis: i.attributes.getInt("axis", -1) }), Gc = (i, e, o) => {
    Uc(e);
    let t = e[0].dims.slice(), r = B.normalizeAxis(o.axis, t.length), n = t.length, s = r !== n - 1, a = [], u = [], l = [], f;
    s && (u = Array.from({ length: n }).map((w, v) => v), u[r] = n - 1, u[n - 1] = r, u.map((w) => a.push(t[w])), f = W({ perm: u }), l = qe(i, e, f));
    let p2 = s ? B.sizeToDimension(a, n - 1) : B.sizeToDimension(t, n - 1), d = s ? B.sizeFromDimension(a, n - 1) : B.sizeFromDimension(t, n - 1), y = Mc(i, s ? l : e, o, p2, d);
    return s ? qe(i, y, f) : y;
  }, Mc = (i, e, o, t, r) => {
    let n = Jb(i, e[0], t, r, [t]), s = i.run({ ...kc, cacheHint: o.cacheKey, get: () => n }, e), a = Yb(i, e[0], t, r, n.output.dims, [t]), u = i.run({ ...Bc, cacheHint: o.cacheKey, get: () => a }, [e[0], s]), l = Zb(i, e[0], t, r, n.output.dims, a.output.dims);
    return [i.run({ ...Fc, cacheHint: o.cacheKey, get: () => l }, [e[0], s, u])];
  }, Jb = (i, e, o, t, r) => {
    let [n, s] = i.calculateTextureWidthAndHeight(e.dims, 0), a = r.length;
    if (o < 1 || t < 1) throw new Error("Logical row count N and feature count D must be greater than or equal to 1");
    if (r.length !== 1) throw new Error("Dimensionality of the output should be 1");
    if (r[0] !== o) throw new Error("Shape of the output should be equal to logical row count");
    let u = G(i.session.backend.glContext.version), l = `
      float process(int[${a}] indices) {
        int logical_row_start_offset = indices[0] * ${t};

        float max = getColorAsFloat(${u.texture2D}(A, offsetToCoords(logical_row_start_offset, ${n},
        ${s} )));
        for(int i=1; i<${t}; ++i)
        {
          float current = getColorAsFloat(${u.texture2D}(A, offsetToCoords(logical_row_start_offset + i,
            ${n}, ${s})));
          if(current > max)
          max = current;
        }

        return max;
      }`;
    return { ...kc, output: { dims: r, type: e.type, textureType: 0 }, shaderSource: l };
  }, Yb = (i, e, o, t, r, n) => {
    let [s, a] = i.calculateTextureWidthAndHeight(e.dims, 0), u = n.length;
    if (o < 1 || t < 1) throw new Error("Logical row count N and feature count D must be greater than or equal to 1");
    if (n.length !== 1) throw new Error("Dimensionality of the output should be 1");
    if (n[0] !== o) throw new Error("Shape of the output should be equal to logical row count");
    if (r.length !== 1) throw new Error("Dimensionality of the intermediate results should be 1");
    if (r[0] !== o) throw new Error("Shape of the intermediate results should be equal to logical row count");
    let l = G(i.session.backend.glContext.version), f = `
      float process(int[${u}] indices) {
        int logical_row_start_offset = indices[0] * ${t};

        float norm_factor = 0.0;
        float max = _Max(indices);
        for(int i=0; i<${t}; ++i)
        {
          norm_factor += exp(getColorAsFloat(${l.texture2D}(A, offsetToCoords(logical_row_start_offset + i,
            ${s}, ${a}))) - max);
        }

        return norm_factor;
      }`;
    return { ...Bc, output: { dims: n, type: e.type, textureType: 0 }, shaderSource: f };
  }, Zb = (i, e, o, t, r, n) => {
    let [s, a] = i.calculateTextureWidthAndHeight(e.dims, 0), u = e.dims.length;
    if (o < 1 || t < 1) throw new Error("Logical row count N and feature count D must be greater than or equal to 1");
    if (r.length !== 1 || n.length !== 1) throw new Error("Dimensionality of the intermediate results should be 1");
    if (r[0] !== o || n[0] !== o) throw new Error("Shape of the intermediate results should be equal to logical row count");
    let l = `
      float process(int[${u}] indices) {

      // get offset of current logical tensor index from the 2-D texture coordinates (TexCoords)
      int offset = coordsToOffset(TexCoords, ${s}, ${a});

      //determine the logical row for this index
      int logical_row_index[1];
      logical_row_index[0] = offset / ${t};

      float norm_factor = _Norm(logical_row_index);

      // avoid possible division by 0
      // if norm_facor is 0, all elements are zero
      // if so, return 0
      if(norm_factor == 0.0)
        return 0.0;

      return exp(_A(indices) - _Max(logical_row_index)) / norm_factor;
    }`;
    return { ...Fc, output: { dims: e.dims, type: e.type, textureType: 0 }, shaderSource: l };
  }, Uc = (i) => {
    if (!i || i.length !== 1) throw new Error("Softmax requires 1 input.");
    if (i[0].type !== "float32" && i[0].type !== "float64") throw new Error("Invalid input type");
  };
});
var zc, Wc, Hc, Qb, tg, eg, qc = O(() => {
  vt();
  Y();
  j();
  zc = { name: "Split", inputNames: ["A"], inputTypes: [0] }, Wc = (i, e, o) => {
    eg(e);
    let t = B.normalizeAxis(o.axis, e[0].dims.length), r = Qb(i, e, t, o), n = [];
    for (let s = 0; s < r; ++s) n.push(i.run({ ...zc, cacheHint: `${o.cacheKey};${s}`, get: () => tg(i, e[0], o, t, s) }, e));
    return n;
  }, Hc = (i) => {
    let e = i.attributes.getInt("axis", 0), o = i.attributes.getInts("split", []), t = i.outputs.length;
    return W({ axis: e, split: o, numOutputs: t });
  }, Qb = (i, e, o, t) => {
    let [, r] = $r.splitShape(e[0].dims, o, t.split, t.numOutputs);
    return r.length;
  }, tg = (i, e, o, t, r) => {
    let [n, s] = $r.splitShape(e.dims, t, o.split, o.numOutputs), a = s[r], u = n[r], f = `
      float process(int indices[${u.length}]) {
        indices[${t}] += ${a};
        return _A(indices);
      }
    `;
    return { ...zc, cacheHint: `${o.cacheKey}:${r}`, output: { dims: u, type: e.type, textureType: 0 }, shaderSource: f };
  }, eg = (i) => {
    if (!i || i.length !== 1) throw new Error("Split requires one input.");
    if (i[0].type !== "int8" && i[0].type !== "uint8" && i[0].type !== "int16" && i[0].type !== "uint16" && i[0].type !== "int32" && i[0].type !== "uint32" && i[0].type !== "float32" && i[0].type !== "float64" && i[0].type !== "bool") throw new Error("Invalid input type.");
  };
});
var $i, jc, Xc, rg, ng, Kc = O(() => {
  Y();
  $i = (i, e, o) => {
    rg(e);
    let t = B.squeezeShape(e[0].dims, o);
    return [i.reshapeUnpacked(e[0], t)];
  }, jc = (i, e) => (ng(e), $i(i, [e[0]], Array.from(e[1].integerData))), Xc = (i) => i.attributes.getInts("axes"), rg = (i) => {
    if (!i || i.length !== 1) throw new Error("Squeeze requires 1 input.");
    if (i[0].type === "string") throw new Error("invalid input tensor types.");
  }, ng = (i) => {
    if (!i || i.length !== 2) throw new Error("Squeeze requires 2 inputs.");
    if (i[1].type !== "int32") throw new Error("Invalid input type.");
  };
});
var Jc, og, ig, Yc = O(() => {
  st();
  j();
  Jc = (i, e) => {
    ig(e);
    let o = { name: "Sum", inputNames: e.map((r, n) => `X${n}`), inputTypes: new Array(e.length).fill(0) };
    return [i.run({ ...o, get: () => og(i, e, o) }, e)];
  }, og = (i, e, o) => {
    let t = G(i.session.backend.glContext.version), r = e[0].dims.slice(), s = `
      void main() {
        vec4 result = ${e.map((a, u) => `${t.texture2D}(X${u},TexCoords)`).join(" + ")};
        ${t.output} = result;
      }
    `;
    return { ...o, output: { dims: r, type: e[0].type, textureType: 0 }, hasMain: true, shaderSource: s };
  }, ig = (i) => {
    if (!i || i.length === 0) throw new Error("Sum requires inputs.");
    let e = i[0].dims.length;
    for (let o = 1; o < i.length; o++) {
      if (e !== i[o].dims.length) throw new Error("Input shapes are mismatched.");
      for (let t = 0; t < e; t++) if (i[0].dims[t] !== i[o].dims[t]) throw new Error("Input shapes are not matched.");
    }
    if (i[0].type !== "float32" && i[0].type !== "float64") throw new Error("Invalid input type.");
    for (let o = 1; o < i.length; o++) if (i[0].type !== i[o].type) throw new Error("Input types are not matched.");
  };
});
var Zc, ag, sg, Qc = O(() => {
  Rr();
  j();
  Zc = (i, e) => {
    sg(e);
    let o = { name: "Tile", inputNames: ["A"], inputTypes: [0] };
    return [i.run({ ...o, get: () => ag(i, e, o) }, e)];
  }, ag = (i, e, o) => {
    let t = e[0].dims.slice(), r = new Array(t.length), n = [];
    for (let u = 0; u < t.length; u++) r[u] = t[u] * e[1].numberData[u], n.push(`inputIdx[${u}] = int(mod(float(outputIdx[${u}]), ${t[u]}.));`);
    let s = r.length, a = `
      float process(int outputIdx[${s}]) {
        int inputIdx[${s}];
        ${n.join(`
`)}
        return _A(inputIdx);
      }
    `;
    return { ...o, output: { dims: r, type: e[0].type, textureType: 0 }, shaderSource: a };
  }, sg = (i) => {
    if (!i || i.length !== 2) throw new Error("Tile requires 2 input.");
    if (i[1].dims.length !== 1) throw new Error("The second input shape must 1 dimension.");
    if (i[1].dims[0] !== i[0].dims.length) throw new Error("Invalid input shape.");
    if (Ae.indexOf(i[0].type) === -1) throw new Error("Invalid input type.");
    if (i[1].type !== "int32" && i[1].type !== "int16") throw new Error("Invalid repeat type.");
  };
});
var ki, tp, ep, ug, lg, rp = O(() => {
  Y();
  ki = (i, e, o) => {
    ug(e);
    let t = B.unsqueezeShape(e[0].dims, o);
    return [i.reshapeUnpacked(e[0], t)];
  }, tp = (i, e) => (lg(e), ki(i, [e[0]], Array.from(e[1].integerData))), ep = (i) => i.attributes.getInts("axes"), ug = (i) => {
    if (!i || i.length !== 1) throw new Error("Unsqueeze requires 1 input.");
    if (i[0].type === "string") throw new Error("invalid input tensor types.");
  }, lg = (i) => {
    if (!i || i.length !== 2) throw new Error("Unsqueeze requires 2 inputs.");
    if (i[1].type !== "int32") throw new Error("Invalid input type.");
  };
});
var np, op = O(() => {
  dl();
  Sl();
  El();
  Fl();
  $n();
  xf();
  Of();
  Pf();
  Lf();
  Ff();
  Rf();
  Vf();
  qf();
  kn();
  Jf();
  lc();
  gc();
  xc();
  Oc();
  Ac();
  $c();
  Vc();
  qc();
  Kc();
  Yc();
  Qc();
  Fn();
  bi();
  rp();
  Pi();
  np = [["Abs", "", "6+", Cl], ["Acos", "", "7+", Nl], ["Add", "", "7+", hl], ["And", "", "7+", ml], ["Asin", "", "7+", Rl], ["Atan", "", "7+", Gl], ["AveragePool", "", "7+", Zf, Qf], ["BatchNormalization", "", "7+", cl, pl], ["Cast", "", "6+", Al, Pl], ["Ceil", "", "6+", Vl], ["Clip", "", "6-10", hi, Ml], ["Clip", "", "11+", Ul], ["Concat", "", "4+", $l, Bl], ["Conv", "", "1+", vi, Ii], ["ConvTranspose", "", "1+", gf, yf], ["Cos", "", "7+", zl], ["Div", "", "7+", bl], ["Dropout", "", "7+", mi], ["DepthToSpace", "", "1+", If, _f], ["Equal", "", "7+", gl], ["Elu", "", "6+", Wl, Hl], ["Exp", "", "6+", ql], ["Flatten", "", "1+", Sf, Af], ["Floor", "", "6+", jl], ["FusedConv", "com.microsoft", "1+", vi, Ii], ["Gather", "", "1+", Ef, Df], ["Gemm", "", "7-10", _i, kf], ["Gemm", "", "11+", _i, Bf], ["GlobalAveragePool", "", "1+", ec, rc], ["GlobalMaxPool", "", "1+", sc], ["Greater", "", "7+", yl], ["Identity", "", "1+", mi], ["ImageScaler", "", "1+", Cf, Nf], ["InstanceNormalization", "", "6+", Mf, Uf], ["LeakyRelu", "", "6+", Xl, Kl], ["Less", "", "7+", xl], ["LRN", "", "1+", zf, Wf], ["Log", "", "6+", Jl], ["MatMul", "", "1+", ff, cf], ["MaxPool", "", "1+", nc, oc], ["Mul", "", "7+", Tl], ["Neg", "", "6+", Yl], ["Not", "", "1+", Zl], ["Or", "", "7+", wl], ["Pad", "", "2-10", Oi, jf], ["Pad", "", "11+", Xf, Kf], ["Pow", "", "7+", vl], ["PRelu", "", "7+", Il], ["ReduceLogSum", "", "1+", mc, Pe], ["ReduceMax", "", "1+", pc, Pe], ["ReduceMean", "", "1+", cc, Pe], ["ReduceMin", "", "1+", dc, Pe], ["ReduceProd", "", "1+", hc, Pe], ["ReduceSum", "", "1-12", fc, Pe], ["ReduceSumSquare", "", "1+", bc, Pe], ["Relu", "", "6+", Ql], ["Reshape", "", "5+", yc], ["Resize", "", "10", Di, Ic], ["Resize", "", "11+", Di, _c], ["Shape", "", "1+", Sc], ["Sigmoid", "", "6+", tf], ["Sin", "", "7+", ef], ["Slice", "", "10+", Lc], ["Slice", "", "1-9", Pc, Ec], ["Softmax", "", "1-12", Cc, Nc], ["Softmax", "", "13+", Gc, Rc], ["Split", "", "2-12", Wc, Hc], ["Sqrt", "", "6+", rf], ["Squeeze", "", "1-12", $i, Xc], ["Squeeze", "", "13+", jc], ["Sub", "", "7+", _l], ["Sum", "", "6+", Jc], ["Tan", "", "7+", nf], ["Tanh", "", "6+", of], ["Tile", "", "6+", Zc], ["Transpose", "", "1+", qe, wf], ["Upsample", "", "7-8", Si, wc], ["Upsample", "", "9", Si, vc], ["Unsqueeze", "", "1-12", ki, ep], ["Unsqueeze", "", "13+", tp], ["Xor", "", "7+", Ol]];
});
function ap(i) {
  let e = {}, o;
  for (; (o = ip.exec(i)) !== null; ) {
    let t = o[3].split(",").map((r) => {
      let n = r.trim().split(" ");
      return n && n.length === 2 ? { type: n[0], name: n[1] } : null;
    }).filter((r) => r !== null);
    e[o[2]] = { params: t, body: o[4] };
  }
  for (let t in e) {
    let r = fg.replace("__FUNC__", t), n = new RegExp(r, "gm");
    for (; (o = n.exec(i)) !== null; ) {
      let s = o[1], a = o[2], u = o[3].split(","), l = s ? `${s} ${a};` : "", f = e[t].body, p2 = "";
      e[t].params.forEach((y, w) => {
        y && (p2 += `${y.type} ${y.name} = ${u[w]};
`);
      }), f = `${p2}
 ${f}`, f = f.replace("return", `${a} = `);
      let d = `
      ${l}
      {
        ${f}
      }
      `;
      i = i.replace(o[0], d);
    }
  }
  return i = i.replace(ip, ""), i;
}
var ip, fg, sp = O(() => {
  ip = /@inline[\s\n\r]+(\w+)[\s\n\r]+([0-9a-zA-Z_]+)\s*\(([^)]*)\)\s*{(([^}]|[\n\r])*)}/gm, fg = "(\\w+)?\\s+([_0-9a-zA-Z]+)\\s+=\\s+__FUNC__\\((.*)\\)\\s*;";
});
function hr(i, e) {
  let o = [], t = [];
  for (let a = 0; a < i.length; ++a) {
    i[a] !== 1 && (o.push(i[a]), t.push(a));
  }
  return { newShape: o, keptDims: t };
}
function dg(i) {
  if (i.length === 0) return 1;
  let e = i[0];
  for (let o = 1; o < i.length; o++) e *= i[o];
  return e;
}
function up(i) {
  let e = Math.ceil(Math.sqrt(i));
  return [e, Math.ceil(i / e)];
}
var Gn, Bi = O(() => {
  Mt();
  Y();
  Gn = class {
    constructor(e) {
      this.maxTextureSize = e;
    }
    computeTextureWH(e, o) {
      let t = this.computeTexture(e, o);
      return o && o.isPacked && (t[0] /= 2, t[1] /= 2), o && o.reverseWH ? [t[1], t[0]] : t;
    }
    computeTexture(e, o) {
      let t = o && o.isPacked;
      if (e.length === 0) return t ? [2, 2] : [1, 1];
      let r = this.maxTextureSize;
      if (o && o.breakAxis !== void 0) {
        let a = o.breakAxis >= e.length ? 1 : e.slice(o.breakAxis).reduce((l, f) => l * f), u = o.breakAxis <= 0 ? 1 : e.slice(0, o.breakAxis).reduce((l, f) => l * f);
        if (a > r || u > r) tt.verbose("TextureLayout", `Given width/height preferences were unattainable: shape:${e}, breakAxis:${o.breakAxis}`);
        else return [a, u];
      }
      let n = e.slice(0);
      t && (r = r * 2, n = n.map((a, u) => u >= n.length - 2 ? n[u] % 2 === 0 ? n[u] : n[u] + 1 : n[u]), n.length === 1 && (n = [2, n[0]])), n.length !== 2 && (n = hr(n).newShape);
      let s = dg(n);
      return n.length <= 1 && s <= r ? [1, s] : n.length === 2 && n[0] <= r && n[1] <= r ? n : n.length === 3 && n[0] * n[1] <= r && n[2] <= r ? [n[0] * n[1], n[2]] : n.length === 3 && n[0] <= r && n[1] * n[2] <= r ? [n[0], n[1] * n[2]] : n.length === 4 && n[0] * n[1] * n[2] <= r && n[3] <= r ? [n[0] * n[1] * n[2], n[3]] : n.length === 4 && n[0] <= r && n[1] * n[2] * n[3] <= r ? [n[0], n[1] * n[2] * n[3]] : t ? up(s / 4).map((a) => a * 2) : up(s);
    }
  };
});
var Mn, lp = O(() => {
  Y();
  be();
  st();
  Bi();
  ue();
  Mn = class extends Wt {
    constructor(o) {
      super(o);
    }
    getFunctions() {
      return { ...this.offsetToCoords(), ...this.coordsToOffset(), ...this.toVec(), ...this.valueFrom(), ...this.getCommonUtilFuncs(), ...this.getInputsSamplingSnippets(), ...this.getOutputSamplingSnippet() };
    }
    getCustomTypes() {
      return {};
    }
    offsetToCoords() {
      let o = "offsetToCoords";
      return { offsetToCoords: new k(`
      vec2 ${o}(int offset, int width, int height) {
        int t = offset / width;
        int s = offset - t*width;
        vec2 coords = (vec2(s,t) + vec2(0.5,0.5)) / vec2(width, height);
        return coords;
      }
      `) };
    }
    coordsToOffset() {
      let o = "coordsToOffset";
      return { coordsToOffset: new k(`
      int ${o}(vec2 coords, int width, int height) {
        float s = coords.s * float(width);
        float t = coords.t * float(height);
        int offset = int(t) * width + int(s);
        return offset;
      }
      `) };
    }
    getOutputSamplingSnippet() {
      let o = this.context.outputTextureLayout;
      return o.isPacked ? this.getPackedOutputSamplingSnippet(o) : this.getUnpackedOutputSamplingSnippet(o);
    }
    getPackedOutputSamplingSnippet(o) {
      let t = o.unpackedShape, r = [o.width, o.height], n = {}, s = "getOutputCoords";
      switch (t.length) {
        case 0:
          n[s] = this.getOutputScalarCoords();
          break;
        case 1:
          n[s] = this.getOutputPacked1DCoords(t, r);
          break;
        case 2:
          n[s] = this.getOutputPacked2DCoords(t, r);
          break;
        case 3:
          n[s] = this.getOutputPacked3DCoords(t, r);
          break;
        default:
          n[s] = this.getOutputPackedNDCoords(t, r);
      }
      let u = `
      void setOutput(vec4 val) {
        ${G(this.context.glContext.version).output} = val;
      }
    `, l = "floatTextureSetRGBA";
      return n[l] = new k(u), n;
    }
    getUnpackedOutputSamplingSnippet(o) {
      let t = o.unpackedShape, r = [o.width, o.height], n = {}, s = "getOutputCoords";
      switch (t.length) {
        case 0:
          n[s] = this.getOutputScalarCoords();
          break;
        case 1:
          n[s] = this.getOutputUnpacked1DCoords(t, r);
          break;
        case 2:
          n[s] = this.getOutputUnpacked2DCoords(t, r);
          break;
        case 3:
          n[s] = this.getOutputUnpacked3DCoords(t, r);
          break;
        case 4:
          n[s] = this.getOutputUnpacked4DCoords(t, r);
          break;
        case 5:
          n[s] = this.getOutputUnpacked5DCoords(t, r);
          break;
        case 6:
          n[s] = this.getOutputUnpacked6DCoords(t, r);
          break;
        default:
          throw new Error(`Unsupported output dimensionality: ${t.length}`);
      }
      let u = `
        void setOutput(float val) {
          ${G(this.context.glContext.version).output} = vec4(val, 0, 0, 0);
        }
    `, l = "floatTextureSetR";
      return n[l] = new k(u), n;
    }
    getOutputScalarCoords() {
      return new k(`
      int getOutputCoords() {
        return 0;
      }
    `);
    }
    getOutputPacked1DCoords(o, t) {
      let r = t, n = "";
      return r[0] === 1 ? (n = `
          int getOutputCoords() {
            return 2 * int(TexCoords.y * ${r[1]}.0);
          }
        `, new k(n)) : r[1] === 1 ? (n = `
          int getOutputCoords() {
            return 2 * int(TexCoords.x * ${r[0]}.0);
          }
        `, new k(n)) : (n = `
        int getOutputCoords() {
          ivec2 resTexRC = ivec2(TexCoords.xy *
                                 vec2(${r[0]}, ${r[1]}));
          return 2 * (resTexRC.y * ${r[0]} + resTexRC.x);
        }
      `, new k(n));
    }
    getOutputPacked2DCoords(o, t) {
      let r = "";
      if (Ge.arraysEqual(o, t)) return r = `
        ivec2 getOutputCoords() {
          return 2 * ivec2(TexCoords.xy * vec2(${t[0]}, ${t[1]}));
        }
      `, new k(r);
      let n = t, s = Math.ceil(o[1] / 2);
      return r = `
        ivec2 getOutputCoords() {
          ivec2 resTexRC = ivec2(TexCoords.xy *
                                vec2(${n[0]}, ${n[1]}));

          int index = resTexRC.y * ${n[0]} + resTexRC.x;

          // reverse r and c order for packed texture
          int r = imod(index, ${s}) * 2;
          int c = 2 * (index / ${s});

          return ivec2(r, c);
        }
      `, new k(r);
    }
    getOutputPacked3DCoords(o, t) {
      let r = [t[0], t[1]], n = Math.ceil(o[2] / 2), s = n * Math.ceil(o[1] / 2), a = `
        ivec3 getOutputCoords() {
          ivec2 resTexRC = ivec2(TexCoords.xy *
                                vec2(${r[0]}, ${r[1]}));
          int index = resTexRC.y * ${r[0]} + resTexRC.x;

          int b = index / ${s};
          index -= b * ${s};

          // reverse r and c order for packed texture
          int r = imod(index, ${n}) * 2;
          int c = 2 * (index / ${n});

          return ivec3(b, r, c);
        }
      `;
      return new k(a);
    }
    getOutputPackedNDCoords(o, t) {
      let r = [t[0], t[1]], n = Math.ceil(o[o.length - 1] / 2), s = n * Math.ceil(o[o.length - 2] / 2), a = s, u = "", l = "b, r, c";
      for (let p2 = 2; p2 < o.length - 1; p2++) a *= o[o.length - p2 - 1], u = `
      int b${p2} = index / ${a};
      index -= b${p2} * ${a};
    ` + u, l = `b${p2}, ` + l;
      let f = `
      ivec${o.length} getOutputCoords() {
        ivec2 resTexRC = ivec2(TexCoords.xy *
                              vec2(${r[0]}, ${r[1]}));
        int index = resTexRC.y * ${r[0]} + resTexRC.x;

        ${u}

        int b = index / ${s};
        index -= b * ${s};

        // reverse r and c order for packed texture
        int r = imod(index, ${n}) * 2;
        int c = 2 * (index / ${n});

        return ivec${o.length}(${l});
      }
    `;
      return new k(f);
    }
    getOutputUnpacked1DCoords(o, t) {
      let r = `
        int getOutputCoords() {
          ivec2 resTexRC = ivec2(TexCoords.xy *
                                vec2(${t[0]}, ${t[1]}));
          return resTexRC.y * ${t[0]} + resTexRC.x;
        }
      `;
      return new k(r);
    }
    getOutputUnpacked2DCoords(o, t) {
      let r = `
        ivec2 getOutputCoords() {
          ivec2 resTexRC = ivec2(TexCoords.xy *
                                vec2(${t[0]}, ${t[1]}));
          int index = resTexRC.y * ${t[0]} + resTexRC.x;
          int r = index / ${o[1]};
          int c = index - r * ${o[1]};
          return ivec2(r, c);
        }
      `;
      return new k(r);
    }
    getOutputUnpacked3DCoords(o, t) {
      let r = "", n = o.length, s = null;
      n < 2 && (s = []), s = new Array(n - 1), s[n - 2] = o[n - 1];
      for (let l = n - 3; l >= 0; --l) s[l] = s[l + 1] * o[l + 1];
      let a = ["r", "c", "d"], u = s.map((l, f) => {
        let p2 = `int ${a[f]} = index / ${l}`, d = f === s.length - 1 ? `int ${a[f + 1]} = index - ${a[f]} * ${l}` : `index -= ${a[f]} * ${l}`;
        return `${p2}; ${d};`;
      }).join("");
      return r = `
        ivec3 getOutputCoords() {
          ivec2 resTexRC = ivec2(TexCoords.xy *
                                vec2(${t[0]}, ${t[1]}));
          int index = resTexRC.y * ${t[0]} + resTexRC.x;
          ${u}
          return ivec3(r, c, d);
        }
      `, new k(r);
    }
    getOutputUnpacked4DCoords(o, t) {
      let r = "", n = o.length, s = null;
      n < 2 && (s = []), s = new Array(n - 1), s[n - 2] = o[n - 1];
      for (let l = n - 3; l >= 0; --l) s[l] = s[l + 1] * o[l + 1];
      let a = ["r", "c", "d", "d2"], u = s.map((l, f) => {
        let p2 = `int ${a[f]} = index / ${l}`, d = f === s.length - 1 ? `int ${a[f + 1]} = index - ${a[f]} * ${l}` : `index -= ${a[f]} * ${l}`;
        return `${p2}; ${d};`;
      }).join("");
      return r = `
      ivec4 getOutputCoords() {
          ivec2 resTexRC = ivec2(TexCoords.xy *
                                vec2(${t[0]}, ${t[1]}));
          int index = resTexRC.y * ${t[0]} + resTexRC.x;
          ${u}
          return ivec4(r, c, d, d2);
        }
      `, new k(r);
    }
    getOutputUnpacked5DCoords(o, t) {
      let r = "", n = o.length, s = null;
      n < 2 && (s = []), s = new Array(n - 1), s[n - 2] = o[n - 1];
      for (let l = n - 3; l >= 0; --l) s[l] = s[l + 1] * o[l + 1];
      let a = ["r", "c", "d", "d2", "d3"], u = s.map((l, f) => {
        let p2 = `int ${a[f]} = index / ${l}`, d = f === s.length - 1 ? `int ${a[f + 1]} = index - ${a[f]} * ${l}` : `index -= ${a[f]} * ${l}`;
        return `${p2}; ${d};`;
      }).join("");
      return r = `
      ivec5 getOutputCoords() {
          ivec2 resTexRC = ivec2(TexCoords.xy *
                                vec2(${t[0]}, ${t[1]}));
          int index = resTexRC.y * ${t[0]} + resTexRC.x;
          ${u}
          return ivec5(r, c, d, d2, d3);
        }
      `, new k(r);
    }
    getOutputUnpacked6DCoords(o, t) {
      let r = "", n = o.length, s = null;
      n < 2 && (s = []), s = new Array(n - 1), s[n - 2] = o[n - 1];
      for (let l = n - 3; l >= 0; --l) s[l] = s[l + 1] * o[l + 1];
      let a = ["r", "c", "d", "d2", "d3", "d4"], u = s.map((l, f) => {
        let p2 = `int ${a[f]} = index / ${l}`, d = f === s.length - 1 ? `int ${a[f + 1]} = index - ${a[f]} * ${l}` : `index -= ${a[f]} * ${l}`;
        return `${p2}; ${d};`;
      }).join("");
      return r = `
     ivec6 getOutputCoords() {
         ivec2 resTexRC = ivec2(TexCoords.xy *
                               vec2(${t[0]}, ${t[1]}));
         int index = resTexRC.y * ${t[0]} + resTexRC.x;
         ${u}
         return ivec6(r, c, d, d2, d3, d4);
       }
     `, new k(r);
    }
    getCommonUtilFuncs() {
      let o = {}, t = "uvFromFlat";
      o[t] = new k(`
    vec2 uvFromFlat(int texNumR, int texNumC, int index) {
      int texC = index / texNumR;
      int texR = index - texC * texNumR;
      // TODO: swap texR, texC order in following function so row is corresponding to u and column is corresponding to
      //       v.
      return (vec2(texR, texC) + halfCR) / vec2(texNumR, texNumC);
    }
    `), t = "packedUVfrom1D", o[t] = new k(`
      vec2 packedUVfrom1D(int texNumR, int texNumC, int index) {
        int texelIndex = index / 2;
        int texR = texelIndex / texNumC;
        int texC = texelIndex - texR * texNumC;
        return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);
      }
      `), t = "packedUVfrom2D", o[t] = new k(`
      vec2 packedUVfrom2D(int texNumR, int texNumC, int texelsInLogicalRow, int row, int col) {
        int texelIndex = (row / 2) * texelsInLogicalRow + (col / 2);
        int texR = texelIndex / texNumC;
        int texC = texelIndex - texR * texNumC;
        return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);
      }
      `), t = "packedUVfrom3D", o[t] = new k(`
      vec2 packedUVfrom3D(int texNumR, int texNumC,
          int texelsInBatch, int texelsInLogicalRow, int b,
          int row, int col) {
        int index = b * texelsInBatch + (row / 2) * texelsInLogicalRow + (col / 2);
        int texR = index / texNumC;
        int texC = index - texR * texNumC;
        return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);
      }
      `), t = "sampleTexture";
      let r = G(this.context.glContext.version);
      return o[t] = new k(`
        float sampleTexture(sampler2D textureSampler, vec2 uv) {
            return ${r.texture2D}(textureSampler, uv).r;
        }`), o;
    }
    getInputsSamplingSnippets() {
      let o = {}, t = this.context.outputTextureLayout;
      return this.context.programInfo.inputNames.forEach((r, n) => {
        let s = this.context.inputTextureLayouts[n], a = On(r);
        s.isPacked ? o[a] = this.getPackedSamplerFromInput(a, r, s) : o[a] = this.getUnpackedSamplerFromInput(a, r, s);
        let u = Ku(r);
        s.unpackedShape.length <= t.unpackedShape.length && (s.isPacked ? o[u] = this.getPackedSamplerAtOutputCoords(u, s, t, r) : o[u] = this.getUnpackedSamplerAtOutputCoords(u, s, t, r));
      }), o;
    }
    getPackedSamplerAtOutputCoords(o, t, r, n) {
      let s = t.unpackedShape, a = r.unpackedShape, l = On(n), f = s.length, p2 = a.length, d = $t.getBroadcastDims(s, a), y = kt(p2), w = p2 - f, v, S = ee();
      f === 0 ? v = "" : p2 < 2 && d.length >= 1 ? v = "coords = 0;" : v = d.map((Et) => `coords.${S[Et + w]} = 0;`).join(`
`);
      let L = "";
      p2 < 2 && f > 0 ? L = "coords" : L = s.map((Et, It) => `coords.${S[It + w]}`).join(", ");
      let A = "return outputValue;", M = B.size(s) === 1, ut = B.size(a) === 1;
      if (f === 1 && !M && !ut) A = `
        return vec4(outputValue.xy, outputValue.xy);
      `;
      else if (M && !ut) p2 === 1 ? A = `
          return vec4(outputValue.x, outputValue.x, 0., 0.);
        ` : A = `
          return vec4(outputValue.x);
        `;
      else if (d.length) {
        let Et = f - 2, It = f - 1;
        d.indexOf(Et) > -1 && d.indexOf(It) > -1 ? A = "return vec4(outputValue.x);" : d.indexOf(Et) > -1 ? A = "return vec4(outputValue.x, outputValue.y, outputValue.x, outputValue.y);" : d.indexOf(It) > -1 && (A = "return vec4(outputValue.xx, outputValue.zz);");
      }
      let xt = `
        int lastDim = coords.${S[p2 - 1]};
        coords.${S[p2 - 1]} = coords.${S[p2 - 2]};
        coords.${S[p2 - 2]} = lastDim;
      `, et = `
      vec4 ${o}() {
        ${y} coords = getOutputCoords();
        ${xt}
        ${v}
        vec4 outputValue = ${l}(${L});
        ${A}
      }
    `;
      return new k(et, ["coordinates.getOutputCoords"]);
    }
    getUnpackedSamplerAtOutputCoords(o, t, r, n) {
      let s = [r.width, r.height], a = [t.width, t.height], u = t.unpackedShape.length, l = r.unpackedShape.length, f = t.unpackedShape, p2 = r.unpackedShape, d = On(n);
      if (u === l && Ge.arraysEqual(a, s)) {
        let M = `
          float ${o}() {
            return sampleTexture(${n}, TexCoords);
          }
        `;
        return new k(M, ["coordinates.sampleTexture"]);
      }
      let y = kt(l), w = $t.getBroadcastDims(f, p2), v = l - u, S, L = ee();
      u === 0 ? S = "" : l < 2 && w.length >= 1 ? S = "coords = 0;" : S = w.map((M) => `coords.${L[M + v]} = 0;`).join(`
`);
      let A = "";
      l < 2 && u > 0 ? A = "coords" : A = t.unpackedShape.map((M, V) => `coords.${L[V + v]}`).join(", ");
      let P = `
        float ${o}() {
          ${y} coords = getOutputCoords();
          ${S}
          return ${d}(${A});
        }
      `;
      return new k(P, ["coordinates.getOutputCoords"]);
    }
    getPackedSamplerFromInput(o, t, r) {
      switch (r.unpackedShape.length) {
        case 0:
          return this.getPackedSamplerScalar(o, t);
        case 1:
          return this.getPackedSampler1D(o, t, r);
        case 2:
          return this.getPackedSampler2D(o, t, r);
        case 3:
          return this.getPackedSampler3D(o, t, r);
        default:
          return this.getPackedSamplerND(o, t, r);
      }
    }
    getUnpackedSamplerFromInput(o, t, r) {
      let n = r.unpackedShape;
      switch (n.length) {
        case 0:
          return this.getUnpackedSamplerScalar(o, t, r);
        case 1:
          return this.getUnpackedSampler1D(o, t, r);
        case 2:
          return this.getUnpackedSampler2D(o, t, r);
        case 3:
          return this.getUnpackedSampler3D(o, t, r);
        case 4:
          return this.getUnpackedSampler4D(o, t, r);
        case 5:
          return this.getUnpackedSampler5D(o, t, r);
        case 6:
          return this.getUnpackedSampler6D(o, t, r);
        default:
          throw new Error(`Unsupported dimension ${n.length}-D`);
      }
    }
    getPackedSamplerScalar(o, t) {
      let r = G(this.context.glContext.version), n = `
          vec4 ${o}() {
            return ${r.texture2D}(${t}, halfCR);
          }
        `;
      return new k(n);
    }
    getPackedSampler1D(o, t, r) {
      let n = [r.width, r.height], s = [n[1], n[0]], a = G(this.context.glContext.version), l = `vec4 ${o}(int index) {
      vec2 uv = packedUVfrom1D(
      ${s[0]}, ${s[1]}, index);
      return ${a.texture2D}(${t}, uv);
    }`;
      return new k(l, ["coordinates.packedUVfrom1D"]);
    }
    getPackedSampler2D(o, t, r) {
      let n = r.unpackedShape, s = [r.width, r.height], a = G(this.context.glContext.version), u = s[0], l = s[1];
      if (s != null && Ge.arraysEqual(n, s)) {
        let w = `vec4 ${o}(int row, int col) {
        vec2 uv = (vec2(col, row) + halfCR) / vec2(${l}.0, ${u}.0);
        return ${a.texture2D}(${t}, uv);
      }`;
        return new k(w);
      }
      let f = s, p2 = Math.ceil(n[1] / 2), y = `vec4 ${o}(int row, int col) {
      vec2 uv = packedUVfrom2D(${f[1]}, ${f[0]}, ${p2}, row, col);
      return ${a.texture2D}(${t}, uv);
    }`;
      return new k(y, ["coordinates.packedUVfrom2D"]);
    }
    getPackedSampler3D(o, t, r) {
      let n = r.unpackedShape, s = [r.width, r.height], a = [s[0], s[1]], u = G(this.context.glContext.version);
      if (n[0] === 1) {
        let v = n.slice(1), S = [1, 2], L = lr(n, v), A = ["b", "row", "col"], P = JSON.parse(JSON.stringify(r));
        P.unpackedShape = L;
        let M = this.getPackedSamplerFromInput(o, t, P), ut = `${M.routineBody}
      vec4 ${o}(int b, int row, int col) {
        return ${o}(${fr(A, S)});
      } `;
        return new k(ut, M.dependencies);
      }
      let l = a[0], f = a[1], p2 = Math.ceil(n[2] / 2), d = p2 * Math.ceil(n[1] / 2), w = `vec4 ${o}(int b, int row, int col) {
      vec2 uv = packedUVfrom3D(
        ${f}, ${l}, ${d}, ${p2}, b, row, col);
      return ${u.texture2D}(${t}, uv);}`;
      return new k(w, ["coordinates.packedUVfrom3D"]);
    }
    getPackedSamplerND(o, t, r) {
      let n = r.unpackedShape, s = n.length, a = [r.width, r.height], u = G(this.context.glContext.version), l = [a[0], a[1]], f = l[1], p2 = l[0], d = Math.ceil(n[s - 1] / 2), y = d * Math.ceil(n[s - 2] / 2), w = "int b, int row, int col", v = `b * ${y} + (row / 2) * ${d} + (col / 2)`;
      for (let A = 2; A < s - 1; A++) w = `int b${A}, ` + w, y *= n[s - A - 1], v = `b${A} * ${y} + ` + v;
      let L = `vec4 ${o}(${w}) {
      int index = ${v};
      int texR = index / ${p2};
      int texC = index - texR * ${p2};
      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${p2}, ${f});
      return ${u.texture2D}(${t}, uv);
    }`;
      return new k(L);
    }
    getUnpackedSamplerScalar(o, t, r) {
      let [n, s] = [r.width, r.height];
      if (n === 1 && s === 1) {
        let u = `
          float ${o}() {
            return sampleTexture(${t}, halfCR);
          }
        `;
        return new k(u, ["coordinates.sampleTexture"]);
      }
      let a = `
        float ${o}() {
          int offset_${t} = coordsToOffset(TexCoords, ${n}, ${s});
          vec2 uv = uvFromFlat(${n}, ${s}, offset_${t});
          return sampleTexture(${t}, uv);
        }
      `;
      return new k(a, ["coordinates.uvFromFlat", "coordinates.sampleTexture", "coordinates.coordsToOffset"]);
    }
    getUnpackedSampler1D(o, t, r) {
      let n = r.width, s = r.height;
      if (s === 1 && n === 1) {
        let u = `
        float ${o}(int index) {
          return sampleTexture(${t}, halfCR);
        }
      `;
        return new k(u, ["coordinates.sampleTexture"]);
      }
      if (s === 1) {
        let u = `
          float ${o}(int index) {
            vec2 uv = vec2((float(index) + 0.5) / ${n}.0, 0.5);
            return sampleTexture(${t}, uv);
          }
        `;
        return new k(u, ["coordinates.sampleTexture"]);
      }
      if (n === 1) {
        let u = `
          float ${o}(int index) {
            vec2 uv = vec2(0.5, (float(index) + 0.5) / ${s}.0);
            return sampleTexture(${t}, uv);
          }
        `;
        return new k(u, ["coordinates.sampleTexture"]);
      }
      let a = `
        float ${o}(int index) {
          vec2 uv = uvFromFlat(${n}, ${s}, index);
          return sampleTexture(${t}, uv);
        }
      `;
      return new k(a, ["coordinates.uvFromFlat", "coordinates.sampleTexture"]);
    }
    getUnpackedSampler2D(o, t, r) {
      let n = r.unpackedShape, s = [r.height, r.width];
      if (s != null && Ge.arraysEqual(n, s)) {
        let y = s[1], w = s[0], v = `
          float ${o}(int row, int col) {
            vec2 uv = (vec2(row, col) + halfCR) / vec2(${y}.0, ${w}.0);
            return sampleTexture(${t}, uv);
          }
        `;
        return new k(v, ["coordinates.sampleTexture"]);
      }
      let { newShape: a, keptDims: u } = hr(n), l = a;
      if (l.length < n.length) {
        let y = lr(n, l), w = JSON.parse(JSON.stringify(r));
        w.unpackedShape = y;
        let v = ["col", "row"], S = `
          ${this.getUnpackedSamplerFromInput(o, t, w).routineBody}
          float ${o}(int row, int col) {
            return ${o}(${fr(v, u)});
          }
        `;
        return new k(S, ["coordinates.sampleTexture"]);
      }
      let f = s[1], p2 = s[0];
      if (p2 === 1) {
        let y = `
          float ${o}(int row, int col) {
            int offset_${t} = coordsToOffset(TexCoords, ${f}, ${p2});
            float index = dot(vec3(row, col, offset_${t}), vec3(${n[1]}, 1, 1));
            vec2 uv = vec2(0.5, (index + 0.5) / ${f}.0);
            return sampleTexture(${t}, uv);
          }
        `;
        return new k(y, ["coordinates.sampleTexture", "coordinates.coordsToOffset"]);
      }
      if (f === 1) {
        let y = `
          float ${o}(int row, int col) {
            int offset_${t} = coordsToOffset(TexCoords, ${f}, ${p2});
            float index = dot(vec3(row, col, offset_${t}), vec3(${n[1]}, 1, 1));
            vec2 uv = vec2((index + 0.5) / ${p2}.0, 0.5);
            return sampleTexture(${t}, uv);
          }
        `;
        return new k(y, ["coordinates.sampleTexture", "coordinates.coordsToOffset"]);
      }
      let d = `
        float ${o}(int row, int col) {
          int index = col * ${n[1]} + row;
          vec2 uv = uvFromFlat(${f}, ${p2}, index);
          return sampleTexture(${t}, uv);
        }
      `;
      return new k(d, ["coordinates.uvFromFlat", "coordinates.sampleTexture", "coordinates.coordsToOffset"]);
    }
    getUnpackedSampler3D(o, t, r) {
      let n = r.unpackedShape, s = n[1] * n[2], a = n[2], { newShape: u, keptDims: l } = hr(n), f = u;
      if (f.length < n.length) {
        let w = lr(n, f), v = ["batch", "col", "row"], S = JSON.parse(JSON.stringify(r));
        S.unpackedShape = w;
        let L = this.getUnpackedSamplerFromInput(o, t, S), A = l.reverse(), P = `
          ${L.routineBody}
          float ${o}(int batch, int row, int col) {
            return ${o}(${fr(v, A)});
          }
        `;
        return new k(P, L.dependencies);
      }
      let p2 = r.width, d = r.height, y = `
          float ${o}(int depth, int row, int col) {
            // Explicitly use integer operations as dot() only works on floats.
            int index = depth * ${s} + col * ${a} + row;
            vec2 uv = uvFromFlat(${p2}, ${d}, index);
            return sampleTexture(${t}, uv);
          }
      `;
      return new k(y, ["coordinates.uvFromFlat", "coordinates.sampleTexture", "coordinates.coordsToOffset"]);
    }
    getUnpackedSampler4D(o, t, r) {
      let n = r.unpackedShape, s = n[3], a = n[2] * s, u = n[1] * a, l = r.width, f = r.height, p2 = `
        float ${o}(int row, int col, int depth, int depth2) {
          int index = row * ${u} + col * ${a} +
              depth2 * ${s} + depth;
          vec2 uv = uvFromFlat(${l}, ${f}, index);
          return sampleTexture(${t}, uv);
        }
      `;
      return new k(p2, ["coordinates.uvFromFlat", "coordinates.sampleTexture"]);
    }
    getUnpackedSampler5D(o, t, r) {
      let n = r.unpackedShape, s = n[4], a = n[3] * s, u = n[2] * a, l = n[1] * u, { newShape: f, keptDims: p2 } = hr(n);
      if (f.length < n.length) {
        let v = lr(n, f), S = ["row", "col", "depth", "depth2", "depth3"], L = JSON.parse(JSON.stringify(r));
        L.unpackedShape = v;
        let A = `
          ${this.getUnpackedSamplerFromInput(o, t, L).routineBody}
          float ${o}(int row, int col, int depth, int depth2, int depth3) {
            return ${o}(${fr(S, p2)});
          }
        `;
        return new k(A, ["coordinates.sampleTexture", "coordinates.uvFromFlat"]);
      }
      let d = r.width, y = r.height, w = `
        float ${o}(int row, int col, int depth, int depth2, int depth3) {
          int index = row * ${l} + col * ${u} + depth * ${a} +
          depth3 * ${s} + depth2;
          vec2 uv = uvFromFlat(${d}, ${y}, index);
          return sampleTexture(${t}, uv);
        }
      `;
      return new k(w, ["coordinates.sampleTexture", "coordinates.uvFromFlat"]);
    }
    getUnpackedSampler6D(o, t, r) {
      let n = r.unpackedShape, s = n[5], a = n[4] * s, u = n[3] * a, l = n[2] * u, f = n[1] * l, { newShape: p2, keptDims: d } = hr(n);
      if (p2.length < n.length) {
        let S = lr(n, p2), L = ["row", "col", "depth", "depth2", "depth3", "depth4"], A = JSON.parse(JSON.stringify(r));
        A.unpackedShape = S;
        let P = `
            ${this.getUnpackedSamplerFromInput(o, t, A).routineBody}
            float ${o}(int row, int col, int depth,
              int depth2, int depth3, int depth4) {
              return ${o}(${fr(L, d)});
            }
          `;
        return new k(P, ["coordinates.sampleTexture", "coordinates.uvFromFlat"]);
      }
      let y = r.width, w = r.height, v = `
          float ${o}(int row, int col, int depth,
            int depth2, int depth3, int depth4) {
            int index = row * ${f} + col * ${l} + depth * ${u} +
            depth2 * ${a} + depth3 * ${s} + depth4;
            vec2 uv = uvFromFlat(${y}, ${w}, index);
            return sampleTexture(${t}, uv);
          }
        `;
      return new k(v, ["coordinates.uvFromFlat", "coordinates.sampleTexture", "coordinates.coordsToOffset"]);
    }
    toVec() {
      let o = this.context.outputTextureLayout, t = o.shape.length, r = o.strides, n = o.width, s = o.height, a = [];
      for (let l = 0; l < t - 1; ++l) a.push(`
        c[${l}] = offset / ${r[l]};`), a.push(`
        offset -= c[${l}] * ${r[l]};`);
      a.push(`
        c[${t - 1}] = offset;`);
      let u = `
      void toVec(vec2 texCoords, out int c[${t}]) {
        int offset = coordsToOffset(texCoords, ${n}, ${s});
        ${a.join("")}
      }
      void toVec(int offset, out int c[${t}]) {
        ${a.join("")}
      }
    `;
      return { toVec: new k(u, ["coordinates.coordsToOffset"]) };
    }
    valueFrom() {
      let o = {};
      return this.context.programInfo.inputNames.forEach((t, r) => {
        let n = this.context.inputTextureLayouts[r], a = (n.unpackedShape.length > 0 ? n.unpackedShape : n.shape).length, u = `_${t}`;
        o[u] = new k(this.getValueFromSingle(t, a, n.width, n.height, false), [`shapeUtils.indicesToOffset${u}`, "coordinates.offsetToCoords", "fragcolor.getColorAsFloat"]), u = u + "_T", o[u] = new k(this.getValueFromSingle(t, a, n.width, n.height, true), [`shapeUtils.indicesToOffset${u}`, "coordinates.offsetToCoords", "fragcolor.getColorAsFloat"]);
      }), o;
    }
    getValueFromSingle(o, t, r, n, s) {
      let a = `_${o}`;
      s && (a = a + "_T");
      let u = G(this.context.glContext.version);
      return `
        float ${a}(int m[${t}]) {
          int offset = indicesToOffset${a}(m);
          vec2 coords = offsetToCoords(offset, ${r}, ${n});
          float value = getColorAsFloat(${u.texture2D}(${o}, coords));
          return value;
        }
        `;
    }
    getPackedValueFrom(o, t, r, n, s) {
      let a = `_${o}_Pack`;
      s && (a = a + "_T");
      let u = G(this.context.glContext.version);
      return `
        vec4 ${a}(int m[${t}]) {
          int offset = indicesToOffset_${o}(m);
          vec2 coords = offsetToCoords(offset, ${r}, ${n});
          return ${u.texture2D}(${o}, coords);
        }
        `;
    }
  };
});
var Un, fp = O(() => {
  be();
  Un = class i extends Wt {
    constructor(e) {
      super(e);
    }
    getFunctions() {
      return { ...this.encodeFloat32(), ...this.decodeFloat32() };
    }
    getCustomTypes() {
      return {};
    }
    encodeFloat32() {
      return { encode: new k(`highp vec4 encode(highp float f) {
        return vec4(f, 0.0, 0.0, 0.0);
      }
        `) };
    }
    decodeFloat32() {
      return { decode: new k(`highp float decode(highp vec4 rgba) {
        return rgba.r;
      }
        `) };
    }
    encodeUint8() {
      let e = i.isLittleEndian() ? "rgba.rgba=rgba.abgr;" : "";
      return { encode: new k(`
      highp vec4 encode(highp float f) {
        highp float F = abs(f);
        highp float Sign = step(0.0,-f);
        highp float Exponent = floor(log2(F));
        highp float Mantissa = (exp2(- Exponent) * F);
        Exponent = floor(log2(F) + 127.0) + floor(log2(Mantissa));
        highp vec4 rgba;
        rgba[0] = 128.0 * Sign  + floor(Exponent*exp2(-1.0));
        rgba[1] = 128.0 * mod(Exponent,2.0) + mod(floor(Mantissa*128.0),128.0);
        rgba[2] = floor(mod(floor(Mantissa*exp2(23.0 -8.0)),exp2(8.0)));
        rgba[3] = floor(exp2(23.0)*mod(Mantissa,exp2(-15.0)));
        ${e}
        rgba = rgba / 255.0; // values need to be normalized to [0,1]
        return rgba;
    }
        `) };
    }
    decodeUint8() {
      let e = i.isLittleEndian() ? "rgba.rgba=rgba.abgr;" : "";
      return { decode: new k(`
        highp float decode(highp vec4 rgba) {
          rgba = rgba * 255.0; // values need to be de-normalized from [0,1] to [0,255]
          ${e}
          highp float Sign = 1.0 - step(128.0,rgba[0])*2.0;
          highp float Exponent = 2.0 * mod(rgba[0],128.0) + step(128.0,rgba[1]) - 127.0;
          highp float Mantissa = mod(rgba[1],128.0)*65536.0 + rgba[2]*256.0 +rgba[3] + float(0x800000);
          highp float Result =  Sign * exp2(Exponent) * (Mantissa * exp2(-23.0 ));
          return Result;
      }
        `) };
    }
    static isLittleEndian() {
      let e = new ArrayBuffer(4), o = new Uint32Array(e), t = new Uint8Array(e);
      if (o[0] = 3735928559, t[0] === 239) return true;
      if (t[0] === 222) return false;
      throw new Error("unknown endianness");
    }
  };
});
var Vn, cp = O(() => {
  be();
  st();
  Vn = class extends Wt {
    constructor(e) {
      super(e);
    }
    getFunctions() {
      return { ...this.setFragColor(), ...this.getColorAsFloat() };
    }
    getCustomTypes() {
      return {};
    }
    setFragColor() {
      let e = G(this.context.glContext.version);
      return { setFragColor: new k(`
        void setFragColor(float value) {
            ${e.output} = encode(value);
        }
        `, ["encoding.encode"]) };
    }
    getColorAsFloat() {
      return { getColorAsFloat: new k(`
        float getColorAsFloat(vec4 color) {
            return decode(color);
        }
        `, ["encoding.decode"]) };
    }
  };
});
var zn, pp = O(() => {
  be();
  zn = class i extends Wt {
    constructor(e) {
      super(e);
    }
    getFunctions() {
      return { ...this.bcastIndex(), ...this.bcastMatmulIndex(), ...this.offsetToIndices(), ...this.indicesToOffset(), ...this.incrementIndices() };
    }
    getCustomTypes() {
      return {};
    }
    bcastIndex() {
      let e = this.context.outputTextureLayout.shape.length, o = {};
      return this.context.programInfo.inputNames.forEach((t, r) => {
        let n = this.context.inputTextureLayouts[r].unpackedShape;
        if (n.length <= e) {
          let s = n.length, a = e - s, u = `bcastIndices_${t}`, l = "";
          for (let p2 = 0; p2 < s; ++p2) l += `
          realIndices[${p2}] = int( mod(float(bcastedIndices[${a + p2}]), ${n[p2]}.0) );
          `;
          let f = `
        void ${u} (int bcastedIndices[${e}], out int realIndices[${s}]) {
          ${l}
        }
        `;
          o[u] = new k(f);
        }
      }), o;
    }
    bcastMatmulIndex() {
      let e = this.context.outputTextureLayout.shape.length, o = {};
      return this.context.programInfo.inputNames.forEach((t, r) => {
        let n = this.context.inputTextureLayouts[r].shape;
        if (!(n.length < 2 || n.length > e)) {
          let s = n.length, a = e - s, u = `bcastMatmulIndices_${t}`, l = "";
          for (let p2 = 0; p2 < s - 2; ++p2) l += `
          realIndices[${p2}] = int( mod(float(bcastedIndices[${a + p2}]), ${n[p2]}.0) );
          `;
          let f = `
        void ${u}(int bcastedIndices[${e}], out int realIndices[${s}]) {
          ${l}
          realIndices[${s - 1}] = bcastedIndices[${e - 1}];
          realIndices[${s - 2}] = bcastedIndices[${e - 2}];
        }
        `;
          o[u] = new k(f);
        }
      }), o;
    }
    indicesToOffset() {
      let e = {};
      return this.context.programInfo.inputNames.forEach((o, t) => {
        let r = this.context.inputTextureLayouts[t].shape, n = this.context.inputTextureLayouts[t].strides, s = r.length, a = `indicesToOffset_${o}`;
        e[a] = new k(i.indexToOffsetSingle(a, s, n)), a = `indicesToOffset_${o}_T`, e[a] = new k(i.indexToOffsetSingle(a, s, n.slice().reverse()));
      }), e;
    }
    static indexToOffsetSingle(e, o, t) {
      let r = "";
      for (let n = o - 1; n >= 0; --n) r += `
        offset += indices[${n}] * ${t[n]};
        `;
      return `
      int ${e}(int indices[${o}]) {
        int offset = 0;
        ${r}
        return offset;
      }
      `;
    }
    offsetToIndices() {
      let e = {};
      return this.context.programInfo.inputNames.forEach((o, t) => {
        let r = this.context.inputTextureLayouts[t].shape, n = this.context.inputTextureLayouts[t].strides, s = r.length, a = `offsetToIndices_${o}`;
        e[a] = new k(i.offsetToIndicesSingle(a, s, n)), a = `offsetToIndices_${o}_T`, e[a] = new k(i.offsetToIndicesSingle(a, s, n.slice().reverse()));
      }), e;
    }
    static offsetToIndicesSingle(e, o, t) {
      let r = [];
      for (let n = 0; n < o - 1; ++n) r.push(`
      indices[${n}] = offset / ${t[n]};`), r.push(`
        offset -= indices[${n}] * ${t[n]};`);
      return r.push(`
      indices[${o - 1}] = offset;`), `
      void ${e}(int offset, out int indices[${o}]) {
        ${r.join("")}
      }
      `;
    }
    incrementIndices() {
      let e = {};
      return this.context.programInfo.inputNames.forEach((o, t) => {
        let r = this.context.inputTextureLayouts[t].shape, n = r.length, s = `incrementIndices_${o}`, a = "";
        for (let l = 0; l < n; ++l) a += `
        shape[${l}] = ${r[l]};`;
        let u = `
        void ${s}(int axis, out int indices[${n}]) {
          int shape[${n}];
          ${a};
          for(int i = ${n} -1 ; i >= 0; --i) {
            if(i > axis) continue;
            indices[i] += 1;
            if(indices[i] < shape[i]) {
              break;
            }
            indices[i] = 0;
          }
        }
        `;
        e[s] = new k(u);
      }), e;
    }
  };
});
var Wn, dp = O(() => {
  be();
  Wn = class extends Wt {
    constructor(e) {
      super(e);
    }
    getCustomTypes() {
      return {};
    }
    getFunctions() {
      return { ...this.binaryVecFunctions(), ...this.copyVec(), ...this.setVecItem(), ...this.getVecItem() };
    }
    binaryVecFunctions() {
      let o = this.context.outputTextureLayout.shape.length, t = { add: "+=", sub: "-=", mul: "*=", div: "/=" }, r = {};
      for (let n in t) {
        let s = `${n}Vec`, a = "";
        for (let l = 0; l < o; ++l) a += `
          dest[${l}] ${t[n]} src[${l}];
          `;
        let u = `
        void ${s}(int src[${o}], out int dest[${o}]) {
          ${a}
        }
        `;
        r[s] = new k(u);
      }
      return r;
    }
    copyVec() {
      let o = this.context.outputTextureLayout.shape.length, t = "";
      for (let n = 0; n < o; ++n) t += `
        dest[${n}] = src[${n}];
        `;
      let r = `
      void copyVec(int src[${o}], out int dest[${o}]) {
        ${t}
      }
      `;
      return { copyVec: new k(r) };
    }
    setVecItem() {
      let o = this.context.outputTextureLayout.shape.length, t = `
        if(index < 0)
            index =${o} + index;
        if (index == 0)
            m[0] = value;
        `;
      for (let n = 1; n < o - 1; ++n) t += `
        else if (index == ${n})
            m[${n}] = value;
            `;
      t += `
        else
            m[${o - 1}] = value;
        `;
      let r = `
      void setVecItem(out int m[${o}], int index, int value) {
        ${t}
      }
        `;
      return { setVecItem: new k(r) };
    }
    getVecItem() {
      let o = this.context.outputTextureLayout.shape.length, t = `
        if(index < 0)
            index = ${o} + index;
        if (index == 0)
            return m[0];
      `;
      for (let n = 1; n < o - 1; ++n) t += `
        else if (index == ${n})
            return m[${n}];
      `;
      t += `
        else
            return m[${o - 1}];
        `;
      let r = `
      int getVecItem(int m[${o}], int index) {
        ${t}
      }
    `;
      return { getVecItem: new k(r) };
    }
  };
});
var Fi, hp = O(() => {
  lp();
  fp();
  cp();
  pp();
  dp();
  Fi = { encoding: Un, fragcolor: Vn, vec: Wn, shapeUtils: zn, coordinates: Mn };
});
var Hn, mp = O(() => {
  be();
  sp();
  hp();
  st();
  Hn = class {
    constructor(e, o, t, r) {
      this.libs = {};
      this.glslLibRoutineDependencyGraph = {};
      this.context = new En(e, o, t, r), Object.keys(Fi).forEach((s) => {
        let a = new Fi[s](this.context);
        this.libs[s] = a;
      });
      let n = this.glslLibRoutineDependencyGraph;
      for (let s in this.libs) {
        let u = this.libs[s].getFunctions();
        for (let l in u) {
          let f = s + "." + l, p2;
          n[f] ? (p2 = n[f], p2.routineBody = u[l].routineBody) : (p2 = new Nr(f, u[l].routineBody), n[f] = p2);
          let d = u[l].dependencies;
          if (d) for (let y = 0; y < d.length; ++y) if (n[d[y]]) p2.addDependency(n[d[y]]);
          else {
            let w = new Nr(d[y]);
            n[d[y]] = w, p2.addDependency(w);
          }
        }
      }
    }
    preprocess() {
      let e = this.context.programInfo, o = e.shaderSource;
      return this.context.programInfo.hasMain || (o = `${o}
      ${Xu(this.context.glContext.version, this.context.outputTextureLayout.shape.length)}`), o = ap(o), `${ju(this.context.glContext.version)}
    ${this.getUniforms(e.inputNames, e.variables)}
    ${this.getImports(o)}
    ${o}`;
    }
    getImports(e) {
      let o = this.selectGlslLibRoutinesToBeIncluded(e);
      if (o.length === 0) return "";
      let t = "";
      for (let r = 0; r < o.length; ++r) if (o[r].routineBody) t += o[r].routineBody + `
`;
      else throw new Error(`Missing body for the Glsl Library routine: ${o[r].name}`);
      return t;
    }
    selectGlslLibRoutinesToBeIncluded(e) {
      let o = [];
      return Object.keys(this.glslLibRoutineDependencyGraph).forEach((t) => {
        let r = t.split(".")[1];
        e.indexOf(r) !== -1 && o.push(this.glslLibRoutineDependencyGraph[t]);
      }), Dn.returnOrderedNodes(o);
    }
    getUniforms(e, o) {
      let t = [];
      if (e) for (let r of e) t.push(`uniform sampler2D ${r};`);
      if (o) for (let r of o) t.push(`uniform ${r.type} ${r.name}${r.arrayLength ? `[${r.arrayLength}]` : ""};`);
      return t.join(`
`);
    }
  };
});
var qn, bp = O(() => {
  Kt();
  Mt();
  mp();
  st();
  qn = class {
    constructor(e, o, t) {
      this.profiler = e;
      this.glContext = o;
      this.textureLayoutStrategy = t;
      this.repo = /* @__PURE__ */ new Map(), this.attributesBound = false;
    }
    getArtifact(e) {
      return this.repo.get(e);
    }
    setArtifact(e, o) {
      this.repo.set(e, o);
    }
    run(e, o, t) {
      this.profiler.event("op", `ProgramManager.run ${e.programInfo.name ?? "unknown kernel"}`, () => {
        let r = this.glContext.gl, n = e.program;
        r.useProgram(n);
        try {
          this.bindOutput(t), this.attributesBound || this.bindAttributes(e.attribLocations), this.bindUniforms(e.uniformLocations, e.programInfo.variables ?? [], o);
        } catch (s) {
          throw tt.error("ProgramManager", e.programInfo.shaderSource), s;
        }
        this.profiler.event("backend", "GlContext.draw()", () => {
          this.glContext.draw();
        });
      }, this.glContext);
    }
    dispose() {
      this.vertexShader && this.glContext.deleteShader(this.vertexShader), this.repo.forEach((e) => this.glContext.deleteProgram(e.program));
    }
    build(e, o, t) {
      return this.profiler.event("backend", "ProgramManager.build", () => {
        let r = new Hn(this.glContext, e, o, t), n = r.preprocess(), s = this.compile(n);
        return { programInfo: e, program: s, uniformLocations: this.getUniformLocations(s, r.context.programInfo.inputNames, r.context.programInfo.variables), attribLocations: this.getAttribLocations(s) };
      });
    }
    compile(e) {
      if (!this.vertexShader) {
        tt.verbose("ProrgramManager", "Compiling and caching Vertex shader for the first time");
        let r = qu(this.glContext.version);
        this.vertexShader = this.glContext.compileShader(r, this.glContext.gl.VERTEX_SHADER);
      }
      z.debug && tt.verbose("ProrgramManager", `FragShader:
${e}
`);
      let o = this.glContext.compileShader(e, this.glContext.gl.FRAGMENT_SHADER), t = this.glContext.createProgram(this.vertexShader, o);
      return this.glContext.deleteShader(o), t;
    }
    bindOutput(e) {
      let o = e.width, t = e.height;
      tt.verbose("ProrgramManager", `Binding output texture to Framebuffer: w/h=${o}/${t}, shape=${e.shape}, type=${e.tensor.type}`), this.glContext.attachFramebuffer(e.texture, o, t);
    }
    bindAttributes(e) {
      let o = e.position, t = e.textureCoord;
      this.glContext.setVertexAttributes(o, t), this.attributesBound = true;
    }
    bindUniforms(e, o, t) {
      var _a;
      let r = this.glContext.gl, n = 0;
      for (let { name: s, type: a, location: u, arrayLength: l } of e) {
        let f = (_a = o.find((p2) => p2.name === s)) == null ? void 0 : _a.data;
        if (a !== "sampler2D" && !f) throw new Error(`variable '${s}' does not have data defined in program info`);
        switch (a) {
          case "sampler2D":
            this.bindTexture(t[n], u, n), n++;
            break;
          case "float":
            l ? r.uniform1fv(u, f) : r.uniform1f(u, f);
            break;
          case "int":
            l ? r.uniform1iv(u, f) : r.uniform1i(u, f);
            break;
          default:
            throw new Error(`Uniform not implemented: ${a}`);
        }
      }
    }
    bindTexture(e, o, t) {
      this.glContext.bindTextureToUniform(e.texture, t, o);
    }
    getAttribLocations(e) {
      return { position: this.getAttribLocation(e, "position"), textureCoord: this.getAttribLocation(e, "textureCoord") };
    }
    getUniformLocations(e, o, t) {
      let r = [];
      if (o) for (let n of o) r.push({ name: n, type: "sampler2D", location: this.getUniformLocation(e, n) });
      if (t) for (let n of t) r.push({ ...n, location: this.getUniformLocation(e, n.name) });
      return r;
    }
    getUniformLocation(e, o) {
      let r = this.glContext.gl.getUniformLocation(e, o);
      if (r === null) throw new Error(`Uniform ${o} not found.`);
      return r;
    }
    getAttribLocation(e, o) {
      return this.glContext.gl.getAttribLocation(e, o);
    }
  };
});
var jn, gp = O(() => {
  Mt();
  Fr();
  jn = class {
    constructor(e, o, t, r) {
      this.glContext = e;
      this.layoutStrategy = o;
      this.profiler = t;
      this.config = r;
      this.pendingRead = /* @__PURE__ */ new Map();
      r.reuseTextures && (this.inUseTextures = /* @__PURE__ */ new Map(), this.idleTextures = /* @__PURE__ */ new Map(), this.textureLookup = /* @__PURE__ */ new Map());
    }
    createTextureFromLayout(e, o, t, r) {
      let n = this.toEncoderType(e), s = this.glContext.getEncoder(n, o.channels || 1, r);
      if (o.isPacked && r === 1) throw new Error("not implemented");
      let a = o.width, u = o.height, l, f;
      if (this.config.reuseTextures) {
        l = `${a}x${u}_${s.format}_${s.internalFormat}_${s.textureType}`, f = this.inUseTextures.get(l), f || (f = [], this.inUseTextures.set(l, f));
        let d = this.idleTextures.get(l);
        if (d && d.length > 0) {
          let y = d.pop();
          return f.push(y), r === 1 && this.glContext.updateTexture(y, a, u, s, this.toTextureData(e, t)), y;
        }
      }
      tt.verbose("TextureManager", `Creating new texture of size ${o.width}x${o.height}`);
      let p2 = this.glContext.allocateTexture(a, u, s, this.toTextureData(e, t));
      return this.config.reuseTextures && (f.push(p2), this.textureLookup.set(p2, l)), p2;
    }
    readTexture(e, o, t) {
      return t || (t = 1), this.profiler.event("backend", "TextureManager.readTexture", () => {
        let r = e.shape.reduce((s, a) => s * a) * t, n = this.glContext.readTexture(e.texture, e.width, e.height, r, this.toEncoderType(o), t);
        return this.toTensorData(o, n);
      });
    }
    async readTextureAsync(e, o, t) {
      let r = e.tensor.dataId;
      if (t || (t = 1), this.pendingRead.has(r)) {
        let n = this.pendingRead.get(r);
        return new Promise((s) => n == null ? void 0 : n.push(s));
      }
      return this.profiler.event("backend", "TextureManager.readTextureAsync", async () => {
        this.pendingRead.set(r, []);
        let n = e.shape.reduce((l, f) => l * f) * t;
        await this.glContext.createAndWaitForFence();
        let s = this.glContext.readTexture(e.texture, e.width, e.height, n, this.toEncoderType(o), t), a = this.toTensorData(o, s), u = this.pendingRead.get(r);
        return this.pendingRead.delete(r), u == null ? void 0 : u.forEach((l) => l(a)), a;
      });
    }
    readUint8TextureAsFloat(e) {
      return this.profiler.event("backend", "TextureManager.readUint8TextureAsFloat", () => {
        let o = e.shape.reduce((r, n) => r * n), t = this.glContext.readTexture(e.texture, e.width, e.height, o * 4, "byte", 4);
        return new Float32Array(t.buffer, t.byteOffset, o);
      });
    }
    releaseTexture(e, o) {
      let t;
      if (this.config.reuseTextures && (t = this.textureLookup.get(e.texture), t)) {
        o && this.textureLookup.delete(t);
        let r = this.inUseTextures.get(t);
        if (r) {
          let n = r.indexOf(e.texture);
          if (n !== -1) {
            r.splice(n, 1);
            let s = this.idleTextures.get(t);
            s || (s = [], this.idleTextures.set(t, s)), s.push(e.texture);
          }
        }
      }
      (!t || o) && (tt.verbose("TextureManager", `Deleting texture of size ${e.width}x${e.height}`), this.glContext.deleteTexture(e.texture));
    }
    toTensorData(e, o) {
      switch (e) {
        case "int16":
          return o instanceof Int16Array ? o : Int16Array.from(o);
        case "int32":
          return o instanceof Int32Array ? o : Int32Array.from(o);
        case "int8":
          return o instanceof Int8Array ? o : Int8Array.from(o);
        case "uint16":
          return o instanceof Uint16Array ? o : Uint16Array.from(o);
        case "uint32":
          return o instanceof Uint32Array ? o : Uint32Array.from(o);
        case "uint8":
        case "bool":
          return o instanceof Uint8Array ? o : Uint8Array.from(o);
        case "float32":
          return o instanceof Float32Array ? o : Float32Array.from(o);
        case "float64":
          return o instanceof Float64Array ? o : Float64Array.from(o);
        default:
          throw new Error(`TensorData type ${e} is not supported`);
      }
    }
    toTextureData(e, o) {
      if (o) return o instanceof Float32Array ? o : new Float32Array(o);
    }
    toEncoderType(e) {
      return "float";
    }
    clearActiveTextures() {
      this.glContext.clearActiveTextures();
    }
  };
});
var Xn, yp = O(() => {
  Mt();
  $s();
  ll();
  op();
  bp();
  Bi();
  gp();
  Xn = class {
    constructor(e, o) {
      this.backend = e;
      this.context = o;
      this.layoutStrategy = new Gn(e.glContext.maxTextureSize), this.programManager = new qn(this.context.profiler, e.glContext, this.layoutStrategy), this.textureManager = new jn(e.glContext, this.layoutStrategy, this.context.profiler, { reuseTextures: e.textureCacheMode === "full" }), this.packedTextureDataCache = /* @__PURE__ */ new Map(), this.unpackedTextureDataCache = /* @__PURE__ */ new Map(), this.pack = e.pack, this.pack2unpackMap = /* @__PURE__ */ new Map(), this.unpack2packMap = /* @__PURE__ */ new Map();
    }
    createInferenceHandler() {
      return new Pn(this);
    }
    onGraphInitialized(e) {
      let o = e.getValues().filter((t) => t.from === -1 && t.tensor).map((t) => t.tensor.dataId);
      this.initializers = new Set(o);
    }
    isInitializer(e) {
      return this.initializers ? this.initializers.has(e) : false;
    }
    addInitializer(e) {
      this.initializers.add(e);
    }
    getTextureData(e, o) {
      return o ? this.packedTextureDataCache.get(e) : this.unpackedTextureDataCache.get(e);
    }
    setTextureData(e, o, t = false) {
      tt.verbose("WebGLSessionHandler", "Storing Texture data in cache"), t ? this.packedTextureDataCache.set(e, o) : this.unpackedTextureDataCache.set(e, o);
    }
    dispose() {
      this.programManager.dispose(), this.textureManager.clearActiveTextures(), this.packedTextureDataCache.forEach((e) => this.textureManager.releaseTexture(e, true)), this.packedTextureDataCache = /* @__PURE__ */ new Map(), this.unpackedTextureDataCache.forEach((e) => this.textureManager.releaseTexture(e, true)), this.unpackedTextureDataCache = /* @__PURE__ */ new Map();
    }
    resolve(e, o, t) {
      let r = Ls(e, o, np);
      return { impl: r.opImpl, context: r.opInit ? r.opInit(e, t) : e };
    }
  };
});
function hg(i) {
  let e = 0;
  for (; e < i.length && i[e](); ++e) ;
  return e - 1;
}
var Mr, xp = O(() => {
  Kt();
  Fr();
  Fr();
  ue();
  Mr = class {
    constructor(e, o) {
      this.frameBufferBound = false;
      this.itemsToPoll = [];
      this.gl = e, this.version = o, this.getExtensions(), this.vertexbuffer = this.createVertexbuffer(), this.framebuffer = this.createFramebuffer(), this.queryVitalParameters();
    }
    allocateTexture(e, o, t, r) {
      let n = this.gl, s = n.createTexture();
      n.bindTexture(n.TEXTURE_2D, s), n.texParameteri(n.TEXTURE_2D, n.TEXTURE_MIN_FILTER, n.NEAREST), n.texParameteri(n.TEXTURE_2D, n.TEXTURE_MAG_FILTER, n.NEAREST), n.texParameteri(n.TEXTURE_2D, n.TEXTURE_WRAP_S, n.CLAMP_TO_EDGE), n.texParameteri(n.TEXTURE_2D, n.TEXTURE_WRAP_T, n.CLAMP_TO_EDGE);
      let a = r ? t.encode(r, e * o) : null;
      return n.texImage2D(n.TEXTURE_2D, 0, t.internalFormat, e, o, 0, t.format, t.textureType, a), this.checkError(), s;
    }
    updateTexture(e, o, t, r, n) {
      let s = this.gl;
      s.bindTexture(s.TEXTURE_2D, e);
      let a = r.encode(n, o * t);
      s.texSubImage2D(s.TEXTURE_2D, 0, 0, 0, o, t, r.format, r.textureType, a), this.checkError();
    }
    attachFramebuffer(e, o, t) {
      let r = this.gl;
      r.bindTexture(r.TEXTURE_2D, e), r.bindFramebuffer(r.FRAMEBUFFER, this.framebuffer), r.framebufferTexture2D(r.FRAMEBUFFER, r.COLOR_ATTACHMENT0, r.TEXTURE_2D, e, 0), this.checkError(), r.viewport(0, 0, o, t), r.scissor(0, 0, o, t);
    }
    readTexture(e, o, t, r, n, s) {
      let a = this.gl;
      s || (s = 1), this.frameBufferBound || this.attachFramebuffer(e, o, t);
      let u = this.getEncoder(n, s), l = u.allocate(o * t);
      return a.bindTexture(a.TEXTURE_2D, e), a.framebufferTexture2D(a.FRAMEBUFFER, a.COLOR_ATTACHMENT0, a.TEXTURE_2D, e, 0), a.readPixels(0, 0, o, t, a.RGBA, u.textureType, l), this.checkError(), u.decode(l, r);
    }
    isFramebufferReady() {
      return true;
    }
    getActiveTexture() {
      let e = this.gl;
      return `TEXTURE${e.getParameter(this.gl.ACTIVE_TEXTURE) - e.TEXTURE0}`;
    }
    getTextureBinding() {
      return this.gl.getParameter(this.gl.TEXTURE_BINDING_2D);
    }
    getFramebufferBinding() {
      return this.gl.getParameter(this.gl.FRAMEBUFFER_BINDING);
    }
    setVertexAttributes(e, o) {
      let t = this.gl;
      t.vertexAttribPointer(e, 3, t.FLOAT, false, 20, 0), t.enableVertexAttribArray(e), o !== -1 && (t.vertexAttribPointer(o, 2, t.FLOAT, false, 20, 12), t.enableVertexAttribArray(o)), this.checkError();
    }
    createProgram(e, o) {
      let t = this.gl, r = t.createProgram();
      return t.attachShader(r, e), t.attachShader(r, o), t.linkProgram(r), r;
    }
    compileShader(e, o) {
      let t = this.gl, r = t.createShader(o);
      if (!r) throw new Error(`createShader() returned null with type ${o}`);
      if (t.shaderSource(r, e), t.compileShader(r), t.getShaderParameter(r, t.COMPILE_STATUS) === false) throw new Error(`Failed to compile shader: ${t.getShaderInfoLog(r)}
Shader source:
${e}`);
      return r;
    }
    deleteShader(e) {
      this.gl.deleteShader(e);
    }
    bindTextureToUniform(e, o, t) {
      let r = this.gl;
      r.activeTexture(r.TEXTURE0 + o), this.checkError(), r.bindTexture(r.TEXTURE_2D, e), this.checkError(), r.uniform1i(t, o), this.checkError();
    }
    draw() {
      this.gl.drawArrays(this.gl.TRIANGLE_STRIP, 0, 4), this.checkError();
    }
    checkError() {
      if (z.debug) {
        let e = this.gl, o = e.getError(), t = "";
        switch (o) {
          case e.NO_ERROR:
            return;
          case e.INVALID_ENUM:
            t = "INVALID_ENUM";
            break;
          case e.INVALID_VALUE:
            t = "INVALID_VALUE";
            break;
          case e.INVALID_OPERATION:
            t = "INVALID_OPERATION";
            break;
          case e.INVALID_FRAMEBUFFER_OPERATION:
            t = "INVALID_FRAMEBUFFER_OPERATION";
            break;
          case e.OUT_OF_MEMORY:
            t = "OUT_OF_MEMORY";
            break;
          case e.CONTEXT_LOST_WEBGL:
            t = "CONTEXT_LOST_WEBGL";
            break;
          default:
            t = `Unknown WebGL Error: ${o.toString(16)}`;
        }
        throw new Error(t);
      }
    }
    deleteTexture(e) {
      this.gl.deleteTexture(e);
    }
    deleteProgram(e) {
      this.gl.deleteProgram(e);
    }
    getEncoder(e, o, t = 0) {
      if (this.version === 2) return new Sn(this.gl, o);
      switch (e) {
        case "float":
          return t === 1 || this.isRenderFloat32Supported ? new Br(this.gl, o) : new Br(this.gl, o, this.textureHalfFloatExtension.HALF_FLOAT_OES);
        case "int":
          throw new Error("not implemented");
        case "byte":
          return new An(this.gl, o);
        default:
          throw new Error(`Invalid dataType: ${e}`);
      }
    }
    clearActiveTextures() {
      let e = this.gl;
      for (let o = 0; o < this.maxTextureImageUnits; ++o) e.activeTexture(e.TEXTURE0 + o), e.bindTexture(e.TEXTURE_2D, null);
    }
    dispose() {
      if (this.disposed) return;
      let e = this.gl;
      e.bindFramebuffer(e.FRAMEBUFFER, null), e.deleteFramebuffer(this.framebuffer), e.bindBuffer(e.ARRAY_BUFFER, null), e.deleteBuffer(this.vertexbuffer), e.bindBuffer(e.ELEMENT_ARRAY_BUFFER, null), e.finish(), this.disposed = true;
    }
    createDefaultGeometry() {
      return new Float32Array([-1, 1, 0, 0, 1, -1, -1, 0, 0, 0, 1, 1, 0, 1, 1, 1, -1, 0, 1, 0]);
    }
    createVertexbuffer() {
      let e = this.gl, o = e.createBuffer();
      if (!o) throw new Error("createBuffer() returned null");
      let t = this.createDefaultGeometry();
      return e.bindBuffer(e.ARRAY_BUFFER, o), e.bufferData(e.ARRAY_BUFFER, t, e.STATIC_DRAW), this.checkError(), o;
    }
    createFramebuffer() {
      let e = this.gl.createFramebuffer();
      if (!e) throw new Error("createFramebuffer returned null");
      return e;
    }
    queryVitalParameters() {
      let e = this.gl;
      if (this.isFloatTextureAttachableToFrameBuffer = this.checkFloatTextureAttachableToFrameBuffer(), this.isRenderFloat32Supported = this.checkRenderFloat32(), this.isFloat32DownloadSupported = this.checkFloat32Download(), this.version === 1 && !this.textureHalfFloatExtension && !this.isRenderFloat32Supported) throw new Error("both float32 and float16 TextureType are not supported");
      this.isBlendSupported = !this.isRenderFloat32Supported || this.checkFloat32Blend(), this.maxTextureSize = e.getParameter(e.MAX_TEXTURE_SIZE), this.maxTextureImageUnits = e.getParameter(e.MAX_TEXTURE_IMAGE_UNITS), this.version;
    }
    getExtensions() {
      this.version === 2 ? (this.colorBufferFloatExtension = this.gl.getExtension("EXT_color_buffer_float"), this.disjointTimerQueryWebgl2Extension = this.gl.getExtension("EXT_disjoint_timer_query_webgl2")) : (this.textureFloatExtension = this.gl.getExtension("OES_texture_float"), this.textureHalfFloatExtension = this.gl.getExtension("OES_texture_half_float"));
    }
    checkFloatTextureAttachableToFrameBuffer() {
      let e = this.gl, o = e.createTexture();
      e.bindTexture(e.TEXTURE_2D, o);
      let t = this.version === 2 ? e.RGBA32F : e.RGBA;
      e.texImage2D(e.TEXTURE_2D, 0, t, 1, 1, 0, e.RGBA, e.FLOAT, null);
      let r = e.createFramebuffer();
      e.bindFramebuffer(e.FRAMEBUFFER, r), e.framebufferTexture2D(e.FRAMEBUFFER, e.COLOR_ATTACHMENT0, e.TEXTURE_2D, o, 0);
      let n = e.checkFramebufferStatus(e.FRAMEBUFFER) === e.FRAMEBUFFER_COMPLETE;
      return e.bindTexture(e.TEXTURE_2D, null), e.bindFramebuffer(e.FRAMEBUFFER, null), e.deleteTexture(o), e.deleteFramebuffer(r), n;
    }
    checkRenderFloat32() {
      if (this.version === 2) {
        if (!this.colorBufferFloatExtension) return false;
      } else if (!this.textureFloatExtension) return false;
      return this.isFloatTextureAttachableToFrameBuffer;
    }
    checkFloat32Download() {
      if (this.version === 2) {
        if (!this.colorBufferFloatExtension) return false;
      } else if (!this.textureFloatExtension || !this.gl.getExtension("WEBGL_color_buffer_float")) return false;
      return this.isFloatTextureAttachableToFrameBuffer;
    }
    checkFloat32Blend() {
      let e = this.gl, o, t, r, n, s;
      try {
        o = e.createTexture(), t = e.createFramebuffer(), e.bindTexture(e.TEXTURE_2D, o);
        let a = this.version === 2 ? e.RGBA32F : e.RGBA;
        return e.texImage2D(e.TEXTURE_2D, 0, a, 1, 1, 0, e.RGBA, e.FLOAT, null), e.bindFramebuffer(e.FRAMEBUFFER, t), e.framebufferTexture2D(e.FRAMEBUFFER, e.COLOR_ATTACHMENT0, e.TEXTURE_2D, o, 0), e.enable(e.BLEND), r = e.createShader(e.VERTEX_SHADER), !r || (e.shaderSource(r, "void main(){}"), e.compileShader(r), n = e.createShader(e.FRAGMENT_SHADER), !n) || (e.shaderSource(n, "precision highp float;void main(){gl_FragColor=vec4(0.5);}"), e.compileShader(n), s = e.createProgram(), !s) ? false : (e.attachShader(s, r), e.attachShader(s, n), e.linkProgram(s), e.useProgram(s), e.drawArrays(e.POINTS, 0, 1), e.getError() === e.NO_ERROR);
      } finally {
        e.disable(e.BLEND), s && e.deleteProgram(s), r && e.deleteShader(r), n && e.deleteShader(n), t && (e.bindFramebuffer(e.FRAMEBUFFER, null), e.deleteFramebuffer(t)), o && (e.bindTexture(e.TEXTURE_2D, null), e.deleteTexture(o));
      }
    }
    beginTimer() {
      if (this.version === 2 && this.disjointTimerQueryWebgl2Extension) {
        let e = this.gl, o = this.disjointTimerQueryWebgl2Extension, t = e.createQuery();
        return e.beginQuery(o.TIME_ELAPSED_EXT, t), t;
      } else throw new Error("WebGL1 profiling currently not supported.");
    }
    endTimer() {
      if (this.version === 2 && this.disjointTimerQueryWebgl2Extension) {
        let e = this.gl, o = this.disjointTimerQueryWebgl2Extension;
        e.endQuery(o.TIME_ELAPSED_EXT);
        return;
      } else throw new Error("WebGL1 profiling currently not supported");
    }
    isTimerResultAvailable(e) {
      let o = false, t = false;
      if (this.version === 2 && this.disjointTimerQueryWebgl2Extension) {
        let r = this.gl, n = this.disjointTimerQueryWebgl2Extension;
        o = r.getQueryParameter(e, r.QUERY_RESULT_AVAILABLE), t = r.getParameter(n.GPU_DISJOINT_EXT);
      } else throw new Error("WebGL1 profiling currently not supported");
      return o && !t;
    }
    getTimerResult(e) {
      let o = 0;
      if (this.version === 2) {
        let t = this.gl;
        o = t.getQueryParameter(e, t.QUERY_RESULT), t.deleteQuery(e);
      } else throw new Error("WebGL1 profiling currently not supported");
      return o / 1e6;
    }
    async waitForQueryAndGetTime(e) {
      return await ai(() => this.isTimerResultAvailable(e)), this.getTimerResult(e);
    }
    async createAndWaitForFence() {
      let e = this.createFence(this.gl);
      return this.pollFence(e);
    }
    createFence(e) {
      let o, t = e, r = t.fenceSync(t.SYNC_GPU_COMMANDS_COMPLETE, 0);
      return e.flush(), r === null ? o = () => true : o = () => {
        let n = t.clientWaitSync(r, 0, 0);
        return n === t.ALREADY_SIGNALED || n === t.CONDITION_SATISFIED;
      }, { query: r, isFencePassed: o };
    }
    async pollFence(e) {
      return new Promise((o) => {
        this.addItemToPoll(() => e.isFencePassed(), () => o());
      });
    }
    pollItems() {
      let e = hg(this.itemsToPoll.map((o) => o.isDoneFn));
      for (let o = 0; o <= e; ++o) {
        let { resolveFn: t } = this.itemsToPoll[o];
        t();
      }
      this.itemsToPoll = this.itemsToPoll.slice(e + 1);
    }
    async addItemToPoll(e, o) {
      this.itemsToPoll.push({ isDoneFn: e, resolveFn: o }), !(this.itemsToPoll.length > 1) && await ai(() => (this.pollItems(), this.itemsToPoll.length === 0));
    }
  };
});
function Ci(i) {
  let e;
  if ((!i || i === "webgl2") && "webgl2" in mr ? e = mr.webgl2 : (!i || i === "webgl") && "webgl" in mr && (e = mr.webgl), !e) try {
    let t = bg();
    e = Tp(t, i);
  } catch {
    let r = mg();
    e = Tp(r, i);
  }
  i = i || e.version === 1 ? "webgl" : "webgl2";
  let o = e.gl;
  return mr[i] = e, o.isContextLost() ? (delete mr[i], Ci(i)) : (o.disable(o.DEPTH_TEST), o.disable(o.STENCIL_TEST), o.disable(o.BLEND), o.disable(o.DITHER), o.disable(o.POLYGON_OFFSET_FILL), o.disable(o.SAMPLE_COVERAGE), o.enable(o.SCISSOR_TEST), o.enable(o.CULL_FACE), o.cullFace(o.BACK), e);
}
function Tp(i, e) {
  let o = { alpha: false, depth: false, antialias: false, stencil: false, preserveDrawingBuffer: false, premultipliedAlpha: false, failIfMajorPerformanceCaveat: false }, t, r = o;
  if ((!e || e === "webgl2") && (t = i.getContext("webgl2", r), t)) try {
    return new Mr(t, 2);
  } catch (n) {
    tt.warning("GlContextFactory", `failed to create WebGLContext using contextId 'webgl2'. Error: ${n}`);
  }
  if ((!e || e === "webgl") && (t = i.getContext("webgl", r) || i.getContext("experimental-webgl", r), t)) try {
    return new Mr(t, 1);
  } catch (n) {
    tt.warning("GlContextFactory", `failed to create WebGLContext using contextId 'webgl' or 'experimental-webgl'. Error: ${n}`);
  }
  throw new Error("WebGL is not supported");
}
function mg() {
  if (typeof document > "u") throw new TypeError("failed to create canvas: document is not supported");
  let i = document.createElement("canvas");
  return i.width = 1, i.height = 1, i;
}
function bg() {
  if (typeof OffscreenCanvas > "u") throw new TypeError("failed to create offscreen canvas: OffscreenCanvas is not supported");
  return new OffscreenCanvas(1, 1);
}
var mr, wp = O(() => {
  Mt();
  xp();
  mr = {};
});
var Kn, vp = O(() => {
  Kt();
  Mt();
  yp();
  wp();
  Kn = class {
    get contextId() {
      return z.webgl.contextId;
    }
    set contextId(e) {
      z.webgl.contextId = e;
    }
    get matmulMaxBatchSize() {
      return z.webgl.matmulMaxBatchSize;
    }
    set matmulMaxBatchSize(e) {
      z.webgl.matmulMaxBatchSize = e;
    }
    get textureCacheMode() {
      return z.webgl.textureCacheMode;
    }
    set textureCacheMode(e) {
      z.webgl.textureCacheMode = e;
    }
    get pack() {
      return z.webgl.pack;
    }
    set pack(e) {
      z.webgl.pack = e;
    }
    get async() {
      return z.webgl.async;
    }
    set async(e) {
      z.webgl.async = e;
    }
    initialize() {
      try {
        return this.glContext = Ci(this.contextId), typeof this.matmulMaxBatchSize != "number" && (this.matmulMaxBatchSize = 16), typeof this.textureCacheMode != "string" && (this.textureCacheMode = "full"), typeof this.pack != "boolean" && (this.pack = false), typeof this.async != "boolean" && (this.async = false), tt.setWithEnv(z), z.webgl.context || Object.defineProperty(z.webgl, "context", { value: this.glContext.gl }), tt.verbose("WebGLBackend", `Created WebGLContext: ${typeof this.glContext} with matmulMaxBatchSize: ${this.matmulMaxBatchSize}; textureCacheMode: ${this.textureCacheMode}; pack: ${this.pack}; async: ${this.async}.`), true;
      } catch (e) {
        return tt.warning("WebGLBackend", `Unable to initialize WebGLBackend. ${e}`), false;
      }
    }
    createSessionHandler(e) {
      return new Xn(this, e);
    }
    dispose() {
      this.glContext.dispose();
    }
  };
});
async function Ni(i) {
  if (i) {
    let e = typeof i == "string" ? [i] : i;
    for (let o of e) {
      let t = Ip.get(o);
      if (t) return t;
      let r = await yg(o);
      if (r) return r;
    }
  } else return Ni(["webgl"]);
  throw new Error("no available backend to use");
}
async function yg(i) {
  let e = gg;
  if (typeof e[i] < "u" && xg(e[i])) {
    let o = e[i], t = o.initialize();
    if (typeof t == "object" && "then" in t && (t = await t), t) return Ip.set(i, o), o;
  }
}
function xg(i) {
  let e = i;
  return "initialize" in e && typeof e.initialize == "function" && "createSessionHandler" in e && typeof e.createSessionHandler == "function" && "dispose" in e && typeof e.dispose == "function";
}
var Ip, gg, _p = O(() => {
  vp();
  Ip = /* @__PURE__ */ new Map(), gg = { webgl: new Kn() };
});
var Ri, Jn, Op = O(() => {
  Mt();
  Ri = class {
    constructor(e, o) {
      this.op = e;
      this.node = o;
    }
  }, Jn = class {
    constructor(e, o, t) {
      this.graph = e;
      this.profiler = t;
      this.initialize(o);
    }
    initialize(e) {
      this.profiler.event("session", "ExecutionPlan.initialize", () => {
        let o = this.graph.getNodes();
        if (o.length !== e.length) throw new Error("The size of nodes and OPs do not match.");
        this._ops = e.map((t, r) => new Ri(t, o[r])), this.reset(), this._starter = [], this._ops.forEach((t, r) => {
          let n = true;
          for (let s of t.node.inputs) if (!this._values[s] && this.graph.getInputIndices().indexOf(s) === -1) {
            n = false;
            break;
          }
          n && this._starter.push(r);
        });
      });
    }
    reset() {
      this._values = this.graph.getValues().map((e) => e.tensor);
    }
    async execute(e, o) {
      return this.profiler.event("session", "ExecutionPlan.execute", async () => {
        this.reset();
        let t = e.createInferenceHandler(), r = this.graph.getInputIndices();
        if (o.length !== r.length) throw new Error(`number of input tensors don't match the number of inputs to the model: actual: ${o.length} expected: ${r.length}`);
        o.forEach((f, p2) => {
          let d = r[p2];
          this._values[d] = f;
        });
        let n = this._starter.slice(0), s = this.graph.getValues(), a = this.graph.getNodes(), u = 0;
        for (; u < n.length; ) {
          let f = n[u++], p2 = this._ops[f], d = p2.node.inputs.map((S) => this._values[S]);
          if (d.indexOf(void 0) !== -1) throw new Error(`unresolved input detected: op: ${p2.node}`);
          let y = d;
          tt.verbose("ExecPlan", `Running op:${p2.node.name} (${y.map((S, L) => `'${p2.node.inputs[L]}': ${S.type}[${S.dims.join(",")}]`).join(", ")})`);
          let w = await this.profiler.event("node", p2.node.name, async () => p2.op.impl(t, y, p2.op.context));
          if (w.length !== p2.node.outputs.length) throw new Error("the size of output does not match model definition.");
          w.forEach((S, L) => {
            let A = p2.node.outputs[L];
            if (this._values[A]) throw new Error(`output [${A}] already has value: op:${p2.node.name}`);
            this._values[A] = S;
          });
          let v = /* @__PURE__ */ new Set();
          w.forEach((S, L) => {
            let A = p2.node.outputs[L];
            for (let P of s[A].to) {
              let M = a[P], V = true;
              for (let ut of M.inputs) if (!this._values[ut]) {
                V = false;
                break;
              }
              V && v.add(P);
            }
          }), n.push(...v);
        }
        let l = [];
        for (let f = 0; f < this.graph.getOutputIndices().length; f++) {
          let p2 = this.graph.getOutputIndices()[f], d = this._values[p2];
          if (d === void 0) throw new Error(`required output [${p2}] does not have value`);
          p2 === 0 ? await d.getData() : d.data, l.push(d);
        }
        return tt.verbose("ExecPlan", "disposing of inferenceHandler"), t.dispose(), l;
      });
    }
  };
});
var q, jt, Ur, Sp = O(() => {
  Pr();
  q = rr(sr());
  ze();
  Y();
  jt = F.experimental.fbs, Ur = class i {
    constructor(e) {
      if (this._attributes = /* @__PURE__ */ new Map(), e != null) {
        for (let o of e) o instanceof q.onnx.AttributeProto ? this._attributes.set(o.name, [i.getValue(o), i.getType(o)]) : o instanceof jt.Attribute && this._attributes.set(o.name(), [i.getValue(o), i.getType(o)]);
        if (this._attributes.size < e.length) throw new Error("duplicated attribute names");
      }
    }
    set(e, o, t) {
      this._attributes.set(e, [t, o]);
    }
    delete(e) {
      this._attributes.delete(e);
    }
    getFloat(e, o) {
      return this.get(e, "float", o);
    }
    getInt(e, o) {
      return this.get(e, "int", o);
    }
    getString(e, o) {
      return this.get(e, "string", o);
    }
    getTensor(e, o) {
      return this.get(e, "tensor", o);
    }
    getFloats(e, o) {
      return this.get(e, "floats", o);
    }
    getInts(e, o) {
      return this.get(e, "ints", o);
    }
    getStrings(e, o) {
      return this.get(e, "strings", o);
    }
    getTensors(e, o) {
      return this.get(e, "tensors", o);
    }
    get(e, o, t) {
      let r = this._attributes.get(e);
      if (r === void 0) {
        if (t !== void 0) return t;
        throw new Error(`required attribute not found: ${e}`);
      }
      if (r[1] !== o) throw new Error(`type mismatch: expected ${o} but got ${r[1]}`);
      return r[0];
    }
    static getType(e) {
      let o = e instanceof q.onnx.AttributeProto ? e.type : e.type();
      switch (o) {
        case q.onnx.AttributeProto.AttributeType.FLOAT:
          return "float";
        case q.onnx.AttributeProto.AttributeType.INT:
          return "int";
        case q.onnx.AttributeProto.AttributeType.STRING:
          return "string";
        case q.onnx.AttributeProto.AttributeType.TENSOR:
          return "tensor";
        case q.onnx.AttributeProto.AttributeType.FLOATS:
          return "floats";
        case q.onnx.AttributeProto.AttributeType.INTS:
          return "ints";
        case q.onnx.AttributeProto.AttributeType.STRINGS:
          return "strings";
        case q.onnx.AttributeProto.AttributeType.TENSORS:
          return "tensors";
        default:
          throw new Error(`attribute type is not supported yet: ${q.onnx.AttributeProto.AttributeType[o]}`);
      }
    }
    static getValue(e) {
      let o = e instanceof q.onnx.AttributeProto ? e.type : e.type();
      if (o === q.onnx.AttributeProto.AttributeType.GRAPH || o === q.onnx.AttributeProto.AttributeType.GRAPHS) throw new Error("graph attribute is not supported yet");
      let t = this.getValueNoCheck(e);
      if (o === q.onnx.AttributeProto.AttributeType.INT && Nt.isLong(t)) return Nt.longToNumber(t);
      if (o === q.onnx.AttributeProto.AttributeType.INTS) {
        let r = t, n = new Array(r.length);
        for (let s = 0; s < r.length; s++) {
          let a = r[s];
          n[s] = Nt.longToNumber(a);
        }
        return n;
      }
      if (o === q.onnx.AttributeProto.AttributeType.TENSOR) return e instanceof q.onnx.AttributeProto ? bt.fromProto(t) : bt.fromOrtTensor(t);
      if (o === q.onnx.AttributeProto.AttributeType.TENSORS) {
        if (e instanceof q.onnx.AttributeProto) return t.map((n) => bt.fromProto(n));
        if (e instanceof jt.Attribute) return t.map((n) => bt.fromOrtTensor(n));
      }
      return o === q.onnx.AttributeProto.AttributeType.STRING && e instanceof q.onnx.AttributeProto ? kr(t) : o === q.onnx.AttributeProto.AttributeType.STRINGS && e instanceof q.onnx.AttributeProto ? t.map(kr) : t;
    }
    static getValueNoCheck(e) {
      return e instanceof q.onnx.AttributeProto ? this.getValueNoCheckFromOnnxFormat(e) : this.getValueNoCheckFromOrtFormat(e);
    }
    static getValueNoCheckFromOnnxFormat(e) {
      switch (e.type) {
        case q.onnx.AttributeProto.AttributeType.FLOAT:
          return e.f;
        case q.onnx.AttributeProto.AttributeType.INT:
          return e.i;
        case q.onnx.AttributeProto.AttributeType.STRING:
          return e.s;
        case q.onnx.AttributeProto.AttributeType.TENSOR:
          return e.t;
        case q.onnx.AttributeProto.AttributeType.GRAPH:
          return e.g;
        case q.onnx.AttributeProto.AttributeType.FLOATS:
          return e.floats;
        case q.onnx.AttributeProto.AttributeType.INTS:
          return e.ints;
        case q.onnx.AttributeProto.AttributeType.STRINGS:
          return e.strings;
        case q.onnx.AttributeProto.AttributeType.TENSORS:
          return e.tensors;
        case q.onnx.AttributeProto.AttributeType.GRAPHS:
          return e.graphs;
        default:
          throw new Error(`unsupported attribute type: ${q.onnx.AttributeProto.AttributeType[e.type]}`);
      }
    }
    static getValueNoCheckFromOrtFormat(e) {
      switch (e.type()) {
        case jt.AttributeType.FLOAT:
          return e.f();
        case jt.AttributeType.INT:
          return e.i();
        case jt.AttributeType.STRING:
          return e.s();
        case jt.AttributeType.TENSOR:
          return e.t();
        case jt.AttributeType.GRAPH:
          return e.g();
        case jt.AttributeType.FLOATS:
          return e.floatsArray();
        case jt.AttributeType.INTS: {
          let o = [];
          for (let t = 0; t < e.intsLength(); t++) o.push(e.ints(t));
          return o;
        }
        case jt.AttributeType.STRINGS: {
          let o = [];
          for (let t = 0; t < e.stringsLength(); t++) o.push(e.strings(t));
          return o;
        }
        case jt.AttributeType.TENSORS: {
          let o = [];
          for (let t = 0; t < e.tensorsLength(); t++) o.push(e.tensors(t));
          return o;
        }
        default:
          throw new Error(`unsupported attribute type: ${jt.AttributeType[e.type()]}`);
      }
    }
  };
});
var Mi, Yn, Ui, ce, Zn, Gi, Ap = O(() => {
  Sp();
  Pr();
  Mi = rr(sr());
  ze();
  Y();
  Yn = F.experimental.fbs, Ui = { from: (i, e) => new Gi(i, e) }, ce = class {
    constructor(e) {
      this._from = void 0, this._to = [], this.tensor = void 0, this.type = void 0, e && (this.type = _t.tensorValueTypeFromProto(e.type.tensorType));
    }
    get from() {
      return this._from;
    }
    get to() {
      return this._to;
    }
  }, Zn = class {
    constructor(e, o) {
      e instanceof Mi.onnx.NodeProto ? (this.name = e.name, this.opType = e.opType, this.attributes = new Ur(e.attribute)) : e instanceof Yn.Node && (this.name = o ?? e.name(), this.opType = e.opType(), this.attributes = new Ur(_t.tensorAttributesFromORTFormat(e))), this.inputs = [], this.outputs = [], this.executeNode = true;
    }
  }, Gi = class {
    constructor(e, o) {
      if (!e) throw new TypeError("graph is empty");
      this.buildGraph(e), this.transformGraph(o), this.checkIsAcyclic();
    }
    getInputIndices() {
      return this._allInputIndices;
    }
    getInputNames() {
      return this._allInputNames;
    }
    getOutputIndices() {
      return this._allOutputIndices;
    }
    getOutputNames() {
      return this._allOutputNames;
    }
    getValues() {
      return this._allData;
    }
    getNodes() {
      return this._nodes;
    }
    buildGraph(e) {
      if (e instanceof Mi.onnx.GraphProto) this.buildGraphFromOnnxFormat(e);
      else if (e instanceof Yn.Graph) this.buildGraphFromOrtFormat(e);
      else throw new TypeError("Graph type is not supported.");
    }
    buildGraphFromOnnxFormat(e) {
      let o = /* @__PURE__ */ new Map();
      this._allData = [], this._allInputIndices = [], this._allInputNames = [], this._allOutputIndices = [], this._allOutputNames = [], this._nodes = [];
      let t = /* @__PURE__ */ new Map();
      if (!e.input) throw new Error("missing information in graph: input");
      let r = [];
      for (let n of e.input) {
        if (o.has(n.name)) throw new Error(`duplicated input name: ${n.name}`);
        let s = this._allData.push(new ce(n)) - 1;
        o.set(n.name, s), r.push(n.name);
      }
      if (!e.initializer) throw new Error("missing information in graph: initializer");
      for (let n of e.initializer) {
        let s = o.get(n.name);
        if (s === void 0) {
          let a = new ce();
          a.type = { shape: { dims: _t.tensorDimsFromProto(n.dims) }, tensorType: _t.tensorDataTypeFromProto(n.dataType) }, s = this._allData.push(a) - 1, o.set(n.name, s);
        }
        this._allData[s]._from = -1, this._allData[s].tensor = bt.fromProto(n);
      }
      for (let n = 0; n < this._allData.length; n++) this._allData[n].tensor || (this._allInputIndices.push(n), this._allInputNames.push(r[n]));
      if (!e.output) throw new Error("missing information in graph: output");
      for (let n of e.output) {
        if (o.has(n.name)) throw new Error(`duplicated output name: ${n.name}`);
        let s = this._allData.push(new ce(n)) - 1;
        o.set(n.name, s), this._allOutputIndices.push(s), this._allOutputNames.push(n.name);
      }
      if (!e.node) throw new Error("missing information in graph: node");
      for (let n of e.node) {
        if (!n.name) for (let a = 0; ; a++) {
          let u = `unnamed_${n.opType}_${a}`;
          if (!t.has(u)) {
            n.name = u;
            break;
          }
        }
        if (t.has(n.name)) throw new Error(`duplicated node name: ${n.name}`);
        let s = this._nodes.push(new Zn(n)) - 1;
        t.set(n.name, s);
      }
      for (let n = 0; n < this._nodes.length; n++) {
        let s = this._nodes[n], a = e.node[n];
        if (!a.output) throw new Error(`missing output for node: ${a.name}`);
        for (let u of a.output) {
          let l = o.get(u);
          if (typeof l > "u" && (l = this._allData.push(new ce()) - 1, o.set(u, l)), s.outputs.push(l), this._allData[l]._from !== void 0) throw new Error(`multiple nodes output to one data value: ${l}`);
          if (this._allData[l]._from = n, a.opType === "Constant") {
            if (!a.attribute || a.attribute.length !== 1 || !a.attribute[0].t) throw new Error("missing attributes or missing tensor value in attributes for this Constant operator");
            if (!a.output || a.output.length !== 1) throw new Error("missing output or incorrect number of outputs for this Constant operator");
            s.outputs.pop(), s.executeNode = false, this._allData[l]._from = -1, this._allData[l].tensor = bt.fromProto(a.attribute[0].t);
          }
        }
      }
      for (let n = 0; n < this._nodes.length; n++) {
        let s = this._nodes[n], a = e.node[n];
        if (!a.input) throw new Error(`missing input for node: ${a.name}`);
        for (let u of a.input) {
          let l = o.get(u);
          if (typeof l > "u") {
            if (u === "" && (a.input.length === 3 || a.input.length === 4) && a.opType === "Resize") continue;
            throw new Error(`unrecognized input '${u}' for node: ${a.name}`);
          }
          s.inputs.push(l), this._allData[l]._to.push(n);
        }
      }
      return true;
    }
    buildGraphFromOrtFormat(e) {
      var _a, _b2, _c2;
      let o = /* @__PURE__ */ new Map();
      this._allData = [], this._allInputIndices = [], this._allInputNames = [], this._allOutputIndices = [], this._allOutputNames = [], this._nodes = [];
      let t = /* @__PURE__ */ new Map(), r = [];
      for (let n = 0; n < e.inputsLength(); n++) {
        let s = e.inputs(n);
        if (o.has(s)) throw new Error(`duplicated input name: ${s}`);
        for (let a = 0; a < e.nodeArgsLength(); a++) if (((_a = e.nodeArgs(a)) == null ? void 0 : _a.name()) === s) {
          let u = new ce();
          if (((_c2 = (_b2 = e.nodeArgs(a)) == null ? void 0 : _b2.type()) == null ? void 0 : _c2.valueType()) !== Yn.TypeInfoValue.tensor_type) throw new Error("Unexpected value type for the nodeArg.");
          let f = e.nodeArgs(a).type().value(new Yn.TensorTypeAndShape()), p2 = _t.tensorDataTypeFromProto(f.elemType()), d = f.shape(), y = [];
          for (let v = 0; v < d.dimLength(); v++) y.push(Nt.longToNumber(d.dim(v).value().dimValue()));
          u.type = { shape: { dims: y }, tensorType: p2 };
          let w = this._allData.push(u) - 1;
          o.set(s, w), r.push(s);
        }
      }
      for (let n = 0; n < e.initializersLength(); n++) {
        let s = e.initializers(n), a = o.get(s.name());
        if (a === void 0) {
          let u = new ce(), l = _t.tensorDimsFromORTFormat(s), f = _t.tensorDataTypeFromProto(s.dataType());
          u.type = { shape: { dims: l }, tensorType: f }, a = this._allData.push(u) - 1, o.set(s.name(), a);
        }
        this._allData[a]._from = -1, this._allData[a].tensor = bt.fromOrtTensor(s);
      }
      for (let n = 0; n < this._allData.length; n++) this._allData[n].tensor || (this._allInputIndices.push(n), this._allInputNames.push(r[n]));
      for (let n = 0; n < e.outputsLength(); n++) {
        let s = e.outputs(n);
        if (o.has(s)) throw new Error(`duplicated output name: ${s}`);
        let a = this._allData.push(new ce()) - 1;
        o.set(s, a), this._allOutputIndices.push(a), this._allOutputNames.push(s);
      }
      if (!e.nodes) throw new Error("missing information in graph: node");
      for (let n = 0; n < e.nodesLength(); n++) {
        let s = e.nodes(n), a = s.name();
        if (!a) for (let l = 0; a = `unnamed_${s.opType()}_${l}`, !!t.has(a); l++) ;
        if (t.has(a)) throw new Error(`duplicated node name: ${a}`);
        let u = this._nodes.push(new Zn(s, a)) - 1;
        t.set(a, u);
      }
      for (let n = 0; n < this._nodes.length; n++) {
        let s = this._nodes[n], a = e.nodes(n);
        if (a == null) throw new Error(`No node exists at index ${n}`);
        if ((a == null ? void 0 : a.outputsLength()) === 0) throw new Error(`missing output for node: ${a.name}`);
        for (let u = 0; u < (a == null ? void 0 : a.outputsLength()); u++) {
          let l = a == null ? void 0 : a.outputs(u), f = o.get(l);
          if (typeof f > "u" && (f = this._allData.push(new ce()) - 1, o.set(l, f)), s.outputs.push(f), this._allData[f]._from !== void 0) throw new Error(`multiple nodes output to one data value: ${f}`);
          if (this._allData[f]._from = n, a.opType() === "Constant") {
            if (a.attributesLength() !== 1 || !a.attributes(0).t()) throw new Error("missing attributes or missing tensor value in attributes for this Constant operator");
            if (a.outputsLength() !== 1) throw new Error("missing output or incorrect number of outputs for this Constant operator");
            s.outputs.pop(), s.executeNode = false, this._allData[f]._from = -1, this._allData[f].tensor = bt.fromOrtTensor(a.attributes(0).t());
          }
        }
      }
      for (let n = 0; n < this._nodes.length; n++) {
        let s = this._nodes[n], a = e.nodes(n);
        if (a.inputsLength() === 0) throw new Error(`missing input for node: ${a.name}`);
        for (let u = 0; u < a.inputsLength(); u++) {
          let l = a.inputs(u), f = o.get(l);
          if (typeof f > "u") throw new Error(`unrecognized input '${l}' for node: ${a.name()}`);
          s.inputs.push(f), this._allData[f]._to.push(n);
        }
      }
    }
    checkIsAcyclic() {
      let e = /* @__PURE__ */ new Set();
      this._allInputIndices.forEach((r) => {
        this._allData[r]._to.forEach((s) => {
          e.add(s);
        });
      });
      let o = Array.from(e), t = new Array(this._nodes.length).fill("white");
      for (; o.length > 0; ) {
        let r = o.pop();
        t[r] === "gray" ? t[r] = "black" : (o.push(r), t[r] = "gray", this._nodes[r].outputs.forEach((n) => {
          let s = this._allData[n];
          if (typeof s.tensor < "u") throw new Error("node outputs should not be initialized");
          if (s._from !== r) throw new Error("from property of the Value object doesn't match index of Node being processed");
          s._to.forEach((a) => {
            if (t[a] === "gray") throw new Error("model graph is cyclic");
            t[a] === "white" && o.push(a);
          });
        }));
      }
    }
    transformGraph(e) {
      this.removeAllIdentityNodes(), this.removeAllDropoutNodes(), this.fuseConvActivationNodes(), e && e.transformGraph(this), this.finalizeGraph();
    }
    finalizeGraph() {
      let e = 0, o = new Array(this._nodes.length, 0), t = 0;
      for (let r = 0; r < this._nodes.length; r++) o[r] = t, this._nodes[r].executeNode ? (t !== r && (this._nodes[t] = this._nodes[r]), t++) : this._nodes[r].outputs.forEach((n) => {
        this._allData[n]._from = -2;
      });
      this._nodes.splice(t, this._nodes.length - t);
      for (let r = 0; r < this._allData.length; r++) {
        let n = this._allData[r];
        n._from !== void 0 && n._from !== -1 && n._from !== -2 && (n._from = o[n._from]);
        for (let s = 0; s < n._to.length; s++) if (n._to[s] >= 0) n._to[s] = o[n._to[s]];
        else throw new Error("Trying to update a removed node");
      }
      e = 0;
      for (let r = 0; r < this._allData.length; r++) {
        if (this._allData[r].from === -2 && this._allOutputIndices.indexOf(r + e) === -1) {
          e++, this._allData.splice(r, 1), r--;
          continue;
        }
        if (e > 0) {
          let n = -1;
          this._allData[r].from !== void 0 && this._allData[r].from !== -1 ? (n = this._nodes[this._allData[r].from].outputs.indexOf(r + e), n !== -1 && (this._nodes[this._allData[r].from].outputs[n] = r)) : (n = this._allInputIndices.indexOf(r + e), n !== -1 && (this._allInputIndices[n] = r)), this._allData[r].to.forEach((s) => {
            n = this._nodes[s].inputs.indexOf(r + e), n !== -1 && (this._nodes[s].inputs[n] = r);
          }), this._allData[r].to.length === 0 && (n = this._allOutputIndices.indexOf(r + e), n !== -1 && (this._allOutputIndices[n] = r));
        }
      }
    }
    deleteNode(e) {
      let o = this._nodes[e];
      if (o.outputs.length > 1) {
        for (let a = 1; a < o.outputs.length; a++) if (this._allData[o.outputs[a]].to.length > 0) throw new Error("Node deletion with more than one output connected to other nodes is not supported. ");
      }
      o.executeNode = false;
      let t = o.inputs[0], r = o.outputs[0], n = this._allData[r].to;
      for (let a = 0; a < o.inputs.length; a++) {
        let u = this._allData[o.inputs[a]].to.indexOf(e);
        if (u === -1) throw new Error("The Value object doesn't have the current Node in it's 'to' property ");
        this._allData[o.inputs[a]].to.splice(u, 1);
      }
      this._allData[r]._to = [];
      let s = this._allOutputIndices.indexOf(r);
      if (s !== -1 && (this._allOutputIndices[s] = t), n && n.length > 0) for (let a of n) {
        let u = this._nodes[a].inputs.indexOf(r);
        if (u === -1) throw new Error("The Node object doesn't have the output Value in it's 'inputs' property ");
        this._nodes[a].inputs[u] = t, this._allData[t].to.push(a);
      }
    }
    removeAllDropoutNodes() {
      let e = 0;
      for (let o of this._nodes) {
        if (o.opType === "Dropout") {
          if (o.inputs.length !== 1) throw new Error("Dropout nodes should only contain one input. ");
          if (o.outputs.length !== 1 && o.outputs.length !== 2) throw new Error("Dropout nodes should contain either 1 or 2 output(s)");
          if (o.outputs.length === 2 && this._allData[o.outputs[1]]._to.length !== 0) throw new Error("Dropout nodes's second output should not be referenced by other nodes");
          this.deleteNode(e);
        }
        e++;
      }
    }
    removeAllIdentityNodes() {
      let e = 0;
      for (let o of this._nodes) o.opType === "Identity" && this.deleteNode(e), e++;
    }
    isActivation(e) {
      switch (e.opType) {
        case "Relu":
        case "Sigmoid":
        case "Clip":
          return true;
        default:
          return false;
      }
    }
    fuseConvActivationNodes() {
      for (let e of this._nodes) if (e.opType === "Conv") {
        let o = this._allData[e.outputs[0]]._to;
        if (o.length === 1 && this.isActivation(this._nodes[o[0]])) {
          let t = this._nodes[o[0]];
          if (t.opType === "Clip") if (t.inputs.length === 1) try {
            e.attributes.set("activation_params", "floats", [t.attributes.getFloat("min"), t.attributes.getFloat("max")]);
          } catch {
            e.attributes.set("activation_params", "floats", [Ue, Ve]);
          }
          else if (t.inputs.length >= 3 && this._allData[t.inputs[1]].tensor !== void 0 && this._allData[t.inputs[2]].tensor !== void 0) e.attributes.set("activation_params", "floats", [this._allData[t.inputs[1]].tensor.floatData[0], this._allData[t.inputs[2]].tensor.floatData[0]]);
          else continue;
          e.attributes.set("activation", "string", t.opType), this.deleteNode(o[0]);
        }
      }
    }
  };
});
var Pp, Tg, Qn, Ep = O(() => {
  xn();
  Ap();
  Pr();
  Pp = rr(sr());
  Y();
  Tg = F.experimental.fbs, Qn = class {
    constructor() {
    }
    load(e, o, t) {
      let r;
      if (!t) try {
        this.loadFromOnnxFormat(e, o);
        return;
      } catch (n) {
        if (t !== void 0) throw n;
        r = n;
      }
      try {
        this.loadFromOrtFormat(e, o);
      } catch (n) {
        throw t !== void 0 ? n : new Error(`Failed to load model as ONNX format: ${r}
as ORT format: ${n}`);
      }
    }
    loadFromOnnxFormat(e, o) {
      let t = Pp.onnx.ModelProto.decode(e);
      if (Nt.longToNumber(t.irVersion) < 3) throw new Error("only support ONNX model with IR_VERSION>=3");
      this._opsets = t.opsetImport.map((n) => ({ domain: n.domain, version: Nt.longToNumber(n.version) })), this._graph = Ui.from(t.graph, o);
    }
    loadFromOrtFormat(e, o) {
      let t = new T.ByteBuffer(e), r = Tg.InferenceSession.getRootAsInferenceSession(t).model();
      if (Nt.longToNumber(r.irVersion()) < 3) throw new Error("only support ONNX model with IR_VERSION>=3");
      this._opsets = [];
      for (let s = 0; s < r.opsetImportLength(); s++) {
        let a = r.opsetImport(s);
        this._opsets.push({ domain: a == null ? void 0 : a.domain(), version: Nt.longToNumber(a.version()) });
      }
      this._graph = Ui.from(r.graph(), o);
    }
    get graph() {
      return this._graph;
    }
    get opsets() {
      return this._opsets;
    }
  };
});
var to, Dp = O(() => {
  _p();
  Op();
  Mt();
  Ep();
  to = class {
    constructor(e = {}) {
      this._initialized = false, this.backendHint = e.backendHint, this.profiler = gn.create(e.profiler), this.context = { profiler: this.profiler, graphInputTypes: [], graphInputDims: [] };
    }
    get inputNames() {
      return this._model.graph.getInputNames();
    }
    get outputNames() {
      return this._model.graph.getOutputNames();
    }
    startProfiling() {
      this.profiler.start();
    }
    endProfiling() {
      this.profiler.stop();
    }
    async loadModel(e, o, t) {
      await this.profiler.event("session", "Session.loadModel", async () => {
        let r = await Ni(this.backendHint);
        if (this.sessionHandler = r.createSessionHandler(this.context), this._model = new Qn(), typeof e == "string") {
          let n = e.endsWith(".ort");
          {
            let a = await (await fetch(e)).arrayBuffer();
            this.initialize(new Uint8Array(a), n);
          }
        } else if (ArrayBuffer.isView(e)) this.initialize(e);
        else {
          let n = new Uint8Array(e, o || 0, t || e.byteLength);
          this.initialize(n);
        }
      });
    }
    initialize(e, o) {
      if (this._initialized) throw new Error("already initialized");
      this.profiler.event("session", "Session.initialize", () => {
        let t = this.sessionHandler.transformGraph ? this.sessionHandler : void 0;
        this._model.load(e, t, o), this.sessionHandler.onGraphInitialized && this.sessionHandler.onGraphInitialized(this._model.graph), this.initializeOps(this._model.graph), this._executionPlan = new Jn(this._model.graph, this._ops, this.profiler);
      }), this._initialized = true;
    }
    async run(e) {
      if (!this._initialized) throw new Error("session not initialized yet");
      return this.profiler.event("session", "Session.run", async () => {
        let o = this.normalizeAndValidateInputs(e), t = await this._executionPlan.execute(this.sessionHandler, o);
        return this.createOutput(t);
      });
    }
    normalizeAndValidateInputs(e) {
      let o = this._model.graph.getInputNames();
      if (Array.isArray(e)) {
        if (e.length !== o.length) throw new Error(`incorrect input array length: expected ${o.length} but got ${e.length}`);
      } else {
        if (e.size !== o.length) throw new Error(`incorrect input map size: expected ${o.length} but got ${e.size}`);
        let t = new Array(e.size), r = 0;
        for (let n = 0; n < o.length; ++n) {
          let s = e.get(o[n]);
          if (!s) throw new Error(`missing input tensor for: '${name}'`);
          t[r++] = s;
        }
        e = t;
      }
      if (!this.context.graphInputTypes || this.context.graphInputTypes.length === 0 || !this.context.graphInputDims || this.context.graphInputDims.length === 0) {
        let t = this._model.graph.getInputIndices(), r = this._model.graph.getValues(), n = new Array(t.length);
        for (let s = 0; s < t.length; ++s) {
          let a = r[t[s]];
          n[s] = a.type.shape.dims, this.context.graphInputTypes.push(a.type.tensorType), this.context.graphInputDims.push(e[s].dims);
        }
        this.validateInputTensorDims(n, e, true);
      } else this.validateInputTensorDims(this.context.graphInputDims, e, false);
      return this.validateInputTensorTypes(this.context.graphInputTypes, e), e;
    }
    validateInputTensorTypes(e, o) {
      for (let t = 0; t < o.length; t++) {
        let r = e[t], n = o[t].type;
        if (r !== n) throw new Error(`input tensor[${t}] check failed: expected type '${r}' but got ${n}`);
      }
    }
    validateInputTensorDims(e, o, t) {
      for (let r = 0; r < o.length; r++) {
        let n = e[r], s = o[r].dims;
        if (!this.compareTensorDims(n, s, t)) throw new Error(`input tensor[${r}] check failed: expected shape '[${n.join(",")}]' but got [${s.join(",")}]`);
      }
    }
    compareTensorDims(e, o, t) {
      if (e.length !== o.length) return false;
      for (let r = 0; r < e.length; ++r) if (e[r] !== o[r] && (!t || e[r] !== 0)) return false;
      return true;
    }
    createOutput(e) {
      let o = this._model.graph.getOutputNames();
      if (e.length !== o.length) throw new Error("expected number of outputs do not match number of generated outputs");
      let t = /* @__PURE__ */ new Map();
      for (let r = 0; r < o.length; ++r) t.set(o[r], e[r]);
      return t;
    }
    initializeOps(e) {
      let o = e.getNodes();
      this._ops = new Array(o.length);
      for (let t = 0; t < o.length; t++) this._ops[t] = this.sessionHandler.resolve(o[t], this._model.opsets, e);
    }
  };
});
var eo, Lp = O(() => {
  Kt();
  ze();
  eo = class {
    constructor(e) {
      this.session = e;
      this.inputNames = this.session.inputNames, this.outputNames = this.session.outputNames;
    }
    async dispose() {
    }
    async run(e, o, t) {
      let r = /* @__PURE__ */ new Map();
      for (let a in e) if (Object.hasOwnProperty.call(e, a)) {
        let u = e[a];
        r.set(a, new bt(u.dims, u.type, void 0, void 0, u.data));
      }
      let n = await this.session.run(r), s = {};
      return n.forEach((a, u) => {
        s[u] = new Tt(a.type, a.data, a.dims);
      }), s;
    }
    startProfiling() {
      this.session.startProfiling();
    }
    endProfiling() {
      this.session.endProfiling();
    }
  };
});
var $p = {};
Or($p, { onnxjsBackend: () => wg });
var Vi, wg, kp = O(() => {
  Dp();
  Lp();
  Vi = class {
    async init() {
    }
    async createInferenceSessionHandler(e, o) {
      let t = new to(o);
      return typeof e == "string" ? await t.loadModel(e) : await t.loadModel(e), new eo(t);
    }
  }, wg = new Vi();
});
var ro = O(() => {
});
var Cp = {};
Or(Cp, { default: () => vg });
var Bp, Fp, vg, Np = O(() => {
  var _a;
  zi();
  Xe();
  Vr();
  Bp = "ort-wasm-proxy-worker", Fp = ((_a = globalThis.self) == null ? void 0 : _a.name) === Bp;
  Fp && (self.onmessage = (i) => {
    let { type: e, in: o } = i.data;
    try {
      switch (e) {
        case "init-wasm":
          no(o.wasm).then(() => {
            oo(o).then(() => {
              postMessage({ type: e });
            }, (t) => {
              postMessage({ type: e, err: t });
            });
          }, (t) => {
            postMessage({ type: e, err: t });
          });
          break;
        case "init-ep": {
          let { epName: t, env: r } = o;
          io(r, t).then(() => {
            postMessage({ type: e });
          }, (n) => {
            postMessage({ type: e, err: n });
          });
          break;
        }
        case "copy-from": {
          let { buffer: t } = o, r = zr(t);
          postMessage({ type: e, out: r });
          break;
        }
        case "create": {
          let { model: t, options: r } = o;
          ao(t, r).then((n) => {
            postMessage({ type: e, out: n });
          }, (n) => {
            postMessage({ type: e, err: n });
          });
          break;
        }
        case "release":
          so(o), postMessage({ type: e });
          break;
        case "run": {
          let { sessionId: t, inputIndices: r, inputs: n, outputIndices: s, options: a } = o;
          uo(t, r, n, s, new Array(s.length).fill(null), a).then((u) => {
            u.some((l) => l[3] !== "cpu") ? postMessage({ type: e, err: "Proxy does not support non-cpu tensor location." }) : postMessage({ type: e, out: u }, fo([...n, ...u]));
          }, (u) => {
            postMessage({ type: e, err: u });
          });
          break;
        }
        case "end-profiling":
          lo(o), postMessage({ type: e });
          break;
        default:
      }
    } catch (t) {
      postMessage({ type: e, err: t });
    }
  });
  vg = Fp ? null : (i) => new Worker(i ?? br, { type: "module", name: Bp });
});
var Gp = {};
Or(Gp, { default: () => Ig });
var Wi, Rp, Ig, Mp = O(() => {
  var _a;
  Rp = (Wi = import.meta.url, async function(i = {}) {
    function e() {
      return C.buffer != re.buffer && lt(), re;
    }
    function o() {
      return C.buffer != re.buffer && lt(), ye;
    }
    function t() {
      return C.buffer != re.buffer && lt(), Z;
    }
    function r() {
      return C.buffer != re.buffer && lt(), xe;
    }
    function n() {
      return C.buffer != re.buffer && lt(), oe;
    }
    var s, a, u = Object.assign({}, i), l = new Promise((c, m) => {
      s = c, a = m;
    }), f = typeof window == "object", p2 = typeof importScripts == "function", d = p2 && self.name == "em-pthread";
    u.mountExternalData = (c, m) => {
      (u.Ua || (u.Ua = /* @__PURE__ */ new Map())).set(c, m);
    }, u.unmountExternalData = () => {
      delete u.Ua;
    };
    var y, w, v = globalThis.SharedArrayBuffer ?? new WebAssembly.Memory({ initial: 0, maximum: 0, shared: true }).buffer.constructor, S = Object.assign({}, u), L = "./this.program", A = (c, m) => {
      throw m;
    }, P = "";
    (f || p2) && (p2 ? P = self.location.href : typeof document < "u" && document.currentScript && (P = document.currentScript.src), Wi && (P = Wi), P = P.startsWith("blob:") ? "" : P.substr(0, P.replace(/[?#].*/, "").lastIndexOf("/") + 1), p2 && (w = (c) => {
      var m = new XMLHttpRequest();
      return m.open("GET", c, false), m.responseType = "arraybuffer", m.send(null), new Uint8Array(m.response);
    }), y = (c, m, g) => {
      var x = new XMLHttpRequest();
      x.open("GET", c, true), x.responseType = "arraybuffer", x.onload = () => {
        x.status == 200 || x.status == 0 && x.response ? m(x.response) : g();
      }, x.onerror = g, x.send(null);
    });
    var M, V = console.log.bind(console), ut = console.error.bind(console), xt = V, et = ut;
    if (Object.assign(u, S), S = null, d) {
      let c = function(m) {
        try {
          var g = m.data, x = g.cmd;
          if (x === "load") {
            let I = [];
            self.onmessage = (E) => I.push(E), self.startWorker = () => {
              postMessage({ cmd: "loaded" });
              for (let E of I) c(E);
              self.onmessage = c;
            };
            for (let E of g.handlers) u[E] && !u[E].proxy || (u[E] = (...R) => {
              postMessage({ Za: "callHandler", kb: E, args: R });
            }, E == "print" && (xt = u[E]), E == "printErr" && (et = u[E]));
            C = g.wasmMemory, lt(), Et(g.wasmModule);
          } else if (x === "run") {
            Eo(g.pthread_ptr, 0, 0, 1, 0, 0), _o(g.pthread_ptr), dd(), ia(), It || (It = true);
            try {
              hd(g.start_routine, g.arg);
            } catch (I) {
              if (I != "unwind") throw I;
            }
          } else x === "cancel" ? er() && en(-1) : g.target !== "setimmediate" && (x === "checkMailbox" ? It && Zr() : x && (et(`worker: received unknown command ${x}`), et(g)));
        } catch (I) {
          throw Wa(), I;
        }
      };
      var Et, It = false;
      et = function(...m) {
        m = m.join(" "), console.error(m);
      }, self.alert = function(...m) {
        postMessage({ Za: "alert", text: m.join(" "), mb: er() });
      }, u.instantiateWasm = (m, g) => new Promise((x) => {
        Et = (I) => {
          I = new WebAssembly.Instance(I, Kr()), g(I), x();
        };
      }), self.onunhandledrejection = (m) => {
        throw m.reason || m;
      }, self.onmessage = c;
    }
    u.wasmBinary && (M = u.wasmBinary);
    var C, jr, ge, re, ye, Z, xe, ne, oe, pe = false;
    function lt() {
      var c = C.buffer;
      u.HEAP8 = re = new Int8Array(c), u.HEAP16 = new Int16Array(c), u.HEAPU8 = ye = new Uint8Array(c), u.HEAPU16 = new Uint16Array(c), u.HEAP32 = Z = new Int32Array(c), u.HEAPU32 = xe = new Uint32Array(c), u.HEAPF32 = new Float32Array(c), u.HEAPF64 = oe = new Float64Array(c), u.HEAP64 = ne = new BigInt64Array(c), u.HEAPU64 = new BigUint64Array(c);
    }
    if (!d) {
      if (!((C = new WebAssembly.Memory({ initial: 256, maximum: 65536, shared: true })).buffer instanceof v)) throw et("requested a shared WebAssembly.Memory but the returned buffer is not a SharedArrayBuffer, indicating that while the browser has SharedArrayBuffer it does not have WebAssembly threads support - you may need to set a flag"), Error("bad memory");
      lt();
    }
    var Gt = [], Xr = [], Je = [], Te = 0, Ee = null;
    function we() {
      if (--Te == 0 && Ee) {
        var c = Ee;
        Ee = null, c();
      }
    }
    function ie(c) {
      throw et(c = "Aborted(" + c + ")"), pe = true, ge = 1, c = new WebAssembly.RuntimeError(c + ". Build with -sASSERTIONS for more info."), a(c), c;
    }
    var Ze, Ot = (c) => c.startsWith("data:application/octet-stream;base64,"), St = (c) => c.startsWith("file://");
    function de(c) {
      if (c == Ze && M) return new Uint8Array(M);
      if (w) return w(c);
      throw "both async and sync fetching of the wasm failed";
    }
    function wr(c, m, g) {
      return function(x) {
        if (!M && (f || p2)) {
          if (typeof fetch == "function" && !St(x)) return fetch(x, { credentials: "same-origin" }).then((I) => {
            if (!I.ok) throw `failed to load wasm binary file at '${x}'`;
            return I.arrayBuffer();
          }).catch(() => de(x));
          if (y) return new Promise((I, E) => {
            y(x, (R) => I(new Uint8Array(R)), E);
          });
        }
        return Promise.resolve().then(() => de(x));
      }(c).then((x) => WebAssembly.instantiate(x, m)).then(g, (x) => {
        et(`failed to asynchronously prepare wasm: ${x}`), ie(x);
      });
    }
    function Kr() {
      return { a: { j: pd, b: bd, E: fa, g: da, V: ha, A: ga, C: ya, W: xa, T: Ta, L: wa, S: va, o: Ia, B: _a2, y: Oa, U: Sa, z: Aa, _: gd, Z: yd, P: xd, w: Td, F: wd, k: vd, O: _o, Y: Id, I: _d, J: Od, K: Sd, G: Da, H: La, v: Ad, q: Pd, l: Ed, p: Dd, e: Ld, X: $d, x: kd, d: $a, f: Bd, i: Fd, u: Cd, t: Nd, s: Rd, Q: Fa, R: Ca, D: Io, h: Na, n: Ra, M: Ga, m: Ma, a: C, r: vo, N: za, c: Ud } };
    }
    var ta = { 822132: (c, m, g, x) => {
      if (u === void 0 || !u.Ua) return 1;
      if ((c = Ir(c >>> 0)).startsWith("./") && (c = c.substring(2)), !(c = u.Ua.get(c))) return 2;
      if (x >>>= 0, (m >>>= 0) + (g >>>= 0) > c.byteLength) return 3;
      try {
        return o().set(c.subarray(m, m + g), x >>> 0), 0;
      } catch {
        return 4;
      }
    }, 822633: () => typeof wasmOffsetConverter < "u" };
    function pd() {
      return typeof wasmOffsetConverter < "u";
    }
    function To(c) {
      this.name = "ExitStatus", this.message = `Program terminated with exit(${c})`, this.status = c;
    }
    var wo = (c) => {
      c.terminate(), c.onmessage = () => {
      };
    }, ea = (c) => {
      ve.length == 0 && (sa(), aa(ve[0]));
      var m = ve.pop();
      if (!m) return 6;
      De.push(m), ae[c.Ra] = m, m.Ra = c.Ra;
      var g = { cmd: "run", start_routine: c.cb, arg: c.ab, pthread_ptr: c.Ra };
      return m.postMessage(g, c.ib), 0;
    }, vr = 0, at = (c, m, ...g) => {
      for (var x = 2 * g.length, I = $o(), E = Lo(8 * x), R = E >>> 3, it = 0; it < g.length; it++) {
        var At = g[it];
        typeof At == "bigint" ? (ne[R + 2 * it] = 1n, ne[R + 2 * it + 1] = At) : (ne[R + 2 * it] = 0n, n()[R + 2 * it + 1 >>> 0] = At);
      }
      return c = Ha(c, 0, x, E, m), rn(I), c;
    };
    function vo(c) {
      if (d) return at(0, 1, c);
      if (ge = c, !(0 < vr)) {
        for (var m of De) wo(m);
        for (m of ve) wo(m);
        ve = [], De = [], ae = [], pe = true;
      }
      A(c, new To(c));
    }
    function ra(c) {
      if (d) return at(1, 0, c);
      Io(c);
    }
    var Io = (c) => {
      if (ge = c, d) throw ra(c), "unwind";
      vo(c);
    }, ve = [], De = [], na = [], ae = {}, oa = (c) => {
      var m = c.Ra;
      delete ae[m], ve.push(c), De.splice(De.indexOf(c), 1), c.Ra = 0, Do(m);
    };
    function ia() {
      na.forEach((c) => c());
    }
    var aa = (c) => new Promise((m) => {
      c.onmessage = (I) => {
        var E = (I = I.data).cmd;
        if (I.targetThread && I.targetThread != er()) {
          var R = ae[I.targetThread];
          R ? R.postMessage(I, I.transferList) : et(`Internal error! Worker sent a message "${E}" to target pthread ${I.targetThread}, but that thread no longer exists!`);
        } else E === "checkMailbox" ? Zr() : E === "spawnThread" ? ea(I) : E === "cleanupThread" ? oa(ae[I.thread]) : E === "killThread" ? (I = I.thread, E = ae[I], delete ae[I], wo(E), Do(I), De.splice(De.indexOf(E), 1), E.Ra = 0) : E === "cancelThread" ? ae[I.thread].postMessage({ cmd: "cancel" }) : E === "loaded" ? (c.loaded = true, m(c)) : E === "alert" ? alert(`Thread ${I.threadId}: ${I.text}`) : I.target === "setimmediate" ? c.postMessage(I) : E === "callHandler" ? u[I.handler](...I.args) : E && et(`worker sent an unknown command ${E}`);
      }, c.onerror = (I) => {
        throw et(`worker sent an error! ${I.filename}:${I.lineno}: ${I.message}`), I;
      };
      var g, x = [];
      for (g of []) u.hasOwnProperty(g) && x.push(g);
      c.postMessage({ cmd: "load", handlers: x, wasmMemory: C, wasmModule: jr });
    });
    function sa() {
      var c = new Worker(new URL(import.meta.url), { type: "module", workerData: "em-pthread", name: "em-pthread" });
      ve.push(c);
    }
    var ua, Jr = (c) => {
      for (; 0 < c.length; ) c.shift()(u);
    }, dd = () => {
      var c = er(), m = r()[c + 52 >>> 2 >>> 0];
      c = r()[c + 56 >>> 2 >>> 0], ja(m, m - c), rn(m);
    }, Yr = [], hd = (c, m) => {
      vr = 0;
      var g = Yr[c];
      g || (c >= Yr.length && (Yr.length = c + 1), Yr[c] = g = ua.get(c)), c = g(m), 0 < vr ? ge = c : en(c);
    };
    class md {
      constructor(m) {
        this.Xa = m - 24;
      }
    }
    function bd(c, m, g) {
      var x = new md(c >>>= 0);
      throw m >>>= 0, g >>>= 0, r()[x.Xa + 16 >>> 2 >>> 0] = 0, r()[x.Xa + 4 >>> 2 >>> 0] = m, r()[x.Xa + 8 >>> 2 >>> 0] = g, c;
    }
    function la(c, m, g, x) {
      return d ? at(2, 1, c, m, g, x) : fa(c, m, g, x);
    }
    function fa(c, m, g, x) {
      if (c >>>= 0, m >>>= 0, g >>>= 0, x >>>= 0, v === void 0) return et("Current environment does not support SharedArrayBuffer, pthreads are not available!"), 6;
      var I = [];
      return d && I.length === 0 ? la(c, m, g, x) : (c = { cb: g, Ra: c, ab: x, ib: I }, d ? (c.Za = "spawnThread", postMessage(c, I), 0) : ea(c));
    }
    var ca = typeof TextDecoder < "u" ? new TextDecoder("utf8") : void 0, pa = (c, m, g) => {
      var x = (m >>>= 0) + g;
      for (g = m; c[g] && !(g >= x); ) ++g;
      if (16 < g - m && c.buffer && ca) return ca.decode(c.buffer instanceof v ? c.slice(m, g) : c.subarray(m, g));
      for (x = ""; m < g; ) {
        var I = c[m++];
        if (128 & I) {
          var E = 63 & c[m++];
          if ((224 & I) == 192) x += String.fromCharCode((31 & I) << 6 | E);
          else {
            var R = 63 & c[m++];
            65536 > (I = (240 & I) == 224 ? (15 & I) << 12 | E << 6 | R : (7 & I) << 18 | E << 12 | R << 6 | 63 & c[m++]) ? x += String.fromCharCode(I) : (I -= 65536, x += String.fromCharCode(55296 | I >> 10, 56320 | 1023 & I));
          }
        } else x += String.fromCharCode(I);
      }
      return x;
    }, Ir = (c, m) => (c >>>= 0) ? pa(o(), c, m) : "";
    function da(c, m, g) {
      return d ? at(3, 1, c, m, g) : 0;
    }
    function ha(c, m) {
      if (d) return at(4, 1, c, m);
    }
    var ma = (c) => {
      for (var m = 0, g = 0; g < c.length; ++g) {
        var x = c.charCodeAt(g);
        127 >= x ? m++ : 2047 >= x ? m += 2 : 55296 <= x && 57343 >= x ? (m += 4, ++g) : m += 3;
      }
      return m;
    }, ba = (c, m, g, x) => {
      if (!(0 < x)) return 0;
      var I = g >>>= 0;
      x = g + x - 1;
      for (var E = 0; E < c.length; ++E) {
        var R = c.charCodeAt(E);
        if (55296 <= R && 57343 >= R && (R = 65536 + ((1023 & R) << 10) | 1023 & c.charCodeAt(++E)), 127 >= R) {
          if (g >= x) break;
          m[g++ >>> 0] = R;
        } else {
          if (2047 >= R) {
            if (g + 1 >= x) break;
            m[g++ >>> 0] = 192 | R >> 6;
          } else {
            if (65535 >= R) {
              if (g + 2 >= x) break;
              m[g++ >>> 0] = 224 | R >> 12;
            } else {
              if (g + 3 >= x) break;
              m[g++ >>> 0] = 240 | R >> 18, m[g++ >>> 0] = 128 | R >> 12 & 63;
            }
            m[g++ >>> 0] = 128 | R >> 6 & 63;
          }
          m[g++ >>> 0] = 128 | 63 & R;
        }
      }
      return m[g >>> 0] = 0, g - I;
    }, _r = (c, m, g) => ba(c, o(), m, g);
    function ga(c, m) {
      if (d) return at(5, 1, c, m);
    }
    function ya(c, m, g) {
      if (d) return at(6, 1, c, m, g);
    }
    function xa(c, m, g) {
      return d ? at(7, 1, c, m, g) : 0;
    }
    function Ta(c, m) {
      if (d) return at(8, 1, c, m);
    }
    function wa(c, m, g) {
      if (d) return at(9, 1, c, m, g);
    }
    function va(c, m, g, x) {
      if (d) return at(10, 1, c, m, g, x);
    }
    function Ia(c, m, g, x) {
      if (d) return at(11, 1, c, m, g, x);
    }
    function _a2(c, m, g, x) {
      if (d) return at(12, 1, c, m, g, x);
    }
    function Oa(c) {
      if (d) return at(13, 1, c);
    }
    function Sa(c, m) {
      if (d) return at(14, 1, c, m);
    }
    function Aa(c, m, g) {
      if (d) return at(15, 1, c, m, g);
    }
    var gd = () => {
      ie("");
    }, yd = () => 1;
    function xd(c) {
      Eo(c >>> 0, !p2, 1, !f, 131072, false), ia();
    }
    function _o(c) {
      c >>>= 0, typeof Atomics.jb == "function" && (Atomics.jb(t(), c >>> 2, c).value.then(Zr), c += 128, Atomics.store(t(), c >>> 2, 1));
    }
    var Zr = () => {
      var c = er();
      if (c && (_o(c), c = qa, !pe)) try {
        if (c(), !(0 < vr)) try {
          d ? en(ge) : Io(ge);
        } catch (m) {
          m instanceof To || m == "unwind" || A(1, m);
        }
      } catch (m) {
        m instanceof To || m == "unwind" || A(1, m);
      }
    };
    function Td(c, m) {
      (c >>>= 0) == m >>> 0 ? setTimeout(Zr) : d ? postMessage({ targetThread: c, cmd: "checkMailbox" }) : (c = ae[c]) && c.postMessage({ cmd: "checkMailbox" });
    }
    var Oo = [];
    function wd(c, m, g, x, I) {
      for (m >>>= 0, x /= 2, Oo.length = x, g = I >>> 0 >>> 3, I = 0; I < x; I++) Oo[I] = ne[g + 2 * I] ? ne[g + 2 * I + 1] : n()[g + 2 * I + 1 >>> 0];
      return (m ? ta[m] : Vd[c])(...Oo);
    }
    function vd(c) {
      c >>>= 0, d ? postMessage({ cmd: "cleanupThread", thread: c }) : oa(ae[c]);
    }
    function Id(c) {
    }
    function _d(c, m) {
      c = -9007199254740992 > c || 9007199254740992 < c ? NaN : Number(c), m >>>= 0, c = new Date(1e3 * c), t()[m >>> 2 >>> 0] = c.getUTCSeconds(), t()[m + 4 >>> 2 >>> 0] = c.getUTCMinutes(), t()[m + 8 >>> 2 >>> 0] = c.getUTCHours(), t()[m + 12 >>> 2 >>> 0] = c.getUTCDate(), t()[m + 16 >>> 2 >>> 0] = c.getUTCMonth(), t()[m + 20 >>> 2 >>> 0] = c.getUTCFullYear() - 1900, t()[m + 24 >>> 2 >>> 0] = c.getUTCDay(), c = (c.getTime() - Date.UTC(c.getUTCFullYear(), 0, 1, 0, 0, 0, 0)) / 864e5 | 0, t()[m + 28 >>> 2 >>> 0] = c;
    }
    var Qe = (c) => c % 4 == 0 && (c % 100 != 0 || c % 400 == 0), Pa = [0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335], Ea = [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334];
    function Od(c, m) {
      c = -9007199254740992 > c || 9007199254740992 < c ? NaN : Number(c), m >>>= 0, c = new Date(1e3 * c), t()[m >>> 2 >>> 0] = c.getSeconds(), t()[m + 4 >>> 2 >>> 0] = c.getMinutes(), t()[m + 8 >>> 2 >>> 0] = c.getHours(), t()[m + 12 >>> 2 >>> 0] = c.getDate(), t()[m + 16 >>> 2 >>> 0] = c.getMonth(), t()[m + 20 >>> 2 >>> 0] = c.getFullYear() - 1900, t()[m + 24 >>> 2 >>> 0] = c.getDay();
      var g = (Qe(c.getFullYear()) ? Pa : Ea)[c.getMonth()] + c.getDate() - 1 | 0;
      t()[m + 28 >>> 2 >>> 0] = g, t()[m + 36 >>> 2 >>> 0] = -60 * c.getTimezoneOffset(), g = new Date(c.getFullYear(), 6, 1).getTimezoneOffset();
      var x = new Date(c.getFullYear(), 0, 1).getTimezoneOffset();
      c = 0 | (g != x && c.getTimezoneOffset() == Math.min(x, g)), t()[m + 32 >>> 2 >>> 0] = c;
    }
    function Sd(c) {
      c >>>= 0;
      var m = new Date(t()[c + 20 >>> 2 >>> 0] + 1900, t()[c + 16 >>> 2 >>> 0], t()[c + 12 >>> 2 >>> 0], t()[c + 8 >>> 2 >>> 0], t()[c + 4 >>> 2 >>> 0], t()[c >>> 2 >>> 0], 0), g = t()[c + 32 >>> 2 >>> 0], x = m.getTimezoneOffset(), I = new Date(m.getFullYear(), 6, 1).getTimezoneOffset(), E = new Date(m.getFullYear(), 0, 1).getTimezoneOffset(), R = Math.min(E, I);
      return 0 > g ? t()[c + 32 >>> 2 >>> 0] = +(I != E && R == x) : 0 < g != (R == x) && (I = Math.max(E, I), m.setTime(m.getTime() + 6e4 * ((0 < g ? R : I) - x))), t()[c + 24 >>> 2 >>> 0] = m.getDay(), g = (Qe(m.getFullYear()) ? Pa : Ea)[m.getMonth()] + m.getDate() - 1 | 0, t()[c + 28 >>> 2 >>> 0] = g, t()[c >>> 2 >>> 0] = m.getSeconds(), t()[c + 4 >>> 2 >>> 0] = m.getMinutes(), t()[c + 8 >>> 2 >>> 0] = m.getHours(), t()[c + 12 >>> 2 >>> 0] = m.getDate(), t()[c + 16 >>> 2 >>> 0] = m.getMonth(), t()[c + 20 >>> 2 >>> 0] = m.getYear(), c = m.getTime(), BigInt(isNaN(c) ? -1 : c / 1e3);
    }
    function Da(c, m, g, x, I, E, R) {
      return d ? at(16, 1, c, m, g, x, I, E, R) : -52;
    }
    function La(c, m, g, x, I, E) {
      if (d) return at(17, 1, c, m, g, x, I, E);
    }
    function Ad(c, m, g, x) {
      c >>>= 0, m >>>= 0, g >>>= 0, x >>>= 0;
      var I = (/* @__PURE__ */ new Date()).getFullYear(), E = new Date(I, 0, 1), R = new Date(I, 6, 1);
      I = E.getTimezoneOffset();
      var it = R.getTimezoneOffset(), At = Math.max(I, it);
      r()[c >>> 2 >>> 0] = 60 * At, t()[m >>> 2 >>> 0] = +(I != it), E = (c = (Dt) => Dt.toLocaleTimeString(void 0, { hour12: false, timeZoneName: "short" }).split(" ")[1])(E), R = c(R), it < I ? (_r(E, g, 17), _r(R, x, 17)) : (_r(E, x, 17), _r(R, g, 17));
    }
    var So = [];
    function Pd(c, m, g) {
      c >>>= 0, m >>>= 0, g >>>= 0, So.length = 0;
      for (var x; x = o()[m++ >>> 0]; ) {
        var I = x != 105;
        g += (I &= x != 112) && g % 8 ? 4 : 0, So.push(x == 112 ? r()[g >>> 2 >>> 0] : x == 106 ? ne[g >>> 3] : x == 105 ? t()[g >>> 2 >>> 0] : n()[g >>> 3 >>> 0]), g += I ? 8 : 4;
      }
      return ta[c](...So);
    }
    var Ed = () => {
    }, Dd = () => Date.now();
    function Ld(c, m) {
      return et(Ir(c >>> 0, m >>> 0));
    }
    var $a, $d = () => {
      throw vr += 1, "unwind";
    };
    function kd() {
      return 4294901760;
    }
    $a = () => performance.timeOrigin + performance.now();
    var Bd = () => navigator.hardwareConcurrency;
    function Fd() {
      return ie("Cannot use emscripten_pc_get_function without -sUSE_OFFSET_CONVERTER"), 0;
    }
    function Cd(c) {
      c >>>= 0;
      var m = o().length;
      if (c <= m || 4294901760 < c) return false;
      for (var g = 1; 4 >= g; g *= 2) {
        var x = m * (1 + 0.2 / g);
        x = Math.min(x, c + 100663296);
        var I = Math;
        x = Math.max(c, x);
        t: {
          I = (I.min.call(I, 4294901760, x + (65536 - x % 65536) % 65536) - C.buffer.byteLength + 65535) / 65536;
          try {
            C.grow(I), lt();
            var E = 1;
            break t;
          } catch {
          }
          E = void 0;
        }
        if (E) return true;
      }
      return false;
    }
    var Qr = () => (ie("Cannot use convertFrameToPC (needed by __builtin_return_address) without -sUSE_OFFSET_CONVERTER"), 0), tr = {}, ka = (c) => {
      c.forEach((m) => {
        Qr();
      });
    };
    function Nd() {
      var c = Error().stack.toString().split(`
`);
      return c[0] == "Error" && c.shift(), ka(c), tr.$a = Qr(), tr.bb = c, tr.$a;
    }
    function Rd(c, m, g) {
      if (c >>>= 0, m >>>= 0, tr.$a == c) var x = tr.bb;
      else (x = Error().stack.toString().split(`
`))[0] == "Error" && x.shift(), ka(x);
      for (var I = 3; x[I] && Qr() != c; ) ++I;
      for (c = 0; c < g && x[c + I]; ++c) t()[m + 4 * c >>> 2 >>> 0] = Qr();
      return c;
    }
    var Ao, Po = {}, Ba = () => {
      if (!Ao) {
        var c, m = { USER: "web_user", LOGNAME: "web_user", PATH: "/", PWD: "/", HOME: "/home/web_user", LANG: (typeof navigator == "object" && navigator.languages && navigator.languages[0] || "C").replace("-", "_") + ".UTF-8", _: L };
        for (c in Po) Po[c] === void 0 ? delete m[c] : m[c] = Po[c];
        var g = [];
        for (c in m) g.push(`${c}=${m[c]}`);
        Ao = g;
      }
      return Ao;
    };
    function Fa(c, m) {
      if (d) return at(18, 1, c, m);
      c >>>= 0, m >>>= 0;
      var g = 0;
      return Ba().forEach((x, I) => {
        var E = m + g;
        for (I = r()[c + 4 * I >>> 2 >>> 0] = E, E = 0; E < x.length; ++E) e()[I++ >>> 0] = x.charCodeAt(E);
        e()[I >>> 0] = 0, g += x.length + 1;
      }), 0;
    }
    function Ca(c, m) {
      if (d) return at(19, 1, c, m);
      c >>>= 0, m >>>= 0;
      var g = Ba();
      r()[c >>> 2 >>> 0] = g.length;
      var x = 0;
      return g.forEach((I) => x += I.length + 1), r()[m >>> 2 >>> 0] = x, 0;
    }
    function Na(c) {
      return d ? at(20, 1, c) : 52;
    }
    function Ra(c, m, g, x) {
      return d ? at(21, 1, c, m, g, x) : 52;
    }
    function Ga(c, m, g, x) {
      return d ? at(22, 1, c, m, g, x) : 70;
    }
    var Gd = [null, [], []];
    function Ma(c, m, g, x) {
      if (d) return at(23, 1, c, m, g, x);
      m >>>= 0, g >>>= 0, x >>>= 0;
      for (var I = 0, E = 0; E < g; E++) {
        var R = r()[m >>> 2 >>> 0], it = r()[m + 4 >>> 2 >>> 0];
        m += 8;
        for (var At = 0; At < it; At++) {
          var Dt = o()[R + At >>> 0], Bt = Gd[c];
          Dt === 0 || Dt === 10 ? ((c === 1 ? xt : et)(pa(Bt, 0)), Bt.length = 0) : Bt.push(Dt);
        }
        I += it;
      }
      return r()[x >>> 2 >>> 0] = I, 0;
    }
    var Ua = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31], Va = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31], Md = (c, m) => {
      e().set(c, m >>> 0);
    };
    function za(c, m, g, x) {
      function I(_, Q, ft) {
        for (_ = typeof _ == "number" ? _.toString() : _ || ""; _.length < Q; ) _ = ft[0] + _;
        return _;
      }
      function E(_, Q) {
        return I(_, Q, "0");
      }
      function R(_, Q) {
        function ft(Ya) {
          return 0 > Ya ? -1 : 0 < Ya ? 1 : 0;
        }
        var Le;
        return (Le = ft(_.getFullYear() - Q.getFullYear())) === 0 && (Le = ft(_.getMonth() - Q.getMonth())) === 0 && (Le = ft(_.getDate() - Q.getDate())), Le;
      }
      function it(_) {
        switch (_.getDay()) {
          case 0:
            return new Date(_.getFullYear() - 1, 11, 29);
          case 1:
            return _;
          case 2:
            return new Date(_.getFullYear(), 0, 3);
          case 3:
            return new Date(_.getFullYear(), 0, 2);
          case 4:
            return new Date(_.getFullYear(), 0, 1);
          case 5:
            return new Date(_.getFullYear() - 1, 11, 31);
          case 6:
            return new Date(_.getFullYear() - 1, 11, 30);
        }
      }
      function At(_) {
        var Q = _.Sa;
        for (_ = new Date(new Date(_.Ta + 1900, 0, 1).getTime()); 0 < Q; ) {
          var ft = _.getMonth(), Le = (Qe(_.getFullYear()) ? Ua : Va)[ft];
          if (!(Q > Le - _.getDate())) {
            _.setDate(_.getDate() + Q);
            break;
          }
          Q -= Le - _.getDate() + 1, _.setDate(1), 11 > ft ? _.setMonth(ft + 1) : (_.setMonth(0), _.setFullYear(_.getFullYear() + 1));
        }
        return ft = new Date(_.getFullYear() + 1, 0, 4), Q = it(new Date(_.getFullYear(), 0, 4)), ft = it(ft), 0 >= R(Q, _) ? 0 >= R(ft, _) ? _.getFullYear() + 1 : _.getFullYear() : _.getFullYear() - 1;
      }
      c >>>= 0, m >>>= 0, g >>>= 0, x >>>= 0;
      var Dt = r()[x + 40 >>> 2 >>> 0];
      for (var Bt in x = { gb: t()[x >>> 2 >>> 0], fb: t()[x + 4 >>> 2 >>> 0], Va: t()[x + 8 >>> 2 >>> 0], Ya: t()[x + 12 >>> 2 >>> 0], Wa: t()[x + 16 >>> 2 >>> 0], Ta: t()[x + 20 >>> 2 >>> 0], Qa: t()[x + 24 >>> 2 >>> 0], Sa: t()[x + 28 >>> 2 >>> 0], nb: t()[x + 32 >>> 2 >>> 0], eb: t()[x + 36 >>> 2 >>> 0], hb: Dt ? Ir(Dt) : "" }, g = Ir(g), Dt = { "%c": "%a %b %d %H:%M:%S %Y", "%D": "%m/%d/%y", "%F": "%Y-%m-%d", "%h": "%b", "%r": "%I:%M:%S %p", "%R": "%H:%M", "%T": "%H:%M:%S", "%x": "%m/%d/%y", "%X": "%H:%M:%S", "%Ec": "%c", "%EC": "%C", "%Ex": "%m/%d/%y", "%EX": "%H:%M:%S", "%Ey": "%y", "%EY": "%Y", "%Od": "%d", "%Oe": "%e", "%OH": "%H", "%OI": "%I", "%Om": "%m", "%OM": "%M", "%OS": "%S", "%Ou": "%u", "%OU": "%U", "%OV": "%V", "%Ow": "%w", "%OW": "%W", "%Oy": "%y" }) g = g.replace(new RegExp(Bt, "g"), Dt[Bt]);
      var Ka = "Sunday Monday Tuesday Wednesday Thursday Friday Saturday".split(" "), Ja = "January February March April May June July August September October November December".split(" ");
      for (Bt in Dt = { "%a": (_) => Ka[_.Qa].substring(0, 3), "%A": (_) => Ka[_.Qa], "%b": (_) => Ja[_.Wa].substring(0, 3), "%B": (_) => Ja[_.Wa], "%C": (_) => E((_.Ta + 1900) / 100 | 0, 2), "%d": (_) => E(_.Ya, 2), "%e": (_) => I(_.Ya, 2, " "), "%g": (_) => At(_).toString().substring(2), "%G": At, "%H": (_) => E(_.Va, 2), "%I": (_) => ((_ = _.Va) == 0 ? _ = 12 : 12 < _ && (_ -= 12), E(_, 2)), "%j": (_) => {
        for (var Q = 0, ft = 0; ft <= _.Wa - 1; Q += (Qe(_.Ta + 1900) ? Ua : Va)[ft++]) ;
        return E(_.Ya + Q, 3);
      }, "%m": (_) => E(_.Wa + 1, 2), "%M": (_) => E(_.fb, 2), "%n": () => `
`, "%p": (_) => 0 <= _.Va && 12 > _.Va ? "AM" : "PM", "%S": (_) => E(_.gb, 2), "%t": () => "	", "%u": (_) => _.Qa || 7, "%U": (_) => E(Math.floor((_.Sa + 7 - _.Qa) / 7), 2), "%V": (_) => {
        var Q = Math.floor((_.Sa + 7 - (_.Qa + 6) % 7) / 7);
        if (2 >= (_.Qa + 371 - _.Sa - 2) % 7 && Q++, Q) Q == 53 && ((ft = (_.Qa + 371 - _.Sa) % 7) == 4 || ft == 3 && Qe(_.Ta) || (Q = 1));
        else {
          Q = 52;
          var ft = (_.Qa + 7 - _.Sa - 1) % 7;
          (ft == 4 || ft == 5 && Qe(_.Ta % 400 - 1)) && Q++;
        }
        return E(Q, 2);
      }, "%w": (_) => _.Qa, "%W": (_) => E(Math.floor((_.Sa + 7 - (_.Qa + 6) % 7) / 7), 2), "%y": (_) => (_.Ta + 1900).toString().substring(2), "%Y": (_) => _.Ta + 1900, "%z": (_) => {
        var Q = 0 <= (_ = _.eb);
        return _ = Math.abs(_) / 60, (Q ? "+" : "-") + ("0000" + (_ / 60 * 100 + _ % 60)).slice(-4);
      }, "%Z": (_) => _.hb, "%%": () => "%" }, g = g.replace(/%%/g, "\0\0"), Dt) g.includes(Bt) && (g = g.replace(new RegExp(Bt, "g"), Dt[Bt](x)));
      return Bt = function(_) {
        var Q = Array(ma(_) + 1);
        return ba(_, Q, 0, Q.length), Q;
      }(g = g.replace(/\0\0/g, "%")), Bt.length > m ? 0 : (Md(Bt, c), Bt.length - 1);
    }
    function Ud(c, m, g, x) {
      return za(c >>> 0, m >>> 0, g >>> 0, x >>> 0);
    }
    d || function() {
      for (var c = u.numThreads - 1; c--; ) sa();
      Gt.unshift(() => {
        Te++, function(m) {
          d ? m() : Promise.all(ve.map(aa)).then(m);
        }(() => we());
      });
    }();
    var Vd = [vo, ra, la, da, ha, ga, ya, xa, Ta, wa, va, Ia, _a2, Oa, Sa, Aa, Da, La, Fa, Ca, Na, Ra, Ga, Ma], U = function() {
      function c(g, x) {
        return U = g.exports, U = function() {
          var I = U, E = (it) => () => it() >>> 0, R = (it) => (At) => it(At) >>> 0;
          return (I = Object.assign({}, I)).Ba = E(I.Ba), I.Ca = R(I.Ca), I.emscripten_main_runtime_thread_id = E(I.emscripten_main_runtime_thread_id), I.Oa = R(I.Oa), I.Pa = E(I.Pa), I;
        }(), na.push(U.Ea), ua = U.Fa, Xr.unshift(U.$), jr = x, we(), U;
      }
      var m = Kr();
      if (Te++, u.instantiateWasm) try {
        return u.instantiateWasm(m, c);
      } catch (g) {
        et(`Module.instantiateWasm callback failed with error: ${g}`), a(g);
      }
      return Ze || (Ze = u.locateFile ? Ot("ort-wasm-simd-threaded.wasm") ? "ort-wasm-simd-threaded.wasm" : u.locateFile ? u.locateFile("ort-wasm-simd-threaded.wasm", P) : P + "ort-wasm-simd-threaded.wasm" : new URL("/rpg_game/assets/ort-wasm-simd-threaded-B92PF46Y.wasm", import.meta.url).href), function(g, x) {
        var I = Ze;
        return M || typeof WebAssembly.instantiateStreaming != "function" || Ot(I) || St(I) || typeof fetch != "function" ? wr(I, g, x) : fetch(I, { credentials: "same-origin" }).then((E) => WebAssembly.instantiateStreaming(E, g).then(x, function(R) {
          return et(`wasm streaming compile failed: ${R}`), et("falling back to ArrayBuffer instantiation"), wr(I, g, x);
        }));
      }(m, function(g) {
        c(g.instance, g.module);
      }).catch(a), {};
    }();
    u._OrtInit = (c, m) => (u._OrtInit = U.aa)(c, m), u._OrtGetLastError = (c, m) => (u._OrtGetLastError = U.ba)(c, m), u._OrtCreateSessionOptions = (c, m, g, x, I, E, R, it, At, Dt) => (u._OrtCreateSessionOptions = U.ca)(c, m, g, x, I, E, R, it, At, Dt), u._OrtAppendExecutionProvider = (c, m) => (u._OrtAppendExecutionProvider = U.da)(c, m), u._OrtAddFreeDimensionOverride = (c, m, g) => (u._OrtAddFreeDimensionOverride = U.ea)(c, m, g), u._OrtAddSessionConfigEntry = (c, m, g) => (u._OrtAddSessionConfigEntry = U.fa)(c, m, g), u._OrtReleaseSessionOptions = (c) => (u._OrtReleaseSessionOptions = U.ga)(c), u._OrtCreateSession = (c, m, g) => (u._OrtCreateSession = U.ha)(c, m, g), u._OrtReleaseSession = (c) => (u._OrtReleaseSession = U.ia)(c), u._OrtGetInputOutputCount = (c, m, g) => (u._OrtGetInputOutputCount = U.ja)(c, m, g), u._OrtGetInputName = (c, m) => (u._OrtGetInputName = U.ka)(c, m), u._OrtGetOutputName = (c, m) => (u._OrtGetOutputName = U.la)(c, m), u._OrtFree = (c) => (u._OrtFree = U.ma)(c), u._OrtCreateTensor = (c, m, g, x, I, E) => (u._OrtCreateTensor = U.na)(c, m, g, x, I, E), u._OrtGetTensorData = (c, m, g, x, I) => (u._OrtGetTensorData = U.oa)(c, m, g, x, I), u._OrtReleaseTensor = (c) => (u._OrtReleaseTensor = U.pa)(c), u._OrtCreateRunOptions = (c, m, g, x) => (u._OrtCreateRunOptions = U.qa)(c, m, g, x), u._OrtAddRunConfigEntry = (c, m, g) => (u._OrtAddRunConfigEntry = U.ra)(c, m, g), u._OrtReleaseRunOptions = (c) => (u._OrtReleaseRunOptions = U.sa)(c), u._OrtCreateBinding = (c) => (u._OrtCreateBinding = U.ta)(c), u._OrtBindInput = (c, m, g) => (u._OrtBindInput = U.ua)(c, m, g), u._OrtBindOutput = (c, m, g, x) => (u._OrtBindOutput = U.va)(c, m, g, x), u._OrtClearBoundOutputs = (c) => (u._OrtClearBoundOutputs = U.wa)(c), u._OrtReleaseBinding = (c) => (u._OrtReleaseBinding = U.xa)(c), u._OrtRunWithBinding = (c, m, g, x, I) => (u._OrtRunWithBinding = U.ya)(c, m, g, x, I), u._OrtRun = (c, m, g, x, I, E, R, it) => (u._OrtRun = U.za)(c, m, g, x, I, E, R, it), u._OrtEndProfiling = (c) => (u._OrtEndProfiling = U.Aa)(c);
    var er = () => (er = U.Ba)();
    u._malloc = (c) => (u._malloc = U.Ca)(c), u._free = (c) => (u._free = U.Da)(c);
    var tn, Eo = (c, m, g, x, I, E) => (Eo = U.Ga)(c, m, g, x, I, E), Wa = () => (Wa = U.Ha)(), Ha = (c, m, g, x, I) => (Ha = U.Ia)(c, m, g, x, I), Do = (c) => (Do = U.Ja)(c), en = (c) => (en = U.Ka)(c), qa = () => (qa = U.La)(), ja = (c, m) => (ja = U.Ma)(c, m), rn = (c) => (rn = U.Na)(c), Lo = (c) => (Lo = U.Oa)(c), $o = () => ($o = U.Pa)();
    function Xa() {
      0 < Te || (d ? (s(u), d || Jr(Xr), startWorker(u)) : (Jr(Gt), 0 < Te || tn || (tn = true, u.calledRun = true, pe || (d || Jr(Xr), s(u), d || Jr(Je)))));
    }
    return u.___start_em_js = 822690, u.___stop_em_js = 822751, u.stackSave = () => $o(), u.stackRestore = (c) => rn(c), u.stackAlloc = (c) => Lo(c), u.UTF8ToString = Ir, u.stringToUTF8 = _r, u.lengthBytesUTF8 = ma, Ee = function c() {
      tn || Xa(), tn || (Ee = c);
    }, Xa(), l;
  }), Ig = Rp;
  ((_a = globalThis.self) == null ? void 0 : _a.name) === "em-pthread" && Rp();
});
var br, _g, Og, Sg, Up, Vp, Ag, zp, Vr = O(() => {
  var _a, _b2;
  ro();
  br = import.meta.url ?? (typeof document < "u" ? (_a = document.currentScript) == null ? void 0 : _a.src : typeof self < "u" ? (_b2 = self.location) == null ? void 0 : _b2.href : void 0), _g = typeof location > "u" ? void 0 : location.origin, Og = (i, e) => {
    try {
      let o = e ?? br;
      return (o ? new URL(i, o) : new URL(i)).origin === _g;
    } catch {
      return false;
    }
  }, Sg = async (i) => {
    let o = await (await fetch(i, { credentials: "same-origin" })).blob();
    return URL.createObjectURL(o);
  }, Up = (Np(), on(Cp)).default, Vp = async () => {
    if (!br) throw new Error("Failed to load proxy worker: cannot determine the script source URL.");
    if (Og(br)) return [void 0, Up()];
    let i = await Sg(br);
    return [i, Up(i)];
  }, Ag = (Mp(), on(Gp)).default, zp = async (i, e, o) => [void 0, Ag];
});
var Hi, qi, co, Wp, Pg, Eg, no, gt, Xe = O(() => {
  Vr();
  qi = false, co = false, Wp = false, Pg = () => {
    if (typeof SharedArrayBuffer > "u") return false;
    try {
      return typeof MessageChannel < "u" && new MessageChannel().port1.postMessage(new SharedArrayBuffer(1)), WebAssembly.validate(new Uint8Array([0, 97, 115, 109, 1, 0, 0, 0, 1, 4, 1, 96, 0, 0, 3, 2, 1, 0, 5, 4, 1, 3, 1, 1, 10, 11, 1, 9, 0, 65, 0, 254, 16, 2, 0, 26, 11]));
    } catch {
      return false;
    }
  }, Eg = () => {
    try {
      return WebAssembly.validate(new Uint8Array([0, 97, 115, 109, 1, 0, 0, 0, 1, 4, 1, 96, 0, 0, 3, 2, 1, 0, 10, 30, 1, 28, 0, 65, 0, 253, 15, 253, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 253, 186, 1, 26, 11]));
    } catch {
      return false;
    }
  }, no = async (i) => {
    if (qi) return Promise.resolve();
    if (co) throw new Error("multiple calls to 'initializeWebAssembly()' detected.");
    if (Wp) throw new Error("previous call to 'initializeWebAssembly()' failed.");
    co = true;
    let e = i.initTimeout, o = i.numThreads;
    if (!Eg()) throw new Error("WebAssembly SIMD is not supported in the current environment.");
    let t = Pg();
    o > 1 && !t && (typeof self < "u" && !self.crossOriginIsolated && console.warn("env.wasm.numThreads is set to " + o + ", but this will not work unless you enable crossOriginIsolated mode. See https://web.dev/cross-origin-isolation-guide/ for more info."), console.warn("WebAssembly multi-threading is not supported in the current environment. Falling back to single-threading."), i.numThreads = o = 1);
    let r = i.wasmPaths, n = typeof r == "string" ? r : void 0, s = r == null ? void 0 : r.mjs, a = (s == null ? void 0 : s.href) ?? s, u = r == null ? void 0 : r.wasm, l = (u == null ? void 0 : u.href) ?? u, f = i.wasmBinary, [p2, d] = await zp(a, n, o > 1), y = false, w = [];
    if (e > 0 && w.push(new Promise((v) => {
      setTimeout(() => {
        y = true, v();
      }, e);
    })), w.push(new Promise((v, S) => {
      let L = { numThreads: o };
      f ? L.wasmBinary = f : (l || n) && (L.locateFile = (A, P) => l ?? (n ?? P) + A), d(L).then((A) => {
        co = false, qi = true, Hi = A, v(), p2 && URL.revokeObjectURL(p2);
      }, (A) => {
        co = false, Wp = true, S(A);
      });
    })), await Promise.race(w), y) throw new Error(`WebAssembly backend initializing failed due to timeout: ${e}ms`);
  }, gt = () => {
    if (qi && Hi) return Hi;
    throw new Error("WebAssembly is not initialized yet.");
  };
});
var yt, Wr, ht, po = O(() => {
  Xe();
  yt = (i, e) => {
    let o = gt(), t = o.lengthBytesUTF8(i) + 1, r = o._malloc(t);
    return o.stringToUTF8(i, r, t), e.push(r), r;
  }, Wr = (i, e, o, t) => {
    if (typeof i == "object" && i !== null) {
      if (o.has(i)) throw new Error("Circular reference in options");
      o.add(i);
    }
    Object.entries(i).forEach(([r, n]) => {
      let s = e ? e + r : r;
      if (typeof n == "object") Wr(n, s + ".", o, t);
      else if (typeof n == "string" || typeof n == "number") t(s, n.toString());
      else if (typeof n == "boolean") t(s, n ? "1" : "0");
      else throw new Error(`Can't handle extra config type: ${typeof n}`);
    });
  }, ht = (i) => {
    let e = gt(), o = e.stackSave();
    try {
      let t = e.stackAlloc(8);
      e._OrtGetLastError(t, t + 4);
      let r = e.HEAP32[t / 4], n = e.HEAPU32[t / 4 + 1], s = n ? e.UTF8ToString(n) : "";
      throw new Error(`${i} ERROR_CODE: ${r}, ERROR_MESSAGE: ${s}`);
    } finally {
      e.stackRestore(o);
    }
  };
});
var Hp, qp = O(() => {
  Xe();
  po();
  Hp = (i) => {
    let e = gt(), o = 0, t = [], r = i || {};
    try {
      if ((i == null ? void 0 : i.logSeverityLevel) === void 0) r.logSeverityLevel = 2;
      else if (typeof i.logSeverityLevel != "number" || !Number.isInteger(i.logSeverityLevel) || i.logSeverityLevel < 0 || i.logSeverityLevel > 4) throw new Error(`log serverity level is not valid: ${i.logSeverityLevel}`);
      if ((i == null ? void 0 : i.logVerbosityLevel) === void 0) r.logVerbosityLevel = 0;
      else if (typeof i.logVerbosityLevel != "number" || !Number.isInteger(i.logVerbosityLevel)) throw new Error(`log verbosity level is not valid: ${i.logVerbosityLevel}`);
      (i == null ? void 0 : i.terminate) === void 0 && (r.terminate = false);
      let n = 0;
      return (i == null ? void 0 : i.tag) !== void 0 && (n = yt(i.tag, t)), o = e._OrtCreateRunOptions(r.logSeverityLevel, r.logVerbosityLevel, !!r.terminate, n), o === 0 && ht("Can't create run options."), (i == null ? void 0 : i.extra) !== void 0 && Wr(i.extra, "", /* @__PURE__ */ new WeakSet(), (s, a) => {
        let u = yt(s, t), l = yt(a, t);
        e._OrtAddRunConfigEntry(o, u, l) !== 0 && ht(`Can't set a run config entry: ${s} - ${a}.`);
      }), [o, t];
    } catch (n) {
      throw o !== 0 && e._OrtReleaseRunOptions(o), t.forEach((s) => e._free(s)), n;
    }
  };
});
var Dg, Lg, $g, kg, jp, Xp = O(() => {
  Xe();
  po();
  Dg = (i) => {
    switch (i) {
      case "disabled":
        return 0;
      case "basic":
        return 1;
      case "extended":
        return 2;
      case "all":
        return 99;
      default:
        throw new Error(`unsupported graph optimization level: ${i}`);
    }
  }, Lg = (i) => {
    switch (i) {
      case "sequential":
        return 0;
      case "parallel":
        return 1;
      default:
        throw new Error(`unsupported execution mode: ${i}`);
    }
  }, $g = (i) => {
    i.extra || (i.extra = {}), i.extra.session || (i.extra.session = {});
    let e = i.extra.session;
    e.use_ort_model_bytes_directly || (e.use_ort_model_bytes_directly = "1"), i.executionProviders && i.executionProviders.some((o) => (typeof o == "string" ? o : o.name) === "webgpu") && (i.enableMemPattern = false);
  }, kg = (i, e, o) => {
    for (let t of e) {
      let r = typeof t == "string" ? t : t.name;
      switch (r) {
        case "webnn":
          if (r = "WEBNN", typeof t != "string") {
            let a = t == null ? void 0 : t.deviceType;
            if (a) {
              let u = yt("deviceType", o), l = yt(a, o);
              gt()._OrtAddSessionConfigEntry(i, u, l) !== 0 && ht(`Can't set a session config entry: 'deviceType' - ${a}.`);
            }
          }
          break;
        case "webgpu":
          if (r = "JS", typeof t != "string") {
            let s = t;
            if (s == null ? void 0 : s.preferredLayout) {
              if (s.preferredLayout !== "NCHW" && s.preferredLayout !== "NHWC") throw new Error(`preferredLayout must be either 'NCHW' or 'NHWC': ${s.preferredLayout}`);
              let a = yt("preferredLayout", o), u = yt(s.preferredLayout, o);
              gt()._OrtAddSessionConfigEntry(i, a, u) !== 0 && ht(`Can't set a session config entry: 'preferredLayout' - ${s.preferredLayout}.`);
            }
          }
          break;
        case "wasm":
        case "cpu":
          continue;
        default:
          throw new Error(`not supported execution provider: ${r}`);
      }
      let n = yt(r, o);
      gt()._OrtAppendExecutionProvider(i, n) !== 0 && ht(`Can't append execution provider: ${r}.`);
    }
  }, jp = (i) => {
    let e = gt(), o = 0, t = [], r = i || {};
    $g(r);
    try {
      let n = Dg(r.graphOptimizationLevel ?? "all"), s = Lg(r.executionMode ?? "sequential"), a = typeof r.logId == "string" ? yt(r.logId, t) : 0, u = r.logSeverityLevel ?? 2;
      if (!Number.isInteger(u) || u < 0 || u > 4) throw new Error(`log serverity level is not valid: ${u}`);
      let l = r.logVerbosityLevel ?? 0;
      if (!Number.isInteger(l) || l < 0 || l > 4) throw new Error(`log verbosity level is not valid: ${l}`);
      let f = typeof r.optimizedModelFilePath == "string" ? yt(r.optimizedModelFilePath, t) : 0;
      if (o = e._OrtCreateSessionOptions(n, !!r.enableCpuMemArena, !!r.enableMemPattern, s, !!r.enableProfiling, 0, a, u, l, f), o === 0 && ht("Can't create session options."), r.executionProviders && kg(o, r.executionProviders, t), r.enableGraphCapture !== void 0) {
        if (typeof r.enableGraphCapture != "boolean") throw new Error(`enableGraphCapture must be a boolean value: ${r.enableGraphCapture}`);
        let p2 = yt("enableGraphCapture", t), d = yt(r.enableGraphCapture.toString(), t);
        e._OrtAddSessionConfigEntry(o, p2, d) !== 0 && ht(`Can't set a session config entry: 'enableGraphCapture' - ${r.enableGraphCapture}.`);
      }
      if (r.freeDimensionOverrides) for (let [p2, d] of Object.entries(r.freeDimensionOverrides)) {
        if (typeof p2 != "string") throw new Error(`free dimension override name must be a string: ${p2}`);
        if (typeof d != "number" || !Number.isInteger(d) || d < 0) throw new Error(`free dimension override value must be a non-negative integer: ${d}`);
        let y = yt(p2, t);
        e._OrtAddFreeDimensionOverride(o, y, d) !== 0 && ht(`Can't set a free dimension override: ${p2} - ${d}.`);
      }
      return r.extra !== void 0 && Wr(r.extra, "", /* @__PURE__ */ new WeakSet(), (p2, d) => {
        let y = yt(p2, t), w = yt(d, t);
        e._OrtAddSessionConfigEntry(o, y, w) !== 0 && ht(`Can't set a session config entry: ${p2} - ${d}.`);
      }), [o, t];
    } catch (n) {
      throw o !== 0 && e._OrtReleaseSessionOptions(o), t.forEach((s) => e._free(s)), n;
    }
  };
});
var ji, Kp, Xi, Jp, Yp, ho, Zp, Ki = O(() => {
  ji = (i) => {
    switch (i) {
      case "int8":
        return 3;
      case "uint8":
        return 2;
      case "bool":
        return 9;
      case "int16":
        return 5;
      case "uint16":
        return 4;
      case "int32":
        return 6;
      case "uint32":
        return 12;
      case "float16":
        return 10;
      case "float32":
        return 1;
      case "float64":
        return 11;
      case "string":
        return 8;
      case "int64":
        return 7;
      case "uint64":
        return 13;
      default:
        throw new Error(`unsupported data type: ${i}`);
    }
  }, Kp = (i) => {
    switch (i) {
      case 3:
        return "int8";
      case 2:
        return "uint8";
      case 9:
        return "bool";
      case 5:
        return "int16";
      case 4:
        return "uint16";
      case 6:
        return "int32";
      case 12:
        return "uint32";
      case 10:
        return "float16";
      case 1:
        return "float32";
      case 11:
        return "float64";
      case 8:
        return "string";
      case 7:
        return "int64";
      case 13:
        return "uint64";
      default:
        throw new Error(`unsupported data type: ${i}`);
    }
  }, Xi = (i) => [void 0, 4, 1, 1, 2, 2, 4, 8, void 0, 1, 2, 8, 4, 8, void 0, void 0, void 0][i], Jp = (i) => {
    switch (i) {
      case "float16":
        return typeof Float16Array < "u" && Float16Array.from ? Float16Array : Uint16Array;
      case "float32":
        return Float32Array;
      case "uint8":
        return Uint8Array;
      case "int8":
        return Int8Array;
      case "uint16":
        return Uint16Array;
      case "int16":
        return Int16Array;
      case "int32":
        return Int32Array;
      case "bool":
        return Uint8Array;
      case "float64":
        return Float64Array;
      case "uint32":
        return Uint32Array;
      case "int64":
        return BigInt64Array;
      case "uint64":
        return BigUint64Array;
      default:
        throw new Error(`unsupported type: ${i}`);
    }
  }, Yp = (i) => {
    switch (i) {
      case "verbose":
        return 0;
      case "info":
        return 1;
      case "warning":
        return 2;
      case "error":
        return 3;
      case "fatal":
        return 4;
      default:
        throw new Error(`unsupported logging level: ${i}`);
    }
  }, ho = (i) => i === "float32" || i === "float16" || i === "int32" || i === "int64" || i === "uint32" || i === "uint8" || i === "bool", Zp = (i) => {
    switch (i) {
      case "none":
        return 0;
      case "cpu":
        return 1;
      case "cpu-pinned":
        return 2;
      case "texture":
        return 3;
      case "gpu-buffer":
        return 4;
      default:
        throw new Error(`unsupported data location: ${i}`);
    }
  };
});
var Hr, Ji = O(() => {
  ro();
  Hr = async (i) => {
    if (typeof i == "string") {
      let e = await fetch(i);
      if (!e.ok) throw new Error(`failed to load external data file: ${i}`);
      let o = e.headers.get("Content-Length"), t = o ? parseInt(o, 10) : 0;
      if (t < 1073741824) return new Uint8Array(await e.arrayBuffer());
      {
        if (!e.body) throw new Error(`failed to load external data file: ${i}, no response body.`);
        let r = e.body.getReader(), n;
        try {
          n = new ArrayBuffer(t);
        } catch (a) {
          if (a instanceof RangeError) {
            let u = Math.ceil(t / 65536);
            n = new WebAssembly.Memory({ initial: u, maximum: u }).buffer;
          } else throw a;
        }
        let s = 0;
        for (; ; ) {
          let { done: a, value: u } = await r.read();
          if (a) break;
          let l = u.byteLength;
          new Uint8Array(n, s, l).set(u), s += l;
        }
        return new Uint8Array(n, 0, t);
      }
    } else return i instanceof Blob ? new Uint8Array(await i.arrayBuffer()) : i instanceof Uint8Array ? i : new Uint8Array(i);
  };
});
var Bg, oo, io, yr, Fg, zr, ao, so, Qp, uo, lo, fo, zi = O(() => {
  qp();
  Xp();
  Ki();
  Xe();
  po();
  Ji();
  Bg = (i, e) => {
    gt()._OrtInit(i, e) !== 0 && ht("Can't initialize onnxruntime.");
  }, oo = async (i) => {
    Bg(i.wasm.numThreads, Yp(i.logLevel));
  }, io = async (i, e) => {
  }, yr = /* @__PURE__ */ new Map(), Fg = (i) => {
    let e = gt(), o = e.stackSave();
    try {
      let t = e.stackAlloc(8);
      return e._OrtGetInputOutputCount(i, t, t + 4) !== 0 && ht("Can't get session input/output count."), [e.HEAP32[t / 4], e.HEAP32[t / 4 + 1]];
    } finally {
      e.stackRestore(o);
    }
  }, zr = (i) => {
    let e = gt(), o = e._malloc(i.byteLength);
    if (o === 0) throw new Error(`Can't create a session. failed to allocate a buffer of size ${i.byteLength}.`);
    return e.HEAPU8.set(i, o), [o, i.byteLength];
  }, ao = async (i, e) => {
    var _a;
    let o, t, r = gt();
    Array.isArray(i) ? [o, t] = i : i.buffer === r.HEAPU8.buffer ? [o, t] = [i.byteOffset, i.byteLength] : [o, t] = zr(i);
    let n = 0, s = 0, u = [], l = [], f = [];
    try {
      if ([s, u] = jp(e), (e == null ? void 0 : e.externalData) && r.mountExternalData) {
        let A = [];
        for (let P of e.externalData) {
          let M = typeof P == "string" ? P : P.path;
          A.push(Hr(typeof P == "string" ? P : P.data).then((V) => {
            r.mountExternalData(M, V);
          }));
        }
        await Promise.all(A);
      }
      for (let A of (e == null ? void 0 : e.executionProviders) ?? []) if ((typeof A == "string" ? A : A.name) === "webnn") {
        if (r.currentContext) throw new Error("WebNN execution provider is already set.");
        if (typeof A != "string") {
          let M = A, V = M == null ? void 0 : M.context, ut = M == null ? void 0 : M.gpuDevice, xt = M == null ? void 0 : M.deviceType, et = M == null ? void 0 : M.numThreads, Et = M == null ? void 0 : M.powerPreference;
          V ? r.currentContext = V : ut ? r.currentContext = await navigator.ml.createContext(ut) : r.currentContext = await navigator.ml.createContext({ deviceType: xt, numThreads: et, powerPreference: Et });
        } else r.currentContext = await navigator.ml.createContext();
        break;
      }
      n = await r._OrtCreateSession(o, t, s), n === 0 && ht("Can't create a session."), r.currentContext && (r.currentContext = void 0);
      let [p2, d] = Fg(n), y = !!(e == null ? void 0 : e.enableGraphCapture), w = [], v = [], S = [];
      for (let A = 0; A < p2; A++) {
        let P = r._OrtGetInputName(n, A);
        P === 0 && ht("Can't get an input name."), l.push(P), w.push(r.UTF8ToString(P));
      }
      for (let A = 0; A < d; A++) {
        let P = r._OrtGetOutputName(n, A);
        P === 0 && ht("Can't get an output name."), f.push(P);
        let M = r.UTF8ToString(P);
        v.push(M);
      }
      let L = null;
      return yr.set(n, [n, l, f, L, y, false]), [n, w, v];
    } catch (p2) {
      throw l.forEach((d) => r._OrtFree(d)), f.forEach((d) => r._OrtFree(d)), n !== 0 && r._OrtReleaseSession(n), p2;
    } finally {
      r._free(o), s !== 0 && r._OrtReleaseSessionOptions(s), u.forEach((p2) => r._free(p2)), (_a = r.unmountExternalData) == null ? void 0 : _a.call(r);
    }
  }, so = (i) => {
    var _a;
    let e = gt(), o = yr.get(i);
    if (!o) throw new Error(`cannot release session. invalid session id: ${i}`);
    let [t, r, n, s, a] = o;
    s && (a && e._OrtClearBoundOutputs(s.handle), e._OrtReleaseBinding(s.handle)), (_a = e.jsepOnReleaseSession) == null ? void 0 : _a.call(e, i), r.forEach((u) => e._OrtFree(u)), n.forEach((u) => e._OrtFree(u)), e._OrtReleaseSession(t), yr.delete(i);
  }, Qp = (i, e, o, t, r, n = false) => {
    if (!i) {
      e.push(0);
      return;
    }
    let s = gt(), a = i[0], u = i[1], l = i[3], f, p2;
    if (a === "string" && l === "gpu-buffer") throw new Error("String tensor is not supported on GPU.");
    if (n && l !== "gpu-buffer") throw new Error(`External buffer must be provided for input/output index ${r} when enableGraphCapture is true.`);
    if (l === "gpu-buffer") {
      let w = i[2].gpuBuffer, v = Xi(ji(a));
      p2 = u.reduce((L, A) => L * A, 1) * v;
      let S = s.jsepRegisterBuffer;
      if (!S) throw new Error('Tensor location "gpu-buffer" is not supported without using WebGPU.');
      f = S(t, r, w, p2);
    } else {
      let w = i[2];
      if (Array.isArray(w)) {
        p2 = 4 * w.length, f = s._malloc(p2), o.push(f);
        let v = f / 4;
        for (let S = 0; S < w.length; S++) {
          if (typeof w[S] != "string") throw new TypeError(`tensor data at index ${S} is not a string`);
          s.HEAPU32[v++] = yt(w[S], o);
        }
      } else p2 = w.byteLength, f = s._malloc(p2), o.push(f), s.HEAPU8.set(new Uint8Array(w.buffer, w.byteOffset, p2), f);
    }
    let d = s.stackSave(), y = s.stackAlloc(4 * u.length);
    try {
      let w = y / 4;
      u.forEach((S) => s.HEAP32[w++] = S);
      let v = s._OrtCreateTensor(ji(a), f, p2, y, u.length, Zp(l));
      v === 0 && ht(`Can't create tensor for input/output. session=${t}, index=${r}.`), e.push(v);
    } finally {
      s.stackRestore(d);
    }
  }, uo = async (i, e, o, t, r, n) => {
    var _a;
    let s = gt(), a = yr.get(i);
    if (!a) throw new Error(`cannot run inference. invalid session id: ${i}`);
    let u = a[0], l = a[1], f = a[2], p2 = a[3], d = a[4];
    a[5];
    let w = e.length, v = t.length, S = 0, L = [], A = [], P = [], M = [], V = s.stackSave(), ut = s.stackAlloc(w * 4), xt = s.stackAlloc(w * 4), et = s.stackAlloc(v * 4), Et = s.stackAlloc(v * 4);
    try {
      [S, L] = Hp(n);
      for (let Z = 0; Z < w; Z++) Qp(o[Z], A, M, i, e[Z], d);
      for (let Z = 0; Z < v; Z++) Qp(r[Z], P, M, i, w + t[Z], d);
      let It = ut / 4, C = xt / 4, jr = et / 4, ge = Et / 4;
      for (let Z = 0; Z < w; Z++) s.HEAPU32[It++] = A[Z], s.HEAPU32[C++] = l[e[Z]];
      for (let Z = 0; Z < v; Z++) s.HEAPU32[jr++] = P[Z], s.HEAPU32[ge++] = f[t[Z]];
      (_a = s.jsepOnRunStart) == null ? void 0 : _a.call(s, u);
      let re;
      re = await s._OrtRun(u, xt, ut, w, Et, v, et, S), re !== 0 && ht("failed to call OrtRun().");
      let ye = [];
      for (let Z = 0; Z < v; Z++) {
        let xe = s.HEAPU32[et / 4 + Z];
        if (xe === P[Z]) {
          ye.push(r[Z]);
          continue;
        }
        let ne = s.stackSave(), oe = s.stackAlloc(4 * 4), pe = false, lt, Gt = 0;
        try {
          s._OrtGetTensorData(xe, oe, oe + 4, oe + 8, oe + 12) !== 0 && ht(`Can't access output tensor data on index ${Z}.`);
          let Je = oe / 4, Te = s.HEAPU32[Je++];
          Gt = s.HEAPU32[Je++];
          let Ye = s.HEAPU32[Je++], Ee = s.HEAPU32[Je++], we = [];
          for (let Ot = 0; Ot < Ee; Ot++) we.push(s.HEAPU32[Ye / 4 + Ot]);
          s._OrtFree(Ye);
          let ie = we.reduce((Ot, St) => Ot * St, 1);
          lt = Kp(Te);
          let Ze = p2 == null ? void 0 : p2.outputPreferredLocations[t[Z]];
          if (lt === "string") {
            if (Ze === "gpu-buffer") throw new Error("String tensor is not supported on GPU.");
            let Ot = [], St = Gt / 4;
            for (let de = 0; de < ie; de++) {
              let wr = s.HEAPU32[St++], Kr = de === ie - 1 ? void 0 : s.HEAPU32[St] - wr;
              Ot.push(s.UTF8ToString(wr, Kr));
            }
            ye.push([lt, we, Ot, "cpu"]);
          } else if (Ze === "gpu-buffer" && ie > 0) {
            let Ot = s.jsepGetBuffer;
            if (!Ot) throw new Error('preferredLocation "gpu-buffer" is not supported without using WebGPU.');
            let St = Ot(Gt), de = Xi(Te);
            if (de === void 0 || !ho(lt)) throw new Error(`Unsupported data type: ${lt}`);
            pe = true, ye.push([lt, we, { gpuBuffer: St, download: s.jsepCreateDownloader(St, ie * de, lt), dispose: () => {
              s._OrtReleaseTensor(xe);
            } }, "gpu-buffer"]);
          } else {
            let Ot = Jp(lt), St = new Ot(ie);
            new Uint8Array(St.buffer, St.byteOffset, St.byteLength).set(s.HEAPU8.subarray(Gt, Gt + St.byteLength)), ye.push([lt, we, St, "cpu"]);
          }
        } finally {
          s.stackRestore(ne), lt === "string" && Gt && s._free(Gt), pe || s._OrtReleaseTensor(xe);
        }
      }
      return p2 && !d && (s._OrtClearBoundOutputs(p2.handle), yr.set(i, [u, l, f, p2, d, false])), ye;
    } finally {
      s.stackRestore(V), A.forEach((It) => s._OrtReleaseTensor(It)), P.forEach((It) => s._OrtReleaseTensor(It)), M.forEach((It) => s._free(It)), S !== 0 && s._OrtReleaseRunOptions(S), L.forEach((It) => s._free(It));
    }
  }, lo = (i) => {
    let e = gt(), o = yr.get(i);
    if (!o) throw new Error("invalid session id");
    let t = o[0], r = e._OrtEndProfiling(t);
    r === 0 && ht("Can't get an profile file name."), e._OrtFree(r);
  }, fo = (i) => {
    let e = [];
    for (let o of i) {
      let t = o[2];
      !Array.isArray(t) && "buffer" in t && e.push(t.buffer);
    }
    return e;
  };
});
var Ke, Xt, qr, bo, go, mo, Yi, Zi, xr, Tr, Ng, td, ed, rd, nd, od, id, ad, Qi = O(() => {
  Kt();
  zi();
  Xe();
  Vr();
  Ke = () => !!z.wasm.proxy && typeof document < "u", qr = false, bo = false, go = false, Zi = /* @__PURE__ */ new Map(), xr = (i, e) => {
    let o = Zi.get(i);
    o ? o.push(e) : Zi.set(i, [e]);
  }, Tr = () => {
    if (qr || !bo || go || !Xt) throw new Error("worker not ready");
  }, Ng = (i) => {
    switch (i.data.type) {
      case "init-wasm":
        qr = false, i.data.err ? (go = true, Yi[1](i.data.err)) : (bo = true, Yi[0]()), mo && (URL.revokeObjectURL(mo), mo = void 0);
        break;
      case "init-ep":
      case "copy-from":
      case "create":
      case "release":
      case "run":
      case "end-profiling": {
        let e = Zi.get(i.data.type);
        i.data.err ? e.shift()[1](i.data.err) : e.shift()[0](i.data.out);
        break;
      }
    }
  }, td = async () => {
    if (!bo) {
      if (qr) throw new Error("multiple calls to 'initWasm()' detected.");
      if (go) throw new Error("previous call to 'initWasm()' failed.");
      if (qr = true, Ke()) return new Promise((i, e) => {
        Xt == null ? void 0 : Xt.terminate(), Vp().then(([o, t]) => {
          try {
            Xt = t, Xt.onerror = (n) => e(n), Xt.onmessage = Ng, Yi = [i, e];
            let r = { type: "init-wasm", in: z };
            Xt.postMessage(r), mo = o;
          } catch (r) {
            e(r);
          }
        }, e);
      });
      try {
        await no(z.wasm), await oo(z), bo = true;
      } catch (i) {
        throw go = true, i;
      } finally {
        qr = false;
      }
    }
  }, ed = async (i) => {
    if (Ke()) return Tr(), new Promise((e, o) => {
      xr("init-ep", [e, o]);
      let t = { type: "init-ep", in: { epName: i, env: z } };
      Xt.postMessage(t);
    });
    await io(z, i);
  }, rd = async (i) => Ke() ? (Tr(), new Promise((e, o) => {
    xr("copy-from", [e, o]);
    let t = { type: "copy-from", in: { buffer: i } };
    Xt.postMessage(t, [i.buffer]);
  })) : zr(i), nd = async (i, e) => {
    if (Ke()) {
      if (e == null ? void 0 : e.preferredOutputLocation) throw new Error('session option "preferredOutputLocation" is not supported for proxy.');
      return Tr(), new Promise((o, t) => {
        xr("create", [o, t]);
        let r = { type: "create", in: { model: i, options: { ...e } } }, n = [];
        i instanceof Uint8Array && n.push(i.buffer), Xt.postMessage(r, n);
      });
    } else return ao(i, e);
  }, od = async (i) => {
    if (Ke()) return Tr(), new Promise((e, o) => {
      xr("release", [e, o]);
      let t = { type: "release", in: i };
      Xt.postMessage(t);
    });
    so(i);
  }, id = async (i, e, o, t, r, n) => {
    if (Ke()) {
      if (o.some((s) => s[3] !== "cpu")) throw new Error("input tensor on GPU is not supported for proxy.");
      if (r.some((s) => s)) throw new Error("pre-allocated output tensor is not supported for proxy.");
      return Tr(), new Promise((s, a) => {
        xr("run", [s, a]);
        let u = o, l = { type: "run", in: { sessionId: i, inputIndices: e, inputs: u, outputIndices: t, options: n } };
        Xt.postMessage(l, fo(u));
      });
    } else return uo(i, e, o, t, r, n);
  }, ad = async (i) => {
    if (Ke()) return Tr(), new Promise((e, o) => {
      xr("end-profiling", [e, o]);
      let t = { type: "end-profiling", in: i };
      Xt.postMessage(t);
    });
    lo(i);
  };
});
var sd, Rg, yo, ud = O(() => {
  Kt();
  Qi();
  Ki();
  ro();
  Ji();
  sd = (i, e) => {
    switch (i.location) {
      case "cpu":
        return [i.type, i.dims, i.data, "cpu"];
      case "gpu-buffer":
        return [i.type, i.dims, { gpuBuffer: i.gpuBuffer }, "gpu-buffer"];
      default:
        throw new Error(`invalid data location: ${i.location} for ${e()}`);
    }
  }, Rg = (i) => {
    switch (i[3]) {
      case "cpu":
        return new Tt(i[0], i[2], i[1]);
      case "gpu-buffer": {
        let e = i[0];
        if (!ho(e)) throw new Error(`not supported data type: ${e} for deserializing GPU tensor`);
        let { gpuBuffer: o, download: t, dispose: r } = i[2];
        return Tt.fromGpuBuffer(o, { dataType: e, dims: i[1], download: t, dispose: r });
      }
      default:
        throw new Error(`invalid data location: ${i[3]}`);
    }
  }, yo = class {
    async fetchModelAndCopyToWasmMemory(e) {
      return rd(await Hr(e));
    }
    async loadModel(e, o) {
      Be();
      let t;
      typeof e == "string" ? t = await this.fetchModelAndCopyToWasmMemory(e) : t = e, [this.sessionId, this.inputNames, this.outputNames] = await nd(t, o), Fe();
    }
    async dispose() {
      return od(this.sessionId);
    }
    async run(e, o, t) {
      Be();
      let r = [], n = [];
      Object.entries(e).forEach((d) => {
        let y = d[0], w = d[1], v = this.inputNames.indexOf(y);
        if (v === -1) throw new Error(`invalid input '${y}'`);
        r.push(w), n.push(v);
      });
      let s = [], a = [];
      Object.entries(o).forEach((d) => {
        let y = d[0], w = d[1], v = this.outputNames.indexOf(y);
        if (v === -1) throw new Error(`invalid output '${y}'`);
        s.push(w), a.push(v);
      });
      let u = r.map((d, y) => sd(d, () => `input "${this.inputNames[n[y]]}"`)), l = s.map((d, y) => d ? sd(d, () => `output "${this.outputNames[a[y]]}"`) : null), f = await id(this.sessionId, n, u, a, l, t), p2 = {};
      for (let d = 0; d < f.length; d++) p2[this.outputNames[a[d]]] = s[d] ?? Rg(f[d]);
      return Fe(), p2;
    }
    startProfiling() {
    }
    endProfiling() {
      ad(this.sessionId);
    }
  };
});
var Gg, xo, ld = O(() => {
  Kt();
  Qi();
  ud();
  Vr();
  Gg = () => {
    if ((typeof z.wasm.initTimeout != "number" || z.wasm.initTimeout < 0) && (z.wasm.initTimeout = 0), z.wasm.simd === false && console.warn('Deprecated property "env.wasm.simd" is set to false. non-SIMD build is no longer provided, and this setting will be ignored.'), typeof z.wasm.proxy != "boolean" && (z.wasm.proxy = false), typeof z.wasm.trace != "boolean" && (z.wasm.trace = false), typeof z.wasm.numThreads != "number" || !Number.isInteger(z.wasm.numThreads) || z.wasm.numThreads <= 0) if (typeof self < "u" && !self.crossOriginIsolated) z.wasm.numThreads = 1;
    else {
      let i = typeof navigator > "u" ? ko("node:os").cpus().length : navigator.hardwareConcurrency;
      z.wasm.numThreads = Math.min(4, Math.ceil((i || 1) / 2));
    }
  }, xo = class {
    async init(e) {
      Gg(), await td(), await ed(e);
    }
    async createInferenceSessionHandler(e, o) {
      let t = new yo();
      return await t.loadModel(e, o), Promise.resolve(t);
    }
  };
});
var fd = {};
Or(fd, { wasmBackend: () => Mg });
var Mg, cd = O(() => {
  ld();
  Mg = new xo();
});
Kt();
Kt();
Kt();
var Ps = "1.19.2";
{
  let i = (kp(), on($p)).onnxjsBackend;
  nr("webgl", i, -10);
}
{
  let i = (cd(), on(fd)).wasmBackend;
  nr("cpu", i, 10), nr("wasm", i, 10);
}
Object.defineProperty(z.versions, "web", { value: Ps, enumerable: true });
/*! Bundled license information:

long/index.js:
  (**
   * @license
   * Copyright 2009 The Closure Library Authors
   * Copyright 2020 Daniel Wirtz / The long.js Authors.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *     http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   *
   * SPDX-License-Identifier: Apache-2.0
   *)
*/
/**
 * @license
 * Copyright 2010-2024 Three.js Authors
 * SPDX-License-Identifier: MIT
 */
const REVISION = "169";
const CullFaceNone = 0;
const CullFaceBack = 1;
const CullFaceFront = 2;
const PCFShadowMap = 1;
const PCFSoftShadowMap = 2;
const VSMShadowMap = 3;
const FrontSide = 0;
const BackSide = 1;
const DoubleSide = 2;
const NoBlending = 0;
const NormalBlending = 1;
const AdditiveBlending = 2;
const SubtractiveBlending = 3;
const MultiplyBlending = 4;
const CustomBlending = 5;
const AddEquation = 100;
const SubtractEquation = 101;
const ReverseSubtractEquation = 102;
const MinEquation = 103;
const MaxEquation = 104;
const ZeroFactor = 200;
const OneFactor = 201;
const SrcColorFactor = 202;
const OneMinusSrcColorFactor = 203;
const SrcAlphaFactor = 204;
const OneMinusSrcAlphaFactor = 205;
const DstAlphaFactor = 206;
const OneMinusDstAlphaFactor = 207;
const DstColorFactor = 208;
const OneMinusDstColorFactor = 209;
const SrcAlphaSaturateFactor = 210;
const ConstantColorFactor = 211;
const OneMinusConstantColorFactor = 212;
const ConstantAlphaFactor = 213;
const OneMinusConstantAlphaFactor = 214;
const NeverDepth = 0;
const AlwaysDepth = 1;
const LessDepth = 2;
const LessEqualDepth = 3;
const EqualDepth = 4;
const GreaterEqualDepth = 5;
const GreaterDepth = 6;
const NotEqualDepth = 7;
const MultiplyOperation = 0;
const MixOperation = 1;
const AddOperation = 2;
const NoToneMapping = 0;
const LinearToneMapping = 1;
const ReinhardToneMapping = 2;
const CineonToneMapping = 3;
const ACESFilmicToneMapping = 4;
const CustomToneMapping = 5;
const AgXToneMapping = 6;
const NeutralToneMapping = 7;
const UVMapping = 300;
const CubeReflectionMapping = 301;
const CubeRefractionMapping = 302;
const EquirectangularReflectionMapping = 303;
const EquirectangularRefractionMapping = 304;
const CubeUVReflectionMapping = 306;
const RepeatWrapping = 1e3;
const ClampToEdgeWrapping = 1001;
const MirroredRepeatWrapping = 1002;
const NearestFilter = 1003;
const NearestMipmapNearestFilter = 1004;
const NearestMipmapLinearFilter = 1005;
const LinearFilter = 1006;
const LinearMipmapNearestFilter = 1007;
const LinearMipmapLinearFilter = 1008;
const UnsignedByteType = 1009;
const ByteType = 1010;
const ShortType = 1011;
const UnsignedShortType = 1012;
const IntType = 1013;
const UnsignedIntType = 1014;
const FloatType = 1015;
const HalfFloatType = 1016;
const UnsignedShort4444Type = 1017;
const UnsignedShort5551Type = 1018;
const UnsignedInt248Type = 1020;
const UnsignedInt5999Type = 35902;
const AlphaFormat = 1021;
const RGBFormat = 1022;
const RGBAFormat = 1023;
const LuminanceFormat = 1024;
const LuminanceAlphaFormat = 1025;
const DepthFormat = 1026;
const DepthStencilFormat = 1027;
const RedFormat = 1028;
const RedIntegerFormat = 1029;
const RGFormat = 1030;
const RGIntegerFormat = 1031;
const RGBAIntegerFormat = 1033;
const RGB_S3TC_DXT1_Format = 33776;
const RGBA_S3TC_DXT1_Format = 33777;
const RGBA_S3TC_DXT3_Format = 33778;
const RGBA_S3TC_DXT5_Format = 33779;
const RGB_PVRTC_4BPPV1_Format = 35840;
const RGB_PVRTC_2BPPV1_Format = 35841;
const RGBA_PVRTC_4BPPV1_Format = 35842;
const RGBA_PVRTC_2BPPV1_Format = 35843;
const RGB_ETC1_Format = 36196;
const RGB_ETC2_Format = 37492;
const RGBA_ETC2_EAC_Format = 37496;
const RGBA_ASTC_4x4_Format = 37808;
const RGBA_ASTC_5x4_Format = 37809;
const RGBA_ASTC_5x5_Format = 37810;
const RGBA_ASTC_6x5_Format = 37811;
const RGBA_ASTC_6x6_Format = 37812;
const RGBA_ASTC_8x5_Format = 37813;
const RGBA_ASTC_8x6_Format = 37814;
const RGBA_ASTC_8x8_Format = 37815;
const RGBA_ASTC_10x5_Format = 37816;
const RGBA_ASTC_10x6_Format = 37817;
const RGBA_ASTC_10x8_Format = 37818;
const RGBA_ASTC_10x10_Format = 37819;
const RGBA_ASTC_12x10_Format = 37820;
const RGBA_ASTC_12x12_Format = 37821;
const RGBA_BPTC_Format = 36492;
const RGB_BPTC_SIGNED_Format = 36494;
const RGB_BPTC_UNSIGNED_Format = 36495;
const RED_RGTC1_Format = 36283;
const SIGNED_RED_RGTC1_Format = 36284;
const RED_GREEN_RGTC2_Format = 36285;
const SIGNED_RED_GREEN_RGTC2_Format = 36286;
const BasicDepthPacking = 3200;
const RGBADepthPacking = 3201;
const TangentSpaceNormalMap = 0;
const ObjectSpaceNormalMap = 1;
const NoColorSpace = "";
const SRGBColorSpace = "srgb";
const LinearSRGBColorSpace = "srgb-linear";
const DisplayP3ColorSpace = "display-p3";
const LinearDisplayP3ColorSpace = "display-p3-linear";
const LinearTransfer = "linear";
const SRGBTransfer = "srgb";
const Rec709Primaries = "rec709";
const P3Primaries = "p3";
const KeepStencilOp = 7680;
const AlwaysStencilFunc = 519;
const NeverCompare = 512;
const LessCompare = 513;
const EqualCompare = 514;
const LessEqualCompare = 515;
const GreaterCompare = 516;
const NotEqualCompare = 517;
const GreaterEqualCompare = 518;
const AlwaysCompare = 519;
const StaticDrawUsage = 35044;
const GLSL3 = "300 es";
const WebGLCoordinateSystem = 2e3;
const WebGPUCoordinateSystem = 2001;
class EventDispatcher {
  addEventListener(type, listener) {
    if (this._listeners === void 0) this._listeners = {};
    const listeners = this._listeners;
    if (listeners[type] === void 0) {
      listeners[type] = [];
    }
    if (listeners[type].indexOf(listener) === -1) {
      listeners[type].push(listener);
    }
  }
  hasEventListener(type, listener) {
    if (this._listeners === void 0) return false;
    const listeners = this._listeners;
    return listeners[type] !== void 0 && listeners[type].indexOf(listener) !== -1;
  }
  removeEventListener(type, listener) {
    if (this._listeners === void 0) return;
    const listeners = this._listeners;
    const listenerArray = listeners[type];
    if (listenerArray !== void 0) {
      const index = listenerArray.indexOf(listener);
      if (index !== -1) {
        listenerArray.splice(index, 1);
      }
    }
  }
  dispatchEvent(event) {
    if (this._listeners === void 0) return;
    const listeners = this._listeners;
    const listenerArray = listeners[event.type];
    if (listenerArray !== void 0) {
      event.target = this;
      const array = listenerArray.slice(0);
      for (let i = 0, l = array.length; i < l; i++) {
        array[i].call(this, event);
      }
      event.target = null;
    }
  }
}
const _lut = ["00", "01", "02", "03", "04", "05", "06", "07", "08", "09", "0a", "0b", "0c", "0d", "0e", "0f", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "1a", "1b", "1c", "1d", "1e", "1f", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "2a", "2b", "2c", "2d", "2e", "2f", "30", "31", "32", "33", "34", "35", "36", "37", "38", "39", "3a", "3b", "3c", "3d", "3e", "3f", "40", "41", "42", "43", "44", "45", "46", "47", "48", "49", "4a", "4b", "4c", "4d", "4e", "4f", "50", "51", "52", "53", "54", "55", "56", "57", "58", "59", "5a", "5b", "5c", "5d", "5e", "5f", "60", "61", "62", "63", "64", "65", "66", "67", "68", "69", "6a", "6b", "6c", "6d", "6e", "6f", "70", "71", "72", "73", "74", "75", "76", "77", "78", "79", "7a", "7b", "7c", "7d", "7e", "7f", "80", "81", "82", "83", "84", "85", "86", "87", "88", "89", "8a", "8b", "8c", "8d", "8e", "8f", "90", "91", "92", "93", "94", "95", "96", "97", "98", "99", "9a", "9b", "9c", "9d", "9e", "9f", "a0", "a1", "a2", "a3", "a4", "a5", "a6", "a7", "a8", "a9", "aa", "ab", "ac", "ad", "ae", "af", "b0", "b1", "b2", "b3", "b4", "b5", "b6", "b7", "b8", "b9", "ba", "bb", "bc", "bd", "be", "bf", "c0", "c1", "c2", "c3", "c4", "c5", "c6", "c7", "c8", "c9", "ca", "cb", "cc", "cd", "ce", "cf", "d0", "d1", "d2", "d3", "d4", "d5", "d6", "d7", "d8", "d9", "da", "db", "dc", "dd", "de", "df", "e0", "e1", "e2", "e3", "e4", "e5", "e6", "e7", "e8", "e9", "ea", "eb", "ec", "ed", "ee", "ef", "f0", "f1", "f2", "f3", "f4", "f5", "f6", "f7", "f8", "f9", "fa", "fb", "fc", "fd", "fe", "ff"];
let _seed = 1234567;
const DEG2RAD = Math.PI / 180;
const RAD2DEG = 180 / Math.PI;
function generateUUID() {
  const d0 = Math.random() * 4294967295 | 0;
  const d1 = Math.random() * 4294967295 | 0;
  const d2 = Math.random() * 4294967295 | 0;
  const d3 = Math.random() * 4294967295 | 0;
  const uuid = _lut[d0 & 255] + _lut[d0 >> 8 & 255] + _lut[d0 >> 16 & 255] + _lut[d0 >> 24 & 255] + "-" + _lut[d1 & 255] + _lut[d1 >> 8 & 255] + "-" + _lut[d1 >> 16 & 15 | 64] + _lut[d1 >> 24 & 255] + "-" + _lut[d2 & 63 | 128] + _lut[d2 >> 8 & 255] + "-" + _lut[d2 >> 16 & 255] + _lut[d2 >> 24 & 255] + _lut[d3 & 255] + _lut[d3 >> 8 & 255] + _lut[d3 >> 16 & 255] + _lut[d3 >> 24 & 255];
  return uuid.toLowerCase();
}
function clamp(value, min, max) {
  return Math.max(min, Math.min(max, value));
}
function euclideanModulo(n, m) {
  return (n % m + m) % m;
}
function mapLinear(x, a1, a2, b1, b2) {
  return b1 + (x - a1) * (b2 - b1) / (a2 - a1);
}
function inverseLerp(x, y, value) {
  if (x !== y) {
    return (value - x) / (y - x);
  } else {
    return 0;
  }
}
function lerp(x, y, t) {
  return (1 - t) * x + t * y;
}
function damp(x, y, lambda, dt2) {
  return lerp(x, y, 1 - Math.exp(-lambda * dt2));
}
function pingpong(x, length = 1) {
  return length - Math.abs(euclideanModulo(x, length * 2) - length);
}
function smoothstep(x, min, max) {
  if (x <= min) return 0;
  if (x >= max) return 1;
  x = (x - min) / (max - min);
  return x * x * (3 - 2 * x);
}
function smootherstep(x, min, max) {
  if (x <= min) return 0;
  if (x >= max) return 1;
  x = (x - min) / (max - min);
  return x * x * x * (x * (x * 6 - 15) + 10);
}
function randInt(low, high) {
  return low + Math.floor(Math.random() * (high - low + 1));
}
function randFloat(low, high) {
  return low + Math.random() * (high - low);
}
function randFloatSpread(range) {
  return range * (0.5 - Math.random());
}
function seededRandom(s) {
  if (s !== void 0) _seed = s;
  let t = _seed += 1831565813;
  t = Math.imul(t ^ t >>> 15, t | 1);
  t ^= t + Math.imul(t ^ t >>> 7, t | 61);
  return ((t ^ t >>> 14) >>> 0) / 4294967296;
}
function degToRad(degrees) {
  return degrees * DEG2RAD;
}
function radToDeg(radians) {
  return radians * RAD2DEG;
}
function isPowerOfTwo(value) {
  return (value & value - 1) === 0 && value !== 0;
}
function ceilPowerOfTwo(value) {
  return Math.pow(2, Math.ceil(Math.log(value) / Math.LN2));
}
function floorPowerOfTwo(value) {
  return Math.pow(2, Math.floor(Math.log(value) / Math.LN2));
}
function setQuaternionFromProperEuler(q2, a, b, c, order) {
  const cos = Math.cos;
  const sin = Math.sin;
  const c2 = cos(b / 2);
  const s2 = sin(b / 2);
  const c13 = cos((a + c) / 2);
  const s13 = sin((a + c) / 2);
  const c1_3 = cos((a - c) / 2);
  const s1_3 = sin((a - c) / 2);
  const c3_1 = cos((c - a) / 2);
  const s3_1 = sin((c - a) / 2);
  switch (order) {
    case "XYX":
      q2.set(c2 * s13, s2 * c1_3, s2 * s1_3, c2 * c13);
      break;
    case "YZY":
      q2.set(s2 * s1_3, c2 * s13, s2 * c1_3, c2 * c13);
      break;
    case "ZXZ":
      q2.set(s2 * c1_3, s2 * s1_3, c2 * s13, c2 * c13);
      break;
    case "XZX":
      q2.set(c2 * s13, s2 * s3_1, s2 * c3_1, c2 * c13);
      break;
    case "YXY":
      q2.set(s2 * c3_1, c2 * s13, s2 * s3_1, c2 * c13);
      break;
    case "ZYZ":
      q2.set(s2 * s3_1, s2 * c3_1, c2 * s13, c2 * c13);
      break;
    default:
      console.warn("THREE.MathUtils: .setQuaternionFromProperEuler() encountered an unknown order: " + order);
  }
}
function denormalize(value, array) {
  switch (array.constructor) {
    case Float32Array:
      return value;
    case Uint32Array:
      return value / 4294967295;
    case Uint16Array:
      return value / 65535;
    case Uint8Array:
      return value / 255;
    case Int32Array:
      return Math.max(value / 2147483647, -1);
    case Int16Array:
      return Math.max(value / 32767, -1);
    case Int8Array:
      return Math.max(value / 127, -1);
    default:
      throw new Error("Invalid component type.");
  }
}
function normalize(value, array) {
  switch (array.constructor) {
    case Float32Array:
      return value;
    case Uint32Array:
      return Math.round(value * 4294967295);
    case Uint16Array:
      return Math.round(value * 65535);
    case Uint8Array:
      return Math.round(value * 255);
    case Int32Array:
      return Math.round(value * 2147483647);
    case Int16Array:
      return Math.round(value * 32767);
    case Int8Array:
      return Math.round(value * 127);
    default:
      throw new Error("Invalid component type.");
  }
}
const MathUtils = {
  DEG2RAD,
  RAD2DEG,
  generateUUID,
  clamp,
  euclideanModulo,
  mapLinear,
  inverseLerp,
  lerp,
  damp,
  pingpong,
  smoothstep,
  smootherstep,
  randInt,
  randFloat,
  randFloatSpread,
  seededRandom,
  degToRad,
  radToDeg,
  isPowerOfTwo,
  ceilPowerOfTwo,
  floorPowerOfTwo,
  setQuaternionFromProperEuler,
  normalize,
  denormalize
};
class Vector2 {
  constructor(x = 0, y = 0) {
    Vector2.prototype.isVector2 = true;
    this.x = x;
    this.y = y;
  }
  get width() {
    return this.x;
  }
  set width(value) {
    this.x = value;
  }
  get height() {
    return this.y;
  }
  set height(value) {
    this.y = value;
  }
  set(x, y) {
    this.x = x;
    this.y = y;
    return this;
  }
  setScalar(scalar) {
    this.x = scalar;
    this.y = scalar;
    return this;
  }
  setX(x) {
    this.x = x;
    return this;
  }
  setY(y) {
    this.y = y;
    return this;
  }
  setComponent(index, value) {
    switch (index) {
      case 0:
        this.x = value;
        break;
      case 1:
        this.y = value;
        break;
      default:
        throw new Error("index is out of range: " + index);
    }
    return this;
  }
  getComponent(index) {
    switch (index) {
      case 0:
        return this.x;
      case 1:
        return this.y;
      default:
        throw new Error("index is out of range: " + index);
    }
  }
  clone() {
    return new this.constructor(this.x, this.y);
  }
  copy(v) {
    this.x = v.x;
    this.y = v.y;
    return this;
  }
  add(v) {
    this.x += v.x;
    this.y += v.y;
    return this;
  }
  addScalar(s) {
    this.x += s;
    this.y += s;
    return this;
  }
  addVectors(a, b) {
    this.x = a.x + b.x;
    this.y = a.y + b.y;
    return this;
  }
  addScaledVector(v, s) {
    this.x += v.x * s;
    this.y += v.y * s;
    return this;
  }
  sub(v) {
    this.x -= v.x;
    this.y -= v.y;
    return this;
  }
  subScalar(s) {
    this.x -= s;
    this.y -= s;
    return this;
  }
  subVectors(a, b) {
    this.x = a.x - b.x;
    this.y = a.y - b.y;
    return this;
  }
  multiply(v) {
    this.x *= v.x;
    this.y *= v.y;
    return this;
  }
  multiplyScalar(scalar) {
    this.x *= scalar;
    this.y *= scalar;
    return this;
  }
  divide(v) {
    this.x /= v.x;
    this.y /= v.y;
    return this;
  }
  divideScalar(scalar) {
    return this.multiplyScalar(1 / scalar);
  }
  applyMatrix3(m) {
    const x = this.x, y = this.y;
    const e = m.elements;
    this.x = e[0] * x + e[3] * y + e[6];
    this.y = e[1] * x + e[4] * y + e[7];
    return this;
  }
  min(v) {
    this.x = Math.min(this.x, v.x);
    this.y = Math.min(this.y, v.y);
    return this;
  }
  max(v) {
    this.x = Math.max(this.x, v.x);
    this.y = Math.max(this.y, v.y);
    return this;
  }
  clamp(min, max) {
    this.x = Math.max(min.x, Math.min(max.x, this.x));
    this.y = Math.max(min.y, Math.min(max.y, this.y));
    return this;
  }
  clampScalar(minVal, maxVal) {
    this.x = Math.max(minVal, Math.min(maxVal, this.x));
    this.y = Math.max(minVal, Math.min(maxVal, this.y));
    return this;
  }
  clampLength(min, max) {
    const length = this.length();
    return this.divideScalar(length || 1).multiplyScalar(Math.max(min, Math.min(max, length)));
  }
  floor() {
    this.x = Math.floor(this.x);
    this.y = Math.floor(this.y);
    return this;
  }
  ceil() {
    this.x = Math.ceil(this.x);
    this.y = Math.ceil(this.y);
    return this;
  }
  round() {
    this.x = Math.round(this.x);
    this.y = Math.round(this.y);
    return this;
  }
  roundToZero() {
    this.x = Math.trunc(this.x);
    this.y = Math.trunc(this.y);
    return this;
  }
  negate() {
    this.x = -this.x;
    this.y = -this.y;
    return this;
  }
  dot(v) {
    return this.x * v.x + this.y * v.y;
  }
  cross(v) {
    return this.x * v.y - this.y * v.x;
  }
  lengthSq() {
    return this.x * this.x + this.y * this.y;
  }
  length() {
    return Math.sqrt(this.x * this.x + this.y * this.y);
  }
  manhattanLength() {
    return Math.abs(this.x) + Math.abs(this.y);
  }
  normalize() {
    return this.divideScalar(this.length() || 1);
  }
  angle() {
    const angle = Math.atan2(-this.y, -this.x) + Math.PI;
    return angle;
  }
  angleTo(v) {
    const denominator = Math.sqrt(this.lengthSq() * v.lengthSq());
    if (denominator === 0) return Math.PI / 2;
    const theta = this.dot(v) / denominator;
    return Math.acos(clamp(theta, -1, 1));
  }
  distanceTo(v) {
    return Math.sqrt(this.distanceToSquared(v));
  }
  distanceToSquared(v) {
    const dx = this.x - v.x, dy = this.y - v.y;
    return dx * dx + dy * dy;
  }
  manhattanDistanceTo(v) {
    return Math.abs(this.x - v.x) + Math.abs(this.y - v.y);
  }
  setLength(length) {
    return this.normalize().multiplyScalar(length);
  }
  lerp(v, alpha) {
    this.x += (v.x - this.x) * alpha;
    this.y += (v.y - this.y) * alpha;
    return this;
  }
  lerpVectors(v1, v2, alpha) {
    this.x = v1.x + (v2.x - v1.x) * alpha;
    this.y = v1.y + (v2.y - v1.y) * alpha;
    return this;
  }
  equals(v) {
    return v.x === this.x && v.y === this.y;
  }
  fromArray(array, offset = 0) {
    this.x = array[offset];
    this.y = array[offset + 1];
    return this;
  }
  toArray(array = [], offset = 0) {
    array[offset] = this.x;
    array[offset + 1] = this.y;
    return array;
  }
  fromBufferAttribute(attribute, index) {
    this.x = attribute.getX(index);
    this.y = attribute.getY(index);
    return this;
  }
  rotateAround(center, angle) {
    const c = Math.cos(angle), s = Math.sin(angle);
    const x = this.x - center.x;
    const y = this.y - center.y;
    this.x = x * c - y * s + center.x;
    this.y = x * s + y * c + center.y;
    return this;
  }
  random() {
    this.x = Math.random();
    this.y = Math.random();
    return this;
  }
  *[Symbol.iterator]() {
    yield this.x;
    yield this.y;
  }
}
class Matrix3 {
  constructor(n11, n12, n13, n21, n22, n23, n31, n32, n33) {
    Matrix3.prototype.isMatrix3 = true;
    this.elements = [
      1,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      1
    ];
    if (n11 !== void 0) {
      this.set(n11, n12, n13, n21, n22, n23, n31, n32, n33);
    }
  }
  set(n11, n12, n13, n21, n22, n23, n31, n32, n33) {
    const te = this.elements;
    te[0] = n11;
    te[1] = n21;
    te[2] = n31;
    te[3] = n12;
    te[4] = n22;
    te[5] = n32;
    te[6] = n13;
    te[7] = n23;
    te[8] = n33;
    return this;
  }
  identity() {
    this.set(
      1,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      1
    );
    return this;
  }
  copy(m) {
    const te = this.elements;
    const me2 = m.elements;
    te[0] = me2[0];
    te[1] = me2[1];
    te[2] = me2[2];
    te[3] = me2[3];
    te[4] = me2[4];
    te[5] = me2[5];
    te[6] = me2[6];
    te[7] = me2[7];
    te[8] = me2[8];
    return this;
  }
  extractBasis(xAxis, yAxis, zAxis) {
    xAxis.setFromMatrix3Column(this, 0);
    yAxis.setFromMatrix3Column(this, 1);
    zAxis.setFromMatrix3Column(this, 2);
    return this;
  }
  setFromMatrix4(m) {
    const me2 = m.elements;
    this.set(
      me2[0],
      me2[4],
      me2[8],
      me2[1],
      me2[5],
      me2[9],
      me2[2],
      me2[6],
      me2[10]
    );
    return this;
  }
  multiply(m) {
    return this.multiplyMatrices(this, m);
  }
  premultiply(m) {
    return this.multiplyMatrices(m, this);
  }
  multiplyMatrices(a, b) {
    const ae = a.elements;
    const be2 = b.elements;
    const te = this.elements;
    const a11 = ae[0], a12 = ae[3], a13 = ae[6];
    const a21 = ae[1], a22 = ae[4], a23 = ae[7];
    const a31 = ae[2], a32 = ae[5], a33 = ae[8];
    const b11 = be2[0], b12 = be2[3], b13 = be2[6];
    const b21 = be2[1], b22 = be2[4], b23 = be2[7];
    const b31 = be2[2], b32 = be2[5], b33 = be2[8];
    te[0] = a11 * b11 + a12 * b21 + a13 * b31;
    te[3] = a11 * b12 + a12 * b22 + a13 * b32;
    te[6] = a11 * b13 + a12 * b23 + a13 * b33;
    te[1] = a21 * b11 + a22 * b21 + a23 * b31;
    te[4] = a21 * b12 + a22 * b22 + a23 * b32;
    te[7] = a21 * b13 + a22 * b23 + a23 * b33;
    te[2] = a31 * b11 + a32 * b21 + a33 * b31;
    te[5] = a31 * b12 + a32 * b22 + a33 * b32;
    te[8] = a31 * b13 + a32 * b23 + a33 * b33;
    return this;
  }
  multiplyScalar(s) {
    const te = this.elements;
    te[0] *= s;
    te[3] *= s;
    te[6] *= s;
    te[1] *= s;
    te[4] *= s;
    te[7] *= s;
    te[2] *= s;
    te[5] *= s;
    te[8] *= s;
    return this;
  }
  determinant() {
    const te = this.elements;
    const a = te[0], b = te[1], c = te[2], d = te[3], e = te[4], f = te[5], g = te[6], h2 = te[7], i = te[8];
    return a * e * i - a * f * h2 - b * d * i + b * f * g + c * d * h2 - c * e * g;
  }
  invert() {
    const te = this.elements, n11 = te[0], n21 = te[1], n31 = te[2], n12 = te[3], n22 = te[4], n32 = te[5], n13 = te[6], n23 = te[7], n33 = te[8], t11 = n33 * n22 - n32 * n23, t12 = n32 * n13 - n33 * n12, t13 = n23 * n12 - n22 * n13, det = n11 * t11 + n21 * t12 + n31 * t13;
    if (det === 0) return this.set(0, 0, 0, 0, 0, 0, 0, 0, 0);
    const detInv = 1 / det;
    te[0] = t11 * detInv;
    te[1] = (n31 * n23 - n33 * n21) * detInv;
    te[2] = (n32 * n21 - n31 * n22) * detInv;
    te[3] = t12 * detInv;
    te[4] = (n33 * n11 - n31 * n13) * detInv;
    te[5] = (n31 * n12 - n32 * n11) * detInv;
    te[6] = t13 * detInv;
    te[7] = (n21 * n13 - n23 * n11) * detInv;
    te[8] = (n22 * n11 - n21 * n12) * detInv;
    return this;
  }
  transpose() {
    let tmp2;
    const m = this.elements;
    tmp2 = m[1];
    m[1] = m[3];
    m[3] = tmp2;
    tmp2 = m[2];
    m[2] = m[6];
    m[6] = tmp2;
    tmp2 = m[5];
    m[5] = m[7];
    m[7] = tmp2;
    return this;
  }
  getNormalMatrix(matrix4) {
    return this.setFromMatrix4(matrix4).invert().transpose();
  }
  transposeIntoArray(r) {
    const m = this.elements;
    r[0] = m[0];
    r[1] = m[3];
    r[2] = m[6];
    r[3] = m[1];
    r[4] = m[4];
    r[5] = m[7];
    r[6] = m[2];
    r[7] = m[5];
    r[8] = m[8];
    return this;
  }
  setUvTransform(tx, ty, sx, sy, rotation, cx, cy) {
    const c = Math.cos(rotation);
    const s = Math.sin(rotation);
    this.set(
      sx * c,
      sx * s,
      -sx * (c * cx + s * cy) + cx + tx,
      -sy * s,
      sy * c,
      -sy * (-s * cx + c * cy) + cy + ty,
      0,
      0,
      1
    );
    return this;
  }
  //
  scale(sx, sy) {
    this.premultiply(_m3.makeScale(sx, sy));
    return this;
  }
  rotate(theta) {
    this.premultiply(_m3.makeRotation(-theta));
    return this;
  }
  translate(tx, ty) {
    this.premultiply(_m3.makeTranslation(tx, ty));
    return this;
  }
  // for 2D Transforms
  makeTranslation(x, y) {
    if (x.isVector2) {
      this.set(
        1,
        0,
        x.x,
        0,
        1,
        x.y,
        0,
        0,
        1
      );
    } else {
      this.set(
        1,
        0,
        x,
        0,
        1,
        y,
        0,
        0,
        1
      );
    }
    return this;
  }
  makeRotation(theta) {
    const c = Math.cos(theta);
    const s = Math.sin(theta);
    this.set(
      c,
      -s,
      0,
      s,
      c,
      0,
      0,
      0,
      1
    );
    return this;
  }
  makeScale(x, y) {
    this.set(
      x,
      0,
      0,
      0,
      y,
      0,
      0,
      0,
      1
    );
    return this;
  }
  //
  equals(matrix) {
    const te = this.elements;
    const me2 = matrix.elements;
    for (let i = 0; i < 9; i++) {
      if (te[i] !== me2[i]) return false;
    }
    return true;
  }
  fromArray(array, offset = 0) {
    for (let i = 0; i < 9; i++) {
      this.elements[i] = array[i + offset];
    }
    return this;
  }
  toArray(array = [], offset = 0) {
    const te = this.elements;
    array[offset] = te[0];
    array[offset + 1] = te[1];
    array[offset + 2] = te[2];
    array[offset + 3] = te[3];
    array[offset + 4] = te[4];
    array[offset + 5] = te[5];
    array[offset + 6] = te[6];
    array[offset + 7] = te[7];
    array[offset + 8] = te[8];
    return array;
  }
  clone() {
    return new this.constructor().fromArray(this.elements);
  }
}
const _m3 = /* @__PURE__ */ new Matrix3();
function arrayNeedsUint32(array) {
  for (let i = array.length - 1; i >= 0; --i) {
    if (array[i] >= 65535) return true;
  }
  return false;
}
function createElementNS(name2) {
  return document.createElementNS("http://www.w3.org/1999/xhtml", name2);
}
function createCanvasElement() {
  const canvas = createElementNS("canvas");
  canvas.style.display = "block";
  return canvas;
}
const _cache = {};
function warnOnce(message) {
  if (message in _cache) return;
  _cache[message] = true;
  console.warn(message);
}
function probeAsync(gl2, sync, interval) {
  return new Promise(function(resolve2, reject) {
    function probe() {
      switch (gl2.clientWaitSync(sync, gl2.SYNC_FLUSH_COMMANDS_BIT, 0)) {
        case gl2.WAIT_FAILED:
          reject();
          break;
        case gl2.TIMEOUT_EXPIRED:
          setTimeout(probe, interval);
          break;
        default:
          resolve2();
      }
    }
    setTimeout(probe, interval);
  });
}
function toNormalizedProjectionMatrix(projectionMatrix) {
  const m = projectionMatrix.elements;
  m[2] = 0.5 * m[2] + 0.5 * m[3];
  m[6] = 0.5 * m[6] + 0.5 * m[7];
  m[10] = 0.5 * m[10] + 0.5 * m[11];
  m[14] = 0.5 * m[14] + 0.5 * m[15];
}
function toReversedProjectionMatrix(projectionMatrix) {
  const m = projectionMatrix.elements;
  const isPerspectiveMatrix = m[11] === -1;
  if (isPerspectiveMatrix) {
    m[10] = -m[10] - 1;
    m[14] = -m[14];
  } else {
    m[10] = -m[10];
    m[14] = -m[14] + 1;
  }
}
const LINEAR_SRGB_TO_LINEAR_DISPLAY_P3 = /* @__PURE__ */ new Matrix3().set(
  0.8224621,
  0.177538,
  0,
  0.0331941,
  0.9668058,
  0,
  0.0170827,
  0.0723974,
  0.9105199
);
const LINEAR_DISPLAY_P3_TO_LINEAR_SRGB = /* @__PURE__ */ new Matrix3().set(
  1.2249401,
  -0.2249404,
  0,
  -0.0420569,
  1.0420571,
  0,
  -0.0196376,
  -0.0786361,
  1.0982735
);
const COLOR_SPACES = {
  [LinearSRGBColorSpace]: {
    transfer: LinearTransfer,
    primaries: Rec709Primaries,
    luminanceCoefficients: [0.2126, 0.7152, 0.0722],
    toReference: (color) => color,
    fromReference: (color) => color
  },
  [SRGBColorSpace]: {
    transfer: SRGBTransfer,
    primaries: Rec709Primaries,
    luminanceCoefficients: [0.2126, 0.7152, 0.0722],
    toReference: (color) => color.convertSRGBToLinear(),
    fromReference: (color) => color.convertLinearToSRGB()
  },
  [LinearDisplayP3ColorSpace]: {
    transfer: LinearTransfer,
    primaries: P3Primaries,
    luminanceCoefficients: [0.2289, 0.6917, 0.0793],
    toReference: (color) => color.applyMatrix3(LINEAR_DISPLAY_P3_TO_LINEAR_SRGB),
    fromReference: (color) => color.applyMatrix3(LINEAR_SRGB_TO_LINEAR_DISPLAY_P3)
  },
  [DisplayP3ColorSpace]: {
    transfer: SRGBTransfer,
    primaries: P3Primaries,
    luminanceCoefficients: [0.2289, 0.6917, 0.0793],
    toReference: (color) => color.convertSRGBToLinear().applyMatrix3(LINEAR_DISPLAY_P3_TO_LINEAR_SRGB),
    fromReference: (color) => color.applyMatrix3(LINEAR_SRGB_TO_LINEAR_DISPLAY_P3).convertLinearToSRGB()
  }
};
const SUPPORTED_WORKING_COLOR_SPACES = /* @__PURE__ */ new Set([LinearSRGBColorSpace, LinearDisplayP3ColorSpace]);
const ColorManagement = {
  enabled: true,
  _workingColorSpace: LinearSRGBColorSpace,
  get workingColorSpace() {
    return this._workingColorSpace;
  },
  set workingColorSpace(colorSpace) {
    if (!SUPPORTED_WORKING_COLOR_SPACES.has(colorSpace)) {
      throw new Error(`Unsupported working color space, "${colorSpace}".`);
    }
    this._workingColorSpace = colorSpace;
  },
  convert: function(color, sourceColorSpace, targetColorSpace) {
    if (this.enabled === false || sourceColorSpace === targetColorSpace || !sourceColorSpace || !targetColorSpace) {
      return color;
    }
    const sourceToReference = COLOR_SPACES[sourceColorSpace].toReference;
    const targetFromReference = COLOR_SPACES[targetColorSpace].fromReference;
    return targetFromReference(sourceToReference(color));
  },
  fromWorkingColorSpace: function(color, targetColorSpace) {
    return this.convert(color, this._workingColorSpace, targetColorSpace);
  },
  toWorkingColorSpace: function(color, sourceColorSpace) {
    return this.convert(color, sourceColorSpace, this._workingColorSpace);
  },
  getPrimaries: function(colorSpace) {
    return COLOR_SPACES[colorSpace].primaries;
  },
  getTransfer: function(colorSpace) {
    if (colorSpace === NoColorSpace) return LinearTransfer;
    return COLOR_SPACES[colorSpace].transfer;
  },
  getLuminanceCoefficients: function(target, colorSpace = this._workingColorSpace) {
    return target.fromArray(COLOR_SPACES[colorSpace].luminanceCoefficients);
  }
};
function SRGBToLinear(c) {
  return c < 0.04045 ? c * 0.0773993808 : Math.pow(c * 0.9478672986 + 0.0521327014, 2.4);
}
function LinearToSRGB(c) {
  return c < 31308e-7 ? c * 12.92 : 1.055 * Math.pow(c, 0.41666) - 0.055;
}
let _canvas;
class ImageUtils {
  static getDataURL(image) {
    if (/^data:/i.test(image.src)) {
      return image.src;
    }
    if (typeof HTMLCanvasElement === "undefined") {
      return image.src;
    }
    let canvas;
    if (image instanceof HTMLCanvasElement) {
      canvas = image;
    } else {
      if (_canvas === void 0) _canvas = createElementNS("canvas");
      _canvas.width = image.width;
      _canvas.height = image.height;
      const context = _canvas.getContext("2d");
      if (image instanceof ImageData) {
        context.putImageData(image, 0, 0);
      } else {
        context.drawImage(image, 0, 0, image.width, image.height);
      }
      canvas = _canvas;
    }
    if (canvas.width > 2048 || canvas.height > 2048) {
      console.warn("THREE.ImageUtils.getDataURL: Image converted to jpg for performance reasons", image);
      return canvas.toDataURL("image/jpeg", 0.6);
    } else {
      return canvas.toDataURL("image/png");
    }
  }
  static sRGBToLinear(image) {
    if (typeof HTMLImageElement !== "undefined" && image instanceof HTMLImageElement || typeof HTMLCanvasElement !== "undefined" && image instanceof HTMLCanvasElement || typeof ImageBitmap !== "undefined" && image instanceof ImageBitmap) {
      const canvas = createElementNS("canvas");
      canvas.width = image.width;
      canvas.height = image.height;
      const context = canvas.getContext("2d");
      context.drawImage(image, 0, 0, image.width, image.height);
      const imageData = context.getImageData(0, 0, image.width, image.height);
      const data = imageData.data;
      for (let i = 0; i < data.length; i++) {
        data[i] = SRGBToLinear(data[i] / 255) * 255;
      }
      context.putImageData(imageData, 0, 0);
      return canvas;
    } else if (image.data) {
      const data = image.data.slice(0);
      for (let i = 0; i < data.length; i++) {
        if (data instanceof Uint8Array || data instanceof Uint8ClampedArray) {
          data[i] = Math.floor(SRGBToLinear(data[i] / 255) * 255);
        } else {
          data[i] = SRGBToLinear(data[i]);
        }
      }
      return {
        data,
        width: image.width,
        height: image.height
      };
    } else {
      console.warn("THREE.ImageUtils.sRGBToLinear(): Unsupported image type. No color space conversion applied.");
      return image;
    }
  }
}
let _sourceId = 0;
class Source {
  constructor(data = null) {
    this.isSource = true;
    Object.defineProperty(this, "id", { value: _sourceId++ });
    this.uuid = generateUUID();
    this.data = data;
    this.dataReady = true;
    this.version = 0;
  }
  set needsUpdate(value) {
    if (value === true) this.version++;
  }
  toJSON(meta) {
    const isRootObject = meta === void 0 || typeof meta === "string";
    if (!isRootObject && meta.images[this.uuid] !== void 0) {
      return meta.images[this.uuid];
    }
    const output = {
      uuid: this.uuid,
      url: ""
    };
    const data = this.data;
    if (data !== null) {
      let url;
      if (Array.isArray(data)) {
        url = [];
        for (let i = 0, l = data.length; i < l; i++) {
          if (data[i].isDataTexture) {
            url.push(serializeImage(data[i].image));
          } else {
            url.push(serializeImage(data[i]));
          }
        }
      } else {
        url = serializeImage(data);
      }
      output.url = url;
    }
    if (!isRootObject) {
      meta.images[this.uuid] = output;
    }
    return output;
  }
}
function serializeImage(image) {
  if (typeof HTMLImageElement !== "undefined" && image instanceof HTMLImageElement || typeof HTMLCanvasElement !== "undefined" && image instanceof HTMLCanvasElement || typeof ImageBitmap !== "undefined" && image instanceof ImageBitmap) {
    return ImageUtils.getDataURL(image);
  } else {
    if (image.data) {
      return {
        data: Array.from(image.data),
        width: image.width,
        height: image.height,
        type: image.data.constructor.name
      };
    } else {
      console.warn("THREE.Texture: Unable to serialize Texture.");
      return {};
    }
  }
}
let _textureId = 0;
class Texture extends EventDispatcher {
  constructor(image = Texture.DEFAULT_IMAGE, mapping = Texture.DEFAULT_MAPPING, wrapS = ClampToEdgeWrapping, wrapT = ClampToEdgeWrapping, magFilter = LinearFilter, minFilter = LinearMipmapLinearFilter, format = RGBAFormat, type = UnsignedByteType, anisotropy = Texture.DEFAULT_ANISOTROPY, colorSpace = NoColorSpace) {
    super();
    this.isTexture = true;
    Object.defineProperty(this, "id", { value: _textureId++ });
    this.uuid = generateUUID();
    this.name = "";
    this.source = new Source(image);
    this.mipmaps = [];
    this.mapping = mapping;
    this.channel = 0;
    this.wrapS = wrapS;
    this.wrapT = wrapT;
    this.magFilter = magFilter;
    this.minFilter = minFilter;
    this.anisotropy = anisotropy;
    this.format = format;
    this.internalFormat = null;
    this.type = type;
    this.offset = new Vector2(0, 0);
    this.repeat = new Vector2(1, 1);
    this.center = new Vector2(0, 0);
    this.rotation = 0;
    this.matrixAutoUpdate = true;
    this.matrix = new Matrix3();
    this.generateMipmaps = true;
    this.premultiplyAlpha = false;
    this.flipY = true;
    this.unpackAlignment = 4;
    this.colorSpace = colorSpace;
    this.userData = {};
    this.version = 0;
    this.onUpdate = null;
    this.isRenderTargetTexture = false;
    this.pmremVersion = 0;
  }
  get image() {
    return this.source.data;
  }
  set image(value = null) {
    this.source.data = value;
  }
  updateMatrix() {
    this.matrix.setUvTransform(this.offset.x, this.offset.y, this.repeat.x, this.repeat.y, this.rotation, this.center.x, this.center.y);
  }
  clone() {
    return new this.constructor().copy(this);
  }
  copy(source) {
    this.name = source.name;
    this.source = source.source;
    this.mipmaps = source.mipmaps.slice(0);
    this.mapping = source.mapping;
    this.channel = source.channel;
    this.wrapS = source.wrapS;
    this.wrapT = source.wrapT;
    this.magFilter = source.magFilter;
    this.minFilter = source.minFilter;
    this.anisotropy = source.anisotropy;
    this.format = source.format;
    this.internalFormat = source.internalFormat;
    this.type = source.type;
    this.offset.copy(source.offset);
    this.repeat.copy(source.repeat);
    this.center.copy(source.center);
    this.rotation = source.rotation;
    this.matrixAutoUpdate = source.matrixAutoUpdate;
    this.matrix.copy(source.matrix);
    this.generateMipmaps = source.generateMipmaps;
    this.premultiplyAlpha = source.premultiplyAlpha;
    this.flipY = source.flipY;
    this.unpackAlignment = source.unpackAlignment;
    this.colorSpace = source.colorSpace;
    this.userData = JSON.parse(JSON.stringify(source.userData));
    this.needsUpdate = true;
    return this;
  }
  toJSON(meta) {
    const isRootObject = meta === void 0 || typeof meta === "string";
    if (!isRootObject && meta.textures[this.uuid] !== void 0) {
      return meta.textures[this.uuid];
    }
    const output = {
      metadata: {
        version: 4.6,
        type: "Texture",
        generator: "Texture.toJSON"
      },
      uuid: this.uuid,
      name: this.name,
      image: this.source.toJSON(meta).uuid,
      mapping: this.mapping,
      channel: this.channel,
      repeat: [this.repeat.x, this.repeat.y],
      offset: [this.offset.x, this.offset.y],
      center: [this.center.x, this.center.y],
      rotation: this.rotation,
      wrap: [this.wrapS, this.wrapT],
      format: this.format,
      internalFormat: this.internalFormat,
      type: this.type,
      colorSpace: this.colorSpace,
      minFilter: this.minFilter,
      magFilter: this.magFilter,
      anisotropy: this.anisotropy,
      flipY: this.flipY,
      generateMipmaps: this.generateMipmaps,
      premultiplyAlpha: this.premultiplyAlpha,
      unpackAlignment: this.unpackAlignment
    };
    if (Object.keys(this.userData).length > 0) output.userData = this.userData;
    if (!isRootObject) {
      meta.textures[this.uuid] = output;
    }
    return output;
  }
  dispose() {
    this.dispatchEvent({ type: "dispose" });
  }
  transformUv(uv) {
    if (this.mapping !== UVMapping) return uv;
    uv.applyMatrix3(this.matrix);
    if (uv.x < 0 || uv.x > 1) {
      switch (this.wrapS) {
        case RepeatWrapping:
          uv.x = uv.x - Math.floor(uv.x);
          break;
        case ClampToEdgeWrapping:
          uv.x = uv.x < 0 ? 0 : 1;
          break;
        case MirroredRepeatWrapping:
          if (Math.abs(Math.floor(uv.x) % 2) === 1) {
            uv.x = Math.ceil(uv.x) - uv.x;
          } else {
            uv.x = uv.x - Math.floor(uv.x);
          }
          break;
      }
    }
    if (uv.y < 0 || uv.y > 1) {
      switch (this.wrapT) {
        case RepeatWrapping:
          uv.y = uv.y - Math.floor(uv.y);
          break;
        case ClampToEdgeWrapping:
          uv.y = uv.y < 0 ? 0 : 1;
          break;
        case MirroredRepeatWrapping:
          if (Math.abs(Math.floor(uv.y) % 2) === 1) {
            uv.y = Math.ceil(uv.y) - uv.y;
          } else {
            uv.y = uv.y - Math.floor(uv.y);
          }
          break;
      }
    }
    if (this.flipY) {
      uv.y = 1 - uv.y;
    }
    return uv;
  }
  set needsUpdate(value) {
    if (value === true) {
      this.version++;
      this.source.needsUpdate = true;
    }
  }
  set needsPMREMUpdate(value) {
    if (value === true) {
      this.pmremVersion++;
    }
  }
}
Texture.DEFAULT_IMAGE = null;
Texture.DEFAULT_MAPPING = UVMapping;
Texture.DEFAULT_ANISOTROPY = 1;
class Vector4 {
  constructor(x = 0, y = 0, z2 = 0, w = 1) {
    Vector4.prototype.isVector4 = true;
    this.x = x;
    this.y = y;
    this.z = z2;
    this.w = w;
  }
  get width() {
    return this.z;
  }
  set width(value) {
    this.z = value;
  }
  get height() {
    return this.w;
  }
  set height(value) {
    this.w = value;
  }
  set(x, y, z2, w) {
    this.x = x;
    this.y = y;
    this.z = z2;
    this.w = w;
    return this;
  }
  setScalar(scalar) {
    this.x = scalar;
    this.y = scalar;
    this.z = scalar;
    this.w = scalar;
    return this;
  }
  setX(x) {
    this.x = x;
    return this;
  }
  setY(y) {
    this.y = y;
    return this;
  }
  setZ(z2) {
    this.z = z2;
    return this;
  }
  setW(w) {
    this.w = w;
    return this;
  }
  setComponent(index, value) {
    switch (index) {
      case 0:
        this.x = value;
        break;
      case 1:
        this.y = value;
        break;
      case 2:
        this.z = value;
        break;
      case 3:
        this.w = value;
        break;
      default:
        throw new Error("index is out of range: " + index);
    }
    return this;
  }
  getComponent(index) {
    switch (index) {
      case 0:
        return this.x;
      case 1:
        return this.y;
      case 2:
        return this.z;
      case 3:
        return this.w;
      default:
        throw new Error("index is out of range: " + index);
    }
  }
  clone() {
    return new this.constructor(this.x, this.y, this.z, this.w);
  }
  copy(v) {
    this.x = v.x;
    this.y = v.y;
    this.z = v.z;
    this.w = v.w !== void 0 ? v.w : 1;
    return this;
  }
  add(v) {
    this.x += v.x;
    this.y += v.y;
    this.z += v.z;
    this.w += v.w;
    return this;
  }
  addScalar(s) {
    this.x += s;
    this.y += s;
    this.z += s;
    this.w += s;
    return this;
  }
  addVectors(a, b) {
    this.x = a.x + b.x;
    this.y = a.y + b.y;
    this.z = a.z + b.z;
    this.w = a.w + b.w;
    return this;
  }
  addScaledVector(v, s) {
    this.x += v.x * s;
    this.y += v.y * s;
    this.z += v.z * s;
    this.w += v.w * s;
    return this;
  }
  sub(v) {
    this.x -= v.x;
    this.y -= v.y;
    this.z -= v.z;
    this.w -= v.w;
    return this;
  }
  subScalar(s) {
    this.x -= s;
    this.y -= s;
    this.z -= s;
    this.w -= s;
    return this;
  }
  subVectors(a, b) {
    this.x = a.x - b.x;
    this.y = a.y - b.y;
    this.z = a.z - b.z;
    this.w = a.w - b.w;
    return this;
  }
  multiply(v) {
    this.x *= v.x;
    this.y *= v.y;
    this.z *= v.z;
    this.w *= v.w;
    return this;
  }
  multiplyScalar(scalar) {
    this.x *= scalar;
    this.y *= scalar;
    this.z *= scalar;
    this.w *= scalar;
    return this;
  }
  applyMatrix4(m) {
    const x = this.x, y = this.y, z2 = this.z, w = this.w;
    const e = m.elements;
    this.x = e[0] * x + e[4] * y + e[8] * z2 + e[12] * w;
    this.y = e[1] * x + e[5] * y + e[9] * z2 + e[13] * w;
    this.z = e[2] * x + e[6] * y + e[10] * z2 + e[14] * w;
    this.w = e[3] * x + e[7] * y + e[11] * z2 + e[15] * w;
    return this;
  }
  divideScalar(scalar) {
    return this.multiplyScalar(1 / scalar);
  }
  setAxisAngleFromQuaternion(q2) {
    this.w = 2 * Math.acos(q2.w);
    const s = Math.sqrt(1 - q2.w * q2.w);
    if (s < 1e-4) {
      this.x = 1;
      this.y = 0;
      this.z = 0;
    } else {
      this.x = q2.x / s;
      this.y = q2.y / s;
      this.z = q2.z / s;
    }
    return this;
  }
  setAxisAngleFromRotationMatrix(m) {
    let angle, x, y, z2;
    const epsilon = 0.01, epsilon2 = 0.1, te = m.elements, m11 = te[0], m12 = te[4], m13 = te[8], m21 = te[1], m22 = te[5], m23 = te[9], m31 = te[2], m32 = te[6], m33 = te[10];
    if (Math.abs(m12 - m21) < epsilon && Math.abs(m13 - m31) < epsilon && Math.abs(m23 - m32) < epsilon) {
      if (Math.abs(m12 + m21) < epsilon2 && Math.abs(m13 + m31) < epsilon2 && Math.abs(m23 + m32) < epsilon2 && Math.abs(m11 + m22 + m33 - 3) < epsilon2) {
        this.set(1, 0, 0, 0);
        return this;
      }
      angle = Math.PI;
      const xx = (m11 + 1) / 2;
      const yy = (m22 + 1) / 2;
      const zz = (m33 + 1) / 2;
      const xy = (m12 + m21) / 4;
      const xz = (m13 + m31) / 4;
      const yz = (m23 + m32) / 4;
      if (xx > yy && xx > zz) {
        if (xx < epsilon) {
          x = 0;
          y = 0.707106781;
          z2 = 0.707106781;
        } else {
          x = Math.sqrt(xx);
          y = xy / x;
          z2 = xz / x;
        }
      } else if (yy > zz) {
        if (yy < epsilon) {
          x = 0.707106781;
          y = 0;
          z2 = 0.707106781;
        } else {
          y = Math.sqrt(yy);
          x = xy / y;
          z2 = yz / y;
        }
      } else {
        if (zz < epsilon) {
          x = 0.707106781;
          y = 0.707106781;
          z2 = 0;
        } else {
          z2 = Math.sqrt(zz);
          x = xz / z2;
          y = yz / z2;
        }
      }
      this.set(x, y, z2, angle);
      return this;
    }
    let s = Math.sqrt((m32 - m23) * (m32 - m23) + (m13 - m31) * (m13 - m31) + (m21 - m12) * (m21 - m12));
    if (Math.abs(s) < 1e-3) s = 1;
    this.x = (m32 - m23) / s;
    this.y = (m13 - m31) / s;
    this.z = (m21 - m12) / s;
    this.w = Math.acos((m11 + m22 + m33 - 1) / 2);
    return this;
  }
  setFromMatrixPosition(m) {
    const e = m.elements;
    this.x = e[12];
    this.y = e[13];
    this.z = e[14];
    this.w = e[15];
    return this;
  }
  min(v) {
    this.x = Math.min(this.x, v.x);
    this.y = Math.min(this.y, v.y);
    this.z = Math.min(this.z, v.z);
    this.w = Math.min(this.w, v.w);
    return this;
  }
  max(v) {
    this.x = Math.max(this.x, v.x);
    this.y = Math.max(this.y, v.y);
    this.z = Math.max(this.z, v.z);
    this.w = Math.max(this.w, v.w);
    return this;
  }
  clamp(min, max) {
    this.x = Math.max(min.x, Math.min(max.x, this.x));
    this.y = Math.max(min.y, Math.min(max.y, this.y));
    this.z = Math.max(min.z, Math.min(max.z, this.z));
    this.w = Math.max(min.w, Math.min(max.w, this.w));
    return this;
  }
  clampScalar(minVal, maxVal) {
    this.x = Math.max(minVal, Math.min(maxVal, this.x));
    this.y = Math.max(minVal, Math.min(maxVal, this.y));
    this.z = Math.max(minVal, Math.min(maxVal, this.z));
    this.w = Math.max(minVal, Math.min(maxVal, this.w));
    return this;
  }
  clampLength(min, max) {
    const length = this.length();
    return this.divideScalar(length || 1).multiplyScalar(Math.max(min, Math.min(max, length)));
  }
  floor() {
    this.x = Math.floor(this.x);
    this.y = Math.floor(this.y);
    this.z = Math.floor(this.z);
    this.w = Math.floor(this.w);
    return this;
  }
  ceil() {
    this.x = Math.ceil(this.x);
    this.y = Math.ceil(this.y);
    this.z = Math.ceil(this.z);
    this.w = Math.ceil(this.w);
    return this;
  }
  round() {
    this.x = Math.round(this.x);
    this.y = Math.round(this.y);
    this.z = Math.round(this.z);
    this.w = Math.round(this.w);
    return this;
  }
  roundToZero() {
    this.x = Math.trunc(this.x);
    this.y = Math.trunc(this.y);
    this.z = Math.trunc(this.z);
    this.w = Math.trunc(this.w);
    return this;
  }
  negate() {
    this.x = -this.x;
    this.y = -this.y;
    this.z = -this.z;
    this.w = -this.w;
    return this;
  }
  dot(v) {
    return this.x * v.x + this.y * v.y + this.z * v.z + this.w * v.w;
  }
  lengthSq() {
    return this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;
  }
  length() {
    return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);
  }
  manhattanLength() {
    return Math.abs(this.x) + Math.abs(this.y) + Math.abs(this.z) + Math.abs(this.w);
  }
  normalize() {
    return this.divideScalar(this.length() || 1);
  }
  setLength(length) {
    return this.normalize().multiplyScalar(length);
  }
  lerp(v, alpha) {
    this.x += (v.x - this.x) * alpha;
    this.y += (v.y - this.y) * alpha;
    this.z += (v.z - this.z) * alpha;
    this.w += (v.w - this.w) * alpha;
    return this;
  }
  lerpVectors(v1, v2, alpha) {
    this.x = v1.x + (v2.x - v1.x) * alpha;
    this.y = v1.y + (v2.y - v1.y) * alpha;
    this.z = v1.z + (v2.z - v1.z) * alpha;
    this.w = v1.w + (v2.w - v1.w) * alpha;
    return this;
  }
  equals(v) {
    return v.x === this.x && v.y === this.y && v.z === this.z && v.w === this.w;
  }
  fromArray(array, offset = 0) {
    this.x = array[offset];
    this.y = array[offset + 1];
    this.z = array[offset + 2];
    this.w = array[offset + 3];
    return this;
  }
  toArray(array = [], offset = 0) {
    array[offset] = this.x;
    array[offset + 1] = this.y;
    array[offset + 2] = this.z;
    array[offset + 3] = this.w;
    return array;
  }
  fromBufferAttribute(attribute, index) {
    this.x = attribute.getX(index);
    this.y = attribute.getY(index);
    this.z = attribute.getZ(index);
    this.w = attribute.getW(index);
    return this;
  }
  random() {
    this.x = Math.random();
    this.y = Math.random();
    this.z = Math.random();
    this.w = Math.random();
    return this;
  }
  *[Symbol.iterator]() {
    yield this.x;
    yield this.y;
    yield this.z;
    yield this.w;
  }
}
class RenderTarget extends EventDispatcher {
  constructor(width = 1, height = 1, options = {}) {
    super();
    this.isRenderTarget = true;
    this.width = width;
    this.height = height;
    this.depth = 1;
    this.scissor = new Vector4(0, 0, width, height);
    this.scissorTest = false;
    this.viewport = new Vector4(0, 0, width, height);
    const image = { width, height, depth: 1 };
    options = Object.assign({
      generateMipmaps: false,
      internalFormat: null,
      minFilter: LinearFilter,
      depthBuffer: true,
      stencilBuffer: false,
      resolveDepthBuffer: true,
      resolveStencilBuffer: true,
      depthTexture: null,
      samples: 0,
      count: 1
    }, options);
    const texture = new Texture(image, options.mapping, options.wrapS, options.wrapT, options.magFilter, options.minFilter, options.format, options.type, options.anisotropy, options.colorSpace);
    texture.flipY = false;
    texture.generateMipmaps = options.generateMipmaps;
    texture.internalFormat = options.internalFormat;
    this.textures = [];
    const count = options.count;
    for (let i = 0; i < count; i++) {
      this.textures[i] = texture.clone();
      this.textures[i].isRenderTargetTexture = true;
    }
    this.depthBuffer = options.depthBuffer;
    this.stencilBuffer = options.stencilBuffer;
    this.resolveDepthBuffer = options.resolveDepthBuffer;
    this.resolveStencilBuffer = options.resolveStencilBuffer;
    this.depthTexture = options.depthTexture;
    this.samples = options.samples;
  }
  get texture() {
    return this.textures[0];
  }
  set texture(value) {
    this.textures[0] = value;
  }
  setSize(width, height, depth = 1) {
    if (this.width !== width || this.height !== height || this.depth !== depth) {
      this.width = width;
      this.height = height;
      this.depth = depth;
      for (let i = 0, il2 = this.textures.length; i < il2; i++) {
        this.textures[i].image.width = width;
        this.textures[i].image.height = height;
        this.textures[i].image.depth = depth;
      }
      this.dispose();
    }
    this.viewport.set(0, 0, width, height);
    this.scissor.set(0, 0, width, height);
  }
  clone() {
    return new this.constructor().copy(this);
  }
  copy(source) {
    this.width = source.width;
    this.height = source.height;
    this.depth = source.depth;
    this.scissor.copy(source.scissor);
    this.scissorTest = source.scissorTest;
    this.viewport.copy(source.viewport);
    this.textures.length = 0;
    for (let i = 0, il2 = source.textures.length; i < il2; i++) {
      this.textures[i] = source.textures[i].clone();
      this.textures[i].isRenderTargetTexture = true;
    }
    const image = Object.assign({}, source.texture.image);
    this.texture.source = new Source(image);
    this.depthBuffer = source.depthBuffer;
    this.stencilBuffer = source.stencilBuffer;
    this.resolveDepthBuffer = source.resolveDepthBuffer;
    this.resolveStencilBuffer = source.resolveStencilBuffer;
    if (source.depthTexture !== null) this.depthTexture = source.depthTexture.clone();
    this.samples = source.samples;
    return this;
  }
  dispose() {
    this.dispatchEvent({ type: "dispose" });
  }
}
class WebGLRenderTarget extends RenderTarget {
  constructor(width = 1, height = 1, options = {}) {
    super(width, height, options);
    this.isWebGLRenderTarget = true;
  }
}
class DataArrayTexture extends Texture {
  constructor(data = null, width = 1, height = 1, depth = 1) {
    super(null);
    this.isDataArrayTexture = true;
    this.image = { data, width, height, depth };
    this.magFilter = NearestFilter;
    this.minFilter = NearestFilter;
    this.wrapR = ClampToEdgeWrapping;
    this.generateMipmaps = false;
    this.flipY = false;
    this.unpackAlignment = 1;
    this.layerUpdates = /* @__PURE__ */ new Set();
  }
  addLayerUpdate(layerIndex) {
    this.layerUpdates.add(layerIndex);
  }
  clearLayerUpdates() {
    this.layerUpdates.clear();
  }
}
class Data3DTexture extends Texture {
  constructor(data = null, width = 1, height = 1, depth = 1) {
    super(null);
    this.isData3DTexture = true;
    this.image = { data, width, height, depth };
    this.magFilter = NearestFilter;
    this.minFilter = NearestFilter;
    this.wrapR = ClampToEdgeWrapping;
    this.generateMipmaps = false;
    this.flipY = false;
    this.unpackAlignment = 1;
  }
}
class Quaternion {
  constructor(x = 0, y = 0, z2 = 0, w = 1) {
    this.isQuaternion = true;
    this._x = x;
    this._y = y;
    this._z = z2;
    this._w = w;
  }
  static slerpFlat(dst, dstOffset, src0, srcOffset0, src1, srcOffset1, t) {
    let x0 = src0[srcOffset0 + 0], y0 = src0[srcOffset0 + 1], z0 = src0[srcOffset0 + 2], w0 = src0[srcOffset0 + 3];
    const x1 = src1[srcOffset1 + 0], y1 = src1[srcOffset1 + 1], z1 = src1[srcOffset1 + 2], w1 = src1[srcOffset1 + 3];
    if (t === 0) {
      dst[dstOffset + 0] = x0;
      dst[dstOffset + 1] = y0;
      dst[dstOffset + 2] = z0;
      dst[dstOffset + 3] = w0;
      return;
    }
    if (t === 1) {
      dst[dstOffset + 0] = x1;
      dst[dstOffset + 1] = y1;
      dst[dstOffset + 2] = z1;
      dst[dstOffset + 3] = w1;
      return;
    }
    if (w0 !== w1 || x0 !== x1 || y0 !== y1 || z0 !== z1) {
      let s = 1 - t;
      const cos = x0 * x1 + y0 * y1 + z0 * z1 + w0 * w1, dir = cos >= 0 ? 1 : -1, sqrSin = 1 - cos * cos;
      if (sqrSin > Number.EPSILON) {
        const sin = Math.sqrt(sqrSin), len = Math.atan2(sin, cos * dir);
        s = Math.sin(s * len) / sin;
        t = Math.sin(t * len) / sin;
      }
      const tDir = t * dir;
      x0 = x0 * s + x1 * tDir;
      y0 = y0 * s + y1 * tDir;
      z0 = z0 * s + z1 * tDir;
      w0 = w0 * s + w1 * tDir;
      if (s === 1 - t) {
        const f = 1 / Math.sqrt(x0 * x0 + y0 * y0 + z0 * z0 + w0 * w0);
        x0 *= f;
        y0 *= f;
        z0 *= f;
        w0 *= f;
      }
    }
    dst[dstOffset] = x0;
    dst[dstOffset + 1] = y0;
    dst[dstOffset + 2] = z0;
    dst[dstOffset + 3] = w0;
  }
  static multiplyQuaternionsFlat(dst, dstOffset, src0, srcOffset0, src1, srcOffset1) {
    const x0 = src0[srcOffset0];
    const y0 = src0[srcOffset0 + 1];
    const z0 = src0[srcOffset0 + 2];
    const w0 = src0[srcOffset0 + 3];
    const x1 = src1[srcOffset1];
    const y1 = src1[srcOffset1 + 1];
    const z1 = src1[srcOffset1 + 2];
    const w1 = src1[srcOffset1 + 3];
    dst[dstOffset] = x0 * w1 + w0 * x1 + y0 * z1 - z0 * y1;
    dst[dstOffset + 1] = y0 * w1 + w0 * y1 + z0 * x1 - x0 * z1;
    dst[dstOffset + 2] = z0 * w1 + w0 * z1 + x0 * y1 - y0 * x1;
    dst[dstOffset + 3] = w0 * w1 - x0 * x1 - y0 * y1 - z0 * z1;
    return dst;
  }
  get x() {
    return this._x;
  }
  set x(value) {
    this._x = value;
    this._onChangeCallback();
  }
  get y() {
    return this._y;
  }
  set y(value) {
    this._y = value;
    this._onChangeCallback();
  }
  get z() {
    return this._z;
  }
  set z(value) {
    this._z = value;
    this._onChangeCallback();
  }
  get w() {
    return this._w;
  }
  set w(value) {
    this._w = value;
    this._onChangeCallback();
  }
  set(x, y, z2, w) {
    this._x = x;
    this._y = y;
    this._z = z2;
    this._w = w;
    this._onChangeCallback();
    return this;
  }
  clone() {
    return new this.constructor(this._x, this._y, this._z, this._w);
  }
  copy(quaternion) {
    this._x = quaternion.x;
    this._y = quaternion.y;
    this._z = quaternion.z;
    this._w = quaternion.w;
    this._onChangeCallback();
    return this;
  }
  setFromEuler(euler, update = true) {
    const x = euler._x, y = euler._y, z2 = euler._z, order = euler._order;
    const cos = Math.cos;
    const sin = Math.sin;
    const c1 = cos(x / 2);
    const c2 = cos(y / 2);
    const c3 = cos(z2 / 2);
    const s1 = sin(x / 2);
    const s2 = sin(y / 2);
    const s3 = sin(z2 / 2);
    switch (order) {
      case "XYZ":
        this._x = s1 * c2 * c3 + c1 * s2 * s3;
        this._y = c1 * s2 * c3 - s1 * c2 * s3;
        this._z = c1 * c2 * s3 + s1 * s2 * c3;
        this._w = c1 * c2 * c3 - s1 * s2 * s3;
        break;
      case "YXZ":
        this._x = s1 * c2 * c3 + c1 * s2 * s3;
        this._y = c1 * s2 * c3 - s1 * c2 * s3;
        this._z = c1 * c2 * s3 - s1 * s2 * c3;
        this._w = c1 * c2 * c3 + s1 * s2 * s3;
        break;
      case "ZXY":
        this._x = s1 * c2 * c3 - c1 * s2 * s3;
        this._y = c1 * s2 * c3 + s1 * c2 * s3;
        this._z = c1 * c2 * s3 + s1 * s2 * c3;
        this._w = c1 * c2 * c3 - s1 * s2 * s3;
        break;
      case "ZYX":
        this._x = s1 * c2 * c3 - c1 * s2 * s3;
        this._y = c1 * s2 * c3 + s1 * c2 * s3;
        this._z = c1 * c2 * s3 - s1 * s2 * c3;
        this._w = c1 * c2 * c3 + s1 * s2 * s3;
        break;
      case "YZX":
        this._x = s1 * c2 * c3 + c1 * s2 * s3;
        this._y = c1 * s2 * c3 + s1 * c2 * s3;
        this._z = c1 * c2 * s3 - s1 * s2 * c3;
        this._w = c1 * c2 * c3 - s1 * s2 * s3;
        break;
      case "XZY":
        this._x = s1 * c2 * c3 - c1 * s2 * s3;
        this._y = c1 * s2 * c3 - s1 * c2 * s3;
        this._z = c1 * c2 * s3 + s1 * s2 * c3;
        this._w = c1 * c2 * c3 + s1 * s2 * s3;
        break;
      default:
        console.warn("THREE.Quaternion: .setFromEuler() encountered an unknown order: " + order);
    }
    if (update === true) this._onChangeCallback();
    return this;
  }
  setFromAxisAngle(axis, angle) {
    const halfAngle = angle / 2, s = Math.sin(halfAngle);
    this._x = axis.x * s;
    this._y = axis.y * s;
    this._z = axis.z * s;
    this._w = Math.cos(halfAngle);
    this._onChangeCallback();
    return this;
  }
  setFromRotationMatrix(m) {
    const te = m.elements, m11 = te[0], m12 = te[4], m13 = te[8], m21 = te[1], m22 = te[5], m23 = te[9], m31 = te[2], m32 = te[6], m33 = te[10], trace = m11 + m22 + m33;
    if (trace > 0) {
      const s = 0.5 / Math.sqrt(trace + 1);
      this._w = 0.25 / s;
      this._x = (m32 - m23) * s;
      this._y = (m13 - m31) * s;
      this._z = (m21 - m12) * s;
    } else if (m11 > m22 && m11 > m33) {
      const s = 2 * Math.sqrt(1 + m11 - m22 - m33);
      this._w = (m32 - m23) / s;
      this._x = 0.25 * s;
      this._y = (m12 + m21) / s;
      this._z = (m13 + m31) / s;
    } else if (m22 > m33) {
      const s = 2 * Math.sqrt(1 + m22 - m11 - m33);
      this._w = (m13 - m31) / s;
      this._x = (m12 + m21) / s;
      this._y = 0.25 * s;
      this._z = (m23 + m32) / s;
    } else {
      const s = 2 * Math.sqrt(1 + m33 - m11 - m22);
      this._w = (m21 - m12) / s;
      this._x = (m13 + m31) / s;
      this._y = (m23 + m32) / s;
      this._z = 0.25 * s;
    }
    this._onChangeCallback();
    return this;
  }
  setFromUnitVectors(vFrom, vTo) {
    let r = vFrom.dot(vTo) + 1;
    if (r < Number.EPSILON) {
      r = 0;
      if (Math.abs(vFrom.x) > Math.abs(vFrom.z)) {
        this._x = -vFrom.y;
        this._y = vFrom.x;
        this._z = 0;
        this._w = r;
      } else {
        this._x = 0;
        this._y = -vFrom.z;
        this._z = vFrom.y;
        this._w = r;
      }
    } else {
      this._x = vFrom.y * vTo.z - vFrom.z * vTo.y;
      this._y = vFrom.z * vTo.x - vFrom.x * vTo.z;
      this._z = vFrom.x * vTo.y - vFrom.y * vTo.x;
      this._w = r;
    }
    return this.normalize();
  }
  angleTo(q2) {
    return 2 * Math.acos(Math.abs(clamp(this.dot(q2), -1, 1)));
  }
  rotateTowards(q2, step) {
    const angle = this.angleTo(q2);
    if (angle === 0) return this;
    const t = Math.min(1, step / angle);
    this.slerp(q2, t);
    return this;
  }
  identity() {
    return this.set(0, 0, 0, 1);
  }
  invert() {
    return this.conjugate();
  }
  conjugate() {
    this._x *= -1;
    this._y *= -1;
    this._z *= -1;
    this._onChangeCallback();
    return this;
  }
  dot(v) {
    return this._x * v._x + this._y * v._y + this._z * v._z + this._w * v._w;
  }
  lengthSq() {
    return this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w;
  }
  length() {
    return Math.sqrt(this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w);
  }
  normalize() {
    let l = this.length();
    if (l === 0) {
      this._x = 0;
      this._y = 0;
      this._z = 0;
      this._w = 1;
    } else {
      l = 1 / l;
      this._x = this._x * l;
      this._y = this._y * l;
      this._z = this._z * l;
      this._w = this._w * l;
    }
    this._onChangeCallback();
    return this;
  }
  multiply(q2) {
    return this.multiplyQuaternions(this, q2);
  }
  premultiply(q2) {
    return this.multiplyQuaternions(q2, this);
  }
  multiplyQuaternions(a, b) {
    const qax = a._x, qay = a._y, qaz = a._z, qaw = a._w;
    const qbx = b._x, qby = b._y, qbz = b._z, qbw = b._w;
    this._x = qax * qbw + qaw * qbx + qay * qbz - qaz * qby;
    this._y = qay * qbw + qaw * qby + qaz * qbx - qax * qbz;
    this._z = qaz * qbw + qaw * qbz + qax * qby - qay * qbx;
    this._w = qaw * qbw - qax * qbx - qay * qby - qaz * qbz;
    this._onChangeCallback();
    return this;
  }
  slerp(qb2, t) {
    if (t === 0) return this;
    if (t === 1) return this.copy(qb2);
    const x = this._x, y = this._y, z2 = this._z, w = this._w;
    let cosHalfTheta = w * qb2._w + x * qb2._x + y * qb2._y + z2 * qb2._z;
    if (cosHalfTheta < 0) {
      this._w = -qb2._w;
      this._x = -qb2._x;
      this._y = -qb2._y;
      this._z = -qb2._z;
      cosHalfTheta = -cosHalfTheta;
    } else {
      this.copy(qb2);
    }
    if (cosHalfTheta >= 1) {
      this._w = w;
      this._x = x;
      this._y = y;
      this._z = z2;
      return this;
    }
    const sqrSinHalfTheta = 1 - cosHalfTheta * cosHalfTheta;
    if (sqrSinHalfTheta <= Number.EPSILON) {
      const s = 1 - t;
      this._w = s * w + t * this._w;
      this._x = s * x + t * this._x;
      this._y = s * y + t * this._y;
      this._z = s * z2 + t * this._z;
      this.normalize();
      return this;
    }
    const sinHalfTheta = Math.sqrt(sqrSinHalfTheta);
    const halfTheta = Math.atan2(sinHalfTheta, cosHalfTheta);
    const ratioA = Math.sin((1 - t) * halfTheta) / sinHalfTheta, ratioB = Math.sin(t * halfTheta) / sinHalfTheta;
    this._w = w * ratioA + this._w * ratioB;
    this._x = x * ratioA + this._x * ratioB;
    this._y = y * ratioA + this._y * ratioB;
    this._z = z2 * ratioA + this._z * ratioB;
    this._onChangeCallback();
    return this;
  }
  slerpQuaternions(qa, qb2, t) {
    return this.copy(qa).slerp(qb2, t);
  }
  random() {
    const theta1 = 2 * Math.PI * Math.random();
    const theta2 = 2 * Math.PI * Math.random();
    const x0 = Math.random();
    const r1 = Math.sqrt(1 - x0);
    const r2 = Math.sqrt(x0);
    return this.set(
      r1 * Math.sin(theta1),
      r1 * Math.cos(theta1),
      r2 * Math.sin(theta2),
      r2 * Math.cos(theta2)
    );
  }
  equals(quaternion) {
    return quaternion._x === this._x && quaternion._y === this._y && quaternion._z === this._z && quaternion._w === this._w;
  }
  fromArray(array, offset = 0) {
    this._x = array[offset];
    this._y = array[offset + 1];
    this._z = array[offset + 2];
    this._w = array[offset + 3];
    this._onChangeCallback();
    return this;
  }
  toArray(array = [], offset = 0) {
    array[offset] = this._x;
    array[offset + 1] = this._y;
    array[offset + 2] = this._z;
    array[offset + 3] = this._w;
    return array;
  }
  fromBufferAttribute(attribute, index) {
    this._x = attribute.getX(index);
    this._y = attribute.getY(index);
    this._z = attribute.getZ(index);
    this._w = attribute.getW(index);
    this._onChangeCallback();
    return this;
  }
  toJSON() {
    return this.toArray();
  }
  _onChange(callback) {
    this._onChangeCallback = callback;
    return this;
  }
  _onChangeCallback() {
  }
  *[Symbol.iterator]() {
    yield this._x;
    yield this._y;
    yield this._z;
    yield this._w;
  }
}
class Vector3 {
  constructor(x = 0, y = 0, z2 = 0) {
    Vector3.prototype.isVector3 = true;
    this.x = x;
    this.y = y;
    this.z = z2;
  }
  set(x, y, z2) {
    if (z2 === void 0) z2 = this.z;
    this.x = x;
    this.y = y;
    this.z = z2;
    return this;
  }
  setScalar(scalar) {
    this.x = scalar;
    this.y = scalar;
    this.z = scalar;
    return this;
  }
  setX(x) {
    this.x = x;
    return this;
  }
  setY(y) {
    this.y = y;
    return this;
  }
  setZ(z2) {
    this.z = z2;
    return this;
  }
  setComponent(index, value) {
    switch (index) {
      case 0:
        this.x = value;
        break;
      case 1:
        this.y = value;
        break;
      case 2:
        this.z = value;
        break;
      default:
        throw new Error("index is out of range: " + index);
    }
    return this;
  }
  getComponent(index) {
    switch (index) {
      case 0:
        return this.x;
      case 1:
        return this.y;
      case 2:
        return this.z;
      default:
        throw new Error("index is out of range: " + index);
    }
  }
  clone() {
    return new this.constructor(this.x, this.y, this.z);
  }
  copy(v) {
    this.x = v.x;
    this.y = v.y;
    this.z = v.z;
    return this;
  }
  add(v) {
    this.x += v.x;
    this.y += v.y;
    this.z += v.z;
    return this;
  }
  addScalar(s) {
    this.x += s;
    this.y += s;
    this.z += s;
    return this;
  }
  addVectors(a, b) {
    this.x = a.x + b.x;
    this.y = a.y + b.y;
    this.z = a.z + b.z;
    return this;
  }
  addScaledVector(v, s) {
    this.x += v.x * s;
    this.y += v.y * s;
    this.z += v.z * s;
    return this;
  }
  sub(v) {
    this.x -= v.x;
    this.y -= v.y;
    this.z -= v.z;
    return this;
  }
  subScalar(s) {
    this.x -= s;
    this.y -= s;
    this.z -= s;
    return this;
  }
  subVectors(a, b) {
    this.x = a.x - b.x;
    this.y = a.y - b.y;
    this.z = a.z - b.z;
    return this;
  }
  multiply(v) {
    this.x *= v.x;
    this.y *= v.y;
    this.z *= v.z;
    return this;
  }
  multiplyScalar(scalar) {
    this.x *= scalar;
    this.y *= scalar;
    this.z *= scalar;
    return this;
  }
  multiplyVectors(a, b) {
    this.x = a.x * b.x;
    this.y = a.y * b.y;
    this.z = a.z * b.z;
    return this;
  }
  applyEuler(euler) {
    return this.applyQuaternion(_quaternion$4.setFromEuler(euler));
  }
  applyAxisAngle(axis, angle) {
    return this.applyQuaternion(_quaternion$4.setFromAxisAngle(axis, angle));
  }
  applyMatrix3(m) {
    const x = this.x, y = this.y, z2 = this.z;
    const e = m.elements;
    this.x = e[0] * x + e[3] * y + e[6] * z2;
    this.y = e[1] * x + e[4] * y + e[7] * z2;
    this.z = e[2] * x + e[5] * y + e[8] * z2;
    return this;
  }
  applyNormalMatrix(m) {
    return this.applyMatrix3(m).normalize();
  }
  applyMatrix4(m) {
    const x = this.x, y = this.y, z2 = this.z;
    const e = m.elements;
    const w = 1 / (e[3] * x + e[7] * y + e[11] * z2 + e[15]);
    this.x = (e[0] * x + e[4] * y + e[8] * z2 + e[12]) * w;
    this.y = (e[1] * x + e[5] * y + e[9] * z2 + e[13]) * w;
    this.z = (e[2] * x + e[6] * y + e[10] * z2 + e[14]) * w;
    return this;
  }
  applyQuaternion(q2) {
    const vx = this.x, vy = this.y, vz = this.z;
    const qx = q2.x, qy = q2.y, qz = q2.z, qw = q2.w;
    const tx = 2 * (qy * vz - qz * vy);
    const ty = 2 * (qz * vx - qx * vz);
    const tz = 2 * (qx * vy - qy * vx);
    this.x = vx + qw * tx + qy * tz - qz * ty;
    this.y = vy + qw * ty + qz * tx - qx * tz;
    this.z = vz + qw * tz + qx * ty - qy * tx;
    return this;
  }
  project(camera) {
    return this.applyMatrix4(camera.matrixWorldInverse).applyMatrix4(camera.projectionMatrix);
  }
  unproject(camera) {
    return this.applyMatrix4(camera.projectionMatrixInverse).applyMatrix4(camera.matrixWorld);
  }
  transformDirection(m) {
    const x = this.x, y = this.y, z2 = this.z;
    const e = m.elements;
    this.x = e[0] * x + e[4] * y + e[8] * z2;
    this.y = e[1] * x + e[5] * y + e[9] * z2;
    this.z = e[2] * x + e[6] * y + e[10] * z2;
    return this.normalize();
  }
  divide(v) {
    this.x /= v.x;
    this.y /= v.y;
    this.z /= v.z;
    return this;
  }
  divideScalar(scalar) {
    return this.multiplyScalar(1 / scalar);
  }
  min(v) {
    this.x = Math.min(this.x, v.x);
    this.y = Math.min(this.y, v.y);
    this.z = Math.min(this.z, v.z);
    return this;
  }
  max(v) {
    this.x = Math.max(this.x, v.x);
    this.y = Math.max(this.y, v.y);
    this.z = Math.max(this.z, v.z);
    return this;
  }
  clamp(min, max) {
    this.x = Math.max(min.x, Math.min(max.x, this.x));
    this.y = Math.max(min.y, Math.min(max.y, this.y));
    this.z = Math.max(min.z, Math.min(max.z, this.z));
    return this;
  }
  clampScalar(minVal, maxVal) {
    this.x = Math.max(minVal, Math.min(maxVal, this.x));
    this.y = Math.max(minVal, Math.min(maxVal, this.y));
    this.z = Math.max(minVal, Math.min(maxVal, this.z));
    return this;
  }
  clampLength(min, max) {
    const length = this.length();
    return this.divideScalar(length || 1).multiplyScalar(Math.max(min, Math.min(max, length)));
  }
  floor() {
    this.x = Math.floor(this.x);
    this.y = Math.floor(this.y);
    this.z = Math.floor(this.z);
    return this;
  }
  ceil() {
    this.x = Math.ceil(this.x);
    this.y = Math.ceil(this.y);
    this.z = Math.ceil(this.z);
    return this;
  }
  round() {
    this.x = Math.round(this.x);
    this.y = Math.round(this.y);
    this.z = Math.round(this.z);
    return this;
  }
  roundToZero() {
    this.x = Math.trunc(this.x);
    this.y = Math.trunc(this.y);
    this.z = Math.trunc(this.z);
    return this;
  }
  negate() {
    this.x = -this.x;
    this.y = -this.y;
    this.z = -this.z;
    return this;
  }
  dot(v) {
    return this.x * v.x + this.y * v.y + this.z * v.z;
  }
  // TODO lengthSquared?
  lengthSq() {
    return this.x * this.x + this.y * this.y + this.z * this.z;
  }
  length() {
    return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
  }
  manhattanLength() {
    return Math.abs(this.x) + Math.abs(this.y) + Math.abs(this.z);
  }
  normalize() {
    return this.divideScalar(this.length() || 1);
  }
  setLength(length) {
    return this.normalize().multiplyScalar(length);
  }
  lerp(v, alpha) {
    this.x += (v.x - this.x) * alpha;
    this.y += (v.y - this.y) * alpha;
    this.z += (v.z - this.z) * alpha;
    return this;
  }
  lerpVectors(v1, v2, alpha) {
    this.x = v1.x + (v2.x - v1.x) * alpha;
    this.y = v1.y + (v2.y - v1.y) * alpha;
    this.z = v1.z + (v2.z - v1.z) * alpha;
    return this;
  }
  cross(v) {
    return this.crossVectors(this, v);
  }
  crossVectors(a, b) {
    const ax = a.x, ay = a.y, az = a.z;
    const bx = b.x, by = b.y, bz = b.z;
    this.x = ay * bz - az * by;
    this.y = az * bx - ax * bz;
    this.z = ax * by - ay * bx;
    return this;
  }
  projectOnVector(v) {
    const denominator = v.lengthSq();
    if (denominator === 0) return this.set(0, 0, 0);
    const scalar = v.dot(this) / denominator;
    return this.copy(v).multiplyScalar(scalar);
  }
  projectOnPlane(planeNormal) {
    _vector$c.copy(this).projectOnVector(planeNormal);
    return this.sub(_vector$c);
  }
  reflect(normal) {
    return this.sub(_vector$c.copy(normal).multiplyScalar(2 * this.dot(normal)));
  }
  angleTo(v) {
    const denominator = Math.sqrt(this.lengthSq() * v.lengthSq());
    if (denominator === 0) return Math.PI / 2;
    const theta = this.dot(v) / denominator;
    return Math.acos(clamp(theta, -1, 1));
  }
  distanceTo(v) {
    return Math.sqrt(this.distanceToSquared(v));
  }
  distanceToSquared(v) {
    const dx = this.x - v.x, dy = this.y - v.y, dz = this.z - v.z;
    return dx * dx + dy * dy + dz * dz;
  }
  manhattanDistanceTo(v) {
    return Math.abs(this.x - v.x) + Math.abs(this.y - v.y) + Math.abs(this.z - v.z);
  }
  setFromSpherical(s) {
    return this.setFromSphericalCoords(s.radius, s.phi, s.theta);
  }
  setFromSphericalCoords(radius, phi, theta) {
    const sinPhiRadius = Math.sin(phi) * radius;
    this.x = sinPhiRadius * Math.sin(theta);
    this.y = Math.cos(phi) * radius;
    this.z = sinPhiRadius * Math.cos(theta);
    return this;
  }
  setFromCylindrical(c) {
    return this.setFromCylindricalCoords(c.radius, c.theta, c.y);
  }
  setFromCylindricalCoords(radius, theta, y) {
    this.x = radius * Math.sin(theta);
    this.y = y;
    this.z = radius * Math.cos(theta);
    return this;
  }
  setFromMatrixPosition(m) {
    const e = m.elements;
    this.x = e[12];
    this.y = e[13];
    this.z = e[14];
    return this;
  }
  setFromMatrixScale(m) {
    const sx = this.setFromMatrixColumn(m, 0).length();
    const sy = this.setFromMatrixColumn(m, 1).length();
    const sz = this.setFromMatrixColumn(m, 2).length();
    this.x = sx;
    this.y = sy;
    this.z = sz;
    return this;
  }
  setFromMatrixColumn(m, index) {
    return this.fromArray(m.elements, index * 4);
  }
  setFromMatrix3Column(m, index) {
    return this.fromArray(m.elements, index * 3);
  }
  setFromEuler(e) {
    this.x = e._x;
    this.y = e._y;
    this.z = e._z;
    return this;
  }
  setFromColor(c) {
    this.x = c.r;
    this.y = c.g;
    this.z = c.b;
    return this;
  }
  equals(v) {
    return v.x === this.x && v.y === this.y && v.z === this.z;
  }
  fromArray(array, offset = 0) {
    this.x = array[offset];
    this.y = array[offset + 1];
    this.z = array[offset + 2];
    return this;
  }
  toArray(array = [], offset = 0) {
    array[offset] = this.x;
    array[offset + 1] = this.y;
    array[offset + 2] = this.z;
    return array;
  }
  fromBufferAttribute(attribute, index) {
    this.x = attribute.getX(index);
    this.y = attribute.getY(index);
    this.z = attribute.getZ(index);
    return this;
  }
  random() {
    this.x = Math.random();
    this.y = Math.random();
    this.z = Math.random();
    return this;
  }
  randomDirection() {
    const theta = Math.random() * Math.PI * 2;
    const u = Math.random() * 2 - 1;
    const c = Math.sqrt(1 - u * u);
    this.x = c * Math.cos(theta);
    this.y = u;
    this.z = c * Math.sin(theta);
    return this;
  }
  *[Symbol.iterator]() {
    yield this.x;
    yield this.y;
    yield this.z;
  }
}
const _vector$c = /* @__PURE__ */ new Vector3();
const _quaternion$4 = /* @__PURE__ */ new Quaternion();
class Box3 {
  constructor(min = new Vector3(Infinity, Infinity, Infinity), max = new Vector3(-Infinity, -Infinity, -Infinity)) {
    this.isBox3 = true;
    this.min = min;
    this.max = max;
  }
  set(min, max) {
    this.min.copy(min);
    this.max.copy(max);
    return this;
  }
  setFromArray(array) {
    this.makeEmpty();
    for (let i = 0, il2 = array.length; i < il2; i += 3) {
      this.expandByPoint(_vector$b.fromArray(array, i));
    }
    return this;
  }
  setFromBufferAttribute(attribute) {
    this.makeEmpty();
    for (let i = 0, il2 = attribute.count; i < il2; i++) {
      this.expandByPoint(_vector$b.fromBufferAttribute(attribute, i));
    }
    return this;
  }
  setFromPoints(points) {
    this.makeEmpty();
    for (let i = 0, il2 = points.length; i < il2; i++) {
      this.expandByPoint(points[i]);
    }
    return this;
  }
  setFromCenterAndSize(center, size2) {
    const halfSize = _vector$b.copy(size2).multiplyScalar(0.5);
    this.min.copy(center).sub(halfSize);
    this.max.copy(center).add(halfSize);
    return this;
  }
  setFromObject(object, precise = false) {
    this.makeEmpty();
    return this.expandByObject(object, precise);
  }
  clone() {
    return new this.constructor().copy(this);
  }
  copy(box) {
    this.min.copy(box.min);
    this.max.copy(box.max);
    return this;
  }
  makeEmpty() {
    this.min.x = this.min.y = this.min.z = Infinity;
    this.max.x = this.max.y = this.max.z = -Infinity;
    return this;
  }
  isEmpty() {
    return this.max.x < this.min.x || this.max.y < this.min.y || this.max.z < this.min.z;
  }
  getCenter(target) {
    return this.isEmpty() ? target.set(0, 0, 0) : target.addVectors(this.min, this.max).multiplyScalar(0.5);
  }
  getSize(target) {
    return this.isEmpty() ? target.set(0, 0, 0) : target.subVectors(this.max, this.min);
  }
  expandByPoint(point) {
    this.min.min(point);
    this.max.max(point);
    return this;
  }
  expandByVector(vector) {
    this.min.sub(vector);
    this.max.add(vector);
    return this;
  }
  expandByScalar(scalar) {
    this.min.addScalar(-scalar);
    this.max.addScalar(scalar);
    return this;
  }
  expandByObject(object, precise = false) {
    object.updateWorldMatrix(false, false);
    const geometry = object.geometry;
    if (geometry !== void 0) {
      const positionAttribute = geometry.getAttribute("position");
      if (precise === true && positionAttribute !== void 0 && object.isInstancedMesh !== true) {
        for (let i = 0, l = positionAttribute.count; i < l; i++) {
          if (object.isMesh === true) {
            object.getVertexPosition(i, _vector$b);
          } else {
            _vector$b.fromBufferAttribute(positionAttribute, i);
          }
          _vector$b.applyMatrix4(object.matrixWorld);
          this.expandByPoint(_vector$b);
        }
      } else {
        if (object.boundingBox !== void 0) {
          if (object.boundingBox === null) {
            object.computeBoundingBox();
          }
          _box$4.copy(object.boundingBox);
        } else {
          if (geometry.boundingBox === null) {
            geometry.computeBoundingBox();
          }
          _box$4.copy(geometry.boundingBox);
        }
        _box$4.applyMatrix4(object.matrixWorld);
        this.union(_box$4);
      }
    }
    const children = object.children;
    for (let i = 0, l = children.length; i < l; i++) {
      this.expandByObject(children[i], precise);
    }
    return this;
  }
  containsPoint(point) {
    return point.x >= this.min.x && point.x <= this.max.x && point.y >= this.min.y && point.y <= this.max.y && point.z >= this.min.z && point.z <= this.max.z;
  }
  containsBox(box) {
    return this.min.x <= box.min.x && box.max.x <= this.max.x && this.min.y <= box.min.y && box.max.y <= this.max.y && this.min.z <= box.min.z && box.max.z <= this.max.z;
  }
  getParameter(point, target) {
    return target.set(
      (point.x - this.min.x) / (this.max.x - this.min.x),
      (point.y - this.min.y) / (this.max.y - this.min.y),
      (point.z - this.min.z) / (this.max.z - this.min.z)
    );
  }
  intersectsBox(box) {
    return box.max.x >= this.min.x && box.min.x <= this.max.x && box.max.y >= this.min.y && box.min.y <= this.max.y && box.max.z >= this.min.z && box.min.z <= this.max.z;
  }
  intersectsSphere(sphere) {
    this.clampPoint(sphere.center, _vector$b);
    return _vector$b.distanceToSquared(sphere.center) <= sphere.radius * sphere.radius;
  }
  intersectsPlane(plane) {
    let min, max;
    if (plane.normal.x > 0) {
      min = plane.normal.x * this.min.x;
      max = plane.normal.x * this.max.x;
    } else {
      min = plane.normal.x * this.max.x;
      max = plane.normal.x * this.min.x;
    }
    if (plane.normal.y > 0) {
      min += plane.normal.y * this.min.y;
      max += plane.normal.y * this.max.y;
    } else {
      min += plane.normal.y * this.max.y;
      max += plane.normal.y * this.min.y;
    }
    if (plane.normal.z > 0) {
      min += plane.normal.z * this.min.z;
      max += plane.normal.z * this.max.z;
    } else {
      min += plane.normal.z * this.max.z;
      max += plane.normal.z * this.min.z;
    }
    return min <= -plane.constant && max >= -plane.constant;
  }
  intersectsTriangle(triangle) {
    if (this.isEmpty()) {
      return false;
    }
    this.getCenter(_center);
    _extents.subVectors(this.max, _center);
    _v0$3.subVectors(triangle.a, _center);
    _v1$7.subVectors(triangle.b, _center);
    _v2$4.subVectors(triangle.c, _center);
    _f0.subVectors(_v1$7, _v0$3);
    _f1.subVectors(_v2$4, _v1$7);
    _f2.subVectors(_v0$3, _v2$4);
    let axes = [
      0,
      -_f0.z,
      _f0.y,
      0,
      -_f1.z,
      _f1.y,
      0,
      -_f2.z,
      _f2.y,
      _f0.z,
      0,
      -_f0.x,
      _f1.z,
      0,
      -_f1.x,
      _f2.z,
      0,
      -_f2.x,
      -_f0.y,
      _f0.x,
      0,
      -_f1.y,
      _f1.x,
      0,
      -_f2.y,
      _f2.x,
      0
    ];
    if (!satForAxes(axes, _v0$3, _v1$7, _v2$4, _extents)) {
      return false;
    }
    axes = [1, 0, 0, 0, 1, 0, 0, 0, 1];
    if (!satForAxes(axes, _v0$3, _v1$7, _v2$4, _extents)) {
      return false;
    }
    _triangleNormal.crossVectors(_f0, _f1);
    axes = [_triangleNormal.x, _triangleNormal.y, _triangleNormal.z];
    return satForAxes(axes, _v0$3, _v1$7, _v2$4, _extents);
  }
  clampPoint(point, target) {
    return target.copy(point).clamp(this.min, this.max);
  }
  distanceToPoint(point) {
    return this.clampPoint(point, _vector$b).distanceTo(point);
  }
  getBoundingSphere(target) {
    if (this.isEmpty()) {
      target.makeEmpty();
    } else {
      this.getCenter(target.center);
      target.radius = this.getSize(_vector$b).length() * 0.5;
    }
    return target;
  }
  intersect(box) {
    this.min.max(box.min);
    this.max.min(box.max);
    if (this.isEmpty()) this.makeEmpty();
    return this;
  }
  union(box) {
    this.min.min(box.min);
    this.max.max(box.max);
    return this;
  }
  applyMatrix4(matrix) {
    if (this.isEmpty()) return this;
    _points[0].set(this.min.x, this.min.y, this.min.z).applyMatrix4(matrix);
    _points[1].set(this.min.x, this.min.y, this.max.z).applyMatrix4(matrix);
    _points[2].set(this.min.x, this.max.y, this.min.z).applyMatrix4(matrix);
    _points[3].set(this.min.x, this.max.y, this.max.z).applyMatrix4(matrix);
    _points[4].set(this.max.x, this.min.y, this.min.z).applyMatrix4(matrix);
    _points[5].set(this.max.x, this.min.y, this.max.z).applyMatrix4(matrix);
    _points[6].set(this.max.x, this.max.y, this.min.z).applyMatrix4(matrix);
    _points[7].set(this.max.x, this.max.y, this.max.z).applyMatrix4(matrix);
    this.setFromPoints(_points);
    return this;
  }
  translate(offset) {
    this.min.add(offset);
    this.max.add(offset);
    return this;
  }
  equals(box) {
    return box.min.equals(this.min) && box.max.equals(this.max);
  }
}
const _points = [
  /* @__PURE__ */ new Vector3(),
  /* @__PURE__ */ new Vector3(),
  /* @__PURE__ */ new Vector3(),
  /* @__PURE__ */ new Vector3(),
  /* @__PURE__ */ new Vector3(),
  /* @__PURE__ */ new Vector3(),
  /* @__PURE__ */ new Vector3(),
  /* @__PURE__ */ new Vector3()
];
const _vector$b = /* @__PURE__ */ new Vector3();
const _box$4 = /* @__PURE__ */ new Box3();
const _v0$3 = /* @__PURE__ */ new Vector3();
const _v1$7 = /* @__PURE__ */ new Vector3();
const _v2$4 = /* @__PURE__ */ new Vector3();
const _f0 = /* @__PURE__ */ new Vector3();
const _f1 = /* @__PURE__ */ new Vector3();
const _f2 = /* @__PURE__ */ new Vector3();
const _center = /* @__PURE__ */ new Vector3();
const _extents = /* @__PURE__ */ new Vector3();
const _triangleNormal = /* @__PURE__ */ new Vector3();
const _testAxis = /* @__PURE__ */ new Vector3();
function satForAxes(axes, v0, v1, v2, extents) {
  for (let i = 0, j2 = axes.length - 3; i <= j2; i += 3) {
    _testAxis.fromArray(axes, i);
    const r = extents.x * Math.abs(_testAxis.x) + extents.y * Math.abs(_testAxis.y) + extents.z * Math.abs(_testAxis.z);
    const p0 = v0.dot(_testAxis);
    const p1 = v1.dot(_testAxis);
    const p2 = v2.dot(_testAxis);
    if (Math.max(-Math.max(p0, p1, p2), Math.min(p0, p1, p2)) > r) {
      return false;
    }
  }
  return true;
}
const _box$3 = /* @__PURE__ */ new Box3();
const _v1$6 = /* @__PURE__ */ new Vector3();
const _v2$3 = /* @__PURE__ */ new Vector3();
class Sphere {
  constructor(center = new Vector3(), radius = -1) {
    this.isSphere = true;
    this.center = center;
    this.radius = radius;
  }
  set(center, radius) {
    this.center.copy(center);
    this.radius = radius;
    return this;
  }
  setFromPoints(points, optionalCenter) {
    const center = this.center;
    if (optionalCenter !== void 0) {
      center.copy(optionalCenter);
    } else {
      _box$3.setFromPoints(points).getCenter(center);
    }
    let maxRadiusSq = 0;
    for (let i = 0, il2 = points.length; i < il2; i++) {
      maxRadiusSq = Math.max(maxRadiusSq, center.distanceToSquared(points[i]));
    }
    this.radius = Math.sqrt(maxRadiusSq);
    return this;
  }
  copy(sphere) {
    this.center.copy(sphere.center);
    this.radius = sphere.radius;
    return this;
  }
  isEmpty() {
    return this.radius < 0;
  }
  makeEmpty() {
    this.center.set(0, 0, 0);
    this.radius = -1;
    return this;
  }
  containsPoint(point) {
    return point.distanceToSquared(this.center) <= this.radius * this.radius;
  }
  distanceToPoint(point) {
    return point.distanceTo(this.center) - this.radius;
  }
  intersectsSphere(sphere) {
    const radiusSum = this.radius + sphere.radius;
    return sphere.center.distanceToSquared(this.center) <= radiusSum * radiusSum;
  }
  intersectsBox(box) {
    return box.intersectsSphere(this);
  }
  intersectsPlane(plane) {
    return Math.abs(plane.distanceToPoint(this.center)) <= this.radius;
  }
  clampPoint(point, target) {
    const deltaLengthSq = this.center.distanceToSquared(point);
    target.copy(point);
    if (deltaLengthSq > this.radius * this.radius) {
      target.sub(this.center).normalize();
      target.multiplyScalar(this.radius).add(this.center);
    }
    return target;
  }
  getBoundingBox(target) {
    if (this.isEmpty()) {
      target.makeEmpty();
      return target;
    }
    target.set(this.center, this.center);
    target.expandByScalar(this.radius);
    return target;
  }
  applyMatrix4(matrix) {
    this.center.applyMatrix4(matrix);
    this.radius = this.radius * matrix.getMaxScaleOnAxis();
    return this;
  }
  translate(offset) {
    this.center.add(offset);
    return this;
  }
  expandByPoint(point) {
    if (this.isEmpty()) {
      this.center.copy(point);
      this.radius = 0;
      return this;
    }
    _v1$6.subVectors(point, this.center);
    const lengthSq = _v1$6.lengthSq();
    if (lengthSq > this.radius * this.radius) {
      const length = Math.sqrt(lengthSq);
      const delta = (length - this.radius) * 0.5;
      this.center.addScaledVector(_v1$6, delta / length);
      this.radius += delta;
    }
    return this;
  }
  union(sphere) {
    if (sphere.isEmpty()) {
      return this;
    }
    if (this.isEmpty()) {
      this.copy(sphere);
      return this;
    }
    if (this.center.equals(sphere.center) === true) {
      this.radius = Math.max(this.radius, sphere.radius);
    } else {
      _v2$3.subVectors(sphere.center, this.center).setLength(sphere.radius);
      this.expandByPoint(_v1$6.copy(sphere.center).add(_v2$3));
      this.expandByPoint(_v1$6.copy(sphere.center).sub(_v2$3));
    }
    return this;
  }
  equals(sphere) {
    return sphere.center.equals(this.center) && sphere.radius === this.radius;
  }
  clone() {
    return new this.constructor().copy(this);
  }
}
const _vector$a = /* @__PURE__ */ new Vector3();
const _segCenter = /* @__PURE__ */ new Vector3();
const _segDir = /* @__PURE__ */ new Vector3();
const _diff = /* @__PURE__ */ new Vector3();
const _edge1 = /* @__PURE__ */ new Vector3();
const _edge2 = /* @__PURE__ */ new Vector3();
const _normal$1 = /* @__PURE__ */ new Vector3();
class Ray {
  constructor(origin = new Vector3(), direction = new Vector3(0, 0, -1)) {
    this.origin = origin;
    this.direction = direction;
  }
  set(origin, direction) {
    this.origin.copy(origin);
    this.direction.copy(direction);
    return this;
  }
  copy(ray) {
    this.origin.copy(ray.origin);
    this.direction.copy(ray.direction);
    return this;
  }
  at(t, target) {
    return target.copy(this.origin).addScaledVector(this.direction, t);
  }
  lookAt(v) {
    this.direction.copy(v).sub(this.origin).normalize();
    return this;
  }
  recast(t) {
    this.origin.copy(this.at(t, _vector$a));
    return this;
  }
  closestPointToPoint(point, target) {
    target.subVectors(point, this.origin);
    const directionDistance = target.dot(this.direction);
    if (directionDistance < 0) {
      return target.copy(this.origin);
    }
    return target.copy(this.origin).addScaledVector(this.direction, directionDistance);
  }
  distanceToPoint(point) {
    return Math.sqrt(this.distanceSqToPoint(point));
  }
  distanceSqToPoint(point) {
    const directionDistance = _vector$a.subVectors(point, this.origin).dot(this.direction);
    if (directionDistance < 0) {
      return this.origin.distanceToSquared(point);
    }
    _vector$a.copy(this.origin).addScaledVector(this.direction, directionDistance);
    return _vector$a.distanceToSquared(point);
  }
  distanceSqToSegment(v0, v1, optionalPointOnRay, optionalPointOnSegment) {
    _segCenter.copy(v0).add(v1).multiplyScalar(0.5);
    _segDir.copy(v1).sub(v0).normalize();
    _diff.copy(this.origin).sub(_segCenter);
    const segExtent = v0.distanceTo(v1) * 0.5;
    const a01 = -this.direction.dot(_segDir);
    const b0 = _diff.dot(this.direction);
    const b1 = -_diff.dot(_segDir);
    const c = _diff.lengthSq();
    const det = Math.abs(1 - a01 * a01);
    let s0, s1, sqrDist, extDet;
    if (det > 0) {
      s0 = a01 * b1 - b0;
      s1 = a01 * b0 - b1;
      extDet = segExtent * det;
      if (s0 >= 0) {
        if (s1 >= -extDet) {
          if (s1 <= extDet) {
            const invDet = 1 / det;
            s0 *= invDet;
            s1 *= invDet;
            sqrDist = s0 * (s0 + a01 * s1 + 2 * b0) + s1 * (a01 * s0 + s1 + 2 * b1) + c;
          } else {
            s1 = segExtent;
            s0 = Math.max(0, -(a01 * s1 + b0));
            sqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c;
          }
        } else {
          s1 = -segExtent;
          s0 = Math.max(0, -(a01 * s1 + b0));
          sqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c;
        }
      } else {
        if (s1 <= -extDet) {
          s0 = Math.max(0, -(-a01 * segExtent + b0));
          s1 = s0 > 0 ? -segExtent : Math.min(Math.max(-segExtent, -b1), segExtent);
          sqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c;
        } else if (s1 <= extDet) {
          s0 = 0;
          s1 = Math.min(Math.max(-segExtent, -b1), segExtent);
          sqrDist = s1 * (s1 + 2 * b1) + c;
        } else {
          s0 = Math.max(0, -(a01 * segExtent + b0));
          s1 = s0 > 0 ? segExtent : Math.min(Math.max(-segExtent, -b1), segExtent);
          sqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c;
        }
      }
    } else {
      s1 = a01 > 0 ? -segExtent : segExtent;
      s0 = Math.max(0, -(a01 * s1 + b0));
      sqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c;
    }
    if (optionalPointOnRay) {
      optionalPointOnRay.copy(this.origin).addScaledVector(this.direction, s0);
    }
    if (optionalPointOnSegment) {
      optionalPointOnSegment.copy(_segCenter).addScaledVector(_segDir, s1);
    }
    return sqrDist;
  }
  intersectSphere(sphere, target) {
    _vector$a.subVectors(sphere.center, this.origin);
    const tca = _vector$a.dot(this.direction);
    const d2 = _vector$a.dot(_vector$a) - tca * tca;
    const radius2 = sphere.radius * sphere.radius;
    if (d2 > radius2) return null;
    const thc = Math.sqrt(radius2 - d2);
    const t0 = tca - thc;
    const t1 = tca + thc;
    if (t1 < 0) return null;
    if (t0 < 0) return this.at(t1, target);
    return this.at(t0, target);
  }
  intersectsSphere(sphere) {
    return this.distanceSqToPoint(sphere.center) <= sphere.radius * sphere.radius;
  }
  distanceToPlane(plane) {
    const denominator = plane.normal.dot(this.direction);
    if (denominator === 0) {
      if (plane.distanceToPoint(this.origin) === 0) {
        return 0;
      }
      return null;
    }
    const t = -(this.origin.dot(plane.normal) + plane.constant) / denominator;
    return t >= 0 ? t : null;
  }
  intersectPlane(plane, target) {
    const t = this.distanceToPlane(plane);
    if (t === null) {
      return null;
    }
    return this.at(t, target);
  }
  intersectsPlane(plane) {
    const distToPoint = plane.distanceToPoint(this.origin);
    if (distToPoint === 0) {
      return true;
    }
    const denominator = plane.normal.dot(this.direction);
    if (denominator * distToPoint < 0) {
      return true;
    }
    return false;
  }
  intersectBox(box, target) {
    let tmin, tmax, tymin, tymax, tzmin, tzmax;
    const invdirx = 1 / this.direction.x, invdiry = 1 / this.direction.y, invdirz = 1 / this.direction.z;
    const origin = this.origin;
    if (invdirx >= 0) {
      tmin = (box.min.x - origin.x) * invdirx;
      tmax = (box.max.x - origin.x) * invdirx;
    } else {
      tmin = (box.max.x - origin.x) * invdirx;
      tmax = (box.min.x - origin.x) * invdirx;
    }
    if (invdiry >= 0) {
      tymin = (box.min.y - origin.y) * invdiry;
      tymax = (box.max.y - origin.y) * invdiry;
    } else {
      tymin = (box.max.y - origin.y) * invdiry;
      tymax = (box.min.y - origin.y) * invdiry;
    }
    if (tmin > tymax || tymin > tmax) return null;
    if (tymin > tmin || isNaN(tmin)) tmin = tymin;
    if (tymax < tmax || isNaN(tmax)) tmax = tymax;
    if (invdirz >= 0) {
      tzmin = (box.min.z - origin.z) * invdirz;
      tzmax = (box.max.z - origin.z) * invdirz;
    } else {
      tzmin = (box.max.z - origin.z) * invdirz;
      tzmax = (box.min.z - origin.z) * invdirz;
    }
    if (tmin > tzmax || tzmin > tmax) return null;
    if (tzmin > tmin || tmin !== tmin) tmin = tzmin;
    if (tzmax < tmax || tmax !== tmax) tmax = tzmax;
    if (tmax < 0) return null;
    return this.at(tmin >= 0 ? tmin : tmax, target);
  }
  intersectsBox(box) {
    return this.intersectBox(box, _vector$a) !== null;
  }
  intersectTriangle(a, b, c, backfaceCulling, target) {
    _edge1.subVectors(b, a);
    _edge2.subVectors(c, a);
    _normal$1.crossVectors(_edge1, _edge2);
    let DdN = this.direction.dot(_normal$1);
    let sign2;
    if (DdN > 0) {
      if (backfaceCulling) return null;
      sign2 = 1;
    } else if (DdN < 0) {
      sign2 = -1;
      DdN = -DdN;
    } else {
      return null;
    }
    _diff.subVectors(this.origin, a);
    const DdQxE2 = sign2 * this.direction.dot(_edge2.crossVectors(_diff, _edge2));
    if (DdQxE2 < 0) {
      return null;
    }
    const DdE1xQ = sign2 * this.direction.dot(_edge1.cross(_diff));
    if (DdE1xQ < 0) {
      return null;
    }
    if (DdQxE2 + DdE1xQ > DdN) {
      return null;
    }
    const QdN = -sign2 * _diff.dot(_normal$1);
    if (QdN < 0) {
      return null;
    }
    return this.at(QdN / DdN, target);
  }
  applyMatrix4(matrix4) {
    this.origin.applyMatrix4(matrix4);
    this.direction.transformDirection(matrix4);
    return this;
  }
  equals(ray) {
    return ray.origin.equals(this.origin) && ray.direction.equals(this.direction);
  }
  clone() {
    return new this.constructor().copy(this);
  }
}
class Matrix4 {
  constructor(n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44) {
    Matrix4.prototype.isMatrix4 = true;
    this.elements = [
      1,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      1
    ];
    if (n11 !== void 0) {
      this.set(n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44);
    }
  }
  set(n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44) {
    const te = this.elements;
    te[0] = n11;
    te[4] = n12;
    te[8] = n13;
    te[12] = n14;
    te[1] = n21;
    te[5] = n22;
    te[9] = n23;
    te[13] = n24;
    te[2] = n31;
    te[6] = n32;
    te[10] = n33;
    te[14] = n34;
    te[3] = n41;
    te[7] = n42;
    te[11] = n43;
    te[15] = n44;
    return this;
  }
  identity() {
    this.set(
      1,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      1
    );
    return this;
  }
  clone() {
    return new Matrix4().fromArray(this.elements);
  }
  copy(m) {
    const te = this.elements;
    const me2 = m.elements;
    te[0] = me2[0];
    te[1] = me2[1];
    te[2] = me2[2];
    te[3] = me2[3];
    te[4] = me2[4];
    te[5] = me2[5];
    te[6] = me2[6];
    te[7] = me2[7];
    te[8] = me2[8];
    te[9] = me2[9];
    te[10] = me2[10];
    te[11] = me2[11];
    te[12] = me2[12];
    te[13] = me2[13];
    te[14] = me2[14];
    te[15] = me2[15];
    return this;
  }
  copyPosition(m) {
    const te = this.elements, me2 = m.elements;
    te[12] = me2[12];
    te[13] = me2[13];
    te[14] = me2[14];
    return this;
  }
  setFromMatrix3(m) {
    const me2 = m.elements;
    this.set(
      me2[0],
      me2[3],
      me2[6],
      0,
      me2[1],
      me2[4],
      me2[7],
      0,
      me2[2],
      me2[5],
      me2[8],
      0,
      0,
      0,
      0,
      1
    );
    return this;
  }
  extractBasis(xAxis, yAxis, zAxis) {
    xAxis.setFromMatrixColumn(this, 0);
    yAxis.setFromMatrixColumn(this, 1);
    zAxis.setFromMatrixColumn(this, 2);
    return this;
  }
  makeBasis(xAxis, yAxis, zAxis) {
    this.set(
      xAxis.x,
      yAxis.x,
      zAxis.x,
      0,
      xAxis.y,
      yAxis.y,
      zAxis.y,
      0,
      xAxis.z,
      yAxis.z,
      zAxis.z,
      0,
      0,
      0,
      0,
      1
    );
    return this;
  }
  extractRotation(m) {
    const te = this.elements;
    const me2 = m.elements;
    const scaleX = 1 / _v1$5.setFromMatrixColumn(m, 0).length();
    const scaleY = 1 / _v1$5.setFromMatrixColumn(m, 1).length();
    const scaleZ = 1 / _v1$5.setFromMatrixColumn(m, 2).length();
    te[0] = me2[0] * scaleX;
    te[1] = me2[1] * scaleX;
    te[2] = me2[2] * scaleX;
    te[3] = 0;
    te[4] = me2[4] * scaleY;
    te[5] = me2[5] * scaleY;
    te[6] = me2[6] * scaleY;
    te[7] = 0;
    te[8] = me2[8] * scaleZ;
    te[9] = me2[9] * scaleZ;
    te[10] = me2[10] * scaleZ;
    te[11] = 0;
    te[12] = 0;
    te[13] = 0;
    te[14] = 0;
    te[15] = 1;
    return this;
  }
  makeRotationFromEuler(euler) {
    const te = this.elements;
    const x = euler.x, y = euler.y, z2 = euler.z;
    const a = Math.cos(x), b = Math.sin(x);
    const c = Math.cos(y), d = Math.sin(y);
    const e = Math.cos(z2), f = Math.sin(z2);
    if (euler.order === "XYZ") {
      const ae = a * e, af2 = a * f, be2 = b * e, bf2 = b * f;
      te[0] = c * e;
      te[4] = -c * f;
      te[8] = d;
      te[1] = af2 + be2 * d;
      te[5] = ae - bf2 * d;
      te[9] = -b * c;
      te[2] = bf2 - ae * d;
      te[6] = be2 + af2 * d;
      te[10] = a * c;
    } else if (euler.order === "YXZ") {
      const ce2 = c * e, cf2 = c * f, de = d * e, df2 = d * f;
      te[0] = ce2 + df2 * b;
      te[4] = de * b - cf2;
      te[8] = a * d;
      te[1] = a * f;
      te[5] = a * e;
      te[9] = -b;
      te[2] = cf2 * b - de;
      te[6] = df2 + ce2 * b;
      te[10] = a * c;
    } else if (euler.order === "ZXY") {
      const ce2 = c * e, cf2 = c * f, de = d * e, df2 = d * f;
      te[0] = ce2 - df2 * b;
      te[4] = -a * f;
      te[8] = de + cf2 * b;
      te[1] = cf2 + de * b;
      te[5] = a * e;
      te[9] = df2 - ce2 * b;
      te[2] = -a * d;
      te[6] = b;
      te[10] = a * c;
    } else if (euler.order === "ZYX") {
      const ae = a * e, af2 = a * f, be2 = b * e, bf2 = b * f;
      te[0] = c * e;
      te[4] = be2 * d - af2;
      te[8] = ae * d + bf2;
      te[1] = c * f;
      te[5] = bf2 * d + ae;
      te[9] = af2 * d - be2;
      te[2] = -d;
      te[6] = b * c;
      te[10] = a * c;
    } else if (euler.order === "YZX") {
      const ac2 = a * c, ad2 = a * d, bc2 = b * c, bd = b * d;
      te[0] = c * e;
      te[4] = bd - ac2 * f;
      te[8] = bc2 * f + ad2;
      te[1] = f;
      te[5] = a * e;
      te[9] = -b * e;
      te[2] = -d * e;
      te[6] = ad2 * f + bc2;
      te[10] = ac2 - bd * f;
    } else if (euler.order === "XZY") {
      const ac2 = a * c, ad2 = a * d, bc2 = b * c, bd = b * d;
      te[0] = c * e;
      te[4] = -f;
      te[8] = d * e;
      te[1] = ac2 * f + bd;
      te[5] = a * e;
      te[9] = ad2 * f - bc2;
      te[2] = bc2 * f - ad2;
      te[6] = b * e;
      te[10] = bd * f + ac2;
    }
    te[3] = 0;
    te[7] = 0;
    te[11] = 0;
    te[12] = 0;
    te[13] = 0;
    te[14] = 0;
    te[15] = 1;
    return this;
  }
  makeRotationFromQuaternion(q2) {
    return this.compose(_zero, q2, _one);
  }
  lookAt(eye, target, up2) {
    const te = this.elements;
    _z.subVectors(eye, target);
    if (_z.lengthSq() === 0) {
      _z.z = 1;
    }
    _z.normalize();
    _x.crossVectors(up2, _z);
    if (_x.lengthSq() === 0) {
      if (Math.abs(up2.z) === 1) {
        _z.x += 1e-4;
      } else {
        _z.z += 1e-4;
      }
      _z.normalize();
      _x.crossVectors(up2, _z);
    }
    _x.normalize();
    _y.crossVectors(_z, _x);
    te[0] = _x.x;
    te[4] = _y.x;
    te[8] = _z.x;
    te[1] = _x.y;
    te[5] = _y.y;
    te[9] = _z.y;
    te[2] = _x.z;
    te[6] = _y.z;
    te[10] = _z.z;
    return this;
  }
  multiply(m) {
    return this.multiplyMatrices(this, m);
  }
  premultiply(m) {
    return this.multiplyMatrices(m, this);
  }
  multiplyMatrices(a, b) {
    const ae = a.elements;
    const be2 = b.elements;
    const te = this.elements;
    const a11 = ae[0], a12 = ae[4], a13 = ae[8], a14 = ae[12];
    const a21 = ae[1], a22 = ae[5], a23 = ae[9], a24 = ae[13];
    const a31 = ae[2], a32 = ae[6], a33 = ae[10], a34 = ae[14];
    const a41 = ae[3], a42 = ae[7], a43 = ae[11], a44 = ae[15];
    const b11 = be2[0], b12 = be2[4], b13 = be2[8], b14 = be2[12];
    const b21 = be2[1], b22 = be2[5], b23 = be2[9], b24 = be2[13];
    const b31 = be2[2], b32 = be2[6], b33 = be2[10], b34 = be2[14];
    const b41 = be2[3], b42 = be2[7], b43 = be2[11], b44 = be2[15];
    te[0] = a11 * b11 + a12 * b21 + a13 * b31 + a14 * b41;
    te[4] = a11 * b12 + a12 * b22 + a13 * b32 + a14 * b42;
    te[8] = a11 * b13 + a12 * b23 + a13 * b33 + a14 * b43;
    te[12] = a11 * b14 + a12 * b24 + a13 * b34 + a14 * b44;
    te[1] = a21 * b11 + a22 * b21 + a23 * b31 + a24 * b41;
    te[5] = a21 * b12 + a22 * b22 + a23 * b32 + a24 * b42;
    te[9] = a21 * b13 + a22 * b23 + a23 * b33 + a24 * b43;
    te[13] = a21 * b14 + a22 * b24 + a23 * b34 + a24 * b44;
    te[2] = a31 * b11 + a32 * b21 + a33 * b31 + a34 * b41;
    te[6] = a31 * b12 + a32 * b22 + a33 * b32 + a34 * b42;
    te[10] = a31 * b13 + a32 * b23 + a33 * b33 + a34 * b43;
    te[14] = a31 * b14 + a32 * b24 + a33 * b34 + a34 * b44;
    te[3] = a41 * b11 + a42 * b21 + a43 * b31 + a44 * b41;
    te[7] = a41 * b12 + a42 * b22 + a43 * b32 + a44 * b42;
    te[11] = a41 * b13 + a42 * b23 + a43 * b33 + a44 * b43;
    te[15] = a41 * b14 + a42 * b24 + a43 * b34 + a44 * b44;
    return this;
  }
  multiplyScalar(s) {
    const te = this.elements;
    te[0] *= s;
    te[4] *= s;
    te[8] *= s;
    te[12] *= s;
    te[1] *= s;
    te[5] *= s;
    te[9] *= s;
    te[13] *= s;
    te[2] *= s;
    te[6] *= s;
    te[10] *= s;
    te[14] *= s;
    te[3] *= s;
    te[7] *= s;
    te[11] *= s;
    te[15] *= s;
    return this;
  }
  determinant() {
    const te = this.elements;
    const n11 = te[0], n12 = te[4], n13 = te[8], n14 = te[12];
    const n21 = te[1], n22 = te[5], n23 = te[9], n24 = te[13];
    const n31 = te[2], n32 = te[6], n33 = te[10], n34 = te[14];
    const n41 = te[3], n42 = te[7], n43 = te[11], n44 = te[15];
    return n41 * (+n14 * n23 * n32 - n13 * n24 * n32 - n14 * n22 * n33 + n12 * n24 * n33 + n13 * n22 * n34 - n12 * n23 * n34) + n42 * (+n11 * n23 * n34 - n11 * n24 * n33 + n14 * n21 * n33 - n13 * n21 * n34 + n13 * n24 * n31 - n14 * n23 * n31) + n43 * (+n11 * n24 * n32 - n11 * n22 * n34 - n14 * n21 * n32 + n12 * n21 * n34 + n14 * n22 * n31 - n12 * n24 * n31) + n44 * (-n13 * n22 * n31 - n11 * n23 * n32 + n11 * n22 * n33 + n13 * n21 * n32 - n12 * n21 * n33 + n12 * n23 * n31);
  }
  transpose() {
    const te = this.elements;
    let tmp2;
    tmp2 = te[1];
    te[1] = te[4];
    te[4] = tmp2;
    tmp2 = te[2];
    te[2] = te[8];
    te[8] = tmp2;
    tmp2 = te[6];
    te[6] = te[9];
    te[9] = tmp2;
    tmp2 = te[3];
    te[3] = te[12];
    te[12] = tmp2;
    tmp2 = te[7];
    te[7] = te[13];
    te[13] = tmp2;
    tmp2 = te[11];
    te[11] = te[14];
    te[14] = tmp2;
    return this;
  }
  setPosition(x, y, z2) {
    const te = this.elements;
    if (x.isVector3) {
      te[12] = x.x;
      te[13] = x.y;
      te[14] = x.z;
    } else {
      te[12] = x;
      te[13] = y;
      te[14] = z2;
    }
    return this;
  }
  invert() {
    const te = this.elements, n11 = te[0], n21 = te[1], n31 = te[2], n41 = te[3], n12 = te[4], n22 = te[5], n32 = te[6], n42 = te[7], n13 = te[8], n23 = te[9], n33 = te[10], n43 = te[11], n14 = te[12], n24 = te[13], n34 = te[14], n44 = te[15], t11 = n23 * n34 * n42 - n24 * n33 * n42 + n24 * n32 * n43 - n22 * n34 * n43 - n23 * n32 * n44 + n22 * n33 * n44, t12 = n14 * n33 * n42 - n13 * n34 * n42 - n14 * n32 * n43 + n12 * n34 * n43 + n13 * n32 * n44 - n12 * n33 * n44, t13 = n13 * n24 * n42 - n14 * n23 * n42 + n14 * n22 * n43 - n12 * n24 * n43 - n13 * n22 * n44 + n12 * n23 * n44, t14 = n14 * n23 * n32 - n13 * n24 * n32 - n14 * n22 * n33 + n12 * n24 * n33 + n13 * n22 * n34 - n12 * n23 * n34;
    const det = n11 * t11 + n21 * t12 + n31 * t13 + n41 * t14;
    if (det === 0) return this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
    const detInv = 1 / det;
    te[0] = t11 * detInv;
    te[1] = (n24 * n33 * n41 - n23 * n34 * n41 - n24 * n31 * n43 + n21 * n34 * n43 + n23 * n31 * n44 - n21 * n33 * n44) * detInv;
    te[2] = (n22 * n34 * n41 - n24 * n32 * n41 + n24 * n31 * n42 - n21 * n34 * n42 - n22 * n31 * n44 + n21 * n32 * n44) * detInv;
    te[3] = (n23 * n32 * n41 - n22 * n33 * n41 - n23 * n31 * n42 + n21 * n33 * n42 + n22 * n31 * n43 - n21 * n32 * n43) * detInv;
    te[4] = t12 * detInv;
    te[5] = (n13 * n34 * n41 - n14 * n33 * n41 + n14 * n31 * n43 - n11 * n34 * n43 - n13 * n31 * n44 + n11 * n33 * n44) * detInv;
    te[6] = (n14 * n32 * n41 - n12 * n34 * n41 - n14 * n31 * n42 + n11 * n34 * n42 + n12 * n31 * n44 - n11 * n32 * n44) * detInv;
    te[7] = (n12 * n33 * n41 - n13 * n32 * n41 + n13 * n31 * n42 - n11 * n33 * n42 - n12 * n31 * n43 + n11 * n32 * n43) * detInv;
    te[8] = t13 * detInv;
    te[9] = (n14 * n23 * n41 - n13 * n24 * n41 - n14 * n21 * n43 + n11 * n24 * n43 + n13 * n21 * n44 - n11 * n23 * n44) * detInv;
    te[10] = (n12 * n24 * n41 - n14 * n22 * n41 + n14 * n21 * n42 - n11 * n24 * n42 - n12 * n21 * n44 + n11 * n22 * n44) * detInv;
    te[11] = (n13 * n22 * n41 - n12 * n23 * n41 - n13 * n21 * n42 + n11 * n23 * n42 + n12 * n21 * n43 - n11 * n22 * n43) * detInv;
    te[12] = t14 * detInv;
    te[13] = (n13 * n24 * n31 - n14 * n23 * n31 + n14 * n21 * n33 - n11 * n24 * n33 - n13 * n21 * n34 + n11 * n23 * n34) * detInv;
    te[14] = (n14 * n22 * n31 - n12 * n24 * n31 - n14 * n21 * n32 + n11 * n24 * n32 + n12 * n21 * n34 - n11 * n22 * n34) * detInv;
    te[15] = (n12 * n23 * n31 - n13 * n22 * n31 + n13 * n21 * n32 - n11 * n23 * n32 - n12 * n21 * n33 + n11 * n22 * n33) * detInv;
    return this;
  }
  scale(v) {
    const te = this.elements;
    const x = v.x, y = v.y, z2 = v.z;
    te[0] *= x;
    te[4] *= y;
    te[8] *= z2;
    te[1] *= x;
    te[5] *= y;
    te[9] *= z2;
    te[2] *= x;
    te[6] *= y;
    te[10] *= z2;
    te[3] *= x;
    te[7] *= y;
    te[11] *= z2;
    return this;
  }
  getMaxScaleOnAxis() {
    const te = this.elements;
    const scaleXSq = te[0] * te[0] + te[1] * te[1] + te[2] * te[2];
    const scaleYSq = te[4] * te[4] + te[5] * te[5] + te[6] * te[6];
    const scaleZSq = te[8] * te[8] + te[9] * te[9] + te[10] * te[10];
    return Math.sqrt(Math.max(scaleXSq, scaleYSq, scaleZSq));
  }
  makeTranslation(x, y, z2) {
    if (x.isVector3) {
      this.set(
        1,
        0,
        0,
        x.x,
        0,
        1,
        0,
        x.y,
        0,
        0,
        1,
        x.z,
        0,
        0,
        0,
        1
      );
    } else {
      this.set(
        1,
        0,
        0,
        x,
        0,
        1,
        0,
        y,
        0,
        0,
        1,
        z2,
        0,
        0,
        0,
        1
      );
    }
    return this;
  }
  makeRotationX(theta) {
    const c = Math.cos(theta), s = Math.sin(theta);
    this.set(
      1,
      0,
      0,
      0,
      0,
      c,
      -s,
      0,
      0,
      s,
      c,
      0,
      0,
      0,
      0,
      1
    );
    return this;
  }
  makeRotationY(theta) {
    const c = Math.cos(theta), s = Math.sin(theta);
    this.set(
      c,
      0,
      s,
      0,
      0,
      1,
      0,
      0,
      -s,
      0,
      c,
      0,
      0,
      0,
      0,
      1
    );
    return this;
  }
  makeRotationZ(theta) {
    const c = Math.cos(theta), s = Math.sin(theta);
    this.set(
      c,
      -s,
      0,
      0,
      s,
      c,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      1
    );
    return this;
  }
  makeRotationAxis(axis, angle) {
    const c = Math.cos(angle);
    const s = Math.sin(angle);
    const t = 1 - c;
    const x = axis.x, y = axis.y, z2 = axis.z;
    const tx = t * x, ty = t * y;
    this.set(
      tx * x + c,
      tx * y - s * z2,
      tx * z2 + s * y,
      0,
      tx * y + s * z2,
      ty * y + c,
      ty * z2 - s * x,
      0,
      tx * z2 - s * y,
      ty * z2 + s * x,
      t * z2 * z2 + c,
      0,
      0,
      0,
      0,
      1
    );
    return this;
  }
  makeScale(x, y, z2) {
    this.set(
      x,
      0,
      0,
      0,
      0,
      y,
      0,
      0,
      0,
      0,
      z2,
      0,
      0,
      0,
      0,
      1
    );
    return this;
  }
  makeShear(xy, xz, yx, yz, zx, zy) {
    this.set(
      1,
      yx,
      zx,
      0,
      xy,
      1,
      zy,
      0,
      xz,
      yz,
      1,
      0,
      0,
      0,
      0,
      1
    );
    return this;
  }
  compose(position, quaternion, scale) {
    const te = this.elements;
    const x = quaternion._x, y = quaternion._y, z2 = quaternion._z, w = quaternion._w;
    const x2 = x + x, y2 = y + y, z22 = z2 + z2;
    const xx = x * x2, xy = x * y2, xz = x * z22;
    const yy = y * y2, yz = y * z22, zz = z2 * z22;
    const wx = w * x2, wy = w * y2, wz = w * z22;
    const sx = scale.x, sy = scale.y, sz = scale.z;
    te[0] = (1 - (yy + zz)) * sx;
    te[1] = (xy + wz) * sx;
    te[2] = (xz - wy) * sx;
    te[3] = 0;
    te[4] = (xy - wz) * sy;
    te[5] = (1 - (xx + zz)) * sy;
    te[6] = (yz + wx) * sy;
    te[7] = 0;
    te[8] = (xz + wy) * sz;
    te[9] = (yz - wx) * sz;
    te[10] = (1 - (xx + yy)) * sz;
    te[11] = 0;
    te[12] = position.x;
    te[13] = position.y;
    te[14] = position.z;
    te[15] = 1;
    return this;
  }
  decompose(position, quaternion, scale) {
    const te = this.elements;
    let sx = _v1$5.set(te[0], te[1], te[2]).length();
    const sy = _v1$5.set(te[4], te[5], te[6]).length();
    const sz = _v1$5.set(te[8], te[9], te[10]).length();
    const det = this.determinant();
    if (det < 0) sx = -sx;
    position.x = te[12];
    position.y = te[13];
    position.z = te[14];
    _m1$4.copy(this);
    const invSX = 1 / sx;
    const invSY = 1 / sy;
    const invSZ = 1 / sz;
    _m1$4.elements[0] *= invSX;
    _m1$4.elements[1] *= invSX;
    _m1$4.elements[2] *= invSX;
    _m1$4.elements[4] *= invSY;
    _m1$4.elements[5] *= invSY;
    _m1$4.elements[6] *= invSY;
    _m1$4.elements[8] *= invSZ;
    _m1$4.elements[9] *= invSZ;
    _m1$4.elements[10] *= invSZ;
    quaternion.setFromRotationMatrix(_m1$4);
    scale.x = sx;
    scale.y = sy;
    scale.z = sz;
    return this;
  }
  makePerspective(left, right, top, bottom, near, far, coordinateSystem = WebGLCoordinateSystem) {
    const te = this.elements;
    const x = 2 * near / (right - left);
    const y = 2 * near / (top - bottom);
    const a = (right + left) / (right - left);
    const b = (top + bottom) / (top - bottom);
    let c, d;
    if (coordinateSystem === WebGLCoordinateSystem) {
      c = -(far + near) / (far - near);
      d = -2 * far * near / (far - near);
    } else if (coordinateSystem === WebGPUCoordinateSystem) {
      c = -far / (far - near);
      d = -far * near / (far - near);
    } else {
      throw new Error("THREE.Matrix4.makePerspective(): Invalid coordinate system: " + coordinateSystem);
    }
    te[0] = x;
    te[4] = 0;
    te[8] = a;
    te[12] = 0;
    te[1] = 0;
    te[5] = y;
    te[9] = b;
    te[13] = 0;
    te[2] = 0;
    te[6] = 0;
    te[10] = c;
    te[14] = d;
    te[3] = 0;
    te[7] = 0;
    te[11] = -1;
    te[15] = 0;
    return this;
  }
  makeOrthographic(left, right, top, bottom, near, far, coordinateSystem = WebGLCoordinateSystem) {
    const te = this.elements;
    const w = 1 / (right - left);
    const h2 = 1 / (top - bottom);
    const p2 = 1 / (far - near);
    const x = (right + left) * w;
    const y = (top + bottom) * h2;
    let z2, zInv;
    if (coordinateSystem === WebGLCoordinateSystem) {
      z2 = (far + near) * p2;
      zInv = -2 * p2;
    } else if (coordinateSystem === WebGPUCoordinateSystem) {
      z2 = near * p2;
      zInv = -1 * p2;
    } else {
      throw new Error("THREE.Matrix4.makeOrthographic(): Invalid coordinate system: " + coordinateSystem);
    }
    te[0] = 2 * w;
    te[4] = 0;
    te[8] = 0;
    te[12] = -x;
    te[1] = 0;
    te[5] = 2 * h2;
    te[9] = 0;
    te[13] = -y;
    te[2] = 0;
    te[6] = 0;
    te[10] = zInv;
    te[14] = -z2;
    te[3] = 0;
    te[7] = 0;
    te[11] = 0;
    te[15] = 1;
    return this;
  }
  equals(matrix) {
    const te = this.elements;
    const me2 = matrix.elements;
    for (let i = 0; i < 16; i++) {
      if (te[i] !== me2[i]) return false;
    }
    return true;
  }
  fromArray(array, offset = 0) {
    for (let i = 0; i < 16; i++) {
      this.elements[i] = array[i + offset];
    }
    return this;
  }
  toArray(array = [], offset = 0) {
    const te = this.elements;
    array[offset] = te[0];
    array[offset + 1] = te[1];
    array[offset + 2] = te[2];
    array[offset + 3] = te[3];
    array[offset + 4] = te[4];
    array[offset + 5] = te[5];
    array[offset + 6] = te[6];
    array[offset + 7] = te[7];
    array[offset + 8] = te[8];
    array[offset + 9] = te[9];
    array[offset + 10] = te[10];
    array[offset + 11] = te[11];
    array[offset + 12] = te[12];
    array[offset + 13] = te[13];
    array[offset + 14] = te[14];
    array[offset + 15] = te[15];
    return array;
  }
}
const _v1$5 = /* @__PURE__ */ new Vector3();
const _m1$4 = /* @__PURE__ */ new Matrix4();
const _zero = /* @__PURE__ */ new Vector3(0, 0, 0);
const _one = /* @__PURE__ */ new Vector3(1, 1, 1);
const _x = /* @__PURE__ */ new Vector3();
const _y = /* @__PURE__ */ new Vector3();
const _z = /* @__PURE__ */ new Vector3();
const _matrix$2 = /* @__PURE__ */ new Matrix4();
const _quaternion$3 = /* @__PURE__ */ new Quaternion();
class Euler {
  constructor(x = 0, y = 0, z2 = 0, order = Euler.DEFAULT_ORDER) {
    this.isEuler = true;
    this._x = x;
    this._y = y;
    this._z = z2;
    this._order = order;
  }
  get x() {
    return this._x;
  }
  set x(value) {
    this._x = value;
    this._onChangeCallback();
  }
  get y() {
    return this._y;
  }
  set y(value) {
    this._y = value;
    this._onChangeCallback();
  }
  get z() {
    return this._z;
  }
  set z(value) {
    this._z = value;
    this._onChangeCallback();
  }
  get order() {
    return this._order;
  }
  set order(value) {
    this._order = value;
    this._onChangeCallback();
  }
  set(x, y, z2, order = this._order) {
    this._x = x;
    this._y = y;
    this._z = z2;
    this._order = order;
    this._onChangeCallback();
    return this;
  }
  clone() {
    return new this.constructor(this._x, this._y, this._z, this._order);
  }
  copy(euler) {
    this._x = euler._x;
    this._y = euler._y;
    this._z = euler._z;
    this._order = euler._order;
    this._onChangeCallback();
    return this;
  }
  setFromRotationMatrix(m, order = this._order, update = true) {
    const te = m.elements;
    const m11 = te[0], m12 = te[4], m13 = te[8];
    const m21 = te[1], m22 = te[5], m23 = te[9];
    const m31 = te[2], m32 = te[6], m33 = te[10];
    switch (order) {
      case "XYZ":
        this._y = Math.asin(clamp(m13, -1, 1));
        if (Math.abs(m13) < 0.9999999) {
          this._x = Math.atan2(-m23, m33);
          this._z = Math.atan2(-m12, m11);
        } else {
          this._x = Math.atan2(m32, m22);
          this._z = 0;
        }
        break;
      case "YXZ":
        this._x = Math.asin(-clamp(m23, -1, 1));
        if (Math.abs(m23) < 0.9999999) {
          this._y = Math.atan2(m13, m33);
          this._z = Math.atan2(m21, m22);
        } else {
          this._y = Math.atan2(-m31, m11);
          this._z = 0;
        }
        break;
      case "ZXY":
        this._x = Math.asin(clamp(m32, -1, 1));
        if (Math.abs(m32) < 0.9999999) {
          this._y = Math.atan2(-m31, m33);
          this._z = Math.atan2(-m12, m22);
        } else {
          this._y = 0;
          this._z = Math.atan2(m21, m11);
        }
        break;
      case "ZYX":
        this._y = Math.asin(-clamp(m31, -1, 1));
        if (Math.abs(m31) < 0.9999999) {
          this._x = Math.atan2(m32, m33);
          this._z = Math.atan2(m21, m11);
        } else {
          this._x = 0;
          this._z = Math.atan2(-m12, m22);
        }
        break;
      case "YZX":
        this._z = Math.asin(clamp(m21, -1, 1));
        if (Math.abs(m21) < 0.9999999) {
          this._x = Math.atan2(-m23, m22);
          this._y = Math.atan2(-m31, m11);
        } else {
          this._x = 0;
          this._y = Math.atan2(m13, m33);
        }
        break;
      case "XZY":
        this._z = Math.asin(-clamp(m12, -1, 1));
        if (Math.abs(m12) < 0.9999999) {
          this._x = Math.atan2(m32, m22);
          this._y = Math.atan2(m13, m11);
        } else {
          this._x = Math.atan2(-m23, m33);
          this._y = 0;
        }
        break;
      default:
        console.warn("THREE.Euler: .setFromRotationMatrix() encountered an unknown order: " + order);
    }
    this._order = order;
    if (update === true) this._onChangeCallback();
    return this;
  }
  setFromQuaternion(q2, order, update) {
    _matrix$2.makeRotationFromQuaternion(q2);
    return this.setFromRotationMatrix(_matrix$2, order, update);
  }
  setFromVector3(v, order = this._order) {
    return this.set(v.x, v.y, v.z, order);
  }
  reorder(newOrder) {
    _quaternion$3.setFromEuler(this);
    return this.setFromQuaternion(_quaternion$3, newOrder);
  }
  equals(euler) {
    return euler._x === this._x && euler._y === this._y && euler._z === this._z && euler._order === this._order;
  }
  fromArray(array) {
    this._x = array[0];
    this._y = array[1];
    this._z = array[2];
    if (array[3] !== void 0) this._order = array[3];
    this._onChangeCallback();
    return this;
  }
  toArray(array = [], offset = 0) {
    array[offset] = this._x;
    array[offset + 1] = this._y;
    array[offset + 2] = this._z;
    array[offset + 3] = this._order;
    return array;
  }
  _onChange(callback) {
    this._onChangeCallback = callback;
    return this;
  }
  _onChangeCallback() {
  }
  *[Symbol.iterator]() {
    yield this._x;
    yield this._y;
    yield this._z;
    yield this._order;
  }
}
Euler.DEFAULT_ORDER = "XYZ";
class Layers {
  constructor() {
    this.mask = 1 | 0;
  }
  set(channel) {
    this.mask = (1 << channel | 0) >>> 0;
  }
  enable(channel) {
    this.mask |= 1 << channel | 0;
  }
  enableAll() {
    this.mask = 4294967295 | 0;
  }
  toggle(channel) {
    this.mask ^= 1 << channel | 0;
  }
  disable(channel) {
    this.mask &= ~(1 << channel | 0);
  }
  disableAll() {
    this.mask = 0;
  }
  test(layers) {
    return (this.mask & layers.mask) !== 0;
  }
  isEnabled(channel) {
    return (this.mask & (1 << channel | 0)) !== 0;
  }
}
let _object3DId = 0;
const _v1$4 = /* @__PURE__ */ new Vector3();
const _q1 = /* @__PURE__ */ new Quaternion();
const _m1$3 = /* @__PURE__ */ new Matrix4();
const _target = /* @__PURE__ */ new Vector3();
const _position$3 = /* @__PURE__ */ new Vector3();
const _scale$2 = /* @__PURE__ */ new Vector3();
const _quaternion$2 = /* @__PURE__ */ new Quaternion();
const _xAxis = /* @__PURE__ */ new Vector3(1, 0, 0);
const _yAxis = /* @__PURE__ */ new Vector3(0, 1, 0);
const _zAxis = /* @__PURE__ */ new Vector3(0, 0, 1);
const _addedEvent = { type: "added" };
const _removedEvent = { type: "removed" };
const _childaddedEvent = { type: "childadded", child: null };
const _childremovedEvent = { type: "childremoved", child: null };
class Object3D extends EventDispatcher {
  constructor() {
    super();
    this.isObject3D = true;
    Object.defineProperty(this, "id", { value: _object3DId++ });
    this.uuid = generateUUID();
    this.name = "";
    this.type = "Object3D";
    this.parent = null;
    this.children = [];
    this.up = Object3D.DEFAULT_UP.clone();
    const position = new Vector3();
    const rotation = new Euler();
    const quaternion = new Quaternion();
    const scale = new Vector3(1, 1, 1);
    function onRotationChange() {
      quaternion.setFromEuler(rotation, false);
    }
    function onQuaternionChange() {
      rotation.setFromQuaternion(quaternion, void 0, false);
    }
    rotation._onChange(onRotationChange);
    quaternion._onChange(onQuaternionChange);
    Object.defineProperties(this, {
      position: {
        configurable: true,
        enumerable: true,
        value: position
      },
      rotation: {
        configurable: true,
        enumerable: true,
        value: rotation
      },
      quaternion: {
        configurable: true,
        enumerable: true,
        value: quaternion
      },
      scale: {
        configurable: true,
        enumerable: true,
        value: scale
      },
      modelViewMatrix: {
        value: new Matrix4()
      },
      normalMatrix: {
        value: new Matrix3()
      }
    });
    this.matrix = new Matrix4();
    this.matrixWorld = new Matrix4();
    this.matrixAutoUpdate = Object3D.DEFAULT_MATRIX_AUTO_UPDATE;
    this.matrixWorldAutoUpdate = Object3D.DEFAULT_MATRIX_WORLD_AUTO_UPDATE;
    this.matrixWorldNeedsUpdate = false;
    this.layers = new Layers();
    this.visible = true;
    this.castShadow = false;
    this.receiveShadow = false;
    this.frustumCulled = true;
    this.renderOrder = 0;
    this.animations = [];
    this.userData = {};
  }
  onBeforeShadow() {
  }
  onAfterShadow() {
  }
  onBeforeRender() {
  }
  onAfterRender() {
  }
  applyMatrix4(matrix) {
    if (this.matrixAutoUpdate) this.updateMatrix();
    this.matrix.premultiply(matrix);
    this.matrix.decompose(this.position, this.quaternion, this.scale);
  }
  applyQuaternion(q2) {
    this.quaternion.premultiply(q2);
    return this;
  }
  setRotationFromAxisAngle(axis, angle) {
    this.quaternion.setFromAxisAngle(axis, angle);
  }
  setRotationFromEuler(euler) {
    this.quaternion.setFromEuler(euler, true);
  }
  setRotationFromMatrix(m) {
    this.quaternion.setFromRotationMatrix(m);
  }
  setRotationFromQuaternion(q2) {
    this.quaternion.copy(q2);
  }
  rotateOnAxis(axis, angle) {
    _q1.setFromAxisAngle(axis, angle);
    this.quaternion.multiply(_q1);
    return this;
  }
  rotateOnWorldAxis(axis, angle) {
    _q1.setFromAxisAngle(axis, angle);
    this.quaternion.premultiply(_q1);
    return this;
  }
  rotateX(angle) {
    return this.rotateOnAxis(_xAxis, angle);
  }
  rotateY(angle) {
    return this.rotateOnAxis(_yAxis, angle);
  }
  rotateZ(angle) {
    return this.rotateOnAxis(_zAxis, angle);
  }
  translateOnAxis(axis, distance) {
    _v1$4.copy(axis).applyQuaternion(this.quaternion);
    this.position.add(_v1$4.multiplyScalar(distance));
    return this;
  }
  translateX(distance) {
    return this.translateOnAxis(_xAxis, distance);
  }
  translateY(distance) {
    return this.translateOnAxis(_yAxis, distance);
  }
  translateZ(distance) {
    return this.translateOnAxis(_zAxis, distance);
  }
  localToWorld(vector) {
    this.updateWorldMatrix(true, false);
    return vector.applyMatrix4(this.matrixWorld);
  }
  worldToLocal(vector) {
    this.updateWorldMatrix(true, false);
    return vector.applyMatrix4(_m1$3.copy(this.matrixWorld).invert());
  }
  lookAt(x, y, z2) {
    if (x.isVector3) {
      _target.copy(x);
    } else {
      _target.set(x, y, z2);
    }
    const parent = this.parent;
    this.updateWorldMatrix(true, false);
    _position$3.setFromMatrixPosition(this.matrixWorld);
    if (this.isCamera || this.isLight) {
      _m1$3.lookAt(_position$3, _target, this.up);
    } else {
      _m1$3.lookAt(_target, _position$3, this.up);
    }
    this.quaternion.setFromRotationMatrix(_m1$3);
    if (parent) {
      _m1$3.extractRotation(parent.matrixWorld);
      _q1.setFromRotationMatrix(_m1$3);
      this.quaternion.premultiply(_q1.invert());
    }
  }
  add(object) {
    if (arguments.length > 1) {
      for (let i = 0; i < arguments.length; i++) {
        this.add(arguments[i]);
      }
      return this;
    }
    if (object === this) {
      console.error("THREE.Object3D.add: object can't be added as a child of itself.", object);
      return this;
    }
    if (object && object.isObject3D) {
      object.removeFromParent();
      object.parent = this;
      this.children.push(object);
      object.dispatchEvent(_addedEvent);
      _childaddedEvent.child = object;
      this.dispatchEvent(_childaddedEvent);
      _childaddedEvent.child = null;
    } else {
      console.error("THREE.Object3D.add: object not an instance of THREE.Object3D.", object);
    }
    return this;
  }
  remove(object) {
    if (arguments.length > 1) {
      for (let i = 0; i < arguments.length; i++) {
        this.remove(arguments[i]);
      }
      return this;
    }
    const index = this.children.indexOf(object);
    if (index !== -1) {
      object.parent = null;
      this.children.splice(index, 1);
      object.dispatchEvent(_removedEvent);
      _childremovedEvent.child = object;
      this.dispatchEvent(_childremovedEvent);
      _childremovedEvent.child = null;
    }
    return this;
  }
  removeFromParent() {
    const parent = this.parent;
    if (parent !== null) {
      parent.remove(this);
    }
    return this;
  }
  clear() {
    return this.remove(...this.children);
  }
  attach(object) {
    this.updateWorldMatrix(true, false);
    _m1$3.copy(this.matrixWorld).invert();
    if (object.parent !== null) {
      object.parent.updateWorldMatrix(true, false);
      _m1$3.multiply(object.parent.matrixWorld);
    }
    object.applyMatrix4(_m1$3);
    object.removeFromParent();
    object.parent = this;
    this.children.push(object);
    object.updateWorldMatrix(false, true);
    object.dispatchEvent(_addedEvent);
    _childaddedEvent.child = object;
    this.dispatchEvent(_childaddedEvent);
    _childaddedEvent.child = null;
    return this;
  }
  getObjectById(id2) {
    return this.getObjectByProperty("id", id2);
  }
  getObjectByName(name2) {
    return this.getObjectByProperty("name", name2);
  }
  getObjectByProperty(name2, value) {
    if (this[name2] === value) return this;
    for (let i = 0, l = this.children.length; i < l; i++) {
      const child = this.children[i];
      const object = child.getObjectByProperty(name2, value);
      if (object !== void 0) {
        return object;
      }
    }
    return void 0;
  }
  getObjectsByProperty(name2, value, result = []) {
    if (this[name2] === value) result.push(this);
    const children = this.children;
    for (let i = 0, l = children.length; i < l; i++) {
      children[i].getObjectsByProperty(name2, value, result);
    }
    return result;
  }
  getWorldPosition(target) {
    this.updateWorldMatrix(true, false);
    return target.setFromMatrixPosition(this.matrixWorld);
  }
  getWorldQuaternion(target) {
    this.updateWorldMatrix(true, false);
    this.matrixWorld.decompose(_position$3, target, _scale$2);
    return target;
  }
  getWorldScale(target) {
    this.updateWorldMatrix(true, false);
    this.matrixWorld.decompose(_position$3, _quaternion$2, target);
    return target;
  }
  getWorldDirection(target) {
    this.updateWorldMatrix(true, false);
    const e = this.matrixWorld.elements;
    return target.set(e[8], e[9], e[10]).normalize();
  }
  raycast() {
  }
  traverse(callback) {
    callback(this);
    const children = this.children;
    for (let i = 0, l = children.length; i < l; i++) {
      children[i].traverse(callback);
    }
  }
  traverseVisible(callback) {
    if (this.visible === false) return;
    callback(this);
    const children = this.children;
    for (let i = 0, l = children.length; i < l; i++) {
      children[i].traverseVisible(callback);
    }
  }
  traverseAncestors(callback) {
    const parent = this.parent;
    if (parent !== null) {
      callback(parent);
      parent.traverseAncestors(callback);
    }
  }
  updateMatrix() {
    this.matrix.compose(this.position, this.quaternion, this.scale);
    this.matrixWorldNeedsUpdate = true;
  }
  updateMatrixWorld(force) {
    if (this.matrixAutoUpdate) this.updateMatrix();
    if (this.matrixWorldNeedsUpdate || force) {
      if (this.matrixWorldAutoUpdate === true) {
        if (this.parent === null) {
          this.matrixWorld.copy(this.matrix);
        } else {
          this.matrixWorld.multiplyMatrices(this.parent.matrixWorld, this.matrix);
        }
      }
      this.matrixWorldNeedsUpdate = false;
      force = true;
    }
    const children = this.children;
    for (let i = 0, l = children.length; i < l; i++) {
      const child = children[i];
      child.updateMatrixWorld(force);
    }
  }
  updateWorldMatrix(updateParents, updateChildren) {
    const parent = this.parent;
    if (updateParents === true && parent !== null) {
      parent.updateWorldMatrix(true, false);
    }
    if (this.matrixAutoUpdate) this.updateMatrix();
    if (this.matrixWorldAutoUpdate === true) {
      if (this.parent === null) {
        this.matrixWorld.copy(this.matrix);
      } else {
        this.matrixWorld.multiplyMatrices(this.parent.matrixWorld, this.matrix);
      }
    }
    if (updateChildren === true) {
      const children = this.children;
      for (let i = 0, l = children.length; i < l; i++) {
        const child = children[i];
        child.updateWorldMatrix(false, true);
      }
    }
  }
  toJSON(meta) {
    const isRootObject = meta === void 0 || typeof meta === "string";
    const output = {};
    if (isRootObject) {
      meta = {
        geometries: {},
        materials: {},
        textures: {},
        images: {},
        shapes: {},
        skeletons: {},
        animations: {},
        nodes: {}
      };
      output.metadata = {
        version: 4.6,
        type: "Object",
        generator: "Object3D.toJSON"
      };
    }
    const object = {};
    object.uuid = this.uuid;
    object.type = this.type;
    if (this.name !== "") object.name = this.name;
    if (this.castShadow === true) object.castShadow = true;
    if (this.receiveShadow === true) object.receiveShadow = true;
    if (this.visible === false) object.visible = false;
    if (this.frustumCulled === false) object.frustumCulled = false;
    if (this.renderOrder !== 0) object.renderOrder = this.renderOrder;
    if (Object.keys(this.userData).length > 0) object.userData = this.userData;
    object.layers = this.layers.mask;
    object.matrix = this.matrix.toArray();
    object.up = this.up.toArray();
    if (this.matrixAutoUpdate === false) object.matrixAutoUpdate = false;
    if (this.isInstancedMesh) {
      object.type = "InstancedMesh";
      object.count = this.count;
      object.instanceMatrix = this.instanceMatrix.toJSON();
      if (this.instanceColor !== null) object.instanceColor = this.instanceColor.toJSON();
    }
    if (this.isBatchedMesh) {
      object.type = "BatchedMesh";
      object.perObjectFrustumCulled = this.perObjectFrustumCulled;
      object.sortObjects = this.sortObjects;
      object.drawRanges = this._drawRanges;
      object.reservedRanges = this._reservedRanges;
      object.visibility = this._visibility;
      object.active = this._active;
      object.bounds = this._bounds.map((bound) => ({
        boxInitialized: bound.boxInitialized,
        boxMin: bound.box.min.toArray(),
        boxMax: bound.box.max.toArray(),
        sphereInitialized: bound.sphereInitialized,
        sphereRadius: bound.sphere.radius,
        sphereCenter: bound.sphere.center.toArray()
      }));
      object.maxInstanceCount = this._maxInstanceCount;
      object.maxVertexCount = this._maxVertexCount;
      object.maxIndexCount = this._maxIndexCount;
      object.geometryInitialized = this._geometryInitialized;
      object.geometryCount = this._geometryCount;
      object.matricesTexture = this._matricesTexture.toJSON(meta);
      if (this._colorsTexture !== null) object.colorsTexture = this._colorsTexture.toJSON(meta);
      if (this.boundingSphere !== null) {
        object.boundingSphere = {
          center: object.boundingSphere.center.toArray(),
          radius: object.boundingSphere.radius
        };
      }
      if (this.boundingBox !== null) {
        object.boundingBox = {
          min: object.boundingBox.min.toArray(),
          max: object.boundingBox.max.toArray()
        };
      }
    }
    function serialize(library, element) {
      if (library[element.uuid] === void 0) {
        library[element.uuid] = element.toJSON(meta);
      }
      return element.uuid;
    }
    if (this.isScene) {
      if (this.background) {
        if (this.background.isColor) {
          object.background = this.background.toJSON();
        } else if (this.background.isTexture) {
          object.background = this.background.toJSON(meta).uuid;
        }
      }
      if (this.environment && this.environment.isTexture && this.environment.isRenderTargetTexture !== true) {
        object.environment = this.environment.toJSON(meta).uuid;
      }
    } else if (this.isMesh || this.isLine || this.isPoints) {
      object.geometry = serialize(meta.geometries, this.geometry);
      const parameters = this.geometry.parameters;
      if (parameters !== void 0 && parameters.shapes !== void 0) {
        const shapes = parameters.shapes;
        if (Array.isArray(shapes)) {
          for (let i = 0, l = shapes.length; i < l; i++) {
            const shape = shapes[i];
            serialize(meta.shapes, shape);
          }
        } else {
          serialize(meta.shapes, shapes);
        }
      }
    }
    if (this.isSkinnedMesh) {
      object.bindMode = this.bindMode;
      object.bindMatrix = this.bindMatrix.toArray();
      if (this.skeleton !== void 0) {
        serialize(meta.skeletons, this.skeleton);
        object.skeleton = this.skeleton.uuid;
      }
    }
    if (this.material !== void 0) {
      if (Array.isArray(this.material)) {
        const uuids = [];
        for (let i = 0, l = this.material.length; i < l; i++) {
          uuids.push(serialize(meta.materials, this.material[i]));
        }
        object.material = uuids;
      } else {
        object.material = serialize(meta.materials, this.material);
      }
    }
    if (this.children.length > 0) {
      object.children = [];
      for (let i = 0; i < this.children.length; i++) {
        object.children.push(this.children[i].toJSON(meta).object);
      }
    }
    if (this.animations.length > 0) {
      object.animations = [];
      for (let i = 0; i < this.animations.length; i++) {
        const animation = this.animations[i];
        object.animations.push(serialize(meta.animations, animation));
      }
    }
    if (isRootObject) {
      const geometries = extractFromCache(meta.geometries);
      const materials = extractFromCache(meta.materials);
      const textures = extractFromCache(meta.textures);
      const images = extractFromCache(meta.images);
      const shapes = extractFromCache(meta.shapes);
      const skeletons = extractFromCache(meta.skeletons);
      const animations = extractFromCache(meta.animations);
      const nodes = extractFromCache(meta.nodes);
      if (geometries.length > 0) output.geometries = geometries;
      if (materials.length > 0) output.materials = materials;
      if (textures.length > 0) output.textures = textures;
      if (images.length > 0) output.images = images;
      if (shapes.length > 0) output.shapes = shapes;
      if (skeletons.length > 0) output.skeletons = skeletons;
      if (animations.length > 0) output.animations = animations;
      if (nodes.length > 0) output.nodes = nodes;
    }
    output.object = object;
    return output;
    function extractFromCache(cache) {
      const values = [];
      for (const key in cache) {
        const data = cache[key];
        delete data.metadata;
        values.push(data);
      }
      return values;
    }
  }
  clone(recursive) {
    return new this.constructor().copy(this, recursive);
  }
  copy(source, recursive = true) {
    this.name = source.name;
    this.up.copy(source.up);
    this.position.copy(source.position);
    this.rotation.order = source.rotation.order;
    this.quaternion.copy(source.quaternion);
    this.scale.copy(source.scale);
    this.matrix.copy(source.matrix);
    this.matrixWorld.copy(source.matrixWorld);
    this.matrixAutoUpdate = source.matrixAutoUpdate;
    this.matrixWorldAutoUpdate = source.matrixWorldAutoUpdate;
    this.matrixWorldNeedsUpdate = source.matrixWorldNeedsUpdate;
    this.layers.mask = source.layers.mask;
    this.visible = source.visible;
    this.castShadow = source.castShadow;
    this.receiveShadow = source.receiveShadow;
    this.frustumCulled = source.frustumCulled;
    this.renderOrder = source.renderOrder;
    this.animations = source.animations.slice();
    this.userData = JSON.parse(JSON.stringify(source.userData));
    if (recursive === true) {
      for (let i = 0; i < source.children.length; i++) {
        const child = source.children[i];
        this.add(child.clone());
      }
    }
    return this;
  }
}
Object3D.DEFAULT_UP = /* @__PURE__ */ new Vector3(0, 1, 0);
Object3D.DEFAULT_MATRIX_AUTO_UPDATE = true;
Object3D.DEFAULT_MATRIX_WORLD_AUTO_UPDATE = true;
const _v0$2 = /* @__PURE__ */ new Vector3();
const _v1$3 = /* @__PURE__ */ new Vector3();
const _v2$2 = /* @__PURE__ */ new Vector3();
const _v3$2 = /* @__PURE__ */ new Vector3();
const _vab = /* @__PURE__ */ new Vector3();
const _vac = /* @__PURE__ */ new Vector3();
const _vbc = /* @__PURE__ */ new Vector3();
const _vap = /* @__PURE__ */ new Vector3();
const _vbp = /* @__PURE__ */ new Vector3();
const _vcp = /* @__PURE__ */ new Vector3();
const _v40 = /* @__PURE__ */ new Vector4();
const _v41 = /* @__PURE__ */ new Vector4();
const _v42 = /* @__PURE__ */ new Vector4();
class Triangle {
  constructor(a = new Vector3(), b = new Vector3(), c = new Vector3()) {
    this.a = a;
    this.b = b;
    this.c = c;
  }
  static getNormal(a, b, c, target) {
    target.subVectors(c, b);
    _v0$2.subVectors(a, b);
    target.cross(_v0$2);
    const targetLengthSq = target.lengthSq();
    if (targetLengthSq > 0) {
      return target.multiplyScalar(1 / Math.sqrt(targetLengthSq));
    }
    return target.set(0, 0, 0);
  }
  // static/instance method to calculate barycentric coordinates
  // based on: http://www.blackpawn.com/texts/pointinpoly/default.html
  static getBarycoord(point, a, b, c, target) {
    _v0$2.subVectors(c, a);
    _v1$3.subVectors(b, a);
    _v2$2.subVectors(point, a);
    const dot00 = _v0$2.dot(_v0$2);
    const dot01 = _v0$2.dot(_v1$3);
    const dot02 = _v0$2.dot(_v2$2);
    const dot11 = _v1$3.dot(_v1$3);
    const dot12 = _v1$3.dot(_v2$2);
    const denom = dot00 * dot11 - dot01 * dot01;
    if (denom === 0) {
      target.set(0, 0, 0);
      return null;
    }
    const invDenom = 1 / denom;
    const u = (dot11 * dot02 - dot01 * dot12) * invDenom;
    const v = (dot00 * dot12 - dot01 * dot02) * invDenom;
    return target.set(1 - u - v, v, u);
  }
  static containsPoint(point, a, b, c) {
    if (this.getBarycoord(point, a, b, c, _v3$2) === null) {
      return false;
    }
    return _v3$2.x >= 0 && _v3$2.y >= 0 && _v3$2.x + _v3$2.y <= 1;
  }
  static getInterpolation(point, p1, p2, p3, v1, v2, v3, target) {
    if (this.getBarycoord(point, p1, p2, p3, _v3$2) === null) {
      target.x = 0;
      target.y = 0;
      if ("z" in target) target.z = 0;
      if ("w" in target) target.w = 0;
      return null;
    }
    target.setScalar(0);
    target.addScaledVector(v1, _v3$2.x);
    target.addScaledVector(v2, _v3$2.y);
    target.addScaledVector(v3, _v3$2.z);
    return target;
  }
  static getInterpolatedAttribute(attr, i1, i2, i3, barycoord, target) {
    _v40.setScalar(0);
    _v41.setScalar(0);
    _v42.setScalar(0);
    _v40.fromBufferAttribute(attr, i1);
    _v41.fromBufferAttribute(attr, i2);
    _v42.fromBufferAttribute(attr, i3);
    target.setScalar(0);
    target.addScaledVector(_v40, barycoord.x);
    target.addScaledVector(_v41, barycoord.y);
    target.addScaledVector(_v42, barycoord.z);
    return target;
  }
  static isFrontFacing(a, b, c, direction) {
    _v0$2.subVectors(c, b);
    _v1$3.subVectors(a, b);
    return _v0$2.cross(_v1$3).dot(direction) < 0 ? true : false;
  }
  set(a, b, c) {
    this.a.copy(a);
    this.b.copy(b);
    this.c.copy(c);
    return this;
  }
  setFromPointsAndIndices(points, i0, i1, i2) {
    this.a.copy(points[i0]);
    this.b.copy(points[i1]);
    this.c.copy(points[i2]);
    return this;
  }
  setFromAttributeAndIndices(attribute, i0, i1, i2) {
    this.a.fromBufferAttribute(attribute, i0);
    this.b.fromBufferAttribute(attribute, i1);
    this.c.fromBufferAttribute(attribute, i2);
    return this;
  }
  clone() {
    return new this.constructor().copy(this);
  }
  copy(triangle) {
    this.a.copy(triangle.a);
    this.b.copy(triangle.b);
    this.c.copy(triangle.c);
    return this;
  }
  getArea() {
    _v0$2.subVectors(this.c, this.b);
    _v1$3.subVectors(this.a, this.b);
    return _v0$2.cross(_v1$3).length() * 0.5;
  }
  getMidpoint(target) {
    return target.addVectors(this.a, this.b).add(this.c).multiplyScalar(1 / 3);
  }
  getNormal(target) {
    return Triangle.getNormal(this.a, this.b, this.c, target);
  }
  getPlane(target) {
    return target.setFromCoplanarPoints(this.a, this.b, this.c);
  }
  getBarycoord(point, target) {
    return Triangle.getBarycoord(point, this.a, this.b, this.c, target);
  }
  getInterpolation(point, v1, v2, v3, target) {
    return Triangle.getInterpolation(point, this.a, this.b, this.c, v1, v2, v3, target);
  }
  containsPoint(point) {
    return Triangle.containsPoint(point, this.a, this.b, this.c);
  }
  isFrontFacing(direction) {
    return Triangle.isFrontFacing(this.a, this.b, this.c, direction);
  }
  intersectsBox(box) {
    return box.intersectsTriangle(this);
  }
  closestPointToPoint(p2, target) {
    const a = this.a, b = this.b, c = this.c;
    let v, w;
    _vab.subVectors(b, a);
    _vac.subVectors(c, a);
    _vap.subVectors(p2, a);
    const d1 = _vab.dot(_vap);
    const d2 = _vac.dot(_vap);
    if (d1 <= 0 && d2 <= 0) {
      return target.copy(a);
    }
    _vbp.subVectors(p2, b);
    const d3 = _vab.dot(_vbp);
    const d4 = _vac.dot(_vbp);
    if (d3 >= 0 && d4 <= d3) {
      return target.copy(b);
    }
    const vc2 = d1 * d4 - d3 * d2;
    if (vc2 <= 0 && d1 >= 0 && d3 <= 0) {
      v = d1 / (d1 - d3);
      return target.copy(a).addScaledVector(_vab, v);
    }
    _vcp.subVectors(p2, c);
    const d5 = _vab.dot(_vcp);
    const d6 = _vac.dot(_vcp);
    if (d6 >= 0 && d5 <= d6) {
      return target.copy(c);
    }
    const vb2 = d5 * d2 - d1 * d6;
    if (vb2 <= 0 && d2 >= 0 && d6 <= 0) {
      w = d2 / (d2 - d6);
      return target.copy(a).addScaledVector(_vac, w);
    }
    const va = d3 * d6 - d5 * d4;
    if (va <= 0 && d4 - d3 >= 0 && d5 - d6 >= 0) {
      _vbc.subVectors(c, b);
      w = (d4 - d3) / (d4 - d3 + (d5 - d6));
      return target.copy(b).addScaledVector(_vbc, w);
    }
    const denom = 1 / (va + vb2 + vc2);
    v = vb2 * denom;
    w = vc2 * denom;
    return target.copy(a).addScaledVector(_vab, v).addScaledVector(_vac, w);
  }
  equals(triangle) {
    return triangle.a.equals(this.a) && triangle.b.equals(this.b) && triangle.c.equals(this.c);
  }
}
const _colorKeywords = {
  "aliceblue": 15792383,
  "antiquewhite": 16444375,
  "aqua": 65535,
  "aquamarine": 8388564,
  "azure": 15794175,
  "beige": 16119260,
  "bisque": 16770244,
  "black": 0,
  "blanchedalmond": 16772045,
  "blue": 255,
  "blueviolet": 9055202,
  "brown": 10824234,
  "burlywood": 14596231,
  "cadetblue": 6266528,
  "chartreuse": 8388352,
  "chocolate": 13789470,
  "coral": 16744272,
  "cornflowerblue": 6591981,
  "cornsilk": 16775388,
  "crimson": 14423100,
  "cyan": 65535,
  "darkblue": 139,
  "darkcyan": 35723,
  "darkgoldenrod": 12092939,
  "darkgray": 11119017,
  "darkgreen": 25600,
  "darkgrey": 11119017,
  "darkkhaki": 12433259,
  "darkmagenta": 9109643,
  "darkolivegreen": 5597999,
  "darkorange": 16747520,
  "darkorchid": 10040012,
  "darkred": 9109504,
  "darksalmon": 15308410,
  "darkseagreen": 9419919,
  "darkslateblue": 4734347,
  "darkslategray": 3100495,
  "darkslategrey": 3100495,
  "darkturquoise": 52945,
  "darkviolet": 9699539,
  "deeppink": 16716947,
  "deepskyblue": 49151,
  "dimgray": 6908265,
  "dimgrey": 6908265,
  "dodgerblue": 2003199,
  "firebrick": 11674146,
  "floralwhite": 16775920,
  "forestgreen": 2263842,
  "fuchsia": 16711935,
  "gainsboro": 14474460,
  "ghostwhite": 16316671,
  "gold": 16766720,
  "goldenrod": 14329120,
  "gray": 8421504,
  "green": 32768,
  "greenyellow": 11403055,
  "grey": 8421504,
  "honeydew": 15794160,
  "hotpink": 16738740,
  "indianred": 13458524,
  "indigo": 4915330,
  "ivory": 16777200,
  "khaki": 15787660,
  "lavender": 15132410,
  "lavenderblush": 16773365,
  "lawngreen": 8190976,
  "lemonchiffon": 16775885,
  "lightblue": 11393254,
  "lightcoral": 15761536,
  "lightcyan": 14745599,
  "lightgoldenrodyellow": 16448210,
  "lightgray": 13882323,
  "lightgreen": 9498256,
  "lightgrey": 13882323,
  "lightpink": 16758465,
  "lightsalmon": 16752762,
  "lightseagreen": 2142890,
  "lightskyblue": 8900346,
  "lightslategray": 7833753,
  "lightslategrey": 7833753,
  "lightsteelblue": 11584734,
  "lightyellow": 16777184,
  "lime": 65280,
  "limegreen": 3329330,
  "linen": 16445670,
  "magenta": 16711935,
  "maroon": 8388608,
  "mediumaquamarine": 6737322,
  "mediumblue": 205,
  "mediumorchid": 12211667,
  "mediumpurple": 9662683,
  "mediumseagreen": 3978097,
  "mediumslateblue": 8087790,
  "mediumspringgreen": 64154,
  "mediumturquoise": 4772300,
  "mediumvioletred": 13047173,
  "midnightblue": 1644912,
  "mintcream": 16121850,
  "mistyrose": 16770273,
  "moccasin": 16770229,
  "navajowhite": 16768685,
  "navy": 128,
  "oldlace": 16643558,
  "olive": 8421376,
  "olivedrab": 7048739,
  "orange": 16753920,
  "orangered": 16729344,
  "orchid": 14315734,
  "palegoldenrod": 15657130,
  "palegreen": 10025880,
  "paleturquoise": 11529966,
  "palevioletred": 14381203,
  "papayawhip": 16773077,
  "peachpuff": 16767673,
  "peru": 13468991,
  "pink": 16761035,
  "plum": 14524637,
  "powderblue": 11591910,
  "purple": 8388736,
  "rebeccapurple": 6697881,
  "red": 16711680,
  "rosybrown": 12357519,
  "royalblue": 4286945,
  "saddlebrown": 9127187,
  "salmon": 16416882,
  "sandybrown": 16032864,
  "seagreen": 3050327,
  "seashell": 16774638,
  "sienna": 10506797,
  "silver": 12632256,
  "skyblue": 8900331,
  "slateblue": 6970061,
  "slategray": 7372944,
  "slategrey": 7372944,
  "snow": 16775930,
  "springgreen": 65407,
  "steelblue": 4620980,
  "tan": 13808780,
  "teal": 32896,
  "thistle": 14204888,
  "tomato": 16737095,
  "turquoise": 4251856,
  "violet": 15631086,
  "wheat": 16113331,
  "white": 16777215,
  "whitesmoke": 16119285,
  "yellow": 16776960,
  "yellowgreen": 10145074
};
const _hslA = { h: 0, s: 0, l: 0 };
const _hslB = { h: 0, s: 0, l: 0 };
function hue2rgb(p2, q2, t) {
  if (t < 0) t += 1;
  if (t > 1) t -= 1;
  if (t < 1 / 6) return p2 + (q2 - p2) * 6 * t;
  if (t < 1 / 2) return q2;
  if (t < 2 / 3) return p2 + (q2 - p2) * 6 * (2 / 3 - t);
  return p2;
}
class Color {
  constructor(r, g, b) {
    this.isColor = true;
    this.r = 1;
    this.g = 1;
    this.b = 1;
    return this.set(r, g, b);
  }
  set(r, g, b) {
    if (g === void 0 && b === void 0) {
      const value = r;
      if (value && value.isColor) {
        this.copy(value);
      } else if (typeof value === "number") {
        this.setHex(value);
      } else if (typeof value === "string") {
        this.setStyle(value);
      }
    } else {
      this.setRGB(r, g, b);
    }
    return this;
  }
  setScalar(scalar) {
    this.r = scalar;
    this.g = scalar;
    this.b = scalar;
    return this;
  }
  setHex(hex, colorSpace = SRGBColorSpace) {
    hex = Math.floor(hex);
    this.r = (hex >> 16 & 255) / 255;
    this.g = (hex >> 8 & 255) / 255;
    this.b = (hex & 255) / 255;
    ColorManagement.toWorkingColorSpace(this, colorSpace);
    return this;
  }
  setRGB(r, g, b, colorSpace = ColorManagement.workingColorSpace) {
    this.r = r;
    this.g = g;
    this.b = b;
    ColorManagement.toWorkingColorSpace(this, colorSpace);
    return this;
  }
  setHSL(h2, s, l, colorSpace = ColorManagement.workingColorSpace) {
    h2 = euclideanModulo(h2, 1);
    s = clamp(s, 0, 1);
    l = clamp(l, 0, 1);
    if (s === 0) {
      this.r = this.g = this.b = l;
    } else {
      const p2 = l <= 0.5 ? l * (1 + s) : l + s - l * s;
      const q2 = 2 * l - p2;
      this.r = hue2rgb(q2, p2, h2 + 1 / 3);
      this.g = hue2rgb(q2, p2, h2);
      this.b = hue2rgb(q2, p2, h2 - 1 / 3);
    }
    ColorManagement.toWorkingColorSpace(this, colorSpace);
    return this;
  }
  setStyle(style, colorSpace = SRGBColorSpace) {
    function handleAlpha(string) {
      if (string === void 0) return;
      if (parseFloat(string) < 1) {
        console.warn("THREE.Color: Alpha component of " + style + " will be ignored.");
      }
    }
    let m;
    if (m = /^(\w+)\(([^\)]*)\)/.exec(style)) {
      let color;
      const name2 = m[1];
      const components = m[2];
      switch (name2) {
        case "rgb":
        case "rgba":
          if (color = /^\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(components)) {
            handleAlpha(color[4]);
            return this.setRGB(
              Math.min(255, parseInt(color[1], 10)) / 255,
              Math.min(255, parseInt(color[2], 10)) / 255,
              Math.min(255, parseInt(color[3], 10)) / 255,
              colorSpace
            );
          }
          if (color = /^\s*(\d+)\%\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(components)) {
            handleAlpha(color[4]);
            return this.setRGB(
              Math.min(100, parseInt(color[1], 10)) / 100,
              Math.min(100, parseInt(color[2], 10)) / 100,
              Math.min(100, parseInt(color[3], 10)) / 100,
              colorSpace
            );
          }
          break;
        case "hsl":
        case "hsla":
          if (color = /^\s*(\d*\.?\d+)\s*,\s*(\d*\.?\d+)\%\s*,\s*(\d*\.?\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(components)) {
            handleAlpha(color[4]);
            return this.setHSL(
              parseFloat(color[1]) / 360,
              parseFloat(color[2]) / 100,
              parseFloat(color[3]) / 100,
              colorSpace
            );
          }
          break;
        default:
          console.warn("THREE.Color: Unknown color model " + style);
      }
    } else if (m = /^\#([A-Fa-f\d]+)$/.exec(style)) {
      const hex = m[1];
      const size2 = hex.length;
      if (size2 === 3) {
        return this.setRGB(
          parseInt(hex.charAt(0), 16) / 15,
          parseInt(hex.charAt(1), 16) / 15,
          parseInt(hex.charAt(2), 16) / 15,
          colorSpace
        );
      } else if (size2 === 6) {
        return this.setHex(parseInt(hex, 16), colorSpace);
      } else {
        console.warn("THREE.Color: Invalid hex color " + style);
      }
    } else if (style && style.length > 0) {
      return this.setColorName(style, colorSpace);
    }
    return this;
  }
  setColorName(style, colorSpace = SRGBColorSpace) {
    const hex = _colorKeywords[style.toLowerCase()];
    if (hex !== void 0) {
      this.setHex(hex, colorSpace);
    } else {
      console.warn("THREE.Color: Unknown color " + style);
    }
    return this;
  }
  clone() {
    return new this.constructor(this.r, this.g, this.b);
  }
  copy(color) {
    this.r = color.r;
    this.g = color.g;
    this.b = color.b;
    return this;
  }
  copySRGBToLinear(color) {
    this.r = SRGBToLinear(color.r);
    this.g = SRGBToLinear(color.g);
    this.b = SRGBToLinear(color.b);
    return this;
  }
  copyLinearToSRGB(color) {
    this.r = LinearToSRGB(color.r);
    this.g = LinearToSRGB(color.g);
    this.b = LinearToSRGB(color.b);
    return this;
  }
  convertSRGBToLinear() {
    this.copySRGBToLinear(this);
    return this;
  }
  convertLinearToSRGB() {
    this.copyLinearToSRGB(this);
    return this;
  }
  getHex(colorSpace = SRGBColorSpace) {
    ColorManagement.fromWorkingColorSpace(_color.copy(this), colorSpace);
    return Math.round(clamp(_color.r * 255, 0, 255)) * 65536 + Math.round(clamp(_color.g * 255, 0, 255)) * 256 + Math.round(clamp(_color.b * 255, 0, 255));
  }
  getHexString(colorSpace = SRGBColorSpace) {
    return ("000000" + this.getHex(colorSpace).toString(16)).slice(-6);
  }
  getHSL(target, colorSpace = ColorManagement.workingColorSpace) {
    ColorManagement.fromWorkingColorSpace(_color.copy(this), colorSpace);
    const r = _color.r, g = _color.g, b = _color.b;
    const max = Math.max(r, g, b);
    const min = Math.min(r, g, b);
    let hue, saturation;
    const lightness = (min + max) / 2;
    if (min === max) {
      hue = 0;
      saturation = 0;
    } else {
      const delta = max - min;
      saturation = lightness <= 0.5 ? delta / (max + min) : delta / (2 - max - min);
      switch (max) {
        case r:
          hue = (g - b) / delta + (g < b ? 6 : 0);
          break;
        case g:
          hue = (b - r) / delta + 2;
          break;
        case b:
          hue = (r - g) / delta + 4;
          break;
      }
      hue /= 6;
    }
    target.h = hue;
    target.s = saturation;
    target.l = lightness;
    return target;
  }
  getRGB(target, colorSpace = ColorManagement.workingColorSpace) {
    ColorManagement.fromWorkingColorSpace(_color.copy(this), colorSpace);
    target.r = _color.r;
    target.g = _color.g;
    target.b = _color.b;
    return target;
  }
  getStyle(colorSpace = SRGBColorSpace) {
    ColorManagement.fromWorkingColorSpace(_color.copy(this), colorSpace);
    const r = _color.r, g = _color.g, b = _color.b;
    if (colorSpace !== SRGBColorSpace) {
      return `color(${colorSpace} ${r.toFixed(3)} ${g.toFixed(3)} ${b.toFixed(3)})`;
    }
    return `rgb(${Math.round(r * 255)},${Math.round(g * 255)},${Math.round(b * 255)})`;
  }
  offsetHSL(h2, s, l) {
    this.getHSL(_hslA);
    return this.setHSL(_hslA.h + h2, _hslA.s + s, _hslA.l + l);
  }
  add(color) {
    this.r += color.r;
    this.g += color.g;
    this.b += color.b;
    return this;
  }
  addColors(color1, color2) {
    this.r = color1.r + color2.r;
    this.g = color1.g + color2.g;
    this.b = color1.b + color2.b;
    return this;
  }
  addScalar(s) {
    this.r += s;
    this.g += s;
    this.b += s;
    return this;
  }
  sub(color) {
    this.r = Math.max(0, this.r - color.r);
    this.g = Math.max(0, this.g - color.g);
    this.b = Math.max(0, this.b - color.b);
    return this;
  }
  multiply(color) {
    this.r *= color.r;
    this.g *= color.g;
    this.b *= color.b;
    return this;
  }
  multiplyScalar(s) {
    this.r *= s;
    this.g *= s;
    this.b *= s;
    return this;
  }
  lerp(color, alpha) {
    this.r += (color.r - this.r) * alpha;
    this.g += (color.g - this.g) * alpha;
    this.b += (color.b - this.b) * alpha;
    return this;
  }
  lerpColors(color1, color2, alpha) {
    this.r = color1.r + (color2.r - color1.r) * alpha;
    this.g = color1.g + (color2.g - color1.g) * alpha;
    this.b = color1.b + (color2.b - color1.b) * alpha;
    return this;
  }
  lerpHSL(color, alpha) {
    this.getHSL(_hslA);
    color.getHSL(_hslB);
    const h2 = lerp(_hslA.h, _hslB.h, alpha);
    const s = lerp(_hslA.s, _hslB.s, alpha);
    const l = lerp(_hslA.l, _hslB.l, alpha);
    this.setHSL(h2, s, l);
    return this;
  }
  setFromVector3(v) {
    this.r = v.x;
    this.g = v.y;
    this.b = v.z;
    return this;
  }
  applyMatrix3(m) {
    const r = this.r, g = this.g, b = this.b;
    const e = m.elements;
    this.r = e[0] * r + e[3] * g + e[6] * b;
    this.g = e[1] * r + e[4] * g + e[7] * b;
    this.b = e[2] * r + e[5] * g + e[8] * b;
    return this;
  }
  equals(c) {
    return c.r === this.r && c.g === this.g && c.b === this.b;
  }
  fromArray(array, offset = 0) {
    this.r = array[offset];
    this.g = array[offset + 1];
    this.b = array[offset + 2];
    return this;
  }
  toArray(array = [], offset = 0) {
    array[offset] = this.r;
    array[offset + 1] = this.g;
    array[offset + 2] = this.b;
    return array;
  }
  fromBufferAttribute(attribute, index) {
    this.r = attribute.getX(index);
    this.g = attribute.getY(index);
    this.b = attribute.getZ(index);
    return this;
  }
  toJSON() {
    return this.getHex();
  }
  *[Symbol.iterator]() {
    yield this.r;
    yield this.g;
    yield this.b;
  }
}
const _color = /* @__PURE__ */ new Color();
Color.NAMES = _colorKeywords;
let _materialId = 0;
class Material extends EventDispatcher {
  constructor() {
    super();
    this.isMaterial = true;
    Object.defineProperty(this, "id", { value: _materialId++ });
    this.uuid = generateUUID();
    this.name = "";
    this.type = "Material";
    this.blending = NormalBlending;
    this.side = FrontSide;
    this.vertexColors = false;
    this.opacity = 1;
    this.transparent = false;
    this.alphaHash = false;
    this.blendSrc = SrcAlphaFactor;
    this.blendDst = OneMinusSrcAlphaFactor;
    this.blendEquation = AddEquation;
    this.blendSrcAlpha = null;
    this.blendDstAlpha = null;
    this.blendEquationAlpha = null;
    this.blendColor = new Color(0, 0, 0);
    this.blendAlpha = 0;
    this.depthFunc = LessEqualDepth;
    this.depthTest = true;
    this.depthWrite = true;
    this.stencilWriteMask = 255;
    this.stencilFunc = AlwaysStencilFunc;
    this.stencilRef = 0;
    this.stencilFuncMask = 255;
    this.stencilFail = KeepStencilOp;
    this.stencilZFail = KeepStencilOp;
    this.stencilZPass = KeepStencilOp;
    this.stencilWrite = false;
    this.clippingPlanes = null;
    this.clipIntersection = false;
    this.clipShadows = false;
    this.shadowSide = null;
    this.colorWrite = true;
    this.precision = null;
    this.polygonOffset = false;
    this.polygonOffsetFactor = 0;
    this.polygonOffsetUnits = 0;
    this.dithering = false;
    this.alphaToCoverage = false;
    this.premultipliedAlpha = false;
    this.forceSinglePass = false;
    this.visible = true;
    this.toneMapped = true;
    this.userData = {};
    this.version = 0;
    this._alphaTest = 0;
  }
  get alphaTest() {
    return this._alphaTest;
  }
  set alphaTest(value) {
    if (this._alphaTest > 0 !== value > 0) {
      this.version++;
    }
    this._alphaTest = value;
  }
  // onBeforeRender and onBeforeCompile only supported in WebGLRenderer
  onBeforeRender() {
  }
  onBeforeCompile() {
  }
  customProgramCacheKey() {
    return this.onBeforeCompile.toString();
  }
  setValues(values) {
    if (values === void 0) return;
    for (const key in values) {
      const newValue = values[key];
      if (newValue === void 0) {
        console.warn(`THREE.Material: parameter '${key}' has value of undefined.`);
        continue;
      }
      const currentValue = this[key];
      if (currentValue === void 0) {
        console.warn(`THREE.Material: '${key}' is not a property of THREE.${this.type}.`);
        continue;
      }
      if (currentValue && currentValue.isColor) {
        currentValue.set(newValue);
      } else if (currentValue && currentValue.isVector3 && (newValue && newValue.isVector3)) {
        currentValue.copy(newValue);
      } else {
        this[key] = newValue;
      }
    }
  }
  toJSON(meta) {
    const isRootObject = meta === void 0 || typeof meta === "string";
    if (isRootObject) {
      meta = {
        textures: {},
        images: {}
      };
    }
    const data = {
      metadata: {
        version: 4.6,
        type: "Material",
        generator: "Material.toJSON"
      }
    };
    data.uuid = this.uuid;
    data.type = this.type;
    if (this.name !== "") data.name = this.name;
    if (this.color && this.color.isColor) data.color = this.color.getHex();
    if (this.roughness !== void 0) data.roughness = this.roughness;
    if (this.metalness !== void 0) data.metalness = this.metalness;
    if (this.sheen !== void 0) data.sheen = this.sheen;
    if (this.sheenColor && this.sheenColor.isColor) data.sheenColor = this.sheenColor.getHex();
    if (this.sheenRoughness !== void 0) data.sheenRoughness = this.sheenRoughness;
    if (this.emissive && this.emissive.isColor) data.emissive = this.emissive.getHex();
    if (this.emissiveIntensity !== void 0 && this.emissiveIntensity !== 1) data.emissiveIntensity = this.emissiveIntensity;
    if (this.specular && this.specular.isColor) data.specular = this.specular.getHex();
    if (this.specularIntensity !== void 0) data.specularIntensity = this.specularIntensity;
    if (this.specularColor && this.specularColor.isColor) data.specularColor = this.specularColor.getHex();
    if (this.shininess !== void 0) data.shininess = this.shininess;
    if (this.clearcoat !== void 0) data.clearcoat = this.clearcoat;
    if (this.clearcoatRoughness !== void 0) data.clearcoatRoughness = this.clearcoatRoughness;
    if (this.clearcoatMap && this.clearcoatMap.isTexture) {
      data.clearcoatMap = this.clearcoatMap.toJSON(meta).uuid;
    }
    if (this.clearcoatRoughnessMap && this.clearcoatRoughnessMap.isTexture) {
      data.clearcoatRoughnessMap = this.clearcoatRoughnessMap.toJSON(meta).uuid;
    }
    if (this.clearcoatNormalMap && this.clearcoatNormalMap.isTexture) {
      data.clearcoatNormalMap = this.clearcoatNormalMap.toJSON(meta).uuid;
      data.clearcoatNormalScale = this.clearcoatNormalScale.toArray();
    }
    if (this.dispersion !== void 0) data.dispersion = this.dispersion;
    if (this.iridescence !== void 0) data.iridescence = this.iridescence;
    if (this.iridescenceIOR !== void 0) data.iridescenceIOR = this.iridescenceIOR;
    if (this.iridescenceThicknessRange !== void 0) data.iridescenceThicknessRange = this.iridescenceThicknessRange;
    if (this.iridescenceMap && this.iridescenceMap.isTexture) {
      data.iridescenceMap = this.iridescenceMap.toJSON(meta).uuid;
    }
    if (this.iridescenceThicknessMap && this.iridescenceThicknessMap.isTexture) {
      data.iridescenceThicknessMap = this.iridescenceThicknessMap.toJSON(meta).uuid;
    }
    if (this.anisotropy !== void 0) data.anisotropy = this.anisotropy;
    if (this.anisotropyRotation !== void 0) data.anisotropyRotation = this.anisotropyRotation;
    if (this.anisotropyMap && this.anisotropyMap.isTexture) {
      data.anisotropyMap = this.anisotropyMap.toJSON(meta).uuid;
    }
    if (this.map && this.map.isTexture) data.map = this.map.toJSON(meta).uuid;
    if (this.matcap && this.matcap.isTexture) data.matcap = this.matcap.toJSON(meta).uuid;
    if (this.alphaMap && this.alphaMap.isTexture) data.alphaMap = this.alphaMap.toJSON(meta).uuid;
    if (this.lightMap && this.lightMap.isTexture) {
      data.lightMap = this.lightMap.toJSON(meta).uuid;
      data.lightMapIntensity = this.lightMapIntensity;
    }
    if (this.aoMap && this.aoMap.isTexture) {
      data.aoMap = this.aoMap.toJSON(meta).uuid;
      data.aoMapIntensity = this.aoMapIntensity;
    }
    if (this.bumpMap && this.bumpMap.isTexture) {
      data.bumpMap = this.bumpMap.toJSON(meta).uuid;
      data.bumpScale = this.bumpScale;
    }
    if (this.normalMap && this.normalMap.isTexture) {
      data.normalMap = this.normalMap.toJSON(meta).uuid;
      data.normalMapType = this.normalMapType;
      data.normalScale = this.normalScale.toArray();
    }
    if (this.displacementMap && this.displacementMap.isTexture) {
      data.displacementMap = this.displacementMap.toJSON(meta).uuid;
      data.displacementScale = this.displacementScale;
      data.displacementBias = this.displacementBias;
    }
    if (this.roughnessMap && this.roughnessMap.isTexture) data.roughnessMap = this.roughnessMap.toJSON(meta).uuid;
    if (this.metalnessMap && this.metalnessMap.isTexture) data.metalnessMap = this.metalnessMap.toJSON(meta).uuid;
    if (this.emissiveMap && this.emissiveMap.isTexture) data.emissiveMap = this.emissiveMap.toJSON(meta).uuid;
    if (this.specularMap && this.specularMap.isTexture) data.specularMap = this.specularMap.toJSON(meta).uuid;
    if (this.specularIntensityMap && this.specularIntensityMap.isTexture) data.specularIntensityMap = this.specularIntensityMap.toJSON(meta).uuid;
    if (this.specularColorMap && this.specularColorMap.isTexture) data.specularColorMap = this.specularColorMap.toJSON(meta).uuid;
    if (this.envMap && this.envMap.isTexture) {
      data.envMap = this.envMap.toJSON(meta).uuid;
      if (this.combine !== void 0) data.combine = this.combine;
    }
    if (this.envMapRotation !== void 0) data.envMapRotation = this.envMapRotation.toArray();
    if (this.envMapIntensity !== void 0) data.envMapIntensity = this.envMapIntensity;
    if (this.reflectivity !== void 0) data.reflectivity = this.reflectivity;
    if (this.refractionRatio !== void 0) data.refractionRatio = this.refractionRatio;
    if (this.gradientMap && this.gradientMap.isTexture) {
      data.gradientMap = this.gradientMap.toJSON(meta).uuid;
    }
    if (this.transmission !== void 0) data.transmission = this.transmission;
    if (this.transmissionMap && this.transmissionMap.isTexture) data.transmissionMap = this.transmissionMap.toJSON(meta).uuid;
    if (this.thickness !== void 0) data.thickness = this.thickness;
    if (this.thicknessMap && this.thicknessMap.isTexture) data.thicknessMap = this.thicknessMap.toJSON(meta).uuid;
    if (this.attenuationDistance !== void 0 && this.attenuationDistance !== Infinity) data.attenuationDistance = this.attenuationDistance;
    if (this.attenuationColor !== void 0) data.attenuationColor = this.attenuationColor.getHex();
    if (this.size !== void 0) data.size = this.size;
    if (this.shadowSide !== null) data.shadowSide = this.shadowSide;
    if (this.sizeAttenuation !== void 0) data.sizeAttenuation = this.sizeAttenuation;
    if (this.blending !== NormalBlending) data.blending = this.blending;
    if (this.side !== FrontSide) data.side = this.side;
    if (this.vertexColors === true) data.vertexColors = true;
    if (this.opacity < 1) data.opacity = this.opacity;
    if (this.transparent === true) data.transparent = true;
    if (this.blendSrc !== SrcAlphaFactor) data.blendSrc = this.blendSrc;
    if (this.blendDst !== OneMinusSrcAlphaFactor) data.blendDst = this.blendDst;
    if (this.blendEquation !== AddEquation) data.blendEquation = this.blendEquation;
    if (this.blendSrcAlpha !== null) data.blendSrcAlpha = this.blendSrcAlpha;
    if (this.blendDstAlpha !== null) data.blendDstAlpha = this.blendDstAlpha;
    if (this.blendEquationAlpha !== null) data.blendEquationAlpha = this.blendEquationAlpha;
    if (this.blendColor && this.blendColor.isColor) data.blendColor = this.blendColor.getHex();
    if (this.blendAlpha !== 0) data.blendAlpha = this.blendAlpha;
    if (this.depthFunc !== LessEqualDepth) data.depthFunc = this.depthFunc;
    if (this.depthTest === false) data.depthTest = this.depthTest;
    if (this.depthWrite === false) data.depthWrite = this.depthWrite;
    if (this.colorWrite === false) data.colorWrite = this.colorWrite;
    if (this.stencilWriteMask !== 255) data.stencilWriteMask = this.stencilWriteMask;
    if (this.stencilFunc !== AlwaysStencilFunc) data.stencilFunc = this.stencilFunc;
    if (this.stencilRef !== 0) data.stencilRef = this.stencilRef;
    if (this.stencilFuncMask !== 255) data.stencilFuncMask = this.stencilFuncMask;
    if (this.stencilFail !== KeepStencilOp) data.stencilFail = this.stencilFail;
    if (this.stencilZFail !== KeepStencilOp) data.stencilZFail = this.stencilZFail;
    if (this.stencilZPass !== KeepStencilOp) data.stencilZPass = this.stencilZPass;
    if (this.stencilWrite === true) data.stencilWrite = this.stencilWrite;
    if (this.rotation !== void 0 && this.rotation !== 0) data.rotation = this.rotation;
    if (this.polygonOffset === true) data.polygonOffset = true;
    if (this.polygonOffsetFactor !== 0) data.polygonOffsetFactor = this.polygonOffsetFactor;
    if (this.polygonOffsetUnits !== 0) data.polygonOffsetUnits = this.polygonOffsetUnits;
    if (this.linewidth !== void 0 && this.linewidth !== 1) data.linewidth = this.linewidth;
    if (this.dashSize !== void 0) data.dashSize = this.dashSize;
    if (this.gapSize !== void 0) data.gapSize = this.gapSize;
    if (this.scale !== void 0) data.scale = this.scale;
    if (this.dithering === true) data.dithering = true;
    if (this.alphaTest > 0) data.alphaTest = this.alphaTest;
    if (this.alphaHash === true) data.alphaHash = true;
    if (this.alphaToCoverage === true) data.alphaToCoverage = true;
    if (this.premultipliedAlpha === true) data.premultipliedAlpha = true;
    if (this.forceSinglePass === true) data.forceSinglePass = true;
    if (this.wireframe === true) data.wireframe = true;
    if (this.wireframeLinewidth > 1) data.wireframeLinewidth = this.wireframeLinewidth;
    if (this.wireframeLinecap !== "round") data.wireframeLinecap = this.wireframeLinecap;
    if (this.wireframeLinejoin !== "round") data.wireframeLinejoin = this.wireframeLinejoin;
    if (this.flatShading === true) data.flatShading = true;
    if (this.visible === false) data.visible = false;
    if (this.toneMapped === false) data.toneMapped = false;
    if (this.fog === false) data.fog = false;
    if (Object.keys(this.userData).length > 0) data.userData = this.userData;
    function extractFromCache(cache) {
      const values = [];
      for (const key in cache) {
        const data2 = cache[key];
        delete data2.metadata;
        values.push(data2);
      }
      return values;
    }
    if (isRootObject) {
      const textures = extractFromCache(meta.textures);
      const images = extractFromCache(meta.images);
      if (textures.length > 0) data.textures = textures;
      if (images.length > 0) data.images = images;
    }
    return data;
  }
  clone() {
    return new this.constructor().copy(this);
  }
  copy(source) {
    this.name = source.name;
    this.blending = source.blending;
    this.side = source.side;
    this.vertexColors = source.vertexColors;
    this.opacity = source.opacity;
    this.transparent = source.transparent;
    this.blendSrc = source.blendSrc;
    this.blendDst = source.blendDst;
    this.blendEquation = source.blendEquation;
    this.blendSrcAlpha = source.blendSrcAlpha;
    this.blendDstAlpha = source.blendDstAlpha;
    this.blendEquationAlpha = source.blendEquationAlpha;
    this.blendColor.copy(source.blendColor);
    this.blendAlpha = source.blendAlpha;
    this.depthFunc = source.depthFunc;
    this.depthTest = source.depthTest;
    this.depthWrite = source.depthWrite;
    this.stencilWriteMask = source.stencilWriteMask;
    this.stencilFunc = source.stencilFunc;
    this.stencilRef = source.stencilRef;
    this.stencilFuncMask = source.stencilFuncMask;
    this.stencilFail = source.stencilFail;
    this.stencilZFail = source.stencilZFail;
    this.stencilZPass = source.stencilZPass;
    this.stencilWrite = source.stencilWrite;
    const srcPlanes = source.clippingPlanes;
    let dstPlanes = null;
    if (srcPlanes !== null) {
      const n = srcPlanes.length;
      dstPlanes = new Array(n);
      for (let i = 0; i !== n; ++i) {
        dstPlanes[i] = srcPlanes[i].clone();
      }
    }
    this.clippingPlanes = dstPlanes;
    this.clipIntersection = source.clipIntersection;
    this.clipShadows = source.clipShadows;
    this.shadowSide = source.shadowSide;
    this.colorWrite = source.colorWrite;
    this.precision = source.precision;
    this.polygonOffset = source.polygonOffset;
    this.polygonOffsetFactor = source.polygonOffsetFactor;
    this.polygonOffsetUnits = source.polygonOffsetUnits;
    this.dithering = source.dithering;
    this.alphaTest = source.alphaTest;
    this.alphaHash = source.alphaHash;
    this.alphaToCoverage = source.alphaToCoverage;
    this.premultipliedAlpha = source.premultipliedAlpha;
    this.forceSinglePass = source.forceSinglePass;
    this.visible = source.visible;
    this.toneMapped = source.toneMapped;
    this.userData = JSON.parse(JSON.stringify(source.userData));
    return this;
  }
  dispose() {
    this.dispatchEvent({ type: "dispose" });
  }
  set needsUpdate(value) {
    if (value === true) this.version++;
  }
  onBuild() {
    console.warn("Material: onBuild() has been removed.");
  }
}
class MeshBasicMaterial extends Material {
  constructor(parameters) {
    super();
    this.isMeshBasicMaterial = true;
    this.type = "MeshBasicMaterial";
    this.color = new Color(16777215);
    this.map = null;
    this.lightMap = null;
    this.lightMapIntensity = 1;
    this.aoMap = null;
    this.aoMapIntensity = 1;
    this.specularMap = null;
    this.alphaMap = null;
    this.envMap = null;
    this.envMapRotation = new Euler();
    this.combine = MultiplyOperation;
    this.reflectivity = 1;
    this.refractionRatio = 0.98;
    this.wireframe = false;
    this.wireframeLinewidth = 1;
    this.wireframeLinecap = "round";
    this.wireframeLinejoin = "round";
    this.fog = true;
    this.setValues(parameters);
  }
  copy(source) {
    super.copy(source);
    this.color.copy(source.color);
    this.map = source.map;
    this.lightMap = source.lightMap;
    this.lightMapIntensity = source.lightMapIntensity;
    this.aoMap = source.aoMap;
    this.aoMapIntensity = source.aoMapIntensity;
    this.specularMap = source.specularMap;
    this.alphaMap = source.alphaMap;
    this.envMap = source.envMap;
    this.envMapRotation.copy(source.envMapRotation);
    this.combine = source.combine;
    this.reflectivity = source.reflectivity;
    this.refractionRatio = source.refractionRatio;
    this.wireframe = source.wireframe;
    this.wireframeLinewidth = source.wireframeLinewidth;
    this.wireframeLinecap = source.wireframeLinecap;
    this.wireframeLinejoin = source.wireframeLinejoin;
    this.fog = source.fog;
    return this;
  }
}
const _vector$9 = /* @__PURE__ */ new Vector3();
const _vector2$1 = /* @__PURE__ */ new Vector2();
class BufferAttribute {
  constructor(array, itemSize, normalized = false) {
    if (Array.isArray(array)) {
      throw new TypeError("THREE.BufferAttribute: array should be a Typed Array.");
    }
    this.isBufferAttribute = true;
    this.name = "";
    this.array = array;
    this.itemSize = itemSize;
    this.count = array !== void 0 ? array.length / itemSize : 0;
    this.normalized = normalized;
    this.usage = StaticDrawUsage;
    this.updateRanges = [];
    this.gpuType = FloatType;
    this.version = 0;
  }
  onUploadCallback() {
  }
  set needsUpdate(value) {
    if (value === true) this.version++;
  }
  setUsage(value) {
    this.usage = value;
    return this;
  }
  addUpdateRange(start, count) {
    this.updateRanges.push({ start, count });
  }
  clearUpdateRanges() {
    this.updateRanges.length = 0;
  }
  copy(source) {
    this.name = source.name;
    this.array = new source.array.constructor(source.array);
    this.itemSize = source.itemSize;
    this.count = source.count;
    this.normalized = source.normalized;
    this.usage = source.usage;
    this.gpuType = source.gpuType;
    return this;
  }
  copyAt(index1, attribute, index2) {
    index1 *= this.itemSize;
    index2 *= attribute.itemSize;
    for (let i = 0, l = this.itemSize; i < l; i++) {
      this.array[index1 + i] = attribute.array[index2 + i];
    }
    return this;
  }
  copyArray(array) {
    this.array.set(array);
    return this;
  }
  applyMatrix3(m) {
    if (this.itemSize === 2) {
      for (let i = 0, l = this.count; i < l; i++) {
        _vector2$1.fromBufferAttribute(this, i);
        _vector2$1.applyMatrix3(m);
        this.setXY(i, _vector2$1.x, _vector2$1.y);
      }
    } else if (this.itemSize === 3) {
      for (let i = 0, l = this.count; i < l; i++) {
        _vector$9.fromBufferAttribute(this, i);
        _vector$9.applyMatrix3(m);
        this.setXYZ(i, _vector$9.x, _vector$9.y, _vector$9.z);
      }
    }
    return this;
  }
  applyMatrix4(m) {
    for (let i = 0, l = this.count; i < l; i++) {
      _vector$9.fromBufferAttribute(this, i);
      _vector$9.applyMatrix4(m);
      this.setXYZ(i, _vector$9.x, _vector$9.y, _vector$9.z);
    }
    return this;
  }
  applyNormalMatrix(m) {
    for (let i = 0, l = this.count; i < l; i++) {
      _vector$9.fromBufferAttribute(this, i);
      _vector$9.applyNormalMatrix(m);
      this.setXYZ(i, _vector$9.x, _vector$9.y, _vector$9.z);
    }
    return this;
  }
  transformDirection(m) {
    for (let i = 0, l = this.count; i < l; i++) {
      _vector$9.fromBufferAttribute(this, i);
      _vector$9.transformDirection(m);
      this.setXYZ(i, _vector$9.x, _vector$9.y, _vector$9.z);
    }
    return this;
  }
  set(value, offset = 0) {
    this.array.set(value, offset);
    return this;
  }
  getComponent(index, component) {
    let value = this.array[index * this.itemSize + component];
    if (this.normalized) value = denormalize(value, this.array);
    return value;
  }
  setComponent(index, component, value) {
    if (this.normalized) value = normalize(value, this.array);
    this.array[index * this.itemSize + component] = value;
    return this;
  }
  getX(index) {
    let x = this.array[index * this.itemSize];
    if (this.normalized) x = denormalize(x, this.array);
    return x;
  }
  setX(index, x) {
    if (this.normalized) x = normalize(x, this.array);
    this.array[index * this.itemSize] = x;
    return this;
  }
  getY(index) {
    let y = this.array[index * this.itemSize + 1];
    if (this.normalized) y = denormalize(y, this.array);
    return y;
  }
  setY(index, y) {
    if (this.normalized) y = normalize(y, this.array);
    this.array[index * this.itemSize + 1] = y;
    return this;
  }
  getZ(index) {
    let z2 = this.array[index * this.itemSize + 2];
    if (this.normalized) z2 = denormalize(z2, this.array);
    return z2;
  }
  setZ(index, z2) {
    if (this.normalized) z2 = normalize(z2, this.array);
    this.array[index * this.itemSize + 2] = z2;
    return this;
  }
  getW(index) {
    let w = this.array[index * this.itemSize + 3];
    if (this.normalized) w = denormalize(w, this.array);
    return w;
  }
  setW(index, w) {
    if (this.normalized) w = normalize(w, this.array);
    this.array[index * this.itemSize + 3] = w;
    return this;
  }
  setXY(index, x, y) {
    index *= this.itemSize;
    if (this.normalized) {
      x = normalize(x, this.array);
      y = normalize(y, this.array);
    }
    this.array[index + 0] = x;
    this.array[index + 1] = y;
    return this;
  }
  setXYZ(index, x, y, z2) {
    index *= this.itemSize;
    if (this.normalized) {
      x = normalize(x, this.array);
      y = normalize(y, this.array);
      z2 = normalize(z2, this.array);
    }
    this.array[index + 0] = x;
    this.array[index + 1] = y;
    this.array[index + 2] = z2;
    return this;
  }
  setXYZW(index, x, y, z2, w) {
    index *= this.itemSize;
    if (this.normalized) {
      x = normalize(x, this.array);
      y = normalize(y, this.array);
      z2 = normalize(z2, this.array);
      w = normalize(w, this.array);
    }
    this.array[index + 0] = x;
    this.array[index + 1] = y;
    this.array[index + 2] = z2;
    this.array[index + 3] = w;
    return this;
  }
  onUpload(callback) {
    this.onUploadCallback = callback;
    return this;
  }
  clone() {
    return new this.constructor(this.array, this.itemSize).copy(this);
  }
  toJSON() {
    const data = {
      itemSize: this.itemSize,
      type: this.array.constructor.name,
      array: Array.from(this.array),
      normalized: this.normalized
    };
    if (this.name !== "") data.name = this.name;
    if (this.usage !== StaticDrawUsage) data.usage = this.usage;
    return data;
  }
}
class Uint16BufferAttribute extends BufferAttribute {
  constructor(array, itemSize, normalized) {
    super(new Uint16Array(array), itemSize, normalized);
  }
}
class Uint32BufferAttribute extends BufferAttribute {
  constructor(array, itemSize, normalized) {
    super(new Uint32Array(array), itemSize, normalized);
  }
}
class Float32BufferAttribute extends BufferAttribute {
  constructor(array, itemSize, normalized) {
    super(new Float32Array(array), itemSize, normalized);
  }
}
let _id$2 = 0;
const _m1$2 = /* @__PURE__ */ new Matrix4();
const _obj = /* @__PURE__ */ new Object3D();
const _offset = /* @__PURE__ */ new Vector3();
const _box$2 = /* @__PURE__ */ new Box3();
const _boxMorphTargets = /* @__PURE__ */ new Box3();
const _vector$8 = /* @__PURE__ */ new Vector3();
class BufferGeometry extends EventDispatcher {
  constructor() {
    super();
    this.isBufferGeometry = true;
    Object.defineProperty(this, "id", { value: _id$2++ });
    this.uuid = generateUUID();
    this.name = "";
    this.type = "BufferGeometry";
    this.index = null;
    this.attributes = {};
    this.morphAttributes = {};
    this.morphTargetsRelative = false;
    this.groups = [];
    this.boundingBox = null;
    this.boundingSphere = null;
    this.drawRange = { start: 0, count: Infinity };
    this.userData = {};
  }
  getIndex() {
    return this.index;
  }
  setIndex(index) {
    if (Array.isArray(index)) {
      this.index = new (arrayNeedsUint32(index) ? Uint32BufferAttribute : Uint16BufferAttribute)(index, 1);
    } else {
      this.index = index;
    }
    return this;
  }
  getAttribute(name2) {
    return this.attributes[name2];
  }
  setAttribute(name2, attribute) {
    this.attributes[name2] = attribute;
    return this;
  }
  deleteAttribute(name2) {
    delete this.attributes[name2];
    return this;
  }
  hasAttribute(name2) {
    return this.attributes[name2] !== void 0;
  }
  addGroup(start, count, materialIndex = 0) {
    this.groups.push({
      start,
      count,
      materialIndex
    });
  }
  clearGroups() {
    this.groups = [];
  }
  setDrawRange(start, count) {
    this.drawRange.start = start;
    this.drawRange.count = count;
  }
  applyMatrix4(matrix) {
    const position = this.attributes.position;
    if (position !== void 0) {
      position.applyMatrix4(matrix);
      position.needsUpdate = true;
    }
    const normal = this.attributes.normal;
    if (normal !== void 0) {
      const normalMatrix = new Matrix3().getNormalMatrix(matrix);
      normal.applyNormalMatrix(normalMatrix);
      normal.needsUpdate = true;
    }
    const tangent = this.attributes.tangent;
    if (tangent !== void 0) {
      tangent.transformDirection(matrix);
      tangent.needsUpdate = true;
    }
    if (this.boundingBox !== null) {
      this.computeBoundingBox();
    }
    if (this.boundingSphere !== null) {
      this.computeBoundingSphere();
    }
    return this;
  }
  applyQuaternion(q2) {
    _m1$2.makeRotationFromQuaternion(q2);
    this.applyMatrix4(_m1$2);
    return this;
  }
  rotateX(angle) {
    _m1$2.makeRotationX(angle);
    this.applyMatrix4(_m1$2);
    return this;
  }
  rotateY(angle) {
    _m1$2.makeRotationY(angle);
    this.applyMatrix4(_m1$2);
    return this;
  }
  rotateZ(angle) {
    _m1$2.makeRotationZ(angle);
    this.applyMatrix4(_m1$2);
    return this;
  }
  translate(x, y, z2) {
    _m1$2.makeTranslation(x, y, z2);
    this.applyMatrix4(_m1$2);
    return this;
  }
  scale(x, y, z2) {
    _m1$2.makeScale(x, y, z2);
    this.applyMatrix4(_m1$2);
    return this;
  }
  lookAt(vector) {
    _obj.lookAt(vector);
    _obj.updateMatrix();
    this.applyMatrix4(_obj.matrix);
    return this;
  }
  center() {
    this.computeBoundingBox();
    this.boundingBox.getCenter(_offset).negate();
    this.translate(_offset.x, _offset.y, _offset.z);
    return this;
  }
  setFromPoints(points) {
    const position = [];
    for (let i = 0, l = points.length; i < l; i++) {
      const point = points[i];
      position.push(point.x, point.y, point.z || 0);
    }
    this.setAttribute("position", new Float32BufferAttribute(position, 3));
    return this;
  }
  computeBoundingBox() {
    if (this.boundingBox === null) {
      this.boundingBox = new Box3();
    }
    const position = this.attributes.position;
    const morphAttributesPosition = this.morphAttributes.position;
    if (position && position.isGLBufferAttribute) {
      console.error("THREE.BufferGeometry.computeBoundingBox(): GLBufferAttribute requires a manual bounding box.", this);
      this.boundingBox.set(
        new Vector3(-Infinity, -Infinity, -Infinity),
        new Vector3(Infinity, Infinity, Infinity)
      );
      return;
    }
    if (position !== void 0) {
      this.boundingBox.setFromBufferAttribute(position);
      if (morphAttributesPosition) {
        for (let i = 0, il2 = morphAttributesPosition.length; i < il2; i++) {
          const morphAttribute = morphAttributesPosition[i];
          _box$2.setFromBufferAttribute(morphAttribute);
          if (this.morphTargetsRelative) {
            _vector$8.addVectors(this.boundingBox.min, _box$2.min);
            this.boundingBox.expandByPoint(_vector$8);
            _vector$8.addVectors(this.boundingBox.max, _box$2.max);
            this.boundingBox.expandByPoint(_vector$8);
          } else {
            this.boundingBox.expandByPoint(_box$2.min);
            this.boundingBox.expandByPoint(_box$2.max);
          }
        }
      }
    } else {
      this.boundingBox.makeEmpty();
    }
    if (isNaN(this.boundingBox.min.x) || isNaN(this.boundingBox.min.y) || isNaN(this.boundingBox.min.z)) {
      console.error('THREE.BufferGeometry.computeBoundingBox(): Computed min/max have NaN values. The "position" attribute is likely to have NaN values.', this);
    }
  }
  computeBoundingSphere() {
    if (this.boundingSphere === null) {
      this.boundingSphere = new Sphere();
    }
    const position = this.attributes.position;
    const morphAttributesPosition = this.morphAttributes.position;
    if (position && position.isGLBufferAttribute) {
      console.error("THREE.BufferGeometry.computeBoundingSphere(): GLBufferAttribute requires a manual bounding sphere.", this);
      this.boundingSphere.set(new Vector3(), Infinity);
      return;
    }
    if (position) {
      const center = this.boundingSphere.center;
      _box$2.setFromBufferAttribute(position);
      if (morphAttributesPosition) {
        for (let i = 0, il2 = morphAttributesPosition.length; i < il2; i++) {
          const morphAttribute = morphAttributesPosition[i];
          _boxMorphTargets.setFromBufferAttribute(morphAttribute);
          if (this.morphTargetsRelative) {
            _vector$8.addVectors(_box$2.min, _boxMorphTargets.min);
            _box$2.expandByPoint(_vector$8);
            _vector$8.addVectors(_box$2.max, _boxMorphTargets.max);
            _box$2.expandByPoint(_vector$8);
          } else {
            _box$2.expandByPoint(_boxMorphTargets.min);
            _box$2.expandByPoint(_boxMorphTargets.max);
          }
        }
      }
      _box$2.getCenter(center);
      let maxRadiusSq = 0;
      for (let i = 0, il2 = position.count; i < il2; i++) {
        _vector$8.fromBufferAttribute(position, i);
        maxRadiusSq = Math.max(maxRadiusSq, center.distanceToSquared(_vector$8));
      }
      if (morphAttributesPosition) {
        for (let i = 0, il2 = morphAttributesPosition.length; i < il2; i++) {
          const morphAttribute = morphAttributesPosition[i];
          const morphTargetsRelative = this.morphTargetsRelative;
          for (let j2 = 0, jl2 = morphAttribute.count; j2 < jl2; j2++) {
            _vector$8.fromBufferAttribute(morphAttribute, j2);
            if (morphTargetsRelative) {
              _offset.fromBufferAttribute(position, j2);
              _vector$8.add(_offset);
            }
            maxRadiusSq = Math.max(maxRadiusSq, center.distanceToSquared(_vector$8));
          }
        }
      }
      this.boundingSphere.radius = Math.sqrt(maxRadiusSq);
      if (isNaN(this.boundingSphere.radius)) {
        console.error('THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The "position" attribute is likely to have NaN values.', this);
      }
    }
  }
  computeTangents() {
    const index = this.index;
    const attributes = this.attributes;
    if (index === null || attributes.position === void 0 || attributes.normal === void 0 || attributes.uv === void 0) {
      console.error("THREE.BufferGeometry: .computeTangents() failed. Missing required attributes (index, position, normal or uv)");
      return;
    }
    const positionAttribute = attributes.position;
    const normalAttribute = attributes.normal;
    const uvAttribute = attributes.uv;
    if (this.hasAttribute("tangent") === false) {
      this.setAttribute("tangent", new BufferAttribute(new Float32Array(4 * positionAttribute.count), 4));
    }
    const tangentAttribute = this.getAttribute("tangent");
    const tan1 = [], tan2 = [];
    for (let i = 0; i < positionAttribute.count; i++) {
      tan1[i] = new Vector3();
      tan2[i] = new Vector3();
    }
    const vA = new Vector3(), vB = new Vector3(), vC = new Vector3(), uvA = new Vector2(), uvB = new Vector2(), uvC = new Vector2(), sdir = new Vector3(), tdir = new Vector3();
    function handleTriangle(a, b, c) {
      vA.fromBufferAttribute(positionAttribute, a);
      vB.fromBufferAttribute(positionAttribute, b);
      vC.fromBufferAttribute(positionAttribute, c);
      uvA.fromBufferAttribute(uvAttribute, a);
      uvB.fromBufferAttribute(uvAttribute, b);
      uvC.fromBufferAttribute(uvAttribute, c);
      vB.sub(vA);
      vC.sub(vA);
      uvB.sub(uvA);
      uvC.sub(uvA);
      const r = 1 / (uvB.x * uvC.y - uvC.x * uvB.y);
      if (!isFinite(r)) return;
      sdir.copy(vB).multiplyScalar(uvC.y).addScaledVector(vC, -uvB.y).multiplyScalar(r);
      tdir.copy(vC).multiplyScalar(uvB.x).addScaledVector(vB, -uvC.x).multiplyScalar(r);
      tan1[a].add(sdir);
      tan1[b].add(sdir);
      tan1[c].add(sdir);
      tan2[a].add(tdir);
      tan2[b].add(tdir);
      tan2[c].add(tdir);
    }
    let groups = this.groups;
    if (groups.length === 0) {
      groups = [{
        start: 0,
        count: index.count
      }];
    }
    for (let i = 0, il2 = groups.length; i < il2; ++i) {
      const group = groups[i];
      const start = group.start;
      const count = group.count;
      for (let j2 = start, jl2 = start + count; j2 < jl2; j2 += 3) {
        handleTriangle(
          index.getX(j2 + 0),
          index.getX(j2 + 1),
          index.getX(j2 + 2)
        );
      }
    }
    const tmp2 = new Vector3(), tmp22 = new Vector3();
    const n = new Vector3(), n2 = new Vector3();
    function handleVertex(v) {
      n.fromBufferAttribute(normalAttribute, v);
      n2.copy(n);
      const t = tan1[v];
      tmp2.copy(t);
      tmp2.sub(n.multiplyScalar(n.dot(t))).normalize();
      tmp22.crossVectors(n2, t);
      const test = tmp22.dot(tan2[v]);
      const w = test < 0 ? -1 : 1;
      tangentAttribute.setXYZW(v, tmp2.x, tmp2.y, tmp2.z, w);
    }
    for (let i = 0, il2 = groups.length; i < il2; ++i) {
      const group = groups[i];
      const start = group.start;
      const count = group.count;
      for (let j2 = start, jl2 = start + count; j2 < jl2; j2 += 3) {
        handleVertex(index.getX(j2 + 0));
        handleVertex(index.getX(j2 + 1));
        handleVertex(index.getX(j2 + 2));
      }
    }
  }
  computeVertexNormals() {
    const index = this.index;
    const positionAttribute = this.getAttribute("position");
    if (positionAttribute !== void 0) {
      let normalAttribute = this.getAttribute("normal");
      if (normalAttribute === void 0) {
        normalAttribute = new BufferAttribute(new Float32Array(positionAttribute.count * 3), 3);
        this.setAttribute("normal", normalAttribute);
      } else {
        for (let i = 0, il2 = normalAttribute.count; i < il2; i++) {
          normalAttribute.setXYZ(i, 0, 0, 0);
        }
      }
      const pA = new Vector3(), pB = new Vector3(), pC = new Vector3();
      const nA = new Vector3(), nB = new Vector3(), nC = new Vector3();
      const cb2 = new Vector3(), ab2 = new Vector3();
      if (index) {
        for (let i = 0, il2 = index.count; i < il2; i += 3) {
          const vA = index.getX(i + 0);
          const vB = index.getX(i + 1);
          const vC = index.getX(i + 2);
          pA.fromBufferAttribute(positionAttribute, vA);
          pB.fromBufferAttribute(positionAttribute, vB);
          pC.fromBufferAttribute(positionAttribute, vC);
          cb2.subVectors(pC, pB);
          ab2.subVectors(pA, pB);
          cb2.cross(ab2);
          nA.fromBufferAttribute(normalAttribute, vA);
          nB.fromBufferAttribute(normalAttribute, vB);
          nC.fromBufferAttribute(normalAttribute, vC);
          nA.add(cb2);
          nB.add(cb2);
          nC.add(cb2);
          normalAttribute.setXYZ(vA, nA.x, nA.y, nA.z);
          normalAttribute.setXYZ(vB, nB.x, nB.y, nB.z);
          normalAttribute.setXYZ(vC, nC.x, nC.y, nC.z);
        }
      } else {
        for (let i = 0, il2 = positionAttribute.count; i < il2; i += 3) {
          pA.fromBufferAttribute(positionAttribute, i + 0);
          pB.fromBufferAttribute(positionAttribute, i + 1);
          pC.fromBufferAttribute(positionAttribute, i + 2);
          cb2.subVectors(pC, pB);
          ab2.subVectors(pA, pB);
          cb2.cross(ab2);
          normalAttribute.setXYZ(i + 0, cb2.x, cb2.y, cb2.z);
          normalAttribute.setXYZ(i + 1, cb2.x, cb2.y, cb2.z);
          normalAttribute.setXYZ(i + 2, cb2.x, cb2.y, cb2.z);
        }
      }
      this.normalizeNormals();
      normalAttribute.needsUpdate = true;
    }
  }
  normalizeNormals() {
    const normals = this.attributes.normal;
    for (let i = 0, il2 = normals.count; i < il2; i++) {
      _vector$8.fromBufferAttribute(normals, i);
      _vector$8.normalize();
      normals.setXYZ(i, _vector$8.x, _vector$8.y, _vector$8.z);
    }
  }
  toNonIndexed() {
    function convertBufferAttribute(attribute, indices2) {
      const array = attribute.array;
      const itemSize = attribute.itemSize;
      const normalized = attribute.normalized;
      const array2 = new array.constructor(indices2.length * itemSize);
      let index = 0, index2 = 0;
      for (let i = 0, l = indices2.length; i < l; i++) {
        if (attribute.isInterleavedBufferAttribute) {
          index = indices2[i] * attribute.data.stride + attribute.offset;
        } else {
          index = indices2[i] * itemSize;
        }
        for (let j2 = 0; j2 < itemSize; j2++) {
          array2[index2++] = array[index++];
        }
      }
      return new BufferAttribute(array2, itemSize, normalized);
    }
    if (this.index === null) {
      console.warn("THREE.BufferGeometry.toNonIndexed(): BufferGeometry is already non-indexed.");
      return this;
    }
    const geometry2 = new BufferGeometry();
    const indices = this.index.array;
    const attributes = this.attributes;
    for (const name2 in attributes) {
      const attribute = attributes[name2];
      const newAttribute = convertBufferAttribute(attribute, indices);
      geometry2.setAttribute(name2, newAttribute);
    }
    const morphAttributes = this.morphAttributes;
    for (const name2 in morphAttributes) {
      const morphArray = [];
      const morphAttribute = morphAttributes[name2];
      for (let i = 0, il2 = morphAttribute.length; i < il2; i++) {
        const attribute = morphAttribute[i];
        const newAttribute = convertBufferAttribute(attribute, indices);
        morphArray.push(newAttribute);
      }
      geometry2.morphAttributes[name2] = morphArray;
    }
    geometry2.morphTargetsRelative = this.morphTargetsRelative;
    const groups = this.groups;
    for (let i = 0, l = groups.length; i < l; i++) {
      const group = groups[i];
      geometry2.addGroup(group.start, group.count, group.materialIndex);
    }
    return geometry2;
  }
  toJSON() {
    const data = {
      metadata: {
        version: 4.6,
        type: "BufferGeometry",
        generator: "BufferGeometry.toJSON"
      }
    };
    data.uuid = this.uuid;
    data.type = this.type;
    if (this.name !== "") data.name = this.name;
    if (Object.keys(this.userData).length > 0) data.userData = this.userData;
    if (this.parameters !== void 0) {
      const parameters = this.parameters;
      for (const key in parameters) {
        if (parameters[key] !== void 0) data[key] = parameters[key];
      }
      return data;
    }
    data.data = { attributes: {} };
    const index = this.index;
    if (index !== null) {
      data.data.index = {
        type: index.array.constructor.name,
        array: Array.prototype.slice.call(index.array)
      };
    }
    const attributes = this.attributes;
    for (const key in attributes) {
      const attribute = attributes[key];
      data.data.attributes[key] = attribute.toJSON(data.data);
    }
    const morphAttributes = {};
    let hasMorphAttributes = false;
    for (const key in this.morphAttributes) {
      const attributeArray = this.morphAttributes[key];
      const array = [];
      for (let i = 0, il2 = attributeArray.length; i < il2; i++) {
        const attribute = attributeArray[i];
        array.push(attribute.toJSON(data.data));
      }
      if (array.length > 0) {
        morphAttributes[key] = array;
        hasMorphAttributes = true;
      }
    }
    if (hasMorphAttributes) {
      data.data.morphAttributes = morphAttributes;
      data.data.morphTargetsRelative = this.morphTargetsRelative;
    }
    const groups = this.groups;
    if (groups.length > 0) {
      data.data.groups = JSON.parse(JSON.stringify(groups));
    }
    const boundingSphere = this.boundingSphere;
    if (boundingSphere !== null) {
      data.data.boundingSphere = {
        center: boundingSphere.center.toArray(),
        radius: boundingSphere.radius
      };
    }
    return data;
  }
  clone() {
    return new this.constructor().copy(this);
  }
  copy(source) {
    this.index = null;
    this.attributes = {};
    this.morphAttributes = {};
    this.groups = [];
    this.boundingBox = null;
    this.boundingSphere = null;
    const data = {};
    this.name = source.name;
    const index = source.index;
    if (index !== null) {
      this.setIndex(index.clone(data));
    }
    const attributes = source.attributes;
    for (const name2 in attributes) {
      const attribute = attributes[name2];
      this.setAttribute(name2, attribute.clone(data));
    }
    const morphAttributes = source.morphAttributes;
    for (const name2 in morphAttributes) {
      const array = [];
      const morphAttribute = morphAttributes[name2];
      for (let i = 0, l = morphAttribute.length; i < l; i++) {
        array.push(morphAttribute[i].clone(data));
      }
      this.morphAttributes[name2] = array;
    }
    this.morphTargetsRelative = source.morphTargetsRelative;
    const groups = source.groups;
    for (let i = 0, l = groups.length; i < l; i++) {
      const group = groups[i];
      this.addGroup(group.start, group.count, group.materialIndex);
    }
    const boundingBox = source.boundingBox;
    if (boundingBox !== null) {
      this.boundingBox = boundingBox.clone();
    }
    const boundingSphere = source.boundingSphere;
    if (boundingSphere !== null) {
      this.boundingSphere = boundingSphere.clone();
    }
    this.drawRange.start = source.drawRange.start;
    this.drawRange.count = source.drawRange.count;
    this.userData = source.userData;
    return this;
  }
  dispose() {
    this.dispatchEvent({ type: "dispose" });
  }
}
const _inverseMatrix$3 = /* @__PURE__ */ new Matrix4();
const _ray$3 = /* @__PURE__ */ new Ray();
const _sphere$6 = /* @__PURE__ */ new Sphere();
const _sphereHitAt = /* @__PURE__ */ new Vector3();
const _vA$1 = /* @__PURE__ */ new Vector3();
const _vB$1 = /* @__PURE__ */ new Vector3();
const _vC$1 = /* @__PURE__ */ new Vector3();
const _tempA = /* @__PURE__ */ new Vector3();
const _morphA = /* @__PURE__ */ new Vector3();
const _intersectionPoint = /* @__PURE__ */ new Vector3();
const _intersectionPointWorld = /* @__PURE__ */ new Vector3();
class Mesh extends Object3D {
  constructor(geometry = new BufferGeometry(), material = new MeshBasicMaterial()) {
    super();
    this.isMesh = true;
    this.type = "Mesh";
    this.geometry = geometry;
    this.material = material;
    this.updateMorphTargets();
  }
  copy(source, recursive) {
    super.copy(source, recursive);
    if (source.morphTargetInfluences !== void 0) {
      this.morphTargetInfluences = source.morphTargetInfluences.slice();
    }
    if (source.morphTargetDictionary !== void 0) {
      this.morphTargetDictionary = Object.assign({}, source.morphTargetDictionary);
    }
    this.material = Array.isArray(source.material) ? source.material.slice() : source.material;
    this.geometry = source.geometry;
    return this;
  }
  updateMorphTargets() {
    const geometry = this.geometry;
    const morphAttributes = geometry.morphAttributes;
    const keys = Object.keys(morphAttributes);
    if (keys.length > 0) {
      const morphAttribute = morphAttributes[keys[0]];
      if (morphAttribute !== void 0) {
        this.morphTargetInfluences = [];
        this.morphTargetDictionary = {};
        for (let m = 0, ml2 = morphAttribute.length; m < ml2; m++) {
          const name2 = morphAttribute[m].name || String(m);
          this.morphTargetInfluences.push(0);
          this.morphTargetDictionary[name2] = m;
        }
      }
    }
  }
  getVertexPosition(index, target) {
    const geometry = this.geometry;
    const position = geometry.attributes.position;
    const morphPosition = geometry.morphAttributes.position;
    const morphTargetsRelative = geometry.morphTargetsRelative;
    target.fromBufferAttribute(position, index);
    const morphInfluences = this.morphTargetInfluences;
    if (morphPosition && morphInfluences) {
      _morphA.set(0, 0, 0);
      for (let i = 0, il2 = morphPosition.length; i < il2; i++) {
        const influence = morphInfluences[i];
        const morphAttribute = morphPosition[i];
        if (influence === 0) continue;
        _tempA.fromBufferAttribute(morphAttribute, index);
        if (morphTargetsRelative) {
          _morphA.addScaledVector(_tempA, influence);
        } else {
          _morphA.addScaledVector(_tempA.sub(target), influence);
        }
      }
      target.add(_morphA);
    }
    return target;
  }
  raycast(raycaster, intersects2) {
    const geometry = this.geometry;
    const material = this.material;
    const matrixWorld = this.matrixWorld;
    if (material === void 0) return;
    if (geometry.boundingSphere === null) geometry.computeBoundingSphere();
    _sphere$6.copy(geometry.boundingSphere);
    _sphere$6.applyMatrix4(matrixWorld);
    _ray$3.copy(raycaster.ray).recast(raycaster.near);
    if (_sphere$6.containsPoint(_ray$3.origin) === false) {
      if (_ray$3.intersectSphere(_sphere$6, _sphereHitAt) === null) return;
      if (_ray$3.origin.distanceToSquared(_sphereHitAt) > (raycaster.far - raycaster.near) ** 2) return;
    }
    _inverseMatrix$3.copy(matrixWorld).invert();
    _ray$3.copy(raycaster.ray).applyMatrix4(_inverseMatrix$3);
    if (geometry.boundingBox !== null) {
      if (_ray$3.intersectsBox(geometry.boundingBox) === false) return;
    }
    this._computeIntersections(raycaster, intersects2, _ray$3);
  }
  _computeIntersections(raycaster, intersects2, rayLocalSpace) {
    let intersection;
    const geometry = this.geometry;
    const material = this.material;
    const index = geometry.index;
    const position = geometry.attributes.position;
    const uv = geometry.attributes.uv;
    const uv1 = geometry.attributes.uv1;
    const normal = geometry.attributes.normal;
    const groups = geometry.groups;
    const drawRange = geometry.drawRange;
    if (index !== null) {
      if (Array.isArray(material)) {
        for (let i = 0, il2 = groups.length; i < il2; i++) {
          const group = groups[i];
          const groupMaterial = material[group.materialIndex];
          const start = Math.max(group.start, drawRange.start);
          const end = Math.min(index.count, Math.min(group.start + group.count, drawRange.start + drawRange.count));
          for (let j2 = start, jl2 = end; j2 < jl2; j2 += 3) {
            const a = index.getX(j2);
            const b = index.getX(j2 + 1);
            const c = index.getX(j2 + 2);
            intersection = checkGeometryIntersection(this, groupMaterial, raycaster, rayLocalSpace, uv, uv1, normal, a, b, c);
            if (intersection) {
              intersection.faceIndex = Math.floor(j2 / 3);
              intersection.face.materialIndex = group.materialIndex;
              intersects2.push(intersection);
            }
          }
        }
      } else {
        const start = Math.max(0, drawRange.start);
        const end = Math.min(index.count, drawRange.start + drawRange.count);
        for (let i = start, il2 = end; i < il2; i += 3) {
          const a = index.getX(i);
          const b = index.getX(i + 1);
          const c = index.getX(i + 2);
          intersection = checkGeometryIntersection(this, material, raycaster, rayLocalSpace, uv, uv1, normal, a, b, c);
          if (intersection) {
            intersection.faceIndex = Math.floor(i / 3);
            intersects2.push(intersection);
          }
        }
      }
    } else if (position !== void 0) {
      if (Array.isArray(material)) {
        for (let i = 0, il2 = groups.length; i < il2; i++) {
          const group = groups[i];
          const groupMaterial = material[group.materialIndex];
          const start = Math.max(group.start, drawRange.start);
          const end = Math.min(position.count, Math.min(group.start + group.count, drawRange.start + drawRange.count));
          for (let j2 = start, jl2 = end; j2 < jl2; j2 += 3) {
            const a = j2;
            const b = j2 + 1;
            const c = j2 + 2;
            intersection = checkGeometryIntersection(this, groupMaterial, raycaster, rayLocalSpace, uv, uv1, normal, a, b, c);
            if (intersection) {
              intersection.faceIndex = Math.floor(j2 / 3);
              intersection.face.materialIndex = group.materialIndex;
              intersects2.push(intersection);
            }
          }
        }
      } else {
        const start = Math.max(0, drawRange.start);
        const end = Math.min(position.count, drawRange.start + drawRange.count);
        for (let i = start, il2 = end; i < il2; i += 3) {
          const a = i;
          const b = i + 1;
          const c = i + 2;
          intersection = checkGeometryIntersection(this, material, raycaster, rayLocalSpace, uv, uv1, normal, a, b, c);
          if (intersection) {
            intersection.faceIndex = Math.floor(i / 3);
            intersects2.push(intersection);
          }
        }
      }
    }
  }
}
function checkIntersection$1(object, material, raycaster, ray, pA, pB, pC, point) {
  let intersect2;
  if (material.side === BackSide) {
    intersect2 = ray.intersectTriangle(pC, pB, pA, true, point);
  } else {
    intersect2 = ray.intersectTriangle(pA, pB, pC, material.side === FrontSide, point);
  }
  if (intersect2 === null) return null;
  _intersectionPointWorld.copy(point);
  _intersectionPointWorld.applyMatrix4(object.matrixWorld);
  const distance = raycaster.ray.origin.distanceTo(_intersectionPointWorld);
  if (distance < raycaster.near || distance > raycaster.far) return null;
  return {
    distance,
    point: _intersectionPointWorld.clone(),
    object
  };
}
function checkGeometryIntersection(object, material, raycaster, ray, uv, uv1, normal, a, b, c) {
  object.getVertexPosition(a, _vA$1);
  object.getVertexPosition(b, _vB$1);
  object.getVertexPosition(c, _vC$1);
  const intersection = checkIntersection$1(object, material, raycaster, ray, _vA$1, _vB$1, _vC$1, _intersectionPoint);
  if (intersection) {
    const barycoord = new Vector3();
    Triangle.getBarycoord(_intersectionPoint, _vA$1, _vB$1, _vC$1, barycoord);
    if (uv) {
      intersection.uv = Triangle.getInterpolatedAttribute(uv, a, b, c, barycoord, new Vector2());
    }
    if (uv1) {
      intersection.uv1 = Triangle.getInterpolatedAttribute(uv1, a, b, c, barycoord, new Vector2());
    }
    if (normal) {
      intersection.normal = Triangle.getInterpolatedAttribute(normal, a, b, c, barycoord, new Vector3());
      if (intersection.normal.dot(ray.direction) > 0) {
        intersection.normal.multiplyScalar(-1);
      }
    }
    const face = {
      a,
      b,
      c,
      normal: new Vector3(),
      materialIndex: 0
    };
    Triangle.getNormal(_vA$1, _vB$1, _vC$1, face.normal);
    intersection.face = face;
    intersection.barycoord = barycoord;
  }
  return intersection;
}
class BoxGeometry extends BufferGeometry {
  constructor(width = 1, height = 1, depth = 1, widthSegments = 1, heightSegments = 1, depthSegments = 1) {
    super();
    this.type = "BoxGeometry";
    this.parameters = {
      width,
      height,
      depth,
      widthSegments,
      heightSegments,
      depthSegments
    };
    const scope = this;
    widthSegments = Math.floor(widthSegments);
    heightSegments = Math.floor(heightSegments);
    depthSegments = Math.floor(depthSegments);
    const indices = [];
    const vertices = [];
    const normals = [];
    const uvs = [];
    let numberOfVertices = 0;
    let groupStart = 0;
    buildPlane("z", "y", "x", -1, -1, depth, height, width, depthSegments, heightSegments, 0);
    buildPlane("z", "y", "x", 1, -1, depth, height, -width, depthSegments, heightSegments, 1);
    buildPlane("x", "z", "y", 1, 1, width, depth, height, widthSegments, depthSegments, 2);
    buildPlane("x", "z", "y", 1, -1, width, depth, -height, widthSegments, depthSegments, 3);
    buildPlane("x", "y", "z", 1, -1, width, height, depth, widthSegments, heightSegments, 4);
    buildPlane("x", "y", "z", -1, -1, width, height, -depth, widthSegments, heightSegments, 5);
    this.setIndex(indices);
    this.setAttribute("position", new Float32BufferAttribute(vertices, 3));
    this.setAttribute("normal", new Float32BufferAttribute(normals, 3));
    this.setAttribute("uv", new Float32BufferAttribute(uvs, 2));
    function buildPlane(u, v, w, udir, vdir, width2, height2, depth2, gridX, gridY, materialIndex) {
      const segmentWidth = width2 / gridX;
      const segmentHeight = height2 / gridY;
      const widthHalf = width2 / 2;
      const heightHalf = height2 / 2;
      const depthHalf = depth2 / 2;
      const gridX1 = gridX + 1;
      const gridY1 = gridY + 1;
      let vertexCounter = 0;
      let groupCount = 0;
      const vector = new Vector3();
      for (let iy = 0; iy < gridY1; iy++) {
        const y = iy * segmentHeight - heightHalf;
        for (let ix = 0; ix < gridX1; ix++) {
          const x = ix * segmentWidth - widthHalf;
          vector[u] = x * udir;
          vector[v] = y * vdir;
          vector[w] = depthHalf;
          vertices.push(vector.x, vector.y, vector.z);
          vector[u] = 0;
          vector[v] = 0;
          vector[w] = depth2 > 0 ? 1 : -1;
          normals.push(vector.x, vector.y, vector.z);
          uvs.push(ix / gridX);
          uvs.push(1 - iy / gridY);
          vertexCounter += 1;
        }
      }
      for (let iy = 0; iy < gridY; iy++) {
        for (let ix = 0; ix < gridX; ix++) {
          const a = numberOfVertices + ix + gridX1 * iy;
          const b = numberOfVertices + ix + gridX1 * (iy + 1);
          const c = numberOfVertices + (ix + 1) + gridX1 * (iy + 1);
          const d = numberOfVertices + (ix + 1) + gridX1 * iy;
          indices.push(a, b, d);
          indices.push(b, c, d);
          groupCount += 6;
        }
      }
      scope.addGroup(groupStart, groupCount, materialIndex);
      groupStart += groupCount;
      numberOfVertices += vertexCounter;
    }
  }
  copy(source) {
    super.copy(source);
    this.parameters = Object.assign({}, source.parameters);
    return this;
  }
  static fromJSON(data) {
    return new BoxGeometry(data.width, data.height, data.depth, data.widthSegments, data.heightSegments, data.depthSegments);
  }
}
function cloneUniforms(src) {
  const dst = {};
  for (const u in src) {
    dst[u] = {};
    for (const p2 in src[u]) {
      const property = src[u][p2];
      if (property && (property.isColor || property.isMatrix3 || property.isMatrix4 || property.isVector2 || property.isVector3 || property.isVector4 || property.isTexture || property.isQuaternion)) {
        if (property.isRenderTargetTexture) {
          console.warn("UniformsUtils: Textures of render targets cannot be cloned via cloneUniforms() or mergeUniforms().");
          dst[u][p2] = null;
        } else {
          dst[u][p2] = property.clone();
        }
      } else if (Array.isArray(property)) {
        dst[u][p2] = property.slice();
      } else {
        dst[u][p2] = property;
      }
    }
  }
  return dst;
}
function mergeUniforms(uniforms) {
  const merged = {};
  for (let u = 0; u < uniforms.length; u++) {
    const tmp2 = cloneUniforms(uniforms[u]);
    for (const p2 in tmp2) {
      merged[p2] = tmp2[p2];
    }
  }
  return merged;
}
function cloneUniformsGroups(src) {
  const dst = [];
  for (let u = 0; u < src.length; u++) {
    dst.push(src[u].clone());
  }
  return dst;
}
function getUnlitUniformColorSpace(renderer2) {
  const currentRenderTarget = renderer2.getRenderTarget();
  if (currentRenderTarget === null) {
    return renderer2.outputColorSpace;
  }
  if (currentRenderTarget.isXRRenderTarget === true) {
    return currentRenderTarget.texture.colorSpace;
  }
  return ColorManagement.workingColorSpace;
}
const UniformsUtils = { clone: cloneUniforms, merge: mergeUniforms };
var default_vertex = "void main() {\n	gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}";
var default_fragment = "void main() {\n	gl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\n}";
class ShaderMaterial extends Material {
  constructor(parameters) {
    super();
    this.isShaderMaterial = true;
    this.type = "ShaderMaterial";
    this.defines = {};
    this.uniforms = {};
    this.uniformsGroups = [];
    this.vertexShader = default_vertex;
    this.fragmentShader = default_fragment;
    this.linewidth = 1;
    this.wireframe = false;
    this.wireframeLinewidth = 1;
    this.fog = false;
    this.lights = false;
    this.clipping = false;
    this.forceSinglePass = true;
    this.extensions = {
      clipCullDistance: false,
      // set to use vertex shader clipping
      multiDraw: false
      // set to use vertex shader multi_draw / enable gl_DrawID
    };
    this.defaultAttributeValues = {
      "color": [1, 1, 1],
      "uv": [0, 0],
      "uv1": [0, 0]
    };
    this.index0AttributeName = void 0;
    this.uniformsNeedUpdate = false;
    this.glslVersion = null;
    if (parameters !== void 0) {
      this.setValues(parameters);
    }
  }
  copy(source) {
    super.copy(source);
    this.fragmentShader = source.fragmentShader;
    this.vertexShader = source.vertexShader;
    this.uniforms = cloneUniforms(source.uniforms);
    this.uniformsGroups = cloneUniformsGroups(source.uniformsGroups);
    this.defines = Object.assign({}, source.defines);
    this.wireframe = source.wireframe;
    this.wireframeLinewidth = source.wireframeLinewidth;
    this.fog = source.fog;
    this.lights = source.lights;
    this.clipping = source.clipping;
    this.extensions = Object.assign({}, source.extensions);
    this.glslVersion = source.glslVersion;
    return this;
  }
  toJSON(meta) {
    const data = super.toJSON(meta);
    data.glslVersion = this.glslVersion;
    data.uniforms = {};
    for (const name2 in this.uniforms) {
      const uniform = this.uniforms[name2];
      const value = uniform.value;
      if (value && value.isTexture) {
        data.uniforms[name2] = {
          type: "t",
          value: value.toJSON(meta).uuid
        };
      } else if (value && value.isColor) {
        data.uniforms[name2] = {
          type: "c",
          value: value.getHex()
        };
      } else if (value && value.isVector2) {
        data.uniforms[name2] = {
          type: "v2",
          value: value.toArray()
        };
      } else if (value && value.isVector3) {
        data.uniforms[name2] = {
          type: "v3",
          value: value.toArray()
        };
      } else if (value && value.isVector4) {
        data.uniforms[name2] = {
          type: "v4",
          value: value.toArray()
        };
      } else if (value && value.isMatrix3) {
        data.uniforms[name2] = {
          type: "m3",
          value: value.toArray()
        };
      } else if (value && value.isMatrix4) {
        data.uniforms[name2] = {
          type: "m4",
          value: value.toArray()
        };
      } else {
        data.uniforms[name2] = {
          value
        };
      }
    }
    if (Object.keys(this.defines).length > 0) data.defines = this.defines;
    data.vertexShader = this.vertexShader;
    data.fragmentShader = this.fragmentShader;
    data.lights = this.lights;
    data.clipping = this.clipping;
    const extensions = {};
    for (const key in this.extensions) {
      if (this.extensions[key] === true) extensions[key] = true;
    }
    if (Object.keys(extensions).length > 0) data.extensions = extensions;
    return data;
  }
}
class Camera extends Object3D {
  constructor() {
    super();
    this.isCamera = true;
    this.type = "Camera";
    this.matrixWorldInverse = new Matrix4();
    this.projectionMatrix = new Matrix4();
    this.projectionMatrixInverse = new Matrix4();
    this.coordinateSystem = WebGLCoordinateSystem;
  }
  copy(source, recursive) {
    super.copy(source, recursive);
    this.matrixWorldInverse.copy(source.matrixWorldInverse);
    this.projectionMatrix.copy(source.projectionMatrix);
    this.projectionMatrixInverse.copy(source.projectionMatrixInverse);
    this.coordinateSystem = source.coordinateSystem;
    return this;
  }
  getWorldDirection(target) {
    return super.getWorldDirection(target).negate();
  }
  updateMatrixWorld(force) {
    super.updateMatrixWorld(force);
    this.matrixWorldInverse.copy(this.matrixWorld).invert();
  }
  updateWorldMatrix(updateParents, updateChildren) {
    super.updateWorldMatrix(updateParents, updateChildren);
    this.matrixWorldInverse.copy(this.matrixWorld).invert();
  }
  clone() {
    return new this.constructor().copy(this);
  }
}
const _v3$1 = /* @__PURE__ */ new Vector3();
const _minTarget = /* @__PURE__ */ new Vector2();
const _maxTarget = /* @__PURE__ */ new Vector2();
class PerspectiveCamera extends Camera {
  constructor(fov2 = 50, aspect2 = 1, near = 0.1, far = 2e3) {
    super();
    this.isPerspectiveCamera = true;
    this.type = "PerspectiveCamera";
    this.fov = fov2;
    this.zoom = 1;
    this.near = near;
    this.far = far;
    this.focus = 10;
    this.aspect = aspect2;
    this.view = null;
    this.filmGauge = 35;
    this.filmOffset = 0;
    this.updateProjectionMatrix();
  }
  copy(source, recursive) {
    super.copy(source, recursive);
    this.fov = source.fov;
    this.zoom = source.zoom;
    this.near = source.near;
    this.far = source.far;
    this.focus = source.focus;
    this.aspect = source.aspect;
    this.view = source.view === null ? null : Object.assign({}, source.view);
    this.filmGauge = source.filmGauge;
    this.filmOffset = source.filmOffset;
    return this;
  }
  /**
   * Sets the FOV by focal length in respect to the current .filmGauge.
   *
   * The default film gauge is 35, so that the focal length can be specified for
   * a 35mm (full frame) camera.
   *
   * Values for focal length and film gauge must have the same unit.
   */
  setFocalLength(focalLength) {
    const vExtentSlope = 0.5 * this.getFilmHeight() / focalLength;
    this.fov = RAD2DEG * 2 * Math.atan(vExtentSlope);
    this.updateProjectionMatrix();
  }
  /**
   * Calculates the focal length from the current .fov and .filmGauge.
   */
  getFocalLength() {
    const vExtentSlope = Math.tan(DEG2RAD * 0.5 * this.fov);
    return 0.5 * this.getFilmHeight() / vExtentSlope;
  }
  getEffectiveFOV() {
    return RAD2DEG * 2 * Math.atan(
      Math.tan(DEG2RAD * 0.5 * this.fov) / this.zoom
    );
  }
  getFilmWidth() {
    return this.filmGauge * Math.min(this.aspect, 1);
  }
  getFilmHeight() {
    return this.filmGauge / Math.max(this.aspect, 1);
  }
  /**
   * Computes the 2D bounds of the camera's viewable rectangle at a given distance along the viewing direction.
   * Sets minTarget and maxTarget to the coordinates of the lower-left and upper-right corners of the view rectangle.
   */
  getViewBounds(distance, minTarget, maxTarget) {
    _v3$1.set(-1, -1, 0.5).applyMatrix4(this.projectionMatrixInverse);
    minTarget.set(_v3$1.x, _v3$1.y).multiplyScalar(-distance / _v3$1.z);
    _v3$1.set(1, 1, 0.5).applyMatrix4(this.projectionMatrixInverse);
    maxTarget.set(_v3$1.x, _v3$1.y).multiplyScalar(-distance / _v3$1.z);
  }
  /**
   * Computes the width and height of the camera's viewable rectangle at a given distance along the viewing direction.
   * Copies the result into the target Vector2, where x is width and y is height.
   */
  getViewSize(distance, target) {
    this.getViewBounds(distance, _minTarget, _maxTarget);
    return target.subVectors(_maxTarget, _minTarget);
  }
  /**
   * Sets an offset in a larger frustum. This is useful for multi-window or
   * multi-monitor/multi-machine setups.
   *
   * For example, if you have 3x2 monitors and each monitor is 1920x1080 and
   * the monitors are in grid like this
   *
   *   +---+---+---+
   *   | A | B | C |
   *   +---+---+---+
   *   | D | E | F |
   *   +---+---+---+
   *
   * then for each monitor you would call it like this
   *
   *   const w = 1920;
   *   const h = 1080;
   *   const fullWidth = w * 3;
   *   const fullHeight = h * 2;
   *
   *   --A--
   *   camera.setViewOffset( fullWidth, fullHeight, w * 0, h * 0, w, h );
   *   --B--
   *   camera.setViewOffset( fullWidth, fullHeight, w * 1, h * 0, w, h );
   *   --C--
   *   camera.setViewOffset( fullWidth, fullHeight, w * 2, h * 0, w, h );
   *   --D--
   *   camera.setViewOffset( fullWidth, fullHeight, w * 0, h * 1, w, h );
   *   --E--
   *   camera.setViewOffset( fullWidth, fullHeight, w * 1, h * 1, w, h );
   *   --F--
   *   camera.setViewOffset( fullWidth, fullHeight, w * 2, h * 1, w, h );
   *
   *   Note there is no reason monitors have to be the same size or in a grid.
   */
  setViewOffset(fullWidth, fullHeight, x, y, width, height) {
    this.aspect = fullWidth / fullHeight;
    if (this.view === null) {
      this.view = {
        enabled: true,
        fullWidth: 1,
        fullHeight: 1,
        offsetX: 0,
        offsetY: 0,
        width: 1,
        height: 1
      };
    }
    this.view.enabled = true;
    this.view.fullWidth = fullWidth;
    this.view.fullHeight = fullHeight;
    this.view.offsetX = x;
    this.view.offsetY = y;
    this.view.width = width;
    this.view.height = height;
    this.updateProjectionMatrix();
  }
  clearViewOffset() {
    if (this.view !== null) {
      this.view.enabled = false;
    }
    this.updateProjectionMatrix();
  }
  updateProjectionMatrix() {
    const near = this.near;
    let top = near * Math.tan(DEG2RAD * 0.5 * this.fov) / this.zoom;
    let height = 2 * top;
    let width = this.aspect * height;
    let left = -0.5 * width;
    const view = this.view;
    if (this.view !== null && this.view.enabled) {
      const fullWidth = view.fullWidth, fullHeight = view.fullHeight;
      left += view.offsetX * width / fullWidth;
      top -= view.offsetY * height / fullHeight;
      width *= view.width / fullWidth;
      height *= view.height / fullHeight;
    }
    const skew = this.filmOffset;
    if (skew !== 0) left += near * skew / this.getFilmWidth();
    this.projectionMatrix.makePerspective(left, left + width, top, top - height, near, this.far, this.coordinateSystem);
    this.projectionMatrixInverse.copy(this.projectionMatrix).invert();
  }
  toJSON(meta) {
    const data = super.toJSON(meta);
    data.object.fov = this.fov;
    data.object.zoom = this.zoom;
    data.object.near = this.near;
    data.object.far = this.far;
    data.object.focus = this.focus;
    data.object.aspect = this.aspect;
    if (this.view !== null) data.object.view = Object.assign({}, this.view);
    data.object.filmGauge = this.filmGauge;
    data.object.filmOffset = this.filmOffset;
    return data;
  }
}
const fov = -90;
const aspect = 1;
class CubeCamera extends Object3D {
  constructor(near, far, renderTarget) {
    super();
    this.type = "CubeCamera";
    this.renderTarget = renderTarget;
    this.coordinateSystem = null;
    this.activeMipmapLevel = 0;
    const cameraPX = new PerspectiveCamera(fov, aspect, near, far);
    cameraPX.layers = this.layers;
    this.add(cameraPX);
    const cameraNX = new PerspectiveCamera(fov, aspect, near, far);
    cameraNX.layers = this.layers;
    this.add(cameraNX);
    const cameraPY = new PerspectiveCamera(fov, aspect, near, far);
    cameraPY.layers = this.layers;
    this.add(cameraPY);
    const cameraNY = new PerspectiveCamera(fov, aspect, near, far);
    cameraNY.layers = this.layers;
    this.add(cameraNY);
    const cameraPZ = new PerspectiveCamera(fov, aspect, near, far);
    cameraPZ.layers = this.layers;
    this.add(cameraPZ);
    const cameraNZ = new PerspectiveCamera(fov, aspect, near, far);
    cameraNZ.layers = this.layers;
    this.add(cameraNZ);
  }
  updateCoordinateSystem() {
    const coordinateSystem = this.coordinateSystem;
    const cameras = this.children.concat();
    const [cameraPX, cameraNX, cameraPY, cameraNY, cameraPZ, cameraNZ] = cameras;
    for (const camera of cameras) this.remove(camera);
    if (coordinateSystem === WebGLCoordinateSystem) {
      cameraPX.up.set(0, 1, 0);
      cameraPX.lookAt(1, 0, 0);
      cameraNX.up.set(0, 1, 0);
      cameraNX.lookAt(-1, 0, 0);
      cameraPY.up.set(0, 0, -1);
      cameraPY.lookAt(0, 1, 0);
      cameraNY.up.set(0, 0, 1);
      cameraNY.lookAt(0, -1, 0);
      cameraPZ.up.set(0, 1, 0);
      cameraPZ.lookAt(0, 0, 1);
      cameraNZ.up.set(0, 1, 0);
      cameraNZ.lookAt(0, 0, -1);
    } else if (coordinateSystem === WebGPUCoordinateSystem) {
      cameraPX.up.set(0, -1, 0);
      cameraPX.lookAt(-1, 0, 0);
      cameraNX.up.set(0, -1, 0);
      cameraNX.lookAt(1, 0, 0);
      cameraPY.up.set(0, 0, 1);
      cameraPY.lookAt(0, 1, 0);
      cameraNY.up.set(0, 0, -1);
      cameraNY.lookAt(0, -1, 0);
      cameraPZ.up.set(0, -1, 0);
      cameraPZ.lookAt(0, 0, 1);
      cameraNZ.up.set(0, -1, 0);
      cameraNZ.lookAt(0, 0, -1);
    } else {
      throw new Error("THREE.CubeCamera.updateCoordinateSystem(): Invalid coordinate system: " + coordinateSystem);
    }
    for (const camera of cameras) {
      this.add(camera);
      camera.updateMatrixWorld();
    }
  }
  update(renderer2, scene) {
    if (this.parent === null) this.updateMatrixWorld();
    const { renderTarget, activeMipmapLevel } = this;
    if (this.coordinateSystem !== renderer2.coordinateSystem) {
      this.coordinateSystem = renderer2.coordinateSystem;
      this.updateCoordinateSystem();
    }
    const [cameraPX, cameraNX, cameraPY, cameraNY, cameraPZ, cameraNZ] = this.children;
    const currentRenderTarget = renderer2.getRenderTarget();
    const currentActiveCubeFace = renderer2.getActiveCubeFace();
    const currentActiveMipmapLevel = renderer2.getActiveMipmapLevel();
    const currentXrEnabled = renderer2.xr.enabled;
    renderer2.xr.enabled = false;
    const generateMipmaps = renderTarget.texture.generateMipmaps;
    renderTarget.texture.generateMipmaps = false;
    renderer2.setRenderTarget(renderTarget, 0, activeMipmapLevel);
    renderer2.render(scene, cameraPX);
    renderer2.setRenderTarget(renderTarget, 1, activeMipmapLevel);
    renderer2.render(scene, cameraNX);
    renderer2.setRenderTarget(renderTarget, 2, activeMipmapLevel);
    renderer2.render(scene, cameraPY);
    renderer2.setRenderTarget(renderTarget, 3, activeMipmapLevel);
    renderer2.render(scene, cameraNY);
    renderer2.setRenderTarget(renderTarget, 4, activeMipmapLevel);
    renderer2.render(scene, cameraPZ);
    renderTarget.texture.generateMipmaps = generateMipmaps;
    renderer2.setRenderTarget(renderTarget, 5, activeMipmapLevel);
    renderer2.render(scene, cameraNZ);
    renderer2.setRenderTarget(currentRenderTarget, currentActiveCubeFace, currentActiveMipmapLevel);
    renderer2.xr.enabled = currentXrEnabled;
    renderTarget.texture.needsPMREMUpdate = true;
  }
}
class CubeTexture extends Texture {
  constructor(images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, colorSpace) {
    images = images !== void 0 ? images : [];
    mapping = mapping !== void 0 ? mapping : CubeReflectionMapping;
    super(images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, colorSpace);
    this.isCubeTexture = true;
    this.flipY = false;
  }
  get images() {
    return this.image;
  }
  set images(value) {
    this.image = value;
  }
}
class WebGLCubeRenderTarget extends WebGLRenderTarget {
  constructor(size2 = 1, options = {}) {
    super(size2, size2, options);
    this.isWebGLCubeRenderTarget = true;
    const image = { width: size2, height: size2, depth: 1 };
    const images = [image, image, image, image, image, image];
    this.texture = new CubeTexture(images, options.mapping, options.wrapS, options.wrapT, options.magFilter, options.minFilter, options.format, options.type, options.anisotropy, options.colorSpace);
    this.texture.isRenderTargetTexture = true;
    this.texture.generateMipmaps = options.generateMipmaps !== void 0 ? options.generateMipmaps : false;
    this.texture.minFilter = options.minFilter !== void 0 ? options.minFilter : LinearFilter;
  }
  fromEquirectangularTexture(renderer2, texture) {
    this.texture.type = texture.type;
    this.texture.colorSpace = texture.colorSpace;
    this.texture.generateMipmaps = texture.generateMipmaps;
    this.texture.minFilter = texture.minFilter;
    this.texture.magFilter = texture.magFilter;
    const shader = {
      uniforms: {
        tEquirect: { value: null }
      },
      vertexShader: (
        /* glsl */
        `

				varying vec3 vWorldDirection;

				vec3 transformDirection( in vec3 dir, in mat4 matrix ) {

					return normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );

				}

				void main() {

					vWorldDirection = transformDirection( position, modelMatrix );

					#include <begin_vertex>
					#include <project_vertex>

				}
			`
      ),
      fragmentShader: (
        /* glsl */
        `

				uniform sampler2D tEquirect;

				varying vec3 vWorldDirection;

				#include <common>

				void main() {

					vec3 direction = normalize( vWorldDirection );

					vec2 sampleUV = equirectUv( direction );

					gl_FragColor = texture2D( tEquirect, sampleUV );

				}
			`
      )
    };
    const geometry = new BoxGeometry(5, 5, 5);
    const material = new ShaderMaterial({
      name: "CubemapFromEquirect",
      uniforms: cloneUniforms(shader.uniforms),
      vertexShader: shader.vertexShader,
      fragmentShader: shader.fragmentShader,
      side: BackSide,
      blending: NoBlending
    });
    material.uniforms.tEquirect.value = texture;
    const mesh = new Mesh(geometry, material);
    const currentMinFilter = texture.minFilter;
    if (texture.minFilter === LinearMipmapLinearFilter) texture.minFilter = LinearFilter;
    const camera = new CubeCamera(1, 10, this);
    camera.update(renderer2, mesh);
    texture.minFilter = currentMinFilter;
    mesh.geometry.dispose();
    mesh.material.dispose();
    return this;
  }
  clear(renderer2, color, depth, stencil) {
    const currentRenderTarget = renderer2.getRenderTarget();
    for (let i = 0; i < 6; i++) {
      renderer2.setRenderTarget(this, i);
      renderer2.clear(color, depth, stencil);
    }
    renderer2.setRenderTarget(currentRenderTarget);
  }
}
const _vector1 = /* @__PURE__ */ new Vector3();
const _vector2 = /* @__PURE__ */ new Vector3();
const _normalMatrix = /* @__PURE__ */ new Matrix3();
class Plane {
  constructor(normal = new Vector3(1, 0, 0), constant = 0) {
    this.isPlane = true;
    this.normal = normal;
    this.constant = constant;
  }
  set(normal, constant) {
    this.normal.copy(normal);
    this.constant = constant;
    return this;
  }
  setComponents(x, y, z2, w) {
    this.normal.set(x, y, z2);
    this.constant = w;
    return this;
  }
  setFromNormalAndCoplanarPoint(normal, point) {
    this.normal.copy(normal);
    this.constant = -point.dot(this.normal);
    return this;
  }
  setFromCoplanarPoints(a, b, c) {
    const normal = _vector1.subVectors(c, b).cross(_vector2.subVectors(a, b)).normalize();
    this.setFromNormalAndCoplanarPoint(normal, a);
    return this;
  }
  copy(plane) {
    this.normal.copy(plane.normal);
    this.constant = plane.constant;
    return this;
  }
  normalize() {
    const inverseNormalLength = 1 / this.normal.length();
    this.normal.multiplyScalar(inverseNormalLength);
    this.constant *= inverseNormalLength;
    return this;
  }
  negate() {
    this.constant *= -1;
    this.normal.negate();
    return this;
  }
  distanceToPoint(point) {
    return this.normal.dot(point) + this.constant;
  }
  distanceToSphere(sphere) {
    return this.distanceToPoint(sphere.center) - sphere.radius;
  }
  projectPoint(point, target) {
    return target.copy(point).addScaledVector(this.normal, -this.distanceToPoint(point));
  }
  intersectLine(line, target) {
    const direction = line.delta(_vector1);
    const denominator = this.normal.dot(direction);
    if (denominator === 0) {
      if (this.distanceToPoint(line.start) === 0) {
        return target.copy(line.start);
      }
      return null;
    }
    const t = -(line.start.dot(this.normal) + this.constant) / denominator;
    if (t < 0 || t > 1) {
      return null;
    }
    return target.copy(line.start).addScaledVector(direction, t);
  }
  intersectsLine(line) {
    const startSign = this.distanceToPoint(line.start);
    const endSign = this.distanceToPoint(line.end);
    return startSign < 0 && endSign > 0 || endSign < 0 && startSign > 0;
  }
  intersectsBox(box) {
    return box.intersectsPlane(this);
  }
  intersectsSphere(sphere) {
    return sphere.intersectsPlane(this);
  }
  coplanarPoint(target) {
    return target.copy(this.normal).multiplyScalar(-this.constant);
  }
  applyMatrix4(matrix, optionalNormalMatrix) {
    const normalMatrix = optionalNormalMatrix || _normalMatrix.getNormalMatrix(matrix);
    const referencePoint = this.coplanarPoint(_vector1).applyMatrix4(matrix);
    const normal = this.normal.applyMatrix3(normalMatrix).normalize();
    this.constant = -referencePoint.dot(normal);
    return this;
  }
  translate(offset) {
    this.constant -= offset.dot(this.normal);
    return this;
  }
  equals(plane) {
    return plane.normal.equals(this.normal) && plane.constant === this.constant;
  }
  clone() {
    return new this.constructor().copy(this);
  }
}
const _sphere$5 = /* @__PURE__ */ new Sphere();
const _vector$7 = /* @__PURE__ */ new Vector3();
class Frustum {
  constructor(p0 = new Plane(), p1 = new Plane(), p2 = new Plane(), p3 = new Plane(), p4 = new Plane(), p5 = new Plane()) {
    this.planes = [p0, p1, p2, p3, p4, p5];
  }
  set(p0, p1, p2, p3, p4, p5) {
    const planes = this.planes;
    planes[0].copy(p0);
    planes[1].copy(p1);
    planes[2].copy(p2);
    planes[3].copy(p3);
    planes[4].copy(p4);
    planes[5].copy(p5);
    return this;
  }
  copy(frustum) {
    const planes = this.planes;
    for (let i = 0; i < 6; i++) {
      planes[i].copy(frustum.planes[i]);
    }
    return this;
  }
  setFromProjectionMatrix(m, coordinateSystem = WebGLCoordinateSystem) {
    const planes = this.planes;
    const me2 = m.elements;
    const me0 = me2[0], me1 = me2[1], me22 = me2[2], me3 = me2[3];
    const me4 = me2[4], me5 = me2[5], me6 = me2[6], me7 = me2[7];
    const me8 = me2[8], me9 = me2[9], me10 = me2[10], me11 = me2[11];
    const me12 = me2[12], me13 = me2[13], me14 = me2[14], me15 = me2[15];
    planes[0].setComponents(me3 - me0, me7 - me4, me11 - me8, me15 - me12).normalize();
    planes[1].setComponents(me3 + me0, me7 + me4, me11 + me8, me15 + me12).normalize();
    planes[2].setComponents(me3 + me1, me7 + me5, me11 + me9, me15 + me13).normalize();
    planes[3].setComponents(me3 - me1, me7 - me5, me11 - me9, me15 - me13).normalize();
    planes[4].setComponents(me3 - me22, me7 - me6, me11 - me10, me15 - me14).normalize();
    if (coordinateSystem === WebGLCoordinateSystem) {
      planes[5].setComponents(me3 + me22, me7 + me6, me11 + me10, me15 + me14).normalize();
    } else if (coordinateSystem === WebGPUCoordinateSystem) {
      planes[5].setComponents(me22, me6, me10, me14).normalize();
    } else {
      throw new Error("THREE.Frustum.setFromProjectionMatrix(): Invalid coordinate system: " + coordinateSystem);
    }
    return this;
  }
  intersectsObject(object) {
    if (object.boundingSphere !== void 0) {
      if (object.boundingSphere === null) object.computeBoundingSphere();
      _sphere$5.copy(object.boundingSphere).applyMatrix4(object.matrixWorld);
    } else {
      const geometry = object.geometry;
      if (geometry.boundingSphere === null) geometry.computeBoundingSphere();
      _sphere$5.copy(geometry.boundingSphere).applyMatrix4(object.matrixWorld);
    }
    return this.intersectsSphere(_sphere$5);
  }
  intersectsSprite(sprite) {
    _sphere$5.center.set(0, 0, 0);
    _sphere$5.radius = 0.7071067811865476;
    _sphere$5.applyMatrix4(sprite.matrixWorld);
    return this.intersectsSphere(_sphere$5);
  }
  intersectsSphere(sphere) {
    const planes = this.planes;
    const center = sphere.center;
    const negRadius = -sphere.radius;
    for (let i = 0; i < 6; i++) {
      const distance = planes[i].distanceToPoint(center);
      if (distance < negRadius) {
        return false;
      }
    }
    return true;
  }
  intersectsBox(box) {
    const planes = this.planes;
    for (let i = 0; i < 6; i++) {
      const plane = planes[i];
      _vector$7.x = plane.normal.x > 0 ? box.max.x : box.min.x;
      _vector$7.y = plane.normal.y > 0 ? box.max.y : box.min.y;
      _vector$7.z = plane.normal.z > 0 ? box.max.z : box.min.z;
      if (plane.distanceToPoint(_vector$7) < 0) {
        return false;
      }
    }
    return true;
  }
  containsPoint(point) {
    const planes = this.planes;
    for (let i = 0; i < 6; i++) {
      if (planes[i].distanceToPoint(point) < 0) {
        return false;
      }
    }
    return true;
  }
  clone() {
    return new this.constructor().copy(this);
  }
}
function WebGLAnimation() {
  let context = null;
  let isAnimating = false;
  let animationLoop = null;
  let requestId = null;
  function onAnimationFrame(time, frame) {
    animationLoop(time, frame);
    requestId = context.requestAnimationFrame(onAnimationFrame);
  }
  return {
    start: function() {
      if (isAnimating === true) return;
      if (animationLoop === null) return;
      requestId = context.requestAnimationFrame(onAnimationFrame);
      isAnimating = true;
    },
    stop: function() {
      context.cancelAnimationFrame(requestId);
      isAnimating = false;
    },
    setAnimationLoop: function(callback) {
      animationLoop = callback;
    },
    setContext: function(value) {
      context = value;
    }
  };
}
function WebGLAttributes(gl2) {
  const buffers = /* @__PURE__ */ new WeakMap();
  function createBuffer(attribute, bufferType) {
    const array = attribute.array;
    const usage = attribute.usage;
    const size2 = array.byteLength;
    const buffer = gl2.createBuffer();
    gl2.bindBuffer(bufferType, buffer);
    gl2.bufferData(bufferType, array, usage);
    attribute.onUploadCallback();
    let type;
    if (array instanceof Float32Array) {
      type = gl2.FLOAT;
    } else if (array instanceof Uint16Array) {
      if (attribute.isFloat16BufferAttribute) {
        type = gl2.HALF_FLOAT;
      } else {
        type = gl2.UNSIGNED_SHORT;
      }
    } else if (array instanceof Int16Array) {
      type = gl2.SHORT;
    } else if (array instanceof Uint32Array) {
      type = gl2.UNSIGNED_INT;
    } else if (array instanceof Int32Array) {
      type = gl2.INT;
    } else if (array instanceof Int8Array) {
      type = gl2.BYTE;
    } else if (array instanceof Uint8Array) {
      type = gl2.UNSIGNED_BYTE;
    } else if (array instanceof Uint8ClampedArray) {
      type = gl2.UNSIGNED_BYTE;
    } else {
      throw new Error("THREE.WebGLAttributes: Unsupported buffer data format: " + array);
    }
    return {
      buffer,
      type,
      bytesPerElement: array.BYTES_PER_ELEMENT,
      version: attribute.version,
      size: size2
    };
  }
  function updateBuffer(buffer, attribute, bufferType) {
    const array = attribute.array;
    const updateRanges = attribute.updateRanges;
    gl2.bindBuffer(bufferType, buffer);
    if (updateRanges.length === 0) {
      gl2.bufferSubData(bufferType, 0, array);
    } else {
      updateRanges.sort((a, b) => a.start - b.start);
      let mergeIndex = 0;
      for (let i = 1; i < updateRanges.length; i++) {
        const previousRange = updateRanges[mergeIndex];
        const range = updateRanges[i];
        if (range.start <= previousRange.start + previousRange.count + 1) {
          previousRange.count = Math.max(
            previousRange.count,
            range.start + range.count - previousRange.start
          );
        } else {
          ++mergeIndex;
          updateRanges[mergeIndex] = range;
        }
      }
      updateRanges.length = mergeIndex + 1;
      for (let i = 0, l = updateRanges.length; i < l; i++) {
        const range = updateRanges[i];
        gl2.bufferSubData(
          bufferType,
          range.start * array.BYTES_PER_ELEMENT,
          array,
          range.start,
          range.count
        );
      }
      attribute.clearUpdateRanges();
    }
    attribute.onUploadCallback();
  }
  function get2(attribute) {
    if (attribute.isInterleavedBufferAttribute) attribute = attribute.data;
    return buffers.get(attribute);
  }
  function remove2(attribute) {
    if (attribute.isInterleavedBufferAttribute) attribute = attribute.data;
    const data = buffers.get(attribute);
    if (data) {
      gl2.deleteBuffer(data.buffer);
      buffers.delete(attribute);
    }
  }
  function update(attribute, bufferType) {
    if (attribute.isInterleavedBufferAttribute) attribute = attribute.data;
    if (attribute.isGLBufferAttribute) {
      const cached = buffers.get(attribute);
      if (!cached || cached.version < attribute.version) {
        buffers.set(attribute, {
          buffer: attribute.buffer,
          type: attribute.type,
          bytesPerElement: attribute.elementSize,
          version: attribute.version
        });
      }
      return;
    }
    const data = buffers.get(attribute);
    if (data === void 0) {
      buffers.set(attribute, createBuffer(attribute, bufferType));
    } else if (data.version < attribute.version) {
      if (data.size !== attribute.array.byteLength) {
        throw new Error("THREE.WebGLAttributes: The size of the buffer attribute's array buffer does not match the original size. Resizing buffer attributes is not supported.");
      }
      updateBuffer(data.buffer, attribute, bufferType);
      data.version = attribute.version;
    }
  }
  return {
    get: get2,
    remove: remove2,
    update
  };
}
class PlaneGeometry extends BufferGeometry {
  constructor(width = 1, height = 1, widthSegments = 1, heightSegments = 1) {
    super();
    this.type = "PlaneGeometry";
    this.parameters = {
      width,
      height,
      widthSegments,
      heightSegments
    };
    const width_half = width / 2;
    const height_half = height / 2;
    const gridX = Math.floor(widthSegments);
    const gridY = Math.floor(heightSegments);
    const gridX1 = gridX + 1;
    const gridY1 = gridY + 1;
    const segment_width = width / gridX;
    const segment_height = height / gridY;
    const indices = [];
    const vertices = [];
    const normals = [];
    const uvs = [];
    for (let iy = 0; iy < gridY1; iy++) {
      const y = iy * segment_height - height_half;
      for (let ix = 0; ix < gridX1; ix++) {
        const x = ix * segment_width - width_half;
        vertices.push(x, -y, 0);
        normals.push(0, 0, 1);
        uvs.push(ix / gridX);
        uvs.push(1 - iy / gridY);
      }
    }
    for (let iy = 0; iy < gridY; iy++) {
      for (let ix = 0; ix < gridX; ix++) {
        const a = ix + gridX1 * iy;
        const b = ix + gridX1 * (iy + 1);
        const c = ix + 1 + gridX1 * (iy + 1);
        const d = ix + 1 + gridX1 * iy;
        indices.push(a, b, d);
        indices.push(b, c, d);
      }
    }
    this.setIndex(indices);
    this.setAttribute("position", new Float32BufferAttribute(vertices, 3));
    this.setAttribute("normal", new Float32BufferAttribute(normals, 3));
    this.setAttribute("uv", new Float32BufferAttribute(uvs, 2));
  }
  copy(source) {
    super.copy(source);
    this.parameters = Object.assign({}, source.parameters);
    return this;
  }
  static fromJSON(data) {
    return new PlaneGeometry(data.width, data.height, data.widthSegments, data.heightSegments);
  }
}
var alphahash_fragment = "#ifdef USE_ALPHAHASH\n	if ( diffuseColor.a < getAlphaHashThreshold( vPosition ) ) discard;\n#endif";
var alphahash_pars_fragment = "#ifdef USE_ALPHAHASH\n	const float ALPHA_HASH_SCALE = 0.05;\n	float hash2D( vec2 value ) {\n		return fract( 1.0e4 * sin( 17.0 * value.x + 0.1 * value.y ) * ( 0.1 + abs( sin( 13.0 * value.y + value.x ) ) ) );\n	}\n	float hash3D( vec3 value ) {\n		return hash2D( vec2( hash2D( value.xy ), value.z ) );\n	}\n	float getAlphaHashThreshold( vec3 position ) {\n		float maxDeriv = max(\n			length( dFdx( position.xyz ) ),\n			length( dFdy( position.xyz ) )\n		);\n		float pixScale = 1.0 / ( ALPHA_HASH_SCALE * maxDeriv );\n		vec2 pixScales = vec2(\n			exp2( floor( log2( pixScale ) ) ),\n			exp2( ceil( log2( pixScale ) ) )\n		);\n		vec2 alpha = vec2(\n			hash3D( floor( pixScales.x * position.xyz ) ),\n			hash3D( floor( pixScales.y * position.xyz ) )\n		);\n		float lerpFactor = fract( log2( pixScale ) );\n		float x = ( 1.0 - lerpFactor ) * alpha.x + lerpFactor * alpha.y;\n		float a = min( lerpFactor, 1.0 - lerpFactor );\n		vec3 cases = vec3(\n			x * x / ( 2.0 * a * ( 1.0 - a ) ),\n			( x - 0.5 * a ) / ( 1.0 - a ),\n			1.0 - ( ( 1.0 - x ) * ( 1.0 - x ) / ( 2.0 * a * ( 1.0 - a ) ) )\n		);\n		float threshold = ( x < ( 1.0 - a ) )\n			? ( ( x < a ) ? cases.x : cases.y )\n			: cases.z;\n		return clamp( threshold , 1.0e-6, 1.0 );\n	}\n#endif";
var alphamap_fragment = "#ifdef USE_ALPHAMAP\n	diffuseColor.a *= texture2D( alphaMap, vAlphaMapUv ).g;\n#endif";
var alphamap_pars_fragment = "#ifdef USE_ALPHAMAP\n	uniform sampler2D alphaMap;\n#endif";
var alphatest_fragment = "#ifdef USE_ALPHATEST\n	#ifdef ALPHA_TO_COVERAGE\n	diffuseColor.a = smoothstep( alphaTest, alphaTest + fwidth( diffuseColor.a ), diffuseColor.a );\n	if ( diffuseColor.a == 0.0 ) discard;\n	#else\n	if ( diffuseColor.a < alphaTest ) discard;\n	#endif\n#endif";
var alphatest_pars_fragment = "#ifdef USE_ALPHATEST\n	uniform float alphaTest;\n#endif";
var aomap_fragment = "#ifdef USE_AOMAP\n	float ambientOcclusion = ( texture2D( aoMap, vAoMapUv ).r - 1.0 ) * aoMapIntensity + 1.0;\n	reflectedLight.indirectDiffuse *= ambientOcclusion;\n	#if defined( USE_CLEARCOAT ) \n		clearcoatSpecularIndirect *= ambientOcclusion;\n	#endif\n	#if defined( USE_SHEEN ) \n		sheenSpecularIndirect *= ambientOcclusion;\n	#endif\n	#if defined( USE_ENVMAP ) && defined( STANDARD )\n		float dotNV = saturate( dot( geometryNormal, geometryViewDir ) );\n		reflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.roughness );\n	#endif\n#endif";
var aomap_pars_fragment = "#ifdef USE_AOMAP\n	uniform sampler2D aoMap;\n	uniform float aoMapIntensity;\n#endif";
var batching_pars_vertex = "#ifdef USE_BATCHING\n	#if ! defined( GL_ANGLE_multi_draw )\n	#define gl_DrawID _gl_DrawID\n	uniform int _gl_DrawID;\n	#endif\n	uniform highp sampler2D batchingTexture;\n	uniform highp usampler2D batchingIdTexture;\n	mat4 getBatchingMatrix( const in float i ) {\n		int size = textureSize( batchingTexture, 0 ).x;\n		int j = int( i ) * 4;\n		int x = j % size;\n		int y = j / size;\n		vec4 v1 = texelFetch( batchingTexture, ivec2( x, y ), 0 );\n		vec4 v2 = texelFetch( batchingTexture, ivec2( x + 1, y ), 0 );\n		vec4 v3 = texelFetch( batchingTexture, ivec2( x + 2, y ), 0 );\n		vec4 v4 = texelFetch( batchingTexture, ivec2( x + 3, y ), 0 );\n		return mat4( v1, v2, v3, v4 );\n	}\n	float getIndirectIndex( const in int i ) {\n		int size = textureSize( batchingIdTexture, 0 ).x;\n		int x = i % size;\n		int y = i / size;\n		return float( texelFetch( batchingIdTexture, ivec2( x, y ), 0 ).r );\n	}\n#endif\n#ifdef USE_BATCHING_COLOR\n	uniform sampler2D batchingColorTexture;\n	vec3 getBatchingColor( const in float i ) {\n		int size = textureSize( batchingColorTexture, 0 ).x;\n		int j = int( i );\n		int x = j % size;\n		int y = j / size;\n		return texelFetch( batchingColorTexture, ivec2( x, y ), 0 ).rgb;\n	}\n#endif";
var batching_vertex = "#ifdef USE_BATCHING\n	mat4 batchingMatrix = getBatchingMatrix( getIndirectIndex( gl_DrawID ) );\n#endif";
var begin_vertex = "vec3 transformed = vec3( position );\n#ifdef USE_ALPHAHASH\n	vPosition = vec3( position );\n#endif";
var beginnormal_vertex = "vec3 objectNormal = vec3( normal );\n#ifdef USE_TANGENT\n	vec3 objectTangent = vec3( tangent.xyz );\n#endif";
var bsdfs = "float G_BlinnPhong_Implicit( ) {\n	return 0.25;\n}\nfloat D_BlinnPhong( const in float shininess, const in float dotNH ) {\n	return RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );\n}\nvec3 BRDF_BlinnPhong( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float shininess ) {\n	vec3 halfDir = normalize( lightDir + viewDir );\n	float dotNH = saturate( dot( normal, halfDir ) );\n	float dotVH = saturate( dot( viewDir, halfDir ) );\n	vec3 F = F_Schlick( specularColor, 1.0, dotVH );\n	float G = G_BlinnPhong_Implicit( );\n	float D = D_BlinnPhong( shininess, dotNH );\n	return F * ( G * D );\n} // validated";
var iridescence_fragment = "#ifdef USE_IRIDESCENCE\n	const mat3 XYZ_TO_REC709 = mat3(\n		 3.2404542, -0.9692660,  0.0556434,\n		-1.5371385,  1.8760108, -0.2040259,\n		-0.4985314,  0.0415560,  1.0572252\n	);\n	vec3 Fresnel0ToIor( vec3 fresnel0 ) {\n		vec3 sqrtF0 = sqrt( fresnel0 );\n		return ( vec3( 1.0 ) + sqrtF0 ) / ( vec3( 1.0 ) - sqrtF0 );\n	}\n	vec3 IorToFresnel0( vec3 transmittedIor, float incidentIor ) {\n		return pow2( ( transmittedIor - vec3( incidentIor ) ) / ( transmittedIor + vec3( incidentIor ) ) );\n	}\n	float IorToFresnel0( float transmittedIor, float incidentIor ) {\n		return pow2( ( transmittedIor - incidentIor ) / ( transmittedIor + incidentIor ));\n	}\n	vec3 evalSensitivity( float OPD, vec3 shift ) {\n		float phase = 2.0 * PI * OPD * 1.0e-9;\n		vec3 val = vec3( 5.4856e-13, 4.4201e-13, 5.2481e-13 );\n		vec3 pos = vec3( 1.6810e+06, 1.7953e+06, 2.2084e+06 );\n		vec3 var = vec3( 4.3278e+09, 9.3046e+09, 6.6121e+09 );\n		vec3 xyz = val * sqrt( 2.0 * PI * var ) * cos( pos * phase + shift ) * exp( - pow2( phase ) * var );\n		xyz.x += 9.7470e-14 * sqrt( 2.0 * PI * 4.5282e+09 ) * cos( 2.2399e+06 * phase + shift[ 0 ] ) * exp( - 4.5282e+09 * pow2( phase ) );\n		xyz /= 1.0685e-7;\n		vec3 rgb = XYZ_TO_REC709 * xyz;\n		return rgb;\n	}\n	vec3 evalIridescence( float outsideIOR, float eta2, float cosTheta1, float thinFilmThickness, vec3 baseF0 ) {\n		vec3 I;\n		float iridescenceIOR = mix( outsideIOR, eta2, smoothstep( 0.0, 0.03, thinFilmThickness ) );\n		float sinTheta2Sq = pow2( outsideIOR / iridescenceIOR ) * ( 1.0 - pow2( cosTheta1 ) );\n		float cosTheta2Sq = 1.0 - sinTheta2Sq;\n		if ( cosTheta2Sq < 0.0 ) {\n			return vec3( 1.0 );\n		}\n		float cosTheta2 = sqrt( cosTheta2Sq );\n		float R0 = IorToFresnel0( iridescenceIOR, outsideIOR );\n		float R12 = F_Schlick( R0, 1.0, cosTheta1 );\n		float T121 = 1.0 - R12;\n		float phi12 = 0.0;\n		if ( iridescenceIOR < outsideIOR ) phi12 = PI;\n		float phi21 = PI - phi12;\n		vec3 baseIOR = Fresnel0ToIor( clamp( baseF0, 0.0, 0.9999 ) );		vec3 R1 = IorToFresnel0( baseIOR, iridescenceIOR );\n		vec3 R23 = F_Schlick( R1, 1.0, cosTheta2 );\n		vec3 phi23 = vec3( 0.0 );\n		if ( baseIOR[ 0 ] < iridescenceIOR ) phi23[ 0 ] = PI;\n		if ( baseIOR[ 1 ] < iridescenceIOR ) phi23[ 1 ] = PI;\n		if ( baseIOR[ 2 ] < iridescenceIOR ) phi23[ 2 ] = PI;\n		float OPD = 2.0 * iridescenceIOR * thinFilmThickness * cosTheta2;\n		vec3 phi = vec3( phi21 ) + phi23;\n		vec3 R123 = clamp( R12 * R23, 1e-5, 0.9999 );\n		vec3 r123 = sqrt( R123 );\n		vec3 Rs = pow2( T121 ) * R23 / ( vec3( 1.0 ) - R123 );\n		vec3 C0 = R12 + Rs;\n		I = C0;\n		vec3 Cm = Rs - T121;\n		for ( int m = 1; m <= 2; ++ m ) {\n			Cm *= r123;\n			vec3 Sm = 2.0 * evalSensitivity( float( m ) * OPD, float( m ) * phi );\n			I += Cm * Sm;\n		}\n		return max( I, vec3( 0.0 ) );\n	}\n#endif";
var bumpmap_pars_fragment = "#ifdef USE_BUMPMAP\n	uniform sampler2D bumpMap;\n	uniform float bumpScale;\n	vec2 dHdxy_fwd() {\n		vec2 dSTdx = dFdx( vBumpMapUv );\n		vec2 dSTdy = dFdy( vBumpMapUv );\n		float Hll = bumpScale * texture2D( bumpMap, vBumpMapUv ).x;\n		float dBx = bumpScale * texture2D( bumpMap, vBumpMapUv + dSTdx ).x - Hll;\n		float dBy = bumpScale * texture2D( bumpMap, vBumpMapUv + dSTdy ).x - Hll;\n		return vec2( dBx, dBy );\n	}\n	vec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy, float faceDirection ) {\n		vec3 vSigmaX = normalize( dFdx( surf_pos.xyz ) );\n		vec3 vSigmaY = normalize( dFdy( surf_pos.xyz ) );\n		vec3 vN = surf_norm;\n		vec3 R1 = cross( vSigmaY, vN );\n		vec3 R2 = cross( vN, vSigmaX );\n		float fDet = dot( vSigmaX, R1 ) * faceDirection;\n		vec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\n		return normalize( abs( fDet ) * surf_norm - vGrad );\n	}\n#endif";
var clipping_planes_fragment = "#if NUM_CLIPPING_PLANES > 0\n	vec4 plane;\n	#ifdef ALPHA_TO_COVERAGE\n		float distanceToPlane, distanceGradient;\n		float clipOpacity = 1.0;\n		#pragma unroll_loop_start\n		for ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {\n			plane = clippingPlanes[ i ];\n			distanceToPlane = - dot( vClipPosition, plane.xyz ) + plane.w;\n			distanceGradient = fwidth( distanceToPlane ) / 2.0;\n			clipOpacity *= smoothstep( - distanceGradient, distanceGradient, distanceToPlane );\n			if ( clipOpacity == 0.0 ) discard;\n		}\n		#pragma unroll_loop_end\n		#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES\n			float unionClipOpacity = 1.0;\n			#pragma unroll_loop_start\n			for ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {\n				plane = clippingPlanes[ i ];\n				distanceToPlane = - dot( vClipPosition, plane.xyz ) + plane.w;\n				distanceGradient = fwidth( distanceToPlane ) / 2.0;\n				unionClipOpacity *= 1.0 - smoothstep( - distanceGradient, distanceGradient, distanceToPlane );\n			}\n			#pragma unroll_loop_end\n			clipOpacity *= 1.0 - unionClipOpacity;\n		#endif\n		diffuseColor.a *= clipOpacity;\n		if ( diffuseColor.a == 0.0 ) discard;\n	#else\n		#pragma unroll_loop_start\n		for ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {\n			plane = clippingPlanes[ i ];\n			if ( dot( vClipPosition, plane.xyz ) > plane.w ) discard;\n		}\n		#pragma unroll_loop_end\n		#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES\n			bool clipped = true;\n			#pragma unroll_loop_start\n			for ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {\n				plane = clippingPlanes[ i ];\n				clipped = ( dot( vClipPosition, plane.xyz ) > plane.w ) && clipped;\n			}\n			#pragma unroll_loop_end\n			if ( clipped ) discard;\n		#endif\n	#endif\n#endif";
var clipping_planes_pars_fragment = "#if NUM_CLIPPING_PLANES > 0\n	varying vec3 vClipPosition;\n	uniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];\n#endif";
var clipping_planes_pars_vertex = "#if NUM_CLIPPING_PLANES > 0\n	varying vec3 vClipPosition;\n#endif";
var clipping_planes_vertex = "#if NUM_CLIPPING_PLANES > 0\n	vClipPosition = - mvPosition.xyz;\n#endif";
var color_fragment = "#if defined( USE_COLOR_ALPHA )\n	diffuseColor *= vColor;\n#elif defined( USE_COLOR )\n	diffuseColor.rgb *= vColor;\n#endif";
var color_pars_fragment = "#if defined( USE_COLOR_ALPHA )\n	varying vec4 vColor;\n#elif defined( USE_COLOR )\n	varying vec3 vColor;\n#endif";
var color_pars_vertex = "#if defined( USE_COLOR_ALPHA )\n	varying vec4 vColor;\n#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR ) || defined( USE_BATCHING_COLOR )\n	varying vec3 vColor;\n#endif";
var color_vertex = "#if defined( USE_COLOR_ALPHA )\n	vColor = vec4( 1.0 );\n#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR ) || defined( USE_BATCHING_COLOR )\n	vColor = vec3( 1.0 );\n#endif\n#ifdef USE_COLOR\n	vColor *= color;\n#endif\n#ifdef USE_INSTANCING_COLOR\n	vColor.xyz *= instanceColor.xyz;\n#endif\n#ifdef USE_BATCHING_COLOR\n	vec3 batchingColor = getBatchingColor( getIndirectIndex( gl_DrawID ) );\n	vColor.xyz *= batchingColor.xyz;\n#endif";
var common = "#define PI 3.141592653589793\n#define PI2 6.283185307179586\n#define PI_HALF 1.5707963267948966\n#define RECIPROCAL_PI 0.3183098861837907\n#define RECIPROCAL_PI2 0.15915494309189535\n#define EPSILON 1e-6\n#ifndef saturate\n#define saturate( a ) clamp( a, 0.0, 1.0 )\n#endif\n#define whiteComplement( a ) ( 1.0 - saturate( a ) )\nfloat pow2( const in float x ) { return x*x; }\nvec3 pow2( const in vec3 x ) { return x*x; }\nfloat pow3( const in float x ) { return x*x*x; }\nfloat pow4( const in float x ) { float x2 = x*x; return x2*x2; }\nfloat max3( const in vec3 v ) { return max( max( v.x, v.y ), v.z ); }\nfloat average( const in vec3 v ) { return dot( v, vec3( 0.3333333 ) ); }\nhighp float rand( const in vec2 uv ) {\n	const highp float a = 12.9898, b = 78.233, c = 43758.5453;\n	highp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );\n	return fract( sin( sn ) * c );\n}\n#ifdef HIGH_PRECISION\n	float precisionSafeLength( vec3 v ) { return length( v ); }\n#else\n	float precisionSafeLength( vec3 v ) {\n		float maxComponent = max3( abs( v ) );\n		return length( v / maxComponent ) * maxComponent;\n	}\n#endif\nstruct IncidentLight {\n	vec3 color;\n	vec3 direction;\n	bool visible;\n};\nstruct ReflectedLight {\n	vec3 directDiffuse;\n	vec3 directSpecular;\n	vec3 indirectDiffuse;\n	vec3 indirectSpecular;\n};\n#ifdef USE_ALPHAHASH\n	varying vec3 vPosition;\n#endif\nvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\n	return normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\n}\nvec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\n	return normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\n}\nmat3 transposeMat3( const in mat3 m ) {\n	mat3 tmp;\n	tmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );\n	tmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );\n	tmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );\n	return tmp;\n}\nbool isPerspectiveMatrix( mat4 m ) {\n	return m[ 2 ][ 3 ] == - 1.0;\n}\nvec2 equirectUv( in vec3 dir ) {\n	float u = atan( dir.z, dir.x ) * RECIPROCAL_PI2 + 0.5;\n	float v = asin( clamp( dir.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\n	return vec2( u, v );\n}\nvec3 BRDF_Lambert( const in vec3 diffuseColor ) {\n	return RECIPROCAL_PI * diffuseColor;\n}\nvec3 F_Schlick( const in vec3 f0, const in float f90, const in float dotVH ) {\n	float fresnel = exp2( ( - 5.55473 * dotVH - 6.98316 ) * dotVH );\n	return f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );\n}\nfloat F_Schlick( const in float f0, const in float f90, const in float dotVH ) {\n	float fresnel = exp2( ( - 5.55473 * dotVH - 6.98316 ) * dotVH );\n	return f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );\n} // validated";
var cube_uv_reflection_fragment = "#ifdef ENVMAP_TYPE_CUBE_UV\n	#define cubeUV_minMipLevel 4.0\n	#define cubeUV_minTileSize 16.0\n	float getFace( vec3 direction ) {\n		vec3 absDirection = abs( direction );\n		float face = - 1.0;\n		if ( absDirection.x > absDirection.z ) {\n			if ( absDirection.x > absDirection.y )\n				face = direction.x > 0.0 ? 0.0 : 3.0;\n			else\n				face = direction.y > 0.0 ? 1.0 : 4.0;\n		} else {\n			if ( absDirection.z > absDirection.y )\n				face = direction.z > 0.0 ? 2.0 : 5.0;\n			else\n				face = direction.y > 0.0 ? 1.0 : 4.0;\n		}\n		return face;\n	}\n	vec2 getUV( vec3 direction, float face ) {\n		vec2 uv;\n		if ( face == 0.0 ) {\n			uv = vec2( direction.z, direction.y ) / abs( direction.x );\n		} else if ( face == 1.0 ) {\n			uv = vec2( - direction.x, - direction.z ) / abs( direction.y );\n		} else if ( face == 2.0 ) {\n			uv = vec2( - direction.x, direction.y ) / abs( direction.z );\n		} else if ( face == 3.0 ) {\n			uv = vec2( - direction.z, direction.y ) / abs( direction.x );\n		} else if ( face == 4.0 ) {\n			uv = vec2( - direction.x, direction.z ) / abs( direction.y );\n		} else {\n			uv = vec2( direction.x, direction.y ) / abs( direction.z );\n		}\n		return 0.5 * ( uv + 1.0 );\n	}\n	vec3 bilinearCubeUV( sampler2D envMap, vec3 direction, float mipInt ) {\n		float face = getFace( direction );\n		float filterInt = max( cubeUV_minMipLevel - mipInt, 0.0 );\n		mipInt = max( mipInt, cubeUV_minMipLevel );\n		float faceSize = exp2( mipInt );\n		highp vec2 uv = getUV( direction, face ) * ( faceSize - 2.0 ) + 1.0;\n		if ( face > 2.0 ) {\n			uv.y += faceSize;\n			face -= 3.0;\n		}\n		uv.x += face * faceSize;\n		uv.x += filterInt * 3.0 * cubeUV_minTileSize;\n		uv.y += 4.0 * ( exp2( CUBEUV_MAX_MIP ) - faceSize );\n		uv.x *= CUBEUV_TEXEL_WIDTH;\n		uv.y *= CUBEUV_TEXEL_HEIGHT;\n		#ifdef texture2DGradEXT\n			return texture2DGradEXT( envMap, uv, vec2( 0.0 ), vec2( 0.0 ) ).rgb;\n		#else\n			return texture2D( envMap, uv ).rgb;\n		#endif\n	}\n	#define cubeUV_r0 1.0\n	#define cubeUV_m0 - 2.0\n	#define cubeUV_r1 0.8\n	#define cubeUV_m1 - 1.0\n	#define cubeUV_r4 0.4\n	#define cubeUV_m4 2.0\n	#define cubeUV_r5 0.305\n	#define cubeUV_m5 3.0\n	#define cubeUV_r6 0.21\n	#define cubeUV_m6 4.0\n	float roughnessToMip( float roughness ) {\n		float mip = 0.0;\n		if ( roughness >= cubeUV_r1 ) {\n			mip = ( cubeUV_r0 - roughness ) * ( cubeUV_m1 - cubeUV_m0 ) / ( cubeUV_r0 - cubeUV_r1 ) + cubeUV_m0;\n		} else if ( roughness >= cubeUV_r4 ) {\n			mip = ( cubeUV_r1 - roughness ) * ( cubeUV_m4 - cubeUV_m1 ) / ( cubeUV_r1 - cubeUV_r4 ) + cubeUV_m1;\n		} else if ( roughness >= cubeUV_r5 ) {\n			mip = ( cubeUV_r4 - roughness ) * ( cubeUV_m5 - cubeUV_m4 ) / ( cubeUV_r4 - cubeUV_r5 ) + cubeUV_m4;\n		} else if ( roughness >= cubeUV_r6 ) {\n			mip = ( cubeUV_r5 - roughness ) * ( cubeUV_m6 - cubeUV_m5 ) / ( cubeUV_r5 - cubeUV_r6 ) + cubeUV_m5;\n		} else {\n			mip = - 2.0 * log2( 1.16 * roughness );		}\n		return mip;\n	}\n	vec4 textureCubeUV( sampler2D envMap, vec3 sampleDir, float roughness ) {\n		float mip = clamp( roughnessToMip( roughness ), cubeUV_m0, CUBEUV_MAX_MIP );\n		float mipF = fract( mip );\n		float mipInt = floor( mip );\n		vec3 color0 = bilinearCubeUV( envMap, sampleDir, mipInt );\n		if ( mipF == 0.0 ) {\n			return vec4( color0, 1.0 );\n		} else {\n			vec3 color1 = bilinearCubeUV( envMap, sampleDir, mipInt + 1.0 );\n			return vec4( mix( color0, color1, mipF ), 1.0 );\n		}\n	}\n#endif";
var defaultnormal_vertex = "vec3 transformedNormal = objectNormal;\n#ifdef USE_TANGENT\n	vec3 transformedTangent = objectTangent;\n#endif\n#ifdef USE_BATCHING\n	mat3 bm = mat3( batchingMatrix );\n	transformedNormal /= vec3( dot( bm[ 0 ], bm[ 0 ] ), dot( bm[ 1 ], bm[ 1 ] ), dot( bm[ 2 ], bm[ 2 ] ) );\n	transformedNormal = bm * transformedNormal;\n	#ifdef USE_TANGENT\n		transformedTangent = bm * transformedTangent;\n	#endif\n#endif\n#ifdef USE_INSTANCING\n	mat3 im = mat3( instanceMatrix );\n	transformedNormal /= vec3( dot( im[ 0 ], im[ 0 ] ), dot( im[ 1 ], im[ 1 ] ), dot( im[ 2 ], im[ 2 ] ) );\n	transformedNormal = im * transformedNormal;\n	#ifdef USE_TANGENT\n		transformedTangent = im * transformedTangent;\n	#endif\n#endif\ntransformedNormal = normalMatrix * transformedNormal;\n#ifdef FLIP_SIDED\n	transformedNormal = - transformedNormal;\n#endif\n#ifdef USE_TANGENT\n	transformedTangent = ( modelViewMatrix * vec4( transformedTangent, 0.0 ) ).xyz;\n	#ifdef FLIP_SIDED\n		transformedTangent = - transformedTangent;\n	#endif\n#endif";
var displacementmap_pars_vertex = "#ifdef USE_DISPLACEMENTMAP\n	uniform sampler2D displacementMap;\n	uniform float displacementScale;\n	uniform float displacementBias;\n#endif";
var displacementmap_vertex = "#ifdef USE_DISPLACEMENTMAP\n	transformed += normalize( objectNormal ) * ( texture2D( displacementMap, vDisplacementMapUv ).x * displacementScale + displacementBias );\n#endif";
var emissivemap_fragment = "#ifdef USE_EMISSIVEMAP\n	vec4 emissiveColor = texture2D( emissiveMap, vEmissiveMapUv );\n	totalEmissiveRadiance *= emissiveColor.rgb;\n#endif";
var emissivemap_pars_fragment = "#ifdef USE_EMISSIVEMAP\n	uniform sampler2D emissiveMap;\n#endif";
var colorspace_fragment = "gl_FragColor = linearToOutputTexel( gl_FragColor );";
var colorspace_pars_fragment = "\nconst mat3 LINEAR_SRGB_TO_LINEAR_DISPLAY_P3 = mat3(\n	vec3( 0.8224621, 0.177538, 0.0 ),\n	vec3( 0.0331941, 0.9668058, 0.0 ),\n	vec3( 0.0170827, 0.0723974, 0.9105199 )\n);\nconst mat3 LINEAR_DISPLAY_P3_TO_LINEAR_SRGB = mat3(\n	vec3( 1.2249401, - 0.2249404, 0.0 ),\n	vec3( - 0.0420569, 1.0420571, 0.0 ),\n	vec3( - 0.0196376, - 0.0786361, 1.0982735 )\n);\nvec4 LinearSRGBToLinearDisplayP3( in vec4 value ) {\n	return vec4( value.rgb * LINEAR_SRGB_TO_LINEAR_DISPLAY_P3, value.a );\n}\nvec4 LinearDisplayP3ToLinearSRGB( in vec4 value ) {\n	return vec4( value.rgb * LINEAR_DISPLAY_P3_TO_LINEAR_SRGB, value.a );\n}\nvec4 LinearTransferOETF( in vec4 value ) {\n	return value;\n}\nvec4 sRGBTransferOETF( in vec4 value ) {\n	return vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.a );\n}";
var envmap_fragment = "#ifdef USE_ENVMAP\n	#ifdef ENV_WORLDPOS\n		vec3 cameraToFrag;\n		if ( isOrthographic ) {\n			cameraToFrag = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\n		} else {\n			cameraToFrag = normalize( vWorldPosition - cameraPosition );\n		}\n		vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n		#ifdef ENVMAP_MODE_REFLECTION\n			vec3 reflectVec = reflect( cameraToFrag, worldNormal );\n		#else\n			vec3 reflectVec = refract( cameraToFrag, worldNormal, refractionRatio );\n		#endif\n	#else\n		vec3 reflectVec = vReflect;\n	#endif\n	#ifdef ENVMAP_TYPE_CUBE\n		vec4 envColor = textureCube( envMap, envMapRotation * vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\n	#else\n		vec4 envColor = vec4( 0.0 );\n	#endif\n	#ifdef ENVMAP_BLENDING_MULTIPLY\n		outgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\n	#elif defined( ENVMAP_BLENDING_MIX )\n		outgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );\n	#elif defined( ENVMAP_BLENDING_ADD )\n		outgoingLight += envColor.xyz * specularStrength * reflectivity;\n	#endif\n#endif";
var envmap_common_pars_fragment = "#ifdef USE_ENVMAP\n	uniform float envMapIntensity;\n	uniform float flipEnvMap;\n	uniform mat3 envMapRotation;\n	#ifdef ENVMAP_TYPE_CUBE\n		uniform samplerCube envMap;\n	#else\n		uniform sampler2D envMap;\n	#endif\n	\n#endif";
var envmap_pars_fragment = "#ifdef USE_ENVMAP\n	uniform float reflectivity;\n	#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( LAMBERT )\n		#define ENV_WORLDPOS\n	#endif\n	#ifdef ENV_WORLDPOS\n		varying vec3 vWorldPosition;\n		uniform float refractionRatio;\n	#else\n		varying vec3 vReflect;\n	#endif\n#endif";
var envmap_pars_vertex = "#ifdef USE_ENVMAP\n	#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( LAMBERT )\n		#define ENV_WORLDPOS\n	#endif\n	#ifdef ENV_WORLDPOS\n		\n		varying vec3 vWorldPosition;\n	#else\n		varying vec3 vReflect;\n		uniform float refractionRatio;\n	#endif\n#endif";
var envmap_vertex = "#ifdef USE_ENVMAP\n	#ifdef ENV_WORLDPOS\n		vWorldPosition = worldPosition.xyz;\n	#else\n		vec3 cameraToVertex;\n		if ( isOrthographic ) {\n			cameraToVertex = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\n		} else {\n			cameraToVertex = normalize( worldPosition.xyz - cameraPosition );\n		}\n		vec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\n		#ifdef ENVMAP_MODE_REFLECTION\n			vReflect = reflect( cameraToVertex, worldNormal );\n		#else\n			vReflect = refract( cameraToVertex, worldNormal, refractionRatio );\n		#endif\n	#endif\n#endif";
var fog_vertex = "#ifdef USE_FOG\n	vFogDepth = - mvPosition.z;\n#endif";
var fog_pars_vertex = "#ifdef USE_FOG\n	varying float vFogDepth;\n#endif";
var fog_fragment = "#ifdef USE_FOG\n	#ifdef FOG_EXP2\n		float fogFactor = 1.0 - exp( - fogDensity * fogDensity * vFogDepth * vFogDepth );\n	#else\n		float fogFactor = smoothstep( fogNear, fogFar, vFogDepth );\n	#endif\n	gl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\n#endif";
var fog_pars_fragment = "#ifdef USE_FOG\n	uniform vec3 fogColor;\n	varying float vFogDepth;\n	#ifdef FOG_EXP2\n		uniform float fogDensity;\n	#else\n		uniform float fogNear;\n		uniform float fogFar;\n	#endif\n#endif";
var gradientmap_pars_fragment = "#ifdef USE_GRADIENTMAP\n	uniform sampler2D gradientMap;\n#endif\nvec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {\n	float dotNL = dot( normal, lightDirection );\n	vec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );\n	#ifdef USE_GRADIENTMAP\n		return vec3( texture2D( gradientMap, coord ).r );\n	#else\n		vec2 fw = fwidth( coord ) * 0.5;\n		return mix( vec3( 0.7 ), vec3( 1.0 ), smoothstep( 0.7 - fw.x, 0.7 + fw.x, coord.x ) );\n	#endif\n}";
var lightmap_pars_fragment = "#ifdef USE_LIGHTMAP\n	uniform sampler2D lightMap;\n	uniform float lightMapIntensity;\n#endif";
var lights_lambert_fragment = "LambertMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;\nmaterial.specularStrength = specularStrength;";
var lights_lambert_pars_fragment = "varying vec3 vViewPosition;\nstruct LambertMaterial {\n	vec3 diffuseColor;\n	float specularStrength;\n};\nvoid RE_Direct_Lambert( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in LambertMaterial material, inout ReflectedLight reflectedLight ) {\n	float dotNL = saturate( dot( geometryNormal, directLight.direction ) );\n	vec3 irradiance = dotNL * directLight.color;\n	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectDiffuse_Lambert( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in LambertMaterial material, inout ReflectedLight reflectedLight ) {\n	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\n#define RE_Direct				RE_Direct_Lambert\n#define RE_IndirectDiffuse		RE_IndirectDiffuse_Lambert";
var lights_pars_begin = "uniform bool receiveShadow;\nuniform vec3 ambientLightColor;\n#if defined( USE_LIGHT_PROBES )\n	uniform vec3 lightProbe[ 9 ];\n#endif\nvec3 shGetIrradianceAt( in vec3 normal, in vec3 shCoefficients[ 9 ] ) {\n	float x = normal.x, y = normal.y, z = normal.z;\n	vec3 result = shCoefficients[ 0 ] * 0.886227;\n	result += shCoefficients[ 1 ] * 2.0 * 0.511664 * y;\n	result += shCoefficients[ 2 ] * 2.0 * 0.511664 * z;\n	result += shCoefficients[ 3 ] * 2.0 * 0.511664 * x;\n	result += shCoefficients[ 4 ] * 2.0 * 0.429043 * x * y;\n	result += shCoefficients[ 5 ] * 2.0 * 0.429043 * y * z;\n	result += shCoefficients[ 6 ] * ( 0.743125 * z * z - 0.247708 );\n	result += shCoefficients[ 7 ] * 2.0 * 0.429043 * x * z;\n	result += shCoefficients[ 8 ] * 0.429043 * ( x * x - y * y );\n	return result;\n}\nvec3 getLightProbeIrradiance( const in vec3 lightProbe[ 9 ], const in vec3 normal ) {\n	vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n	vec3 irradiance = shGetIrradianceAt( worldNormal, lightProbe );\n	return irradiance;\n}\nvec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {\n	vec3 irradiance = ambientLightColor;\n	return irradiance;\n}\nfloat getDistanceAttenuation( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {\n	float distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );\n	if ( cutoffDistance > 0.0 ) {\n		distanceFalloff *= pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );\n	}\n	return distanceFalloff;\n}\nfloat getSpotAttenuation( const in float coneCosine, const in float penumbraCosine, const in float angleCosine ) {\n	return smoothstep( coneCosine, penumbraCosine, angleCosine );\n}\n#if NUM_DIR_LIGHTS > 0\n	struct DirectionalLight {\n		vec3 direction;\n		vec3 color;\n	};\n	uniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];\n	void getDirectionalLightInfo( const in DirectionalLight directionalLight, out IncidentLight light ) {\n		light.color = directionalLight.color;\n		light.direction = directionalLight.direction;\n		light.visible = true;\n	}\n#endif\n#if NUM_POINT_LIGHTS > 0\n	struct PointLight {\n		vec3 position;\n		vec3 color;\n		float distance;\n		float decay;\n	};\n	uniform PointLight pointLights[ NUM_POINT_LIGHTS ];\n	void getPointLightInfo( const in PointLight pointLight, const in vec3 geometryPosition, out IncidentLight light ) {\n		vec3 lVector = pointLight.position - geometryPosition;\n		light.direction = normalize( lVector );\n		float lightDistance = length( lVector );\n		light.color = pointLight.color;\n		light.color *= getDistanceAttenuation( lightDistance, pointLight.distance, pointLight.decay );\n		light.visible = ( light.color != vec3( 0.0 ) );\n	}\n#endif\n#if NUM_SPOT_LIGHTS > 0\n	struct SpotLight {\n		vec3 position;\n		vec3 direction;\n		vec3 color;\n		float distance;\n		float decay;\n		float coneCos;\n		float penumbraCos;\n	};\n	uniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];\n	void getSpotLightInfo( const in SpotLight spotLight, const in vec3 geometryPosition, out IncidentLight light ) {\n		vec3 lVector = spotLight.position - geometryPosition;\n		light.direction = normalize( lVector );\n		float angleCos = dot( light.direction, spotLight.direction );\n		float spotAttenuation = getSpotAttenuation( spotLight.coneCos, spotLight.penumbraCos, angleCos );\n		if ( spotAttenuation > 0.0 ) {\n			float lightDistance = length( lVector );\n			light.color = spotLight.color * spotAttenuation;\n			light.color *= getDistanceAttenuation( lightDistance, spotLight.distance, spotLight.decay );\n			light.visible = ( light.color != vec3( 0.0 ) );\n		} else {\n			light.color = vec3( 0.0 );\n			light.visible = false;\n		}\n	}\n#endif\n#if NUM_RECT_AREA_LIGHTS > 0\n	struct RectAreaLight {\n		vec3 color;\n		vec3 position;\n		vec3 halfWidth;\n		vec3 halfHeight;\n	};\n	uniform sampler2D ltc_1;	uniform sampler2D ltc_2;\n	uniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];\n#endif\n#if NUM_HEMI_LIGHTS > 0\n	struct HemisphereLight {\n		vec3 direction;\n		vec3 skyColor;\n		vec3 groundColor;\n	};\n	uniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];\n	vec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in vec3 normal ) {\n		float dotNL = dot( normal, hemiLight.direction );\n		float hemiDiffuseWeight = 0.5 * dotNL + 0.5;\n		vec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );\n		return irradiance;\n	}\n#endif";
var envmap_physical_pars_fragment = "#ifdef USE_ENVMAP\n	vec3 getIBLIrradiance( const in vec3 normal ) {\n		#ifdef ENVMAP_TYPE_CUBE_UV\n			vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n			vec4 envMapColor = textureCubeUV( envMap, envMapRotation * worldNormal, 1.0 );\n			return PI * envMapColor.rgb * envMapIntensity;\n		#else\n			return vec3( 0.0 );\n		#endif\n	}\n	vec3 getIBLRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness ) {\n		#ifdef ENVMAP_TYPE_CUBE_UV\n			vec3 reflectVec = reflect( - viewDir, normal );\n			reflectVec = normalize( mix( reflectVec, normal, roughness * roughness) );\n			reflectVec = inverseTransformDirection( reflectVec, viewMatrix );\n			vec4 envMapColor = textureCubeUV( envMap, envMapRotation * reflectVec, roughness );\n			return envMapColor.rgb * envMapIntensity;\n		#else\n			return vec3( 0.0 );\n		#endif\n	}\n	#ifdef USE_ANISOTROPY\n		vec3 getIBLAnisotropyRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness, const in vec3 bitangent, const in float anisotropy ) {\n			#ifdef ENVMAP_TYPE_CUBE_UV\n				vec3 bentNormal = cross( bitangent, viewDir );\n				bentNormal = normalize( cross( bentNormal, bitangent ) );\n				bentNormal = normalize( mix( bentNormal, normal, pow2( pow2( 1.0 - anisotropy * ( 1.0 - roughness ) ) ) ) );\n				return getIBLRadiance( viewDir, bentNormal, roughness );\n			#else\n				return vec3( 0.0 );\n			#endif\n		}\n	#endif\n#endif";
var lights_toon_fragment = "ToonMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;";
var lights_toon_pars_fragment = "varying vec3 vViewPosition;\nstruct ToonMaterial {\n	vec3 diffuseColor;\n};\nvoid RE_Direct_Toon( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\n	vec3 irradiance = getGradientIrradiance( geometryNormal, directLight.direction ) * directLight.color;\n	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectDiffuse_Toon( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\n	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\n#define RE_Direct				RE_Direct_Toon\n#define RE_IndirectDiffuse		RE_IndirectDiffuse_Toon";
var lights_phong_fragment = "BlinnPhongMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;\nmaterial.specularColor = specular;\nmaterial.specularShininess = shininess;\nmaterial.specularStrength = specularStrength;";
var lights_phong_pars_fragment = "varying vec3 vViewPosition;\nstruct BlinnPhongMaterial {\n	vec3 diffuseColor;\n	vec3 specularColor;\n	float specularShininess;\n	float specularStrength;\n};\nvoid RE_Direct_BlinnPhong( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n	float dotNL = saturate( dot( geometryNormal, directLight.direction ) );\n	vec3 irradiance = dotNL * directLight.color;\n	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n	reflectedLight.directSpecular += irradiance * BRDF_BlinnPhong( directLight.direction, geometryViewDir, geometryNormal, material.specularColor, material.specularShininess ) * material.specularStrength;\n}\nvoid RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\n#define RE_Direct				RE_Direct_BlinnPhong\n#define RE_IndirectDiffuse		RE_IndirectDiffuse_BlinnPhong";
var lights_physical_fragment = "PhysicalMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );\nvec3 dxy = max( abs( dFdx( nonPerturbedNormal ) ), abs( dFdy( nonPerturbedNormal ) ) );\nfloat geometryRoughness = max( max( dxy.x, dxy.y ), dxy.z );\nmaterial.roughness = max( roughnessFactor, 0.0525 );material.roughness += geometryRoughness;\nmaterial.roughness = min( material.roughness, 1.0 );\n#ifdef IOR\n	material.ior = ior;\n	#ifdef USE_SPECULAR\n		float specularIntensityFactor = specularIntensity;\n		vec3 specularColorFactor = specularColor;\n		#ifdef USE_SPECULAR_COLORMAP\n			specularColorFactor *= texture2D( specularColorMap, vSpecularColorMapUv ).rgb;\n		#endif\n		#ifdef USE_SPECULAR_INTENSITYMAP\n			specularIntensityFactor *= texture2D( specularIntensityMap, vSpecularIntensityMapUv ).a;\n		#endif\n		material.specularF90 = mix( specularIntensityFactor, 1.0, metalnessFactor );\n	#else\n		float specularIntensityFactor = 1.0;\n		vec3 specularColorFactor = vec3( 1.0 );\n		material.specularF90 = 1.0;\n	#endif\n	material.specularColor = mix( min( pow2( ( material.ior - 1.0 ) / ( material.ior + 1.0 ) ) * specularColorFactor, vec3( 1.0 ) ) * specularIntensityFactor, diffuseColor.rgb, metalnessFactor );\n#else\n	material.specularColor = mix( vec3( 0.04 ), diffuseColor.rgb, metalnessFactor );\n	material.specularF90 = 1.0;\n#endif\n#ifdef USE_CLEARCOAT\n	material.clearcoat = clearcoat;\n	material.clearcoatRoughness = clearcoatRoughness;\n	material.clearcoatF0 = vec3( 0.04 );\n	material.clearcoatF90 = 1.0;\n	#ifdef USE_CLEARCOATMAP\n		material.clearcoat *= texture2D( clearcoatMap, vClearcoatMapUv ).x;\n	#endif\n	#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n		material.clearcoatRoughness *= texture2D( clearcoatRoughnessMap, vClearcoatRoughnessMapUv ).y;\n	#endif\n	material.clearcoat = saturate( material.clearcoat );	material.clearcoatRoughness = max( material.clearcoatRoughness, 0.0525 );\n	material.clearcoatRoughness += geometryRoughness;\n	material.clearcoatRoughness = min( material.clearcoatRoughness, 1.0 );\n#endif\n#ifdef USE_DISPERSION\n	material.dispersion = dispersion;\n#endif\n#ifdef USE_IRIDESCENCE\n	material.iridescence = iridescence;\n	material.iridescenceIOR = iridescenceIOR;\n	#ifdef USE_IRIDESCENCEMAP\n		material.iridescence *= texture2D( iridescenceMap, vIridescenceMapUv ).r;\n	#endif\n	#ifdef USE_IRIDESCENCE_THICKNESSMAP\n		material.iridescenceThickness = (iridescenceThicknessMaximum - iridescenceThicknessMinimum) * texture2D( iridescenceThicknessMap, vIridescenceThicknessMapUv ).g + iridescenceThicknessMinimum;\n	#else\n		material.iridescenceThickness = iridescenceThicknessMaximum;\n	#endif\n#endif\n#ifdef USE_SHEEN\n	material.sheenColor = sheenColor;\n	#ifdef USE_SHEEN_COLORMAP\n		material.sheenColor *= texture2D( sheenColorMap, vSheenColorMapUv ).rgb;\n	#endif\n	material.sheenRoughness = clamp( sheenRoughness, 0.07, 1.0 );\n	#ifdef USE_SHEEN_ROUGHNESSMAP\n		material.sheenRoughness *= texture2D( sheenRoughnessMap, vSheenRoughnessMapUv ).a;\n	#endif\n#endif\n#ifdef USE_ANISOTROPY\n	#ifdef USE_ANISOTROPYMAP\n		mat2 anisotropyMat = mat2( anisotropyVector.x, anisotropyVector.y, - anisotropyVector.y, anisotropyVector.x );\n		vec3 anisotropyPolar = texture2D( anisotropyMap, vAnisotropyMapUv ).rgb;\n		vec2 anisotropyV = anisotropyMat * normalize( 2.0 * anisotropyPolar.rg - vec2( 1.0 ) ) * anisotropyPolar.b;\n	#else\n		vec2 anisotropyV = anisotropyVector;\n	#endif\n	material.anisotropy = length( anisotropyV );\n	if( material.anisotropy == 0.0 ) {\n		anisotropyV = vec2( 1.0, 0.0 );\n	} else {\n		anisotropyV /= material.anisotropy;\n		material.anisotropy = saturate( material.anisotropy );\n	}\n	material.alphaT = mix( pow2( material.roughness ), 1.0, pow2( material.anisotropy ) );\n	material.anisotropyT = tbn[ 0 ] * anisotropyV.x + tbn[ 1 ] * anisotropyV.y;\n	material.anisotropyB = tbn[ 1 ] * anisotropyV.x - tbn[ 0 ] * anisotropyV.y;\n#endif";
var lights_physical_pars_fragment = "struct PhysicalMaterial {\n	vec3 diffuseColor;\n	float roughness;\n	vec3 specularColor;\n	float specularF90;\n	float dispersion;\n	#ifdef USE_CLEARCOAT\n		float clearcoat;\n		float clearcoatRoughness;\n		vec3 clearcoatF0;\n		float clearcoatF90;\n	#endif\n	#ifdef USE_IRIDESCENCE\n		float iridescence;\n		float iridescenceIOR;\n		float iridescenceThickness;\n		vec3 iridescenceFresnel;\n		vec3 iridescenceF0;\n	#endif\n	#ifdef USE_SHEEN\n		vec3 sheenColor;\n		float sheenRoughness;\n	#endif\n	#ifdef IOR\n		float ior;\n	#endif\n	#ifdef USE_TRANSMISSION\n		float transmission;\n		float transmissionAlpha;\n		float thickness;\n		float attenuationDistance;\n		vec3 attenuationColor;\n	#endif\n	#ifdef USE_ANISOTROPY\n		float anisotropy;\n		float alphaT;\n		vec3 anisotropyT;\n		vec3 anisotropyB;\n	#endif\n};\nvec3 clearcoatSpecularDirect = vec3( 0.0 );\nvec3 clearcoatSpecularIndirect = vec3( 0.0 );\nvec3 sheenSpecularDirect = vec3( 0.0 );\nvec3 sheenSpecularIndirect = vec3(0.0 );\nvec3 Schlick_to_F0( const in vec3 f, const in float f90, const in float dotVH ) {\n    float x = clamp( 1.0 - dotVH, 0.0, 1.0 );\n    float x2 = x * x;\n    float x5 = clamp( x * x2 * x2, 0.0, 0.9999 );\n    return ( f - vec3( f90 ) * x5 ) / ( 1.0 - x5 );\n}\nfloat V_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {\n	float a2 = pow2( alpha );\n	float gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\n	float gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\n	return 0.5 / max( gv + gl, EPSILON );\n}\nfloat D_GGX( const in float alpha, const in float dotNH ) {\n	float a2 = pow2( alpha );\n	float denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;\n	return RECIPROCAL_PI * a2 / pow2( denom );\n}\n#ifdef USE_ANISOTROPY\n	float V_GGX_SmithCorrelated_Anisotropic( const in float alphaT, const in float alphaB, const in float dotTV, const in float dotBV, const in float dotTL, const in float dotBL, const in float dotNV, const in float dotNL ) {\n		float gv = dotNL * length( vec3( alphaT * dotTV, alphaB * dotBV, dotNV ) );\n		float gl = dotNV * length( vec3( alphaT * dotTL, alphaB * dotBL, dotNL ) );\n		float v = 0.5 / ( gv + gl );\n		return saturate(v);\n	}\n	float D_GGX_Anisotropic( const in float alphaT, const in float alphaB, const in float dotNH, const in float dotTH, const in float dotBH ) {\n		float a2 = alphaT * alphaB;\n		highp vec3 v = vec3( alphaB * dotTH, alphaT * dotBH, a2 * dotNH );\n		highp float v2 = dot( v, v );\n		float w2 = a2 / v2;\n		return RECIPROCAL_PI * a2 * pow2 ( w2 );\n	}\n#endif\n#ifdef USE_CLEARCOAT\n	vec3 BRDF_GGX_Clearcoat( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in PhysicalMaterial material) {\n		vec3 f0 = material.clearcoatF0;\n		float f90 = material.clearcoatF90;\n		float roughness = material.clearcoatRoughness;\n		float alpha = pow2( roughness );\n		vec3 halfDir = normalize( lightDir + viewDir );\n		float dotNL = saturate( dot( normal, lightDir ) );\n		float dotNV = saturate( dot( normal, viewDir ) );\n		float dotNH = saturate( dot( normal, halfDir ) );\n		float dotVH = saturate( dot( viewDir, halfDir ) );\n		vec3 F = F_Schlick( f0, f90, dotVH );\n		float V = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );\n		float D = D_GGX( alpha, dotNH );\n		return F * ( V * D );\n	}\n#endif\nvec3 BRDF_GGX( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in PhysicalMaterial material ) {\n	vec3 f0 = material.specularColor;\n	float f90 = material.specularF90;\n	float roughness = material.roughness;\n	float alpha = pow2( roughness );\n	vec3 halfDir = normalize( lightDir + viewDir );\n	float dotNL = saturate( dot( normal, lightDir ) );\n	float dotNV = saturate( dot( normal, viewDir ) );\n	float dotNH = saturate( dot( normal, halfDir ) );\n	float dotVH = saturate( dot( viewDir, halfDir ) );\n	vec3 F = F_Schlick( f0, f90, dotVH );\n	#ifdef USE_IRIDESCENCE\n		F = mix( F, material.iridescenceFresnel, material.iridescence );\n	#endif\n	#ifdef USE_ANISOTROPY\n		float dotTL = dot( material.anisotropyT, lightDir );\n		float dotTV = dot( material.anisotropyT, viewDir );\n		float dotTH = dot( material.anisotropyT, halfDir );\n		float dotBL = dot( material.anisotropyB, lightDir );\n		float dotBV = dot( material.anisotropyB, viewDir );\n		float dotBH = dot( material.anisotropyB, halfDir );\n		float V = V_GGX_SmithCorrelated_Anisotropic( material.alphaT, alpha, dotTV, dotBV, dotTL, dotBL, dotNV, dotNL );\n		float D = D_GGX_Anisotropic( material.alphaT, alpha, dotNH, dotTH, dotBH );\n	#else\n		float V = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );\n		float D = D_GGX( alpha, dotNH );\n	#endif\n	return F * ( V * D );\n}\nvec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {\n	const float LUT_SIZE = 64.0;\n	const float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;\n	const float LUT_BIAS = 0.5 / LUT_SIZE;\n	float dotNV = saturate( dot( N, V ) );\n	vec2 uv = vec2( roughness, sqrt( 1.0 - dotNV ) );\n	uv = uv * LUT_SCALE + LUT_BIAS;\n	return uv;\n}\nfloat LTC_ClippedSphereFormFactor( const in vec3 f ) {\n	float l = length( f );\n	return max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );\n}\nvec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {\n	float x = dot( v1, v2 );\n	float y = abs( x );\n	float a = 0.8543985 + ( 0.4965155 + 0.0145206 * y ) * y;\n	float b = 3.4175940 + ( 4.1616724 + y ) * y;\n	float v = a / b;\n	float theta_sintheta = ( x > 0.0 ) ? v : 0.5 * inversesqrt( max( 1.0 - x * x, 1e-7 ) ) - v;\n	return cross( v1, v2 ) * theta_sintheta;\n}\nvec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {\n	vec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];\n	vec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];\n	vec3 lightNormal = cross( v1, v2 );\n	if( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );\n	vec3 T1, T2;\n	T1 = normalize( V - N * dot( V, N ) );\n	T2 = - cross( N, T1 );\n	mat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );\n	vec3 coords[ 4 ];\n	coords[ 0 ] = mat * ( rectCoords[ 0 ] - P );\n	coords[ 1 ] = mat * ( rectCoords[ 1 ] - P );\n	coords[ 2 ] = mat * ( rectCoords[ 2 ] - P );\n	coords[ 3 ] = mat * ( rectCoords[ 3 ] - P );\n	coords[ 0 ] = normalize( coords[ 0 ] );\n	coords[ 1 ] = normalize( coords[ 1 ] );\n	coords[ 2 ] = normalize( coords[ 2 ] );\n	coords[ 3 ] = normalize( coords[ 3 ] );\n	vec3 vectorFormFactor = vec3( 0.0 );\n	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );\n	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );\n	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );\n	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );\n	float result = LTC_ClippedSphereFormFactor( vectorFormFactor );\n	return vec3( result );\n}\n#if defined( USE_SHEEN )\nfloat D_Charlie( float roughness, float dotNH ) {\n	float alpha = pow2( roughness );\n	float invAlpha = 1.0 / alpha;\n	float cos2h = dotNH * dotNH;\n	float sin2h = max( 1.0 - cos2h, 0.0078125 );\n	return ( 2.0 + invAlpha ) * pow( sin2h, invAlpha * 0.5 ) / ( 2.0 * PI );\n}\nfloat V_Neubelt( float dotNV, float dotNL ) {\n	return saturate( 1.0 / ( 4.0 * ( dotNL + dotNV - dotNL * dotNV ) ) );\n}\nvec3 BRDF_Sheen( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, vec3 sheenColor, const in float sheenRoughness ) {\n	vec3 halfDir = normalize( lightDir + viewDir );\n	float dotNL = saturate( dot( normal, lightDir ) );\n	float dotNV = saturate( dot( normal, viewDir ) );\n	float dotNH = saturate( dot( normal, halfDir ) );\n	float D = D_Charlie( sheenRoughness, dotNH );\n	float V = V_Neubelt( dotNV, dotNL );\n	return sheenColor * ( D * V );\n}\n#endif\nfloat IBLSheenBRDF( const in vec3 normal, const in vec3 viewDir, const in float roughness ) {\n	float dotNV = saturate( dot( normal, viewDir ) );\n	float r2 = roughness * roughness;\n	float a = roughness < 0.25 ? -339.2 * r2 + 161.4 * roughness - 25.9 : -8.48 * r2 + 14.3 * roughness - 9.95;\n	float b = roughness < 0.25 ? 44.0 * r2 - 23.7 * roughness + 3.26 : 1.97 * r2 - 3.27 * roughness + 0.72;\n	float DG = exp( a * dotNV + b ) + ( roughness < 0.25 ? 0.0 : 0.1 * ( roughness - 0.25 ) );\n	return saturate( DG * RECIPROCAL_PI );\n}\nvec2 DFGApprox( const in vec3 normal, const in vec3 viewDir, const in float roughness ) {\n	float dotNV = saturate( dot( normal, viewDir ) );\n	const vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );\n	const vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );\n	vec4 r = roughness * c0 + c1;\n	float a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;\n	vec2 fab = vec2( - 1.04, 1.04 ) * a004 + r.zw;\n	return fab;\n}\nvec3 EnvironmentBRDF( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness ) {\n	vec2 fab = DFGApprox( normal, viewDir, roughness );\n	return specularColor * fab.x + specularF90 * fab.y;\n}\n#ifdef USE_IRIDESCENCE\nvoid computeMultiscatteringIridescence( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float iridescence, const in vec3 iridescenceF0, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {\n#else\nvoid computeMultiscattering( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {\n#endif\n	vec2 fab = DFGApprox( normal, viewDir, roughness );\n	#ifdef USE_IRIDESCENCE\n		vec3 Fr = mix( specularColor, iridescenceF0, iridescence );\n	#else\n		vec3 Fr = specularColor;\n	#endif\n	vec3 FssEss = Fr * fab.x + specularF90 * fab.y;\n	float Ess = fab.x + fab.y;\n	float Ems = 1.0 - Ess;\n	vec3 Favg = Fr + ( 1.0 - Fr ) * 0.047619;	vec3 Fms = FssEss * Favg / ( 1.0 - Ems * Favg );\n	singleScatter += FssEss;\n	multiScatter += Fms * Ems;\n}\n#if NUM_RECT_AREA_LIGHTS > 0\n	void RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n		vec3 normal = geometryNormal;\n		vec3 viewDir = geometryViewDir;\n		vec3 position = geometryPosition;\n		vec3 lightPos = rectAreaLight.position;\n		vec3 halfWidth = rectAreaLight.halfWidth;\n		vec3 halfHeight = rectAreaLight.halfHeight;\n		vec3 lightColor = rectAreaLight.color;\n		float roughness = material.roughness;\n		vec3 rectCoords[ 4 ];\n		rectCoords[ 0 ] = lightPos + halfWidth - halfHeight;		rectCoords[ 1 ] = lightPos - halfWidth - halfHeight;\n		rectCoords[ 2 ] = lightPos - halfWidth + halfHeight;\n		rectCoords[ 3 ] = lightPos + halfWidth + halfHeight;\n		vec2 uv = LTC_Uv( normal, viewDir, roughness );\n		vec4 t1 = texture2D( ltc_1, uv );\n		vec4 t2 = texture2D( ltc_2, uv );\n		mat3 mInv = mat3(\n			vec3( t1.x, 0, t1.y ),\n			vec3(    0, 1,    0 ),\n			vec3( t1.z, 0, t1.w )\n		);\n		vec3 fresnel = ( material.specularColor * t2.x + ( vec3( 1.0 ) - material.specularColor ) * t2.y );\n		reflectedLight.directSpecular += lightColor * fresnel * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );\n		reflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1.0 ), rectCoords );\n	}\n#endif\nvoid RE_Direct_Physical( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n	float dotNL = saturate( dot( geometryNormal, directLight.direction ) );\n	vec3 irradiance = dotNL * directLight.color;\n	#ifdef USE_CLEARCOAT\n		float dotNLcc = saturate( dot( geometryClearcoatNormal, directLight.direction ) );\n		vec3 ccIrradiance = dotNLcc * directLight.color;\n		clearcoatSpecularDirect += ccIrradiance * BRDF_GGX_Clearcoat( directLight.direction, geometryViewDir, geometryClearcoatNormal, material );\n	#endif\n	#ifdef USE_SHEEN\n		sheenSpecularDirect += irradiance * BRDF_Sheen( directLight.direction, geometryViewDir, geometryNormal, material.sheenColor, material.sheenRoughness );\n	#endif\n	reflectedLight.directSpecular += irradiance * BRDF_GGX( directLight.direction, geometryViewDir, geometryNormal, material );\n	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 irradiance, const in vec3 clearcoatRadiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight) {\n	#ifdef USE_CLEARCOAT\n		clearcoatSpecularIndirect += clearcoatRadiance * EnvironmentBRDF( geometryClearcoatNormal, geometryViewDir, material.clearcoatF0, material.clearcoatF90, material.clearcoatRoughness );\n	#endif\n	#ifdef USE_SHEEN\n		sheenSpecularIndirect += irradiance * material.sheenColor * IBLSheenBRDF( geometryNormal, geometryViewDir, material.sheenRoughness );\n	#endif\n	vec3 singleScattering = vec3( 0.0 );\n	vec3 multiScattering = vec3( 0.0 );\n	vec3 cosineWeightedIrradiance = irradiance * RECIPROCAL_PI;\n	#ifdef USE_IRIDESCENCE\n		computeMultiscatteringIridescence( geometryNormal, geometryViewDir, material.specularColor, material.specularF90, material.iridescence, material.iridescenceFresnel, material.roughness, singleScattering, multiScattering );\n	#else\n		computeMultiscattering( geometryNormal, geometryViewDir, material.specularColor, material.specularF90, material.roughness, singleScattering, multiScattering );\n	#endif\n	vec3 totalScattering = singleScattering + multiScattering;\n	vec3 diffuse = material.diffuseColor * ( 1.0 - max( max( totalScattering.r, totalScattering.g ), totalScattering.b ) );\n	reflectedLight.indirectSpecular += radiance * singleScattering;\n	reflectedLight.indirectSpecular += multiScattering * cosineWeightedIrradiance;\n	reflectedLight.indirectDiffuse += diffuse * cosineWeightedIrradiance;\n}\n#define RE_Direct				RE_Direct_Physical\n#define RE_Direct_RectArea		RE_Direct_RectArea_Physical\n#define RE_IndirectDiffuse		RE_IndirectDiffuse_Physical\n#define RE_IndirectSpecular		RE_IndirectSpecular_Physical\nfloat computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {\n	return saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );\n}";
var lights_fragment_begin = "\nvec3 geometryPosition = - vViewPosition;\nvec3 geometryNormal = normal;\nvec3 geometryViewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( vViewPosition );\nvec3 geometryClearcoatNormal = vec3( 0.0 );\n#ifdef USE_CLEARCOAT\n	geometryClearcoatNormal = clearcoatNormal;\n#endif\n#ifdef USE_IRIDESCENCE\n	float dotNVi = saturate( dot( normal, geometryViewDir ) );\n	if ( material.iridescenceThickness == 0.0 ) {\n		material.iridescence = 0.0;\n	} else {\n		material.iridescence = saturate( material.iridescence );\n	}\n	if ( material.iridescence > 0.0 ) {\n		material.iridescenceFresnel = evalIridescence( 1.0, material.iridescenceIOR, dotNVi, material.iridescenceThickness, material.specularColor );\n		material.iridescenceF0 = Schlick_to_F0( material.iridescenceFresnel, 1.0, dotNVi );\n	}\n#endif\nIncidentLight directLight;\n#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )\n	PointLight pointLight;\n	#if defined( USE_SHADOWMAP ) && NUM_POINT_LIGHT_SHADOWS > 0\n	PointLightShadow pointLightShadow;\n	#endif\n	#pragma unroll_loop_start\n	for ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n		pointLight = pointLights[ i ];\n		getPointLightInfo( pointLight, geometryPosition, directLight );\n		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_POINT_LIGHT_SHADOWS )\n		pointLightShadow = pointLightShadows[ i ];\n		directLight.color *= ( directLight.visible && receiveShadow ) ? getPointShadow( pointShadowMap[ i ], pointLightShadow.shadowMapSize, pointLightShadow.shadowIntensity, pointLightShadow.shadowBias, pointLightShadow.shadowRadius, vPointShadowCoord[ i ], pointLightShadow.shadowCameraNear, pointLightShadow.shadowCameraFar ) : 1.0;\n		#endif\n		RE_Direct( directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );\n	}\n	#pragma unroll_loop_end\n#endif\n#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )\n	SpotLight spotLight;\n	vec4 spotColor;\n	vec3 spotLightCoord;\n	bool inSpotLightMap;\n	#if defined( USE_SHADOWMAP ) && NUM_SPOT_LIGHT_SHADOWS > 0\n	SpotLightShadow spotLightShadow;\n	#endif\n	#pragma unroll_loop_start\n	for ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n		spotLight = spotLights[ i ];\n		getSpotLightInfo( spotLight, geometryPosition, directLight );\n		#if ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS )\n		#define SPOT_LIGHT_MAP_INDEX UNROLLED_LOOP_INDEX\n		#elif ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\n		#define SPOT_LIGHT_MAP_INDEX NUM_SPOT_LIGHT_MAPS\n		#else\n		#define SPOT_LIGHT_MAP_INDEX ( UNROLLED_LOOP_INDEX - NUM_SPOT_LIGHT_SHADOWS + NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS )\n		#endif\n		#if ( SPOT_LIGHT_MAP_INDEX < NUM_SPOT_LIGHT_MAPS )\n			spotLightCoord = vSpotLightCoord[ i ].xyz / vSpotLightCoord[ i ].w;\n			inSpotLightMap = all( lessThan( abs( spotLightCoord * 2. - 1. ), vec3( 1.0 ) ) );\n			spotColor = texture2D( spotLightMap[ SPOT_LIGHT_MAP_INDEX ], spotLightCoord.xy );\n			directLight.color = inSpotLightMap ? directLight.color * spotColor.rgb : directLight.color;\n		#endif\n		#undef SPOT_LIGHT_MAP_INDEX\n		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\n		spotLightShadow = spotLightShadows[ i ];\n		directLight.color *= ( directLight.visible && receiveShadow ) ? getShadow( spotShadowMap[ i ], spotLightShadow.shadowMapSize, spotLightShadow.shadowIntensity, spotLightShadow.shadowBias, spotLightShadow.shadowRadius, vSpotLightCoord[ i ] ) : 1.0;\n		#endif\n		RE_Direct( directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );\n	}\n	#pragma unroll_loop_end\n#endif\n#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )\n	DirectionalLight directionalLight;\n	#if defined( USE_SHADOWMAP ) && NUM_DIR_LIGHT_SHADOWS > 0\n	DirectionalLightShadow directionalLightShadow;\n	#endif\n	#pragma unroll_loop_start\n	for ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n		directionalLight = directionalLights[ i ];\n		getDirectionalLightInfo( directionalLight, directLight );\n		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_DIR_LIGHT_SHADOWS )\n		directionalLightShadow = directionalLightShadows[ i ];\n		directLight.color *= ( directLight.visible && receiveShadow ) ? getShadow( directionalShadowMap[ i ], directionalLightShadow.shadowMapSize, directionalLightShadow.shadowIntensity, directionalLightShadow.shadowBias, directionalLightShadow.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n		#endif\n		RE_Direct( directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );\n	}\n	#pragma unroll_loop_end\n#endif\n#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )\n	RectAreaLight rectAreaLight;\n	#pragma unroll_loop_start\n	for ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {\n		rectAreaLight = rectAreaLights[ i ];\n		RE_Direct_RectArea( rectAreaLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );\n	}\n	#pragma unroll_loop_end\n#endif\n#if defined( RE_IndirectDiffuse )\n	vec3 iblIrradiance = vec3( 0.0 );\n	vec3 irradiance = getAmbientLightIrradiance( ambientLightColor );\n	#if defined( USE_LIGHT_PROBES )\n		irradiance += getLightProbeIrradiance( lightProbe, geometryNormal );\n	#endif\n	#if ( NUM_HEMI_LIGHTS > 0 )\n		#pragma unroll_loop_start\n		for ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n			irradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometryNormal );\n		}\n		#pragma unroll_loop_end\n	#endif\n#endif\n#if defined( RE_IndirectSpecular )\n	vec3 radiance = vec3( 0.0 );\n	vec3 clearcoatRadiance = vec3( 0.0 );\n#endif";
var lights_fragment_maps = "#if defined( RE_IndirectDiffuse )\n	#ifdef USE_LIGHTMAP\n		vec4 lightMapTexel = texture2D( lightMap, vLightMapUv );\n		vec3 lightMapIrradiance = lightMapTexel.rgb * lightMapIntensity;\n		irradiance += lightMapIrradiance;\n	#endif\n	#if defined( USE_ENVMAP ) && defined( STANDARD ) && defined( ENVMAP_TYPE_CUBE_UV )\n		iblIrradiance += getIBLIrradiance( geometryNormal );\n	#endif\n#endif\n#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )\n	#ifdef USE_ANISOTROPY\n		radiance += getIBLAnisotropyRadiance( geometryViewDir, geometryNormal, material.roughness, material.anisotropyB, material.anisotropy );\n	#else\n		radiance += getIBLRadiance( geometryViewDir, geometryNormal, material.roughness );\n	#endif\n	#ifdef USE_CLEARCOAT\n		clearcoatRadiance += getIBLRadiance( geometryViewDir, geometryClearcoatNormal, material.clearcoatRoughness );\n	#endif\n#endif";
var lights_fragment_end = "#if defined( RE_IndirectDiffuse )\n	RE_IndirectDiffuse( irradiance, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );\n#endif\n#if defined( RE_IndirectSpecular )\n	RE_IndirectSpecular( radiance, iblIrradiance, clearcoatRadiance, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );\n#endif";
var logdepthbuf_fragment = "#if defined( USE_LOGDEPTHBUF )\n	gl_FragDepth = vIsPerspective == 0.0 ? gl_FragCoord.z : log2( vFragDepth ) * logDepthBufFC * 0.5;\n#endif";
var logdepthbuf_pars_fragment = "#if defined( USE_LOGDEPTHBUF )\n	uniform float logDepthBufFC;\n	varying float vFragDepth;\n	varying float vIsPerspective;\n#endif";
var logdepthbuf_pars_vertex = "#ifdef USE_LOGDEPTHBUF\n	varying float vFragDepth;\n	varying float vIsPerspective;\n#endif";
var logdepthbuf_vertex = "#ifdef USE_LOGDEPTHBUF\n	vFragDepth = 1.0 + gl_Position.w;\n	vIsPerspective = float( isPerspectiveMatrix( projectionMatrix ) );\n#endif";
var map_fragment = "#ifdef USE_MAP\n	vec4 sampledDiffuseColor = texture2D( map, vMapUv );\n	#ifdef DECODE_VIDEO_TEXTURE\n		sampledDiffuseColor = vec4( mix( pow( sampledDiffuseColor.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), sampledDiffuseColor.rgb * 0.0773993808, vec3( lessThanEqual( sampledDiffuseColor.rgb, vec3( 0.04045 ) ) ) ), sampledDiffuseColor.w );\n	\n	#endif\n	diffuseColor *= sampledDiffuseColor;\n#endif";
var map_pars_fragment = "#ifdef USE_MAP\n	uniform sampler2D map;\n#endif";
var map_particle_fragment = "#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\n	#if defined( USE_POINTS_UV )\n		vec2 uv = vUv;\n	#else\n		vec2 uv = ( uvTransform * vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;\n	#endif\n#endif\n#ifdef USE_MAP\n	diffuseColor *= texture2D( map, uv );\n#endif\n#ifdef USE_ALPHAMAP\n	diffuseColor.a *= texture2D( alphaMap, uv ).g;\n#endif";
var map_particle_pars_fragment = "#if defined( USE_POINTS_UV )\n	varying vec2 vUv;\n#else\n	#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\n		uniform mat3 uvTransform;\n	#endif\n#endif\n#ifdef USE_MAP\n	uniform sampler2D map;\n#endif\n#ifdef USE_ALPHAMAP\n	uniform sampler2D alphaMap;\n#endif";
var metalnessmap_fragment = "float metalnessFactor = metalness;\n#ifdef USE_METALNESSMAP\n	vec4 texelMetalness = texture2D( metalnessMap, vMetalnessMapUv );\n	metalnessFactor *= texelMetalness.b;\n#endif";
var metalnessmap_pars_fragment = "#ifdef USE_METALNESSMAP\n	uniform sampler2D metalnessMap;\n#endif";
var morphinstance_vertex = "#ifdef USE_INSTANCING_MORPH\n	float morphTargetInfluences[ MORPHTARGETS_COUNT ];\n	float morphTargetBaseInfluence = texelFetch( morphTexture, ivec2( 0, gl_InstanceID ), 0 ).r;\n	for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\n		morphTargetInfluences[i] =  texelFetch( morphTexture, ivec2( i + 1, gl_InstanceID ), 0 ).r;\n	}\n#endif";
var morphcolor_vertex = "#if defined( USE_MORPHCOLORS )\n	vColor *= morphTargetBaseInfluence;\n	for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\n		#if defined( USE_COLOR_ALPHA )\n			if ( morphTargetInfluences[ i ] != 0.0 ) vColor += getMorph( gl_VertexID, i, 2 ) * morphTargetInfluences[ i ];\n		#elif defined( USE_COLOR )\n			if ( morphTargetInfluences[ i ] != 0.0 ) vColor += getMorph( gl_VertexID, i, 2 ).rgb * morphTargetInfluences[ i ];\n		#endif\n	}\n#endif";
var morphnormal_vertex = "#ifdef USE_MORPHNORMALS\n	objectNormal *= morphTargetBaseInfluence;\n	for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\n		if ( morphTargetInfluences[ i ] != 0.0 ) objectNormal += getMorph( gl_VertexID, i, 1 ).xyz * morphTargetInfluences[ i ];\n	}\n#endif";
var morphtarget_pars_vertex = "#ifdef USE_MORPHTARGETS\n	#ifndef USE_INSTANCING_MORPH\n		uniform float morphTargetBaseInfluence;\n		uniform float morphTargetInfluences[ MORPHTARGETS_COUNT ];\n	#endif\n	uniform sampler2DArray morphTargetsTexture;\n	uniform ivec2 morphTargetsTextureSize;\n	vec4 getMorph( const in int vertexIndex, const in int morphTargetIndex, const in int offset ) {\n		int texelIndex = vertexIndex * MORPHTARGETS_TEXTURE_STRIDE + offset;\n		int y = texelIndex / morphTargetsTextureSize.x;\n		int x = texelIndex - y * morphTargetsTextureSize.x;\n		ivec3 morphUV = ivec3( x, y, morphTargetIndex );\n		return texelFetch( morphTargetsTexture, morphUV, 0 );\n	}\n#endif";
var morphtarget_vertex = "#ifdef USE_MORPHTARGETS\n	transformed *= morphTargetBaseInfluence;\n	for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\n		if ( morphTargetInfluences[ i ] != 0.0 ) transformed += getMorph( gl_VertexID, i, 0 ).xyz * morphTargetInfluences[ i ];\n	}\n#endif";
var normal_fragment_begin = "float faceDirection = gl_FrontFacing ? 1.0 : - 1.0;\n#ifdef FLAT_SHADED\n	vec3 fdx = dFdx( vViewPosition );\n	vec3 fdy = dFdy( vViewPosition );\n	vec3 normal = normalize( cross( fdx, fdy ) );\n#else\n	vec3 normal = normalize( vNormal );\n	#ifdef DOUBLE_SIDED\n		normal *= faceDirection;\n	#endif\n#endif\n#if defined( USE_NORMALMAP_TANGENTSPACE ) || defined( USE_CLEARCOAT_NORMALMAP ) || defined( USE_ANISOTROPY )\n	#ifdef USE_TANGENT\n		mat3 tbn = mat3( normalize( vTangent ), normalize( vBitangent ), normal );\n	#else\n		mat3 tbn = getTangentFrame( - vViewPosition, normal,\n		#if defined( USE_NORMALMAP )\n			vNormalMapUv\n		#elif defined( USE_CLEARCOAT_NORMALMAP )\n			vClearcoatNormalMapUv\n		#else\n			vUv\n		#endif\n		);\n	#endif\n	#if defined( DOUBLE_SIDED ) && ! defined( FLAT_SHADED )\n		tbn[0] *= faceDirection;\n		tbn[1] *= faceDirection;\n	#endif\n#endif\n#ifdef USE_CLEARCOAT_NORMALMAP\n	#ifdef USE_TANGENT\n		mat3 tbn2 = mat3( normalize( vTangent ), normalize( vBitangent ), normal );\n	#else\n		mat3 tbn2 = getTangentFrame( - vViewPosition, normal, vClearcoatNormalMapUv );\n	#endif\n	#if defined( DOUBLE_SIDED ) && ! defined( FLAT_SHADED )\n		tbn2[0] *= faceDirection;\n		tbn2[1] *= faceDirection;\n	#endif\n#endif\nvec3 nonPerturbedNormal = normal;";
var normal_fragment_maps = "#ifdef USE_NORMALMAP_OBJECTSPACE\n	normal = texture2D( normalMap, vNormalMapUv ).xyz * 2.0 - 1.0;\n	#ifdef FLIP_SIDED\n		normal = - normal;\n	#endif\n	#ifdef DOUBLE_SIDED\n		normal = normal * faceDirection;\n	#endif\n	normal = normalize( normalMatrix * normal );\n#elif defined( USE_NORMALMAP_TANGENTSPACE )\n	vec3 mapN = texture2D( normalMap, vNormalMapUv ).xyz * 2.0 - 1.0;\n	mapN.xy *= normalScale;\n	normal = normalize( tbn * mapN );\n#elif defined( USE_BUMPMAP )\n	normal = perturbNormalArb( - vViewPosition, normal, dHdxy_fwd(), faceDirection );\n#endif";
var normal_pars_fragment = "#ifndef FLAT_SHADED\n	varying vec3 vNormal;\n	#ifdef USE_TANGENT\n		varying vec3 vTangent;\n		varying vec3 vBitangent;\n	#endif\n#endif";
var normal_pars_vertex = "#ifndef FLAT_SHADED\n	varying vec3 vNormal;\n	#ifdef USE_TANGENT\n		varying vec3 vTangent;\n		varying vec3 vBitangent;\n	#endif\n#endif";
var normal_vertex = "#ifndef FLAT_SHADED\n	vNormal = normalize( transformedNormal );\n	#ifdef USE_TANGENT\n		vTangent = normalize( transformedTangent );\n		vBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );\n	#endif\n#endif";
var normalmap_pars_fragment = "#ifdef USE_NORMALMAP\n	uniform sampler2D normalMap;\n	uniform vec2 normalScale;\n#endif\n#ifdef USE_NORMALMAP_OBJECTSPACE\n	uniform mat3 normalMatrix;\n#endif\n#if ! defined ( USE_TANGENT ) && ( defined ( USE_NORMALMAP_TANGENTSPACE ) || defined ( USE_CLEARCOAT_NORMALMAP ) || defined( USE_ANISOTROPY ) )\n	mat3 getTangentFrame( vec3 eye_pos, vec3 surf_norm, vec2 uv ) {\n		vec3 q0 = dFdx( eye_pos.xyz );\n		vec3 q1 = dFdy( eye_pos.xyz );\n		vec2 st0 = dFdx( uv.st );\n		vec2 st1 = dFdy( uv.st );\n		vec3 N = surf_norm;\n		vec3 q1perp = cross( q1, N );\n		vec3 q0perp = cross( N, q0 );\n		vec3 T = q1perp * st0.x + q0perp * st1.x;\n		vec3 B = q1perp * st0.y + q0perp * st1.y;\n		float det = max( dot( T, T ), dot( B, B ) );\n		float scale = ( det == 0.0 ) ? 0.0 : inversesqrt( det );\n		return mat3( T * scale, B * scale, N );\n	}\n#endif";
var clearcoat_normal_fragment_begin = "#ifdef USE_CLEARCOAT\n	vec3 clearcoatNormal = nonPerturbedNormal;\n#endif";
var clearcoat_normal_fragment_maps = "#ifdef USE_CLEARCOAT_NORMALMAP\n	vec3 clearcoatMapN = texture2D( clearcoatNormalMap, vClearcoatNormalMapUv ).xyz * 2.0 - 1.0;\n	clearcoatMapN.xy *= clearcoatNormalScale;\n	clearcoatNormal = normalize( tbn2 * clearcoatMapN );\n#endif";
var clearcoat_pars_fragment = "#ifdef USE_CLEARCOATMAP\n	uniform sampler2D clearcoatMap;\n#endif\n#ifdef USE_CLEARCOAT_NORMALMAP\n	uniform sampler2D clearcoatNormalMap;\n	uniform vec2 clearcoatNormalScale;\n#endif\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n	uniform sampler2D clearcoatRoughnessMap;\n#endif";
var iridescence_pars_fragment = "#ifdef USE_IRIDESCENCEMAP\n	uniform sampler2D iridescenceMap;\n#endif\n#ifdef USE_IRIDESCENCE_THICKNESSMAP\n	uniform sampler2D iridescenceThicknessMap;\n#endif";
var opaque_fragment = "#ifdef OPAQUE\ndiffuseColor.a = 1.0;\n#endif\n#ifdef USE_TRANSMISSION\ndiffuseColor.a *= material.transmissionAlpha;\n#endif\ngl_FragColor = vec4( outgoingLight, diffuseColor.a );";
var packing = "vec3 packNormalToRGB( const in vec3 normal ) {\n	return normalize( normal ) * 0.5 + 0.5;\n}\nvec3 unpackRGBToNormal( const in vec3 rgb ) {\n	return 2.0 * rgb.xyz - 1.0;\n}\nconst float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;const float ShiftRight8 = 1. / 256.;\nconst float Inv255 = 1. / 255.;\nconst vec4 PackFactors = vec4( 1.0, 256.0, 256.0 * 256.0, 256.0 * 256.0 * 256.0 );\nconst vec2 UnpackFactors2 = vec2( UnpackDownscale, 1.0 / PackFactors.g );\nconst vec3 UnpackFactors3 = vec3( UnpackDownscale / PackFactors.rg, 1.0 / PackFactors.b );\nconst vec4 UnpackFactors4 = vec4( UnpackDownscale / PackFactors.rgb, 1.0 / PackFactors.a );\nvec4 packDepthToRGBA( const in float v ) {\n	if( v <= 0.0 )\n		return vec4( 0., 0., 0., 0. );\n	if( v >= 1.0 )\n		return vec4( 1., 1., 1., 1. );\n	float vuf;\n	float af = modf( v * PackFactors.a, vuf );\n	float bf = modf( vuf * ShiftRight8, vuf );\n	float gf = modf( vuf * ShiftRight8, vuf );\n	return vec4( vuf * Inv255, gf * PackUpscale, bf * PackUpscale, af );\n}\nvec3 packDepthToRGB( const in float v ) {\n	if( v <= 0.0 )\n		return vec3( 0., 0., 0. );\n	if( v >= 1.0 )\n		return vec3( 1., 1., 1. );\n	float vuf;\n	float bf = modf( v * PackFactors.b, vuf );\n	float gf = modf( vuf * ShiftRight8, vuf );\n	return vec3( vuf * Inv255, gf * PackUpscale, bf );\n}\nvec2 packDepthToRG( const in float v ) {\n	if( v <= 0.0 )\n		return vec2( 0., 0. );\n	if( v >= 1.0 )\n		return vec2( 1., 1. );\n	float vuf;\n	float gf = modf( v * 256., vuf );\n	return vec2( vuf * Inv255, gf );\n}\nfloat unpackRGBAToDepth( const in vec4 v ) {\n	return dot( v, UnpackFactors4 );\n}\nfloat unpackRGBToDepth( const in vec3 v ) {\n	return dot( v, UnpackFactors3 );\n}\nfloat unpackRGToDepth( const in vec2 v ) {\n	return v.r * UnpackFactors2.r + v.g * UnpackFactors2.g;\n}\nvec4 pack2HalfToRGBA( const in vec2 v ) {\n	vec4 r = vec4( v.x, fract( v.x * 255.0 ), v.y, fract( v.y * 255.0 ) );\n	return vec4( r.x - r.y / 255.0, r.y, r.z - r.w / 255.0, r.w );\n}\nvec2 unpackRGBATo2Half( const in vec4 v ) {\n	return vec2( v.x + ( v.y / 255.0 ), v.z + ( v.w / 255.0 ) );\n}\nfloat viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {\n	return ( viewZ + near ) / ( near - far );\n}\nfloat orthographicDepthToViewZ( const in float depth, const in float near, const in float far ) {\n	return depth * ( near - far ) - near;\n}\nfloat viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {\n	return ( ( near + viewZ ) * far ) / ( ( far - near ) * viewZ );\n}\nfloat perspectiveDepthToViewZ( const in float depth, const in float near, const in float far ) {\n	return ( near * far ) / ( ( far - near ) * depth - far );\n}";
var premultiplied_alpha_fragment = "#ifdef PREMULTIPLIED_ALPHA\n	gl_FragColor.rgb *= gl_FragColor.a;\n#endif";
var project_vertex = "vec4 mvPosition = vec4( transformed, 1.0 );\n#ifdef USE_BATCHING\n	mvPosition = batchingMatrix * mvPosition;\n#endif\n#ifdef USE_INSTANCING\n	mvPosition = instanceMatrix * mvPosition;\n#endif\nmvPosition = modelViewMatrix * mvPosition;\ngl_Position = projectionMatrix * mvPosition;";
var dithering_fragment = "#ifdef DITHERING\n	gl_FragColor.rgb = dithering( gl_FragColor.rgb );\n#endif";
var dithering_pars_fragment = "#ifdef DITHERING\n	vec3 dithering( vec3 color ) {\n		float grid_position = rand( gl_FragCoord.xy );\n		vec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );\n		dither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );\n		return color + dither_shift_RGB;\n	}\n#endif";
var roughnessmap_fragment = "float roughnessFactor = roughness;\n#ifdef USE_ROUGHNESSMAP\n	vec4 texelRoughness = texture2D( roughnessMap, vRoughnessMapUv );\n	roughnessFactor *= texelRoughness.g;\n#endif";
var roughnessmap_pars_fragment = "#ifdef USE_ROUGHNESSMAP\n	uniform sampler2D roughnessMap;\n#endif";
var shadowmap_pars_fragment = "#if NUM_SPOT_LIGHT_COORDS > 0\n	varying vec4 vSpotLightCoord[ NUM_SPOT_LIGHT_COORDS ];\n#endif\n#if NUM_SPOT_LIGHT_MAPS > 0\n	uniform sampler2D spotLightMap[ NUM_SPOT_LIGHT_MAPS ];\n#endif\n#ifdef USE_SHADOWMAP\n	#if NUM_DIR_LIGHT_SHADOWS > 0\n		uniform sampler2D directionalShadowMap[ NUM_DIR_LIGHT_SHADOWS ];\n		varying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\n		struct DirectionalLightShadow {\n			float shadowIntensity;\n			float shadowBias;\n			float shadowNormalBias;\n			float shadowRadius;\n			vec2 shadowMapSize;\n		};\n		uniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];\n	#endif\n	#if NUM_SPOT_LIGHT_SHADOWS > 0\n		uniform sampler2D spotShadowMap[ NUM_SPOT_LIGHT_SHADOWS ];\n		struct SpotLightShadow {\n			float shadowIntensity;\n			float shadowBias;\n			float shadowNormalBias;\n			float shadowRadius;\n			vec2 shadowMapSize;\n		};\n		uniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];\n	#endif\n	#if NUM_POINT_LIGHT_SHADOWS > 0\n		uniform sampler2D pointShadowMap[ NUM_POINT_LIGHT_SHADOWS ];\n		varying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\n		struct PointLightShadow {\n			float shadowIntensity;\n			float shadowBias;\n			float shadowNormalBias;\n			float shadowRadius;\n			vec2 shadowMapSize;\n			float shadowCameraNear;\n			float shadowCameraFar;\n		};\n		uniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];\n	#endif\n	float texture2DCompare( sampler2D depths, vec2 uv, float compare ) {\n		return step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );\n	}\n	vec2 texture2DDistribution( sampler2D shadow, vec2 uv ) {\n		return unpackRGBATo2Half( texture2D( shadow, uv ) );\n	}\n	float VSMShadow (sampler2D shadow, vec2 uv, float compare ){\n		float occlusion = 1.0;\n		vec2 distribution = texture2DDistribution( shadow, uv );\n		float hard_shadow = step( compare , distribution.x );\n		if (hard_shadow != 1.0 ) {\n			float distance = compare - distribution.x ;\n			float variance = max( 0.00000, distribution.y * distribution.y );\n			float softness_probability = variance / (variance + distance * distance );			softness_probability = clamp( ( softness_probability - 0.3 ) / ( 0.95 - 0.3 ), 0.0, 1.0 );			occlusion = clamp( max( hard_shadow, softness_probability ), 0.0, 1.0 );\n		}\n		return occlusion;\n	}\n	float getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowIntensity, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\n		float shadow = 1.0;\n		shadowCoord.xyz /= shadowCoord.w;\n		shadowCoord.z += shadowBias;\n		bool inFrustum = shadowCoord.x >= 0.0 && shadowCoord.x <= 1.0 && shadowCoord.y >= 0.0 && shadowCoord.y <= 1.0;\n		bool frustumTest = inFrustum && shadowCoord.z <= 1.0;\n		if ( frustumTest ) {\n		#if defined( SHADOWMAP_TYPE_PCF )\n			vec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n			float dx0 = - texelSize.x * shadowRadius;\n			float dy0 = - texelSize.y * shadowRadius;\n			float dx1 = + texelSize.x * shadowRadius;\n			float dy1 = + texelSize.y * shadowRadius;\n			float dx2 = dx0 / 2.0;\n			float dy2 = dy0 / 2.0;\n			float dx3 = dx1 / 2.0;\n			float dy3 = dy1 / 2.0;\n			shadow = (\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy2 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy2 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy2 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, 0.0 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, 0.0 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy3 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy3 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy3 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\n			) * ( 1.0 / 17.0 );\n		#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\n			vec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n			float dx = texelSize.x;\n			float dy = texelSize.y;\n			vec2 uv = shadowCoord.xy;\n			vec2 f = fract( uv * shadowMapSize + 0.5 );\n			uv -= f * texelSize;\n			shadow = (\n				texture2DCompare( shadowMap, uv, shadowCoord.z ) +\n				texture2DCompare( shadowMap, uv + vec2( dx, 0.0 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, uv + vec2( 0.0, dy ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, uv + texelSize, shadowCoord.z ) +\n				mix( texture2DCompare( shadowMap, uv + vec2( -dx, 0.0 ), shadowCoord.z ),\n					 texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 0.0 ), shadowCoord.z ),\n					 f.x ) +\n				mix( texture2DCompare( shadowMap, uv + vec2( -dx, dy ), shadowCoord.z ),\n					 texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, dy ), shadowCoord.z ),\n					 f.x ) +\n				mix( texture2DCompare( shadowMap, uv + vec2( 0.0, -dy ), shadowCoord.z ),\n					 texture2DCompare( shadowMap, uv + vec2( 0.0, 2.0 * dy ), shadowCoord.z ),\n					 f.y ) +\n				mix( texture2DCompare( shadowMap, uv + vec2( dx, -dy ), shadowCoord.z ),\n					 texture2DCompare( shadowMap, uv + vec2( dx, 2.0 * dy ), shadowCoord.z ),\n					 f.y ) +\n				mix( mix( texture2DCompare( shadowMap, uv + vec2( -dx, -dy ), shadowCoord.z ),\n						  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, -dy ), shadowCoord.z ),\n						  f.x ),\n					 mix( texture2DCompare( shadowMap, uv + vec2( -dx, 2.0 * dy ), shadowCoord.z ),\n						  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 2.0 * dy ), shadowCoord.z ),\n						  f.x ),\n					 f.y )\n			) * ( 1.0 / 9.0 );\n		#elif defined( SHADOWMAP_TYPE_VSM )\n			shadow = VSMShadow( shadowMap, shadowCoord.xy, shadowCoord.z );\n		#else\n			shadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );\n		#endif\n		}\n		return mix( 1.0, shadow, shadowIntensity );\n	}\n	vec2 cubeToUV( vec3 v, float texelSizeY ) {\n		vec3 absV = abs( v );\n		float scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );\n		absV *= scaleToCube;\n		v *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );\n		vec2 planar = v.xy;\n		float almostATexel = 1.5 * texelSizeY;\n		float almostOne = 1.0 - almostATexel;\n		if ( absV.z >= almostOne ) {\n			if ( v.z > 0.0 )\n				planar.x = 4.0 - v.x;\n		} else if ( absV.x >= almostOne ) {\n			float signX = sign( v.x );\n			planar.x = v.z * signX + 2.0 * signX;\n		} else if ( absV.y >= almostOne ) {\n			float signY = sign( v.y );\n			planar.x = v.x + 2.0 * signY + 2.0;\n			planar.y = v.z * signY - 2.0;\n		}\n		return vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );\n	}\n	float getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowIntensity, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {\n		float shadow = 1.0;\n		vec3 lightToPosition = shadowCoord.xyz;\n		\n		float lightToPositionLength = length( lightToPosition );\n		if ( lightToPositionLength - shadowCameraFar <= 0.0 && lightToPositionLength - shadowCameraNear >= 0.0 ) {\n			float dp = ( lightToPositionLength - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear );			dp += shadowBias;\n			vec3 bd3D = normalize( lightToPosition );\n			vec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );\n			#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT ) || defined( SHADOWMAP_TYPE_VSM )\n				vec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;\n				shadow = (\n					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +\n					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +\n					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +\n					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +\n					texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +\n					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +\n					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +\n					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +\n					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )\n				) * ( 1.0 / 9.0 );\n			#else\n				shadow = texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );\n			#endif\n		}\n		return mix( 1.0, shadow, shadowIntensity );\n	}\n#endif";
var shadowmap_pars_vertex = "#if NUM_SPOT_LIGHT_COORDS > 0\n	uniform mat4 spotLightMatrix[ NUM_SPOT_LIGHT_COORDS ];\n	varying vec4 vSpotLightCoord[ NUM_SPOT_LIGHT_COORDS ];\n#endif\n#ifdef USE_SHADOWMAP\n	#if NUM_DIR_LIGHT_SHADOWS > 0\n		uniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHT_SHADOWS ];\n		varying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\n		struct DirectionalLightShadow {\n			float shadowIntensity;\n			float shadowBias;\n			float shadowNormalBias;\n			float shadowRadius;\n			vec2 shadowMapSize;\n		};\n		uniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];\n	#endif\n	#if NUM_SPOT_LIGHT_SHADOWS > 0\n		struct SpotLightShadow {\n			float shadowIntensity;\n			float shadowBias;\n			float shadowNormalBias;\n			float shadowRadius;\n			vec2 shadowMapSize;\n		};\n		uniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];\n	#endif\n	#if NUM_POINT_LIGHT_SHADOWS > 0\n		uniform mat4 pointShadowMatrix[ NUM_POINT_LIGHT_SHADOWS ];\n		varying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\n		struct PointLightShadow {\n			float shadowIntensity;\n			float shadowBias;\n			float shadowNormalBias;\n			float shadowRadius;\n			vec2 shadowMapSize;\n			float shadowCameraNear;\n			float shadowCameraFar;\n		};\n		uniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];\n	#endif\n#endif";
var shadowmap_vertex = "#if ( defined( USE_SHADOWMAP ) && ( NUM_DIR_LIGHT_SHADOWS > 0 || NUM_POINT_LIGHT_SHADOWS > 0 ) ) || ( NUM_SPOT_LIGHT_COORDS > 0 )\n	vec3 shadowWorldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\n	vec4 shadowWorldPosition;\n#endif\n#if defined( USE_SHADOWMAP )\n	#if NUM_DIR_LIGHT_SHADOWS > 0\n		#pragma unroll_loop_start\n		for ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\n			shadowWorldPosition = worldPosition + vec4( shadowWorldNormal * directionalLightShadows[ i ].shadowNormalBias, 0 );\n			vDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * shadowWorldPosition;\n		}\n		#pragma unroll_loop_end\n	#endif\n	#if NUM_POINT_LIGHT_SHADOWS > 0\n		#pragma unroll_loop_start\n		for ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\n			shadowWorldPosition = worldPosition + vec4( shadowWorldNormal * pointLightShadows[ i ].shadowNormalBias, 0 );\n			vPointShadowCoord[ i ] = pointShadowMatrix[ i ] * shadowWorldPosition;\n		}\n		#pragma unroll_loop_end\n	#endif\n#endif\n#if NUM_SPOT_LIGHT_COORDS > 0\n	#pragma unroll_loop_start\n	for ( int i = 0; i < NUM_SPOT_LIGHT_COORDS; i ++ ) {\n		shadowWorldPosition = worldPosition;\n		#if ( defined( USE_SHADOWMAP ) && UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\n			shadowWorldPosition.xyz += shadowWorldNormal * spotLightShadows[ i ].shadowNormalBias;\n		#endif\n		vSpotLightCoord[ i ] = spotLightMatrix[ i ] * shadowWorldPosition;\n	}\n	#pragma unroll_loop_end\n#endif";
var shadowmask_pars_fragment = "float getShadowMask() {\n	float shadow = 1.0;\n	#ifdef USE_SHADOWMAP\n	#if NUM_DIR_LIGHT_SHADOWS > 0\n	DirectionalLightShadow directionalLight;\n	#pragma unroll_loop_start\n	for ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\n		directionalLight = directionalLightShadows[ i ];\n		shadow *= receiveShadow ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowIntensity, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n	}\n	#pragma unroll_loop_end\n	#endif\n	#if NUM_SPOT_LIGHT_SHADOWS > 0\n	SpotLightShadow spotLight;\n	#pragma unroll_loop_start\n	for ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {\n		spotLight = spotLightShadows[ i ];\n		shadow *= receiveShadow ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowIntensity, spotLight.shadowBias, spotLight.shadowRadius, vSpotLightCoord[ i ] ) : 1.0;\n	}\n	#pragma unroll_loop_end\n	#endif\n	#if NUM_POINT_LIGHT_SHADOWS > 0\n	PointLightShadow pointLight;\n	#pragma unroll_loop_start\n	for ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\n		pointLight = pointLightShadows[ i ];\n		shadow *= receiveShadow ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowIntensity, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\n	}\n	#pragma unroll_loop_end\n	#endif\n	#endif\n	return shadow;\n}";
var skinbase_vertex = "#ifdef USE_SKINNING\n	mat4 boneMatX = getBoneMatrix( skinIndex.x );\n	mat4 boneMatY = getBoneMatrix( skinIndex.y );\n	mat4 boneMatZ = getBoneMatrix( skinIndex.z );\n	mat4 boneMatW = getBoneMatrix( skinIndex.w );\n#endif";
var skinning_pars_vertex = "#ifdef USE_SKINNING\n	uniform mat4 bindMatrix;\n	uniform mat4 bindMatrixInverse;\n	uniform highp sampler2D boneTexture;\n	mat4 getBoneMatrix( const in float i ) {\n		int size = textureSize( boneTexture, 0 ).x;\n		int j = int( i ) * 4;\n		int x = j % size;\n		int y = j / size;\n		vec4 v1 = texelFetch( boneTexture, ivec2( x, y ), 0 );\n		vec4 v2 = texelFetch( boneTexture, ivec2( x + 1, y ), 0 );\n		vec4 v3 = texelFetch( boneTexture, ivec2( x + 2, y ), 0 );\n		vec4 v4 = texelFetch( boneTexture, ivec2( x + 3, y ), 0 );\n		return mat4( v1, v2, v3, v4 );\n	}\n#endif";
var skinning_vertex = "#ifdef USE_SKINNING\n	vec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );\n	vec4 skinned = vec4( 0.0 );\n	skinned += boneMatX * skinVertex * skinWeight.x;\n	skinned += boneMatY * skinVertex * skinWeight.y;\n	skinned += boneMatZ * skinVertex * skinWeight.z;\n	skinned += boneMatW * skinVertex * skinWeight.w;\n	transformed = ( bindMatrixInverse * skinned ).xyz;\n#endif";
var skinnormal_vertex = "#ifdef USE_SKINNING\n	mat4 skinMatrix = mat4( 0.0 );\n	skinMatrix += skinWeight.x * boneMatX;\n	skinMatrix += skinWeight.y * boneMatY;\n	skinMatrix += skinWeight.z * boneMatZ;\n	skinMatrix += skinWeight.w * boneMatW;\n	skinMatrix = bindMatrixInverse * skinMatrix * bindMatrix;\n	objectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;\n	#ifdef USE_TANGENT\n		objectTangent = vec4( skinMatrix * vec4( objectTangent, 0.0 ) ).xyz;\n	#endif\n#endif";
var specularmap_fragment = "float specularStrength;\n#ifdef USE_SPECULARMAP\n	vec4 texelSpecular = texture2D( specularMap, vSpecularMapUv );\n	specularStrength = texelSpecular.r;\n#else\n	specularStrength = 1.0;\n#endif";
var specularmap_pars_fragment = "#ifdef USE_SPECULARMAP\n	uniform sampler2D specularMap;\n#endif";
var tonemapping_fragment = "#if defined( TONE_MAPPING )\n	gl_FragColor.rgb = toneMapping( gl_FragColor.rgb );\n#endif";
var tonemapping_pars_fragment = "#ifndef saturate\n#define saturate( a ) clamp( a, 0.0, 1.0 )\n#endif\nuniform float toneMappingExposure;\nvec3 LinearToneMapping( vec3 color ) {\n	return saturate( toneMappingExposure * color );\n}\nvec3 ReinhardToneMapping( vec3 color ) {\n	color *= toneMappingExposure;\n	return saturate( color / ( vec3( 1.0 ) + color ) );\n}\nvec3 CineonToneMapping( vec3 color ) {\n	color *= toneMappingExposure;\n	color = max( vec3( 0.0 ), color - 0.004 );\n	return pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );\n}\nvec3 RRTAndODTFit( vec3 v ) {\n	vec3 a = v * ( v + 0.0245786 ) - 0.000090537;\n	vec3 b = v * ( 0.983729 * v + 0.4329510 ) + 0.238081;\n	return a / b;\n}\nvec3 ACESFilmicToneMapping( vec3 color ) {\n	const mat3 ACESInputMat = mat3(\n		vec3( 0.59719, 0.07600, 0.02840 ),		vec3( 0.35458, 0.90834, 0.13383 ),\n		vec3( 0.04823, 0.01566, 0.83777 )\n	);\n	const mat3 ACESOutputMat = mat3(\n		vec3(  1.60475, -0.10208, -0.00327 ),		vec3( -0.53108,  1.10813, -0.07276 ),\n		vec3( -0.07367, -0.00605,  1.07602 )\n	);\n	color *= toneMappingExposure / 0.6;\n	color = ACESInputMat * color;\n	color = RRTAndODTFit( color );\n	color = ACESOutputMat * color;\n	return saturate( color );\n}\nconst mat3 LINEAR_REC2020_TO_LINEAR_SRGB = mat3(\n	vec3( 1.6605, - 0.1246, - 0.0182 ),\n	vec3( - 0.5876, 1.1329, - 0.1006 ),\n	vec3( - 0.0728, - 0.0083, 1.1187 )\n);\nconst mat3 LINEAR_SRGB_TO_LINEAR_REC2020 = mat3(\n	vec3( 0.6274, 0.0691, 0.0164 ),\n	vec3( 0.3293, 0.9195, 0.0880 ),\n	vec3( 0.0433, 0.0113, 0.8956 )\n);\nvec3 agxDefaultContrastApprox( vec3 x ) {\n	vec3 x2 = x * x;\n	vec3 x4 = x2 * x2;\n	return + 15.5 * x4 * x2\n		- 40.14 * x4 * x\n		+ 31.96 * x4\n		- 6.868 * x2 * x\n		+ 0.4298 * x2\n		+ 0.1191 * x\n		- 0.00232;\n}\nvec3 AgXToneMapping( vec3 color ) {\n	const mat3 AgXInsetMatrix = mat3(\n		vec3( 0.856627153315983, 0.137318972929847, 0.11189821299995 ),\n		vec3( 0.0951212405381588, 0.761241990602591, 0.0767994186031903 ),\n		vec3( 0.0482516061458583, 0.101439036467562, 0.811302368396859 )\n	);\n	const mat3 AgXOutsetMatrix = mat3(\n		vec3( 1.1271005818144368, - 0.1413297634984383, - 0.14132976349843826 ),\n		vec3( - 0.11060664309660323, 1.157823702216272, - 0.11060664309660294 ),\n		vec3( - 0.016493938717834573, - 0.016493938717834257, 1.2519364065950405 )\n	);\n	const float AgxMinEv = - 12.47393;	const float AgxMaxEv = 4.026069;\n	color *= toneMappingExposure;\n	color = LINEAR_SRGB_TO_LINEAR_REC2020 * color;\n	color = AgXInsetMatrix * color;\n	color = max( color, 1e-10 );	color = log2( color );\n	color = ( color - AgxMinEv ) / ( AgxMaxEv - AgxMinEv );\n	color = clamp( color, 0.0, 1.0 );\n	color = agxDefaultContrastApprox( color );\n	color = AgXOutsetMatrix * color;\n	color = pow( max( vec3( 0.0 ), color ), vec3( 2.2 ) );\n	color = LINEAR_REC2020_TO_LINEAR_SRGB * color;\n	color = clamp( color, 0.0, 1.0 );\n	return color;\n}\nvec3 NeutralToneMapping( vec3 color ) {\n	const float StartCompression = 0.8 - 0.04;\n	const float Desaturation = 0.15;\n	color *= toneMappingExposure;\n	float x = min( color.r, min( color.g, color.b ) );\n	float offset = x < 0.08 ? x - 6.25 * x * x : 0.04;\n	color -= offset;\n	float peak = max( color.r, max( color.g, color.b ) );\n	if ( peak < StartCompression ) return color;\n	float d = 1. - StartCompression;\n	float newPeak = 1. - d * d / ( peak + d - StartCompression );\n	color *= newPeak / peak;\n	float g = 1. - 1. / ( Desaturation * ( peak - newPeak ) + 1. );\n	return mix( color, vec3( newPeak ), g );\n}\nvec3 CustomToneMapping( vec3 color ) { return color; }";
var transmission_fragment = "#ifdef USE_TRANSMISSION\n	material.transmission = transmission;\n	material.transmissionAlpha = 1.0;\n	material.thickness = thickness;\n	material.attenuationDistance = attenuationDistance;\n	material.attenuationColor = attenuationColor;\n	#ifdef USE_TRANSMISSIONMAP\n		material.transmission *= texture2D( transmissionMap, vTransmissionMapUv ).r;\n	#endif\n	#ifdef USE_THICKNESSMAP\n		material.thickness *= texture2D( thicknessMap, vThicknessMapUv ).g;\n	#endif\n	vec3 pos = vWorldPosition;\n	vec3 v = normalize( cameraPosition - pos );\n	vec3 n = inverseTransformDirection( normal, viewMatrix );\n	vec4 transmitted = getIBLVolumeRefraction(\n		n, v, material.roughness, material.diffuseColor, material.specularColor, material.specularF90,\n		pos, modelMatrix, viewMatrix, projectionMatrix, material.dispersion, material.ior, material.thickness,\n		material.attenuationColor, material.attenuationDistance );\n	material.transmissionAlpha = mix( material.transmissionAlpha, transmitted.a, material.transmission );\n	totalDiffuse = mix( totalDiffuse, transmitted.rgb, material.transmission );\n#endif";
var transmission_pars_fragment = "#ifdef USE_TRANSMISSION\n	uniform float transmission;\n	uniform float thickness;\n	uniform float attenuationDistance;\n	uniform vec3 attenuationColor;\n	#ifdef USE_TRANSMISSIONMAP\n		uniform sampler2D transmissionMap;\n	#endif\n	#ifdef USE_THICKNESSMAP\n		uniform sampler2D thicknessMap;\n	#endif\n	uniform vec2 transmissionSamplerSize;\n	uniform sampler2D transmissionSamplerMap;\n	uniform mat4 modelMatrix;\n	uniform mat4 projectionMatrix;\n	varying vec3 vWorldPosition;\n	float w0( float a ) {\n		return ( 1.0 / 6.0 ) * ( a * ( a * ( - a + 3.0 ) - 3.0 ) + 1.0 );\n	}\n	float w1( float a ) {\n		return ( 1.0 / 6.0 ) * ( a *  a * ( 3.0 * a - 6.0 ) + 4.0 );\n	}\n	float w2( float a ){\n		return ( 1.0 / 6.0 ) * ( a * ( a * ( - 3.0 * a + 3.0 ) + 3.0 ) + 1.0 );\n	}\n	float w3( float a ) {\n		return ( 1.0 / 6.0 ) * ( a * a * a );\n	}\n	float g0( float a ) {\n		return w0( a ) + w1( a );\n	}\n	float g1( float a ) {\n		return w2( a ) + w3( a );\n	}\n	float h0( float a ) {\n		return - 1.0 + w1( a ) / ( w0( a ) + w1( a ) );\n	}\n	float h1( float a ) {\n		return 1.0 + w3( a ) / ( w2( a ) + w3( a ) );\n	}\n	vec4 bicubic( sampler2D tex, vec2 uv, vec4 texelSize, float lod ) {\n		uv = uv * texelSize.zw + 0.5;\n		vec2 iuv = floor( uv );\n		vec2 fuv = fract( uv );\n		float g0x = g0( fuv.x );\n		float g1x = g1( fuv.x );\n		float h0x = h0( fuv.x );\n		float h1x = h1( fuv.x );\n		float h0y = h0( fuv.y );\n		float h1y = h1( fuv.y );\n		vec2 p0 = ( vec2( iuv.x + h0x, iuv.y + h0y ) - 0.5 ) * texelSize.xy;\n		vec2 p1 = ( vec2( iuv.x + h1x, iuv.y + h0y ) - 0.5 ) * texelSize.xy;\n		vec2 p2 = ( vec2( iuv.x + h0x, iuv.y + h1y ) - 0.5 ) * texelSize.xy;\n		vec2 p3 = ( vec2( iuv.x + h1x, iuv.y + h1y ) - 0.5 ) * texelSize.xy;\n		return g0( fuv.y ) * ( g0x * textureLod( tex, p0, lod ) + g1x * textureLod( tex, p1, lod ) ) +\n			g1( fuv.y ) * ( g0x * textureLod( tex, p2, lod ) + g1x * textureLod( tex, p3, lod ) );\n	}\n	vec4 textureBicubic( sampler2D sampler, vec2 uv, float lod ) {\n		vec2 fLodSize = vec2( textureSize( sampler, int( lod ) ) );\n		vec2 cLodSize = vec2( textureSize( sampler, int( lod + 1.0 ) ) );\n		vec2 fLodSizeInv = 1.0 / fLodSize;\n		vec2 cLodSizeInv = 1.0 / cLodSize;\n		vec4 fSample = bicubic( sampler, uv, vec4( fLodSizeInv, fLodSize ), floor( lod ) );\n		vec4 cSample = bicubic( sampler, uv, vec4( cLodSizeInv, cLodSize ), ceil( lod ) );\n		return mix( fSample, cSample, fract( lod ) );\n	}\n	vec3 getVolumeTransmissionRay( const in vec3 n, const in vec3 v, const in float thickness, const in float ior, const in mat4 modelMatrix ) {\n		vec3 refractionVector = refract( - v, normalize( n ), 1.0 / ior );\n		vec3 modelScale;\n		modelScale.x = length( vec3( modelMatrix[ 0 ].xyz ) );\n		modelScale.y = length( vec3( modelMatrix[ 1 ].xyz ) );\n		modelScale.z = length( vec3( modelMatrix[ 2 ].xyz ) );\n		return normalize( refractionVector ) * thickness * modelScale;\n	}\n	float applyIorToRoughness( const in float roughness, const in float ior ) {\n		return roughness * clamp( ior * 2.0 - 2.0, 0.0, 1.0 );\n	}\n	vec4 getTransmissionSample( const in vec2 fragCoord, const in float roughness, const in float ior ) {\n		float lod = log2( transmissionSamplerSize.x ) * applyIorToRoughness( roughness, ior );\n		return textureBicubic( transmissionSamplerMap, fragCoord.xy, lod );\n	}\n	vec3 volumeAttenuation( const in float transmissionDistance, const in vec3 attenuationColor, const in float attenuationDistance ) {\n		if ( isinf( attenuationDistance ) ) {\n			return vec3( 1.0 );\n		} else {\n			vec3 attenuationCoefficient = -log( attenuationColor ) / attenuationDistance;\n			vec3 transmittance = exp( - attenuationCoefficient * transmissionDistance );			return transmittance;\n		}\n	}\n	vec4 getIBLVolumeRefraction( const in vec3 n, const in vec3 v, const in float roughness, const in vec3 diffuseColor,\n		const in vec3 specularColor, const in float specularF90, const in vec3 position, const in mat4 modelMatrix,\n		const in mat4 viewMatrix, const in mat4 projMatrix, const in float dispersion, const in float ior, const in float thickness,\n		const in vec3 attenuationColor, const in float attenuationDistance ) {\n		vec4 transmittedLight;\n		vec3 transmittance;\n		#ifdef USE_DISPERSION\n			float halfSpread = ( ior - 1.0 ) * 0.025 * dispersion;\n			vec3 iors = vec3( ior - halfSpread, ior, ior + halfSpread );\n			for ( int i = 0; i < 3; i ++ ) {\n				vec3 transmissionRay = getVolumeTransmissionRay( n, v, thickness, iors[ i ], modelMatrix );\n				vec3 refractedRayExit = position + transmissionRay;\n		\n				vec4 ndcPos = projMatrix * viewMatrix * vec4( refractedRayExit, 1.0 );\n				vec2 refractionCoords = ndcPos.xy / ndcPos.w;\n				refractionCoords += 1.0;\n				refractionCoords /= 2.0;\n		\n				vec4 transmissionSample = getTransmissionSample( refractionCoords, roughness, iors[ i ] );\n				transmittedLight[ i ] = transmissionSample[ i ];\n				transmittedLight.a += transmissionSample.a;\n				transmittance[ i ] = diffuseColor[ i ] * volumeAttenuation( length( transmissionRay ), attenuationColor, attenuationDistance )[ i ];\n			}\n			transmittedLight.a /= 3.0;\n		\n		#else\n		\n			vec3 transmissionRay = getVolumeTransmissionRay( n, v, thickness, ior, modelMatrix );\n			vec3 refractedRayExit = position + transmissionRay;\n			vec4 ndcPos = projMatrix * viewMatrix * vec4( refractedRayExit, 1.0 );\n			vec2 refractionCoords = ndcPos.xy / ndcPos.w;\n			refractionCoords += 1.0;\n			refractionCoords /= 2.0;\n			transmittedLight = getTransmissionSample( refractionCoords, roughness, ior );\n			transmittance = diffuseColor * volumeAttenuation( length( transmissionRay ), attenuationColor, attenuationDistance );\n		\n		#endif\n		vec3 attenuatedColor = transmittance * transmittedLight.rgb;\n		vec3 F = EnvironmentBRDF( n, v, specularColor, specularF90, roughness );\n		float transmittanceFactor = ( transmittance.r + transmittance.g + transmittance.b ) / 3.0;\n		return vec4( ( 1.0 - F ) * attenuatedColor, 1.0 - ( 1.0 - transmittedLight.a ) * transmittanceFactor );\n	}\n#endif";
var uv_pars_fragment = "#if defined( USE_UV ) || defined( USE_ANISOTROPY )\n	varying vec2 vUv;\n#endif\n#ifdef USE_MAP\n	varying vec2 vMapUv;\n#endif\n#ifdef USE_ALPHAMAP\n	varying vec2 vAlphaMapUv;\n#endif\n#ifdef USE_LIGHTMAP\n	varying vec2 vLightMapUv;\n#endif\n#ifdef USE_AOMAP\n	varying vec2 vAoMapUv;\n#endif\n#ifdef USE_BUMPMAP\n	varying vec2 vBumpMapUv;\n#endif\n#ifdef USE_NORMALMAP\n	varying vec2 vNormalMapUv;\n#endif\n#ifdef USE_EMISSIVEMAP\n	varying vec2 vEmissiveMapUv;\n#endif\n#ifdef USE_METALNESSMAP\n	varying vec2 vMetalnessMapUv;\n#endif\n#ifdef USE_ROUGHNESSMAP\n	varying vec2 vRoughnessMapUv;\n#endif\n#ifdef USE_ANISOTROPYMAP\n	varying vec2 vAnisotropyMapUv;\n#endif\n#ifdef USE_CLEARCOATMAP\n	varying vec2 vClearcoatMapUv;\n#endif\n#ifdef USE_CLEARCOAT_NORMALMAP\n	varying vec2 vClearcoatNormalMapUv;\n#endif\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n	varying vec2 vClearcoatRoughnessMapUv;\n#endif\n#ifdef USE_IRIDESCENCEMAP\n	varying vec2 vIridescenceMapUv;\n#endif\n#ifdef USE_IRIDESCENCE_THICKNESSMAP\n	varying vec2 vIridescenceThicknessMapUv;\n#endif\n#ifdef USE_SHEEN_COLORMAP\n	varying vec2 vSheenColorMapUv;\n#endif\n#ifdef USE_SHEEN_ROUGHNESSMAP\n	varying vec2 vSheenRoughnessMapUv;\n#endif\n#ifdef USE_SPECULARMAP\n	varying vec2 vSpecularMapUv;\n#endif\n#ifdef USE_SPECULAR_COLORMAP\n	varying vec2 vSpecularColorMapUv;\n#endif\n#ifdef USE_SPECULAR_INTENSITYMAP\n	varying vec2 vSpecularIntensityMapUv;\n#endif\n#ifdef USE_TRANSMISSIONMAP\n	uniform mat3 transmissionMapTransform;\n	varying vec2 vTransmissionMapUv;\n#endif\n#ifdef USE_THICKNESSMAP\n	uniform mat3 thicknessMapTransform;\n	varying vec2 vThicknessMapUv;\n#endif";
var uv_pars_vertex = "#if defined( USE_UV ) || defined( USE_ANISOTROPY )\n	varying vec2 vUv;\n#endif\n#ifdef USE_MAP\n	uniform mat3 mapTransform;\n	varying vec2 vMapUv;\n#endif\n#ifdef USE_ALPHAMAP\n	uniform mat3 alphaMapTransform;\n	varying vec2 vAlphaMapUv;\n#endif\n#ifdef USE_LIGHTMAP\n	uniform mat3 lightMapTransform;\n	varying vec2 vLightMapUv;\n#endif\n#ifdef USE_AOMAP\n	uniform mat3 aoMapTransform;\n	varying vec2 vAoMapUv;\n#endif\n#ifdef USE_BUMPMAP\n	uniform mat3 bumpMapTransform;\n	varying vec2 vBumpMapUv;\n#endif\n#ifdef USE_NORMALMAP\n	uniform mat3 normalMapTransform;\n	varying vec2 vNormalMapUv;\n#endif\n#ifdef USE_DISPLACEMENTMAP\n	uniform mat3 displacementMapTransform;\n	varying vec2 vDisplacementMapUv;\n#endif\n#ifdef USE_EMISSIVEMAP\n	uniform mat3 emissiveMapTransform;\n	varying vec2 vEmissiveMapUv;\n#endif\n#ifdef USE_METALNESSMAP\n	uniform mat3 metalnessMapTransform;\n	varying vec2 vMetalnessMapUv;\n#endif\n#ifdef USE_ROUGHNESSMAP\n	uniform mat3 roughnessMapTransform;\n	varying vec2 vRoughnessMapUv;\n#endif\n#ifdef USE_ANISOTROPYMAP\n	uniform mat3 anisotropyMapTransform;\n	varying vec2 vAnisotropyMapUv;\n#endif\n#ifdef USE_CLEARCOATMAP\n	uniform mat3 clearcoatMapTransform;\n	varying vec2 vClearcoatMapUv;\n#endif\n#ifdef USE_CLEARCOAT_NORMALMAP\n	uniform mat3 clearcoatNormalMapTransform;\n	varying vec2 vClearcoatNormalMapUv;\n#endif\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n	uniform mat3 clearcoatRoughnessMapTransform;\n	varying vec2 vClearcoatRoughnessMapUv;\n#endif\n#ifdef USE_SHEEN_COLORMAP\n	uniform mat3 sheenColorMapTransform;\n	varying vec2 vSheenColorMapUv;\n#endif\n#ifdef USE_SHEEN_ROUGHNESSMAP\n	uniform mat3 sheenRoughnessMapTransform;\n	varying vec2 vSheenRoughnessMapUv;\n#endif\n#ifdef USE_IRIDESCENCEMAP\n	uniform mat3 iridescenceMapTransform;\n	varying vec2 vIridescenceMapUv;\n#endif\n#ifdef USE_IRIDESCENCE_THICKNESSMAP\n	uniform mat3 iridescenceThicknessMapTransform;\n	varying vec2 vIridescenceThicknessMapUv;\n#endif\n#ifdef USE_SPECULARMAP\n	uniform mat3 specularMapTransform;\n	varying vec2 vSpecularMapUv;\n#endif\n#ifdef USE_SPECULAR_COLORMAP\n	uniform mat3 specularColorMapTransform;\n	varying vec2 vSpecularColorMapUv;\n#endif\n#ifdef USE_SPECULAR_INTENSITYMAP\n	uniform mat3 specularIntensityMapTransform;\n	varying vec2 vSpecularIntensityMapUv;\n#endif\n#ifdef USE_TRANSMISSIONMAP\n	uniform mat3 transmissionMapTransform;\n	varying vec2 vTransmissionMapUv;\n#endif\n#ifdef USE_THICKNESSMAP\n	uniform mat3 thicknessMapTransform;\n	varying vec2 vThicknessMapUv;\n#endif";
var uv_vertex = "#if defined( USE_UV ) || defined( USE_ANISOTROPY )\n	vUv = vec3( uv, 1 ).xy;\n#endif\n#ifdef USE_MAP\n	vMapUv = ( mapTransform * vec3( MAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_ALPHAMAP\n	vAlphaMapUv = ( alphaMapTransform * vec3( ALPHAMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_LIGHTMAP\n	vLightMapUv = ( lightMapTransform * vec3( LIGHTMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_AOMAP\n	vAoMapUv = ( aoMapTransform * vec3( AOMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_BUMPMAP\n	vBumpMapUv = ( bumpMapTransform * vec3( BUMPMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_NORMALMAP\n	vNormalMapUv = ( normalMapTransform * vec3( NORMALMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_DISPLACEMENTMAP\n	vDisplacementMapUv = ( displacementMapTransform * vec3( DISPLACEMENTMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_EMISSIVEMAP\n	vEmissiveMapUv = ( emissiveMapTransform * vec3( EMISSIVEMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_METALNESSMAP\n	vMetalnessMapUv = ( metalnessMapTransform * vec3( METALNESSMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_ROUGHNESSMAP\n	vRoughnessMapUv = ( roughnessMapTransform * vec3( ROUGHNESSMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_ANISOTROPYMAP\n	vAnisotropyMapUv = ( anisotropyMapTransform * vec3( ANISOTROPYMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_CLEARCOATMAP\n	vClearcoatMapUv = ( clearcoatMapTransform * vec3( CLEARCOATMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_CLEARCOAT_NORMALMAP\n	vClearcoatNormalMapUv = ( clearcoatNormalMapTransform * vec3( CLEARCOAT_NORMALMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n	vClearcoatRoughnessMapUv = ( clearcoatRoughnessMapTransform * vec3( CLEARCOAT_ROUGHNESSMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_IRIDESCENCEMAP\n	vIridescenceMapUv = ( iridescenceMapTransform * vec3( IRIDESCENCEMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_IRIDESCENCE_THICKNESSMAP\n	vIridescenceThicknessMapUv = ( iridescenceThicknessMapTransform * vec3( IRIDESCENCE_THICKNESSMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_SHEEN_COLORMAP\n	vSheenColorMapUv = ( sheenColorMapTransform * vec3( SHEEN_COLORMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_SHEEN_ROUGHNESSMAP\n	vSheenRoughnessMapUv = ( sheenRoughnessMapTransform * vec3( SHEEN_ROUGHNESSMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_SPECULARMAP\n	vSpecularMapUv = ( specularMapTransform * vec3( SPECULARMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_SPECULAR_COLORMAP\n	vSpecularColorMapUv = ( specularColorMapTransform * vec3( SPECULAR_COLORMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_SPECULAR_INTENSITYMAP\n	vSpecularIntensityMapUv = ( specularIntensityMapTransform * vec3( SPECULAR_INTENSITYMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_TRANSMISSIONMAP\n	vTransmissionMapUv = ( transmissionMapTransform * vec3( TRANSMISSIONMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_THICKNESSMAP\n	vThicknessMapUv = ( thicknessMapTransform * vec3( THICKNESSMAP_UV, 1 ) ).xy;\n#endif";
var worldpos_vertex = "#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP ) || defined ( USE_TRANSMISSION ) || NUM_SPOT_LIGHT_COORDS > 0\n	vec4 worldPosition = vec4( transformed, 1.0 );\n	#ifdef USE_BATCHING\n		worldPosition = batchingMatrix * worldPosition;\n	#endif\n	#ifdef USE_INSTANCING\n		worldPosition = instanceMatrix * worldPosition;\n	#endif\n	worldPosition = modelMatrix * worldPosition;\n#endif";
const vertex$h = "varying vec2 vUv;\nuniform mat3 uvTransform;\nvoid main() {\n	vUv = ( uvTransform * vec3( uv, 1 ) ).xy;\n	gl_Position = vec4( position.xy, 1.0, 1.0 );\n}";
const fragment$h = "uniform sampler2D t2D;\nuniform float backgroundIntensity;\nvarying vec2 vUv;\nvoid main() {\n	vec4 texColor = texture2D( t2D, vUv );\n	#ifdef DECODE_VIDEO_TEXTURE\n		texColor = vec4( mix( pow( texColor.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), texColor.rgb * 0.0773993808, vec3( lessThanEqual( texColor.rgb, vec3( 0.04045 ) ) ) ), texColor.w );\n	#endif\n	texColor.rgb *= backgroundIntensity;\n	gl_FragColor = texColor;\n	#include <tonemapping_fragment>\n	#include <colorspace_fragment>\n}";
const vertex$g = "varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n	vWorldDirection = transformDirection( position, modelMatrix );\n	#include <begin_vertex>\n	#include <project_vertex>\n	gl_Position.z = gl_Position.w;\n}";
const fragment$g = "#ifdef ENVMAP_TYPE_CUBE\n	uniform samplerCube envMap;\n#elif defined( ENVMAP_TYPE_CUBE_UV )\n	uniform sampler2D envMap;\n#endif\nuniform float flipEnvMap;\nuniform float backgroundBlurriness;\nuniform float backgroundIntensity;\nuniform mat3 backgroundRotation;\nvarying vec3 vWorldDirection;\n#include <cube_uv_reflection_fragment>\nvoid main() {\n	#ifdef ENVMAP_TYPE_CUBE\n		vec4 texColor = textureCube( envMap, backgroundRotation * vec3( flipEnvMap * vWorldDirection.x, vWorldDirection.yz ) );\n	#elif defined( ENVMAP_TYPE_CUBE_UV )\n		vec4 texColor = textureCubeUV( envMap, backgroundRotation * vWorldDirection, backgroundBlurriness );\n	#else\n		vec4 texColor = vec4( 0.0, 0.0, 0.0, 1.0 );\n	#endif\n	texColor.rgb *= backgroundIntensity;\n	gl_FragColor = texColor;\n	#include <tonemapping_fragment>\n	#include <colorspace_fragment>\n}";
const vertex$f = "varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n	vWorldDirection = transformDirection( position, modelMatrix );\n	#include <begin_vertex>\n	#include <project_vertex>\n	gl_Position.z = gl_Position.w;\n}";
const fragment$f = "uniform samplerCube tCube;\nuniform float tFlip;\nuniform float opacity;\nvarying vec3 vWorldDirection;\nvoid main() {\n	vec4 texColor = textureCube( tCube, vec3( tFlip * vWorldDirection.x, vWorldDirection.yz ) );\n	gl_FragColor = texColor;\n	gl_FragColor.a *= opacity;\n	#include <tonemapping_fragment>\n	#include <colorspace_fragment>\n}";
const vertex$e = "#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvarying vec2 vHighPrecisionZW;\nvoid main() {\n	#include <uv_vertex>\n	#include <batching_vertex>\n	#include <skinbase_vertex>\n	#include <morphinstance_vertex>\n	#ifdef USE_DISPLACEMENTMAP\n		#include <beginnormal_vertex>\n		#include <morphnormal_vertex>\n		#include <skinnormal_vertex>\n	#endif\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <displacementmap_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	vHighPrecisionZW = gl_Position.zw;\n}";
const fragment$e = "#if DEPTH_PACKING == 3200\n	uniform float opacity;\n#endif\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvarying vec2 vHighPrecisionZW;\nvoid main() {\n	vec4 diffuseColor = vec4( 1.0 );\n	#include <clipping_planes_fragment>\n	#if DEPTH_PACKING == 3200\n		diffuseColor.a = opacity;\n	#endif\n	#include <map_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	#include <alphahash_fragment>\n	#include <logdepthbuf_fragment>\n	float fragCoordZ = 0.5 * vHighPrecisionZW[0] / vHighPrecisionZW[1] + 0.5;\n	#if DEPTH_PACKING == 3200\n		gl_FragColor = vec4( vec3( 1.0 - fragCoordZ ), opacity );\n	#elif DEPTH_PACKING == 3201\n		gl_FragColor = packDepthToRGBA( fragCoordZ );\n	#elif DEPTH_PACKING == 3202\n		gl_FragColor = vec4( packDepthToRGB( fragCoordZ ), 1.0 );\n	#elif DEPTH_PACKING == 3203\n		gl_FragColor = vec4( packDepthToRG( fragCoordZ ), 0.0, 1.0 );\n	#endif\n}";
const vertex$d = "#define DISTANCE\nvarying vec3 vWorldPosition;\n#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	#include <batching_vertex>\n	#include <skinbase_vertex>\n	#include <morphinstance_vertex>\n	#ifdef USE_DISPLACEMENTMAP\n		#include <beginnormal_vertex>\n		#include <morphnormal_vertex>\n		#include <skinnormal_vertex>\n	#endif\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <displacementmap_vertex>\n	#include <project_vertex>\n	#include <worldpos_vertex>\n	#include <clipping_planes_vertex>\n	vWorldPosition = worldPosition.xyz;\n}";
const fragment$d = "#define DISTANCE\nuniform vec3 referencePosition;\nuniform float nearDistance;\nuniform float farDistance;\nvarying vec3 vWorldPosition;\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main () {\n	vec4 diffuseColor = vec4( 1.0 );\n	#include <clipping_planes_fragment>\n	#include <map_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	#include <alphahash_fragment>\n	float dist = length( vWorldPosition - referencePosition );\n	dist = ( dist - nearDistance ) / ( farDistance - nearDistance );\n	dist = saturate( dist );\n	gl_FragColor = packDepthToRGBA( dist );\n}";
const vertex$c = "varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n	vWorldDirection = transformDirection( position, modelMatrix );\n	#include <begin_vertex>\n	#include <project_vertex>\n}";
const fragment$c = "uniform sampler2D tEquirect;\nvarying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n	vec3 direction = normalize( vWorldDirection );\n	vec2 sampleUV = equirectUv( direction );\n	gl_FragColor = texture2D( tEquirect, sampleUV );\n	#include <tonemapping_fragment>\n	#include <colorspace_fragment>\n}";
const vertex$b = "uniform float scale;\nattribute float lineDistance;\nvarying float vLineDistance;\n#include <common>\n#include <uv_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	vLineDistance = scale * lineDistance;\n	#include <uv_vertex>\n	#include <color_vertex>\n	#include <morphinstance_vertex>\n	#include <morphcolor_vertex>\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	#include <fog_vertex>\n}";
const fragment$b = "uniform vec3 diffuse;\nuniform float opacity;\nuniform float dashSize;\nuniform float totalSize;\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	#include <clipping_planes_fragment>\n	if ( mod( vLineDistance, totalSize ) > dashSize ) {\n		discard;\n	}\n	vec3 outgoingLight = vec3( 0.0 );\n	#include <logdepthbuf_fragment>\n	#include <map_fragment>\n	#include <color_fragment>\n	outgoingLight = diffuseColor.rgb;\n	#include <opaque_fragment>\n	#include <tonemapping_fragment>\n	#include <colorspace_fragment>\n	#include <fog_fragment>\n	#include <premultiplied_alpha_fragment>\n}";
const vertex$a = "#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	#include <color_vertex>\n	#include <morphinstance_vertex>\n	#include <morphcolor_vertex>\n	#include <batching_vertex>\n	#if defined ( USE_ENVMAP ) || defined ( USE_SKINNING )\n		#include <beginnormal_vertex>\n		#include <morphnormal_vertex>\n		#include <skinbase_vertex>\n		#include <skinnormal_vertex>\n		#include <defaultnormal_vertex>\n	#endif\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	#include <worldpos_vertex>\n	#include <envmap_vertex>\n	#include <fog_vertex>\n}";
const fragment$a = "uniform vec3 diffuse;\nuniform float opacity;\n#ifndef FLAT_SHADED\n	varying vec3 vNormal;\n#endif\n#include <common>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	#include <clipping_planes_fragment>\n	#include <logdepthbuf_fragment>\n	#include <map_fragment>\n	#include <color_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	#include <alphahash_fragment>\n	#include <specularmap_fragment>\n	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n	#ifdef USE_LIGHTMAP\n		vec4 lightMapTexel = texture2D( lightMap, vLightMapUv );\n		reflectedLight.indirectDiffuse += lightMapTexel.rgb * lightMapIntensity * RECIPROCAL_PI;\n	#else\n		reflectedLight.indirectDiffuse += vec3( 1.0 );\n	#endif\n	#include <aomap_fragment>\n	reflectedLight.indirectDiffuse *= diffuseColor.rgb;\n	vec3 outgoingLight = reflectedLight.indirectDiffuse;\n	#include <envmap_fragment>\n	#include <opaque_fragment>\n	#include <tonemapping_fragment>\n	#include <colorspace_fragment>\n	#include <fog_fragment>\n	#include <premultiplied_alpha_fragment>\n	#include <dithering_fragment>\n}";
const vertex$9 = "#define LAMBERT\nvarying vec3 vViewPosition;\n#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	#include <color_vertex>\n	#include <morphinstance_vertex>\n	#include <morphcolor_vertex>\n	#include <batching_vertex>\n	#include <beginnormal_vertex>\n	#include <morphnormal_vertex>\n	#include <skinbase_vertex>\n	#include <skinnormal_vertex>\n	#include <defaultnormal_vertex>\n	#include <normal_vertex>\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <displacementmap_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	vViewPosition = - mvPosition.xyz;\n	#include <worldpos_vertex>\n	#include <envmap_vertex>\n	#include <shadowmap_vertex>\n	#include <fog_vertex>\n}";
const fragment$9 = "#define LAMBERT\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_lambert_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	#include <clipping_planes_fragment>\n	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n	vec3 totalEmissiveRadiance = emissive;\n	#include <logdepthbuf_fragment>\n	#include <map_fragment>\n	#include <color_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	#include <alphahash_fragment>\n	#include <specularmap_fragment>\n	#include <normal_fragment_begin>\n	#include <normal_fragment_maps>\n	#include <emissivemap_fragment>\n	#include <lights_lambert_fragment>\n	#include <lights_fragment_begin>\n	#include <lights_fragment_maps>\n	#include <lights_fragment_end>\n	#include <aomap_fragment>\n	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\n	#include <envmap_fragment>\n	#include <opaque_fragment>\n	#include <tonemapping_fragment>\n	#include <colorspace_fragment>\n	#include <fog_fragment>\n	#include <premultiplied_alpha_fragment>\n	#include <dithering_fragment>\n}";
const vertex$8 = "#define MATCAP\nvarying vec3 vViewPosition;\n#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <color_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	#include <color_vertex>\n	#include <morphinstance_vertex>\n	#include <morphcolor_vertex>\n	#include <batching_vertex>\n	#include <beginnormal_vertex>\n	#include <morphnormal_vertex>\n	#include <skinbase_vertex>\n	#include <skinnormal_vertex>\n	#include <defaultnormal_vertex>\n	#include <normal_vertex>\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <displacementmap_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	#include <fog_vertex>\n	vViewPosition = - mvPosition.xyz;\n}";
const fragment$8 = "#define MATCAP\nuniform vec3 diffuse;\nuniform float opacity;\nuniform sampler2D matcap;\nvarying vec3 vViewPosition;\n#include <common>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <fog_pars_fragment>\n#include <normal_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	#include <clipping_planes_fragment>\n	#include <logdepthbuf_fragment>\n	#include <map_fragment>\n	#include <color_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	#include <alphahash_fragment>\n	#include <normal_fragment_begin>\n	#include <normal_fragment_maps>\n	vec3 viewDir = normalize( vViewPosition );\n	vec3 x = normalize( vec3( viewDir.z, 0.0, - viewDir.x ) );\n	vec3 y = cross( viewDir, x );\n	vec2 uv = vec2( dot( x, normal ), dot( y, normal ) ) * 0.495 + 0.5;\n	#ifdef USE_MATCAP\n		vec4 matcapColor = texture2D( matcap, uv );\n	#else\n		vec4 matcapColor = vec4( vec3( mix( 0.2, 0.8, uv.y ) ), 1.0 );\n	#endif\n	vec3 outgoingLight = diffuseColor.rgb * matcapColor.rgb;\n	#include <opaque_fragment>\n	#include <tonemapping_fragment>\n	#include <colorspace_fragment>\n	#include <fog_fragment>\n	#include <premultiplied_alpha_fragment>\n	#include <dithering_fragment>\n}";
const vertex$7 = "#define NORMAL\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )\n	varying vec3 vViewPosition;\n#endif\n#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	#include <batching_vertex>\n	#include <beginnormal_vertex>\n	#include <morphinstance_vertex>\n	#include <morphnormal_vertex>\n	#include <skinbase_vertex>\n	#include <skinnormal_vertex>\n	#include <defaultnormal_vertex>\n	#include <normal_vertex>\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <displacementmap_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )\n	vViewPosition = - mvPosition.xyz;\n#endif\n}";
const fragment$7 = "#define NORMAL\nuniform float opacity;\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )\n	varying vec3 vViewPosition;\n#endif\n#include <packing>\n#include <uv_pars_fragment>\n#include <normal_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	vec4 diffuseColor = vec4( 0.0, 0.0, 0.0, opacity );\n	#include <clipping_planes_fragment>\n	#include <logdepthbuf_fragment>\n	#include <normal_fragment_begin>\n	#include <normal_fragment_maps>\n	gl_FragColor = vec4( packNormalToRGB( normal ), diffuseColor.a );\n	#ifdef OPAQUE\n		gl_FragColor.a = 1.0;\n	#endif\n}";
const vertex$6 = "#define PHONG\nvarying vec3 vViewPosition;\n#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	#include <color_vertex>\n	#include <morphcolor_vertex>\n	#include <batching_vertex>\n	#include <beginnormal_vertex>\n	#include <morphinstance_vertex>\n	#include <morphnormal_vertex>\n	#include <skinbase_vertex>\n	#include <skinnormal_vertex>\n	#include <defaultnormal_vertex>\n	#include <normal_vertex>\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <displacementmap_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	vViewPosition = - mvPosition.xyz;\n	#include <worldpos_vertex>\n	#include <envmap_vertex>\n	#include <shadowmap_vertex>\n	#include <fog_vertex>\n}";
const fragment$6 = "#define PHONG\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform vec3 specular;\nuniform float shininess;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_phong_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	#include <clipping_planes_fragment>\n	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n	vec3 totalEmissiveRadiance = emissive;\n	#include <logdepthbuf_fragment>\n	#include <map_fragment>\n	#include <color_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	#include <alphahash_fragment>\n	#include <specularmap_fragment>\n	#include <normal_fragment_begin>\n	#include <normal_fragment_maps>\n	#include <emissivemap_fragment>\n	#include <lights_phong_fragment>\n	#include <lights_fragment_begin>\n	#include <lights_fragment_maps>\n	#include <lights_fragment_end>\n	#include <aomap_fragment>\n	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n	#include <envmap_fragment>\n	#include <opaque_fragment>\n	#include <tonemapping_fragment>\n	#include <colorspace_fragment>\n	#include <fog_fragment>\n	#include <premultiplied_alpha_fragment>\n	#include <dithering_fragment>\n}";
const vertex$5 = "#define STANDARD\nvarying vec3 vViewPosition;\n#ifdef USE_TRANSMISSION\n	varying vec3 vWorldPosition;\n#endif\n#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	#include <color_vertex>\n	#include <morphinstance_vertex>\n	#include <morphcolor_vertex>\n	#include <batching_vertex>\n	#include <beginnormal_vertex>\n	#include <morphnormal_vertex>\n	#include <skinbase_vertex>\n	#include <skinnormal_vertex>\n	#include <defaultnormal_vertex>\n	#include <normal_vertex>\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <displacementmap_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	vViewPosition = - mvPosition.xyz;\n	#include <worldpos_vertex>\n	#include <shadowmap_vertex>\n	#include <fog_vertex>\n#ifdef USE_TRANSMISSION\n	vWorldPosition = worldPosition.xyz;\n#endif\n}";
const fragment$5 = "#define STANDARD\n#ifdef PHYSICAL\n	#define IOR\n	#define USE_SPECULAR\n#endif\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float roughness;\nuniform float metalness;\nuniform float opacity;\n#ifdef IOR\n	uniform float ior;\n#endif\n#ifdef USE_SPECULAR\n	uniform float specularIntensity;\n	uniform vec3 specularColor;\n	#ifdef USE_SPECULAR_COLORMAP\n		uniform sampler2D specularColorMap;\n	#endif\n	#ifdef USE_SPECULAR_INTENSITYMAP\n		uniform sampler2D specularIntensityMap;\n	#endif\n#endif\n#ifdef USE_CLEARCOAT\n	uniform float clearcoat;\n	uniform float clearcoatRoughness;\n#endif\n#ifdef USE_DISPERSION\n	uniform float dispersion;\n#endif\n#ifdef USE_IRIDESCENCE\n	uniform float iridescence;\n	uniform float iridescenceIOR;\n	uniform float iridescenceThicknessMinimum;\n	uniform float iridescenceThicknessMaximum;\n#endif\n#ifdef USE_SHEEN\n	uniform vec3 sheenColor;\n	uniform float sheenRoughness;\n	#ifdef USE_SHEEN_COLORMAP\n		uniform sampler2D sheenColorMap;\n	#endif\n	#ifdef USE_SHEEN_ROUGHNESSMAP\n		uniform sampler2D sheenRoughnessMap;\n	#endif\n#endif\n#ifdef USE_ANISOTROPY\n	uniform vec2 anisotropyVector;\n	#ifdef USE_ANISOTROPYMAP\n		uniform sampler2D anisotropyMap;\n	#endif\n#endif\nvarying vec3 vViewPosition;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <iridescence_fragment>\n#include <cube_uv_reflection_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_physical_pars_fragment>\n#include <fog_pars_fragment>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_physical_pars_fragment>\n#include <transmission_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <clearcoat_pars_fragment>\n#include <iridescence_pars_fragment>\n#include <roughnessmap_pars_fragment>\n#include <metalnessmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	#include <clipping_planes_fragment>\n	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n	vec3 totalEmissiveRadiance = emissive;\n	#include <logdepthbuf_fragment>\n	#include <map_fragment>\n	#include <color_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	#include <alphahash_fragment>\n	#include <roughnessmap_fragment>\n	#include <metalnessmap_fragment>\n	#include <normal_fragment_begin>\n	#include <normal_fragment_maps>\n	#include <clearcoat_normal_fragment_begin>\n	#include <clearcoat_normal_fragment_maps>\n	#include <emissivemap_fragment>\n	#include <lights_physical_fragment>\n	#include <lights_fragment_begin>\n	#include <lights_fragment_maps>\n	#include <lights_fragment_end>\n	#include <aomap_fragment>\n	vec3 totalDiffuse = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse;\n	vec3 totalSpecular = reflectedLight.directSpecular + reflectedLight.indirectSpecular;\n	#include <transmission_fragment>\n	vec3 outgoingLight = totalDiffuse + totalSpecular + totalEmissiveRadiance;\n	#ifdef USE_SHEEN\n		float sheenEnergyComp = 1.0 - 0.157 * max3( material.sheenColor );\n		outgoingLight = outgoingLight * sheenEnergyComp + sheenSpecularDirect + sheenSpecularIndirect;\n	#endif\n	#ifdef USE_CLEARCOAT\n		float dotNVcc = saturate( dot( geometryClearcoatNormal, geometryViewDir ) );\n		vec3 Fcc = F_Schlick( material.clearcoatF0, material.clearcoatF90, dotNVcc );\n		outgoingLight = outgoingLight * ( 1.0 - material.clearcoat * Fcc ) + ( clearcoatSpecularDirect + clearcoatSpecularIndirect ) * material.clearcoat;\n	#endif\n	#include <opaque_fragment>\n	#include <tonemapping_fragment>\n	#include <colorspace_fragment>\n	#include <fog_fragment>\n	#include <premultiplied_alpha_fragment>\n	#include <dithering_fragment>\n}";
const vertex$4 = "#define TOON\nvarying vec3 vViewPosition;\n#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	#include <color_vertex>\n	#include <morphinstance_vertex>\n	#include <morphcolor_vertex>\n	#include <batching_vertex>\n	#include <beginnormal_vertex>\n	#include <morphnormal_vertex>\n	#include <skinbase_vertex>\n	#include <skinnormal_vertex>\n	#include <defaultnormal_vertex>\n	#include <normal_vertex>\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <displacementmap_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	vViewPosition = - mvPosition.xyz;\n	#include <worldpos_vertex>\n	#include <shadowmap_vertex>\n	#include <fog_vertex>\n}";
const fragment$4 = "#define TOON\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <gradientmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_toon_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	#include <clipping_planes_fragment>\n	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n	vec3 totalEmissiveRadiance = emissive;\n	#include <logdepthbuf_fragment>\n	#include <map_fragment>\n	#include <color_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	#include <alphahash_fragment>\n	#include <normal_fragment_begin>\n	#include <normal_fragment_maps>\n	#include <emissivemap_fragment>\n	#include <lights_toon_fragment>\n	#include <lights_fragment_begin>\n	#include <lights_fragment_maps>\n	#include <lights_fragment_end>\n	#include <aomap_fragment>\n	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\n	#include <opaque_fragment>\n	#include <tonemapping_fragment>\n	#include <colorspace_fragment>\n	#include <fog_fragment>\n	#include <premultiplied_alpha_fragment>\n	#include <dithering_fragment>\n}";
const vertex$3 = "uniform float size;\nuniform float scale;\n#include <common>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\n#ifdef USE_POINTS_UV\n	varying vec2 vUv;\n	uniform mat3 uvTransform;\n#endif\nvoid main() {\n	#ifdef USE_POINTS_UV\n		vUv = ( uvTransform * vec3( uv, 1 ) ).xy;\n	#endif\n	#include <color_vertex>\n	#include <morphinstance_vertex>\n	#include <morphcolor_vertex>\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <project_vertex>\n	gl_PointSize = size;\n	#ifdef USE_SIZEATTENUATION\n		bool isPerspective = isPerspectiveMatrix( projectionMatrix );\n		if ( isPerspective ) gl_PointSize *= ( scale / - mvPosition.z );\n	#endif\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	#include <worldpos_vertex>\n	#include <fog_vertex>\n}";
const fragment$3 = "uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <color_pars_fragment>\n#include <map_particle_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	#include <clipping_planes_fragment>\n	vec3 outgoingLight = vec3( 0.0 );\n	#include <logdepthbuf_fragment>\n	#include <map_particle_fragment>\n	#include <color_fragment>\n	#include <alphatest_fragment>\n	#include <alphahash_fragment>\n	outgoingLight = diffuseColor.rgb;\n	#include <opaque_fragment>\n	#include <tonemapping_fragment>\n	#include <colorspace_fragment>\n	#include <fog_fragment>\n	#include <premultiplied_alpha_fragment>\n}";
const vertex$2 = "#include <common>\n#include <batching_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <shadowmap_pars_vertex>\nvoid main() {\n	#include <batching_vertex>\n	#include <beginnormal_vertex>\n	#include <morphinstance_vertex>\n	#include <morphnormal_vertex>\n	#include <skinbase_vertex>\n	#include <skinnormal_vertex>\n	#include <defaultnormal_vertex>\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <worldpos_vertex>\n	#include <shadowmap_vertex>\n	#include <fog_vertex>\n}";
const fragment$2 = "uniform vec3 color;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <logdepthbuf_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\nvoid main() {\n	#include <logdepthbuf_fragment>\n	gl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );\n	#include <tonemapping_fragment>\n	#include <colorspace_fragment>\n	#include <fog_fragment>\n}";
const vertex$1 = "uniform float rotation;\nuniform vec2 center;\n#include <common>\n#include <uv_pars_vertex>\n#include <fog_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	vec4 mvPosition = modelViewMatrix[ 3 ];\n	vec2 scale = vec2( length( modelMatrix[ 0 ].xyz ), length( modelMatrix[ 1 ].xyz ) );\n	#ifndef USE_SIZEATTENUATION\n		bool isPerspective = isPerspectiveMatrix( projectionMatrix );\n		if ( isPerspective ) scale *= - mvPosition.z;\n	#endif\n	vec2 alignedPosition = ( position.xy - ( center - vec2( 0.5 ) ) ) * scale;\n	vec2 rotatedPosition;\n	rotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;\n	rotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;\n	mvPosition.xy += rotatedPosition;\n	gl_Position = projectionMatrix * mvPosition;\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	#include <fog_vertex>\n}";
const fragment$1 = "uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	#include <clipping_planes_fragment>\n	vec3 outgoingLight = vec3( 0.0 );\n	#include <logdepthbuf_fragment>\n	#include <map_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	#include <alphahash_fragment>\n	outgoingLight = diffuseColor.rgb;\n	#include <opaque_fragment>\n	#include <tonemapping_fragment>\n	#include <colorspace_fragment>\n	#include <fog_fragment>\n}";
const ShaderChunk = {
  alphahash_fragment,
  alphahash_pars_fragment,
  alphamap_fragment,
  alphamap_pars_fragment,
  alphatest_fragment,
  alphatest_pars_fragment,
  aomap_fragment,
  aomap_pars_fragment,
  batching_pars_vertex,
  batching_vertex,
  begin_vertex,
  beginnormal_vertex,
  bsdfs,
  iridescence_fragment,
  bumpmap_pars_fragment,
  clipping_planes_fragment,
  clipping_planes_pars_fragment,
  clipping_planes_pars_vertex,
  clipping_planes_vertex,
  color_fragment,
  color_pars_fragment,
  color_pars_vertex,
  color_vertex,
  common,
  cube_uv_reflection_fragment,
  defaultnormal_vertex,
  displacementmap_pars_vertex,
  displacementmap_vertex,
  emissivemap_fragment,
  emissivemap_pars_fragment,
  colorspace_fragment,
  colorspace_pars_fragment,
  envmap_fragment,
  envmap_common_pars_fragment,
  envmap_pars_fragment,
  envmap_pars_vertex,
  envmap_physical_pars_fragment,
  envmap_vertex,
  fog_vertex,
  fog_pars_vertex,
  fog_fragment,
  fog_pars_fragment,
  gradientmap_pars_fragment,
  lightmap_pars_fragment,
  lights_lambert_fragment,
  lights_lambert_pars_fragment,
  lights_pars_begin,
  lights_toon_fragment,
  lights_toon_pars_fragment,
  lights_phong_fragment,
  lights_phong_pars_fragment,
  lights_physical_fragment,
  lights_physical_pars_fragment,
  lights_fragment_begin,
  lights_fragment_maps,
  lights_fragment_end,
  logdepthbuf_fragment,
  logdepthbuf_pars_fragment,
  logdepthbuf_pars_vertex,
  logdepthbuf_vertex,
  map_fragment,
  map_pars_fragment,
  map_particle_fragment,
  map_particle_pars_fragment,
  metalnessmap_fragment,
  metalnessmap_pars_fragment,
  morphinstance_vertex,
  morphcolor_vertex,
  morphnormal_vertex,
  morphtarget_pars_vertex,
  morphtarget_vertex,
  normal_fragment_begin,
  normal_fragment_maps,
  normal_pars_fragment,
  normal_pars_vertex,
  normal_vertex,
  normalmap_pars_fragment,
  clearcoat_normal_fragment_begin,
  clearcoat_normal_fragment_maps,
  clearcoat_pars_fragment,
  iridescence_pars_fragment,
  opaque_fragment,
  packing,
  premultiplied_alpha_fragment,
  project_vertex,
  dithering_fragment,
  dithering_pars_fragment,
  roughnessmap_fragment,
  roughnessmap_pars_fragment,
  shadowmap_pars_fragment,
  shadowmap_pars_vertex,
  shadowmap_vertex,
  shadowmask_pars_fragment,
  skinbase_vertex,
  skinning_pars_vertex,
  skinning_vertex,
  skinnormal_vertex,
  specularmap_fragment,
  specularmap_pars_fragment,
  tonemapping_fragment,
  tonemapping_pars_fragment,
  transmission_fragment,
  transmission_pars_fragment,
  uv_pars_fragment,
  uv_pars_vertex,
  uv_vertex,
  worldpos_vertex,
  background_vert: vertex$h,
  background_frag: fragment$h,
  backgroundCube_vert: vertex$g,
  backgroundCube_frag: fragment$g,
  cube_vert: vertex$f,
  cube_frag: fragment$f,
  depth_vert: vertex$e,
  depth_frag: fragment$e,
  distanceRGBA_vert: vertex$d,
  distanceRGBA_frag: fragment$d,
  equirect_vert: vertex$c,
  equirect_frag: fragment$c,
  linedashed_vert: vertex$b,
  linedashed_frag: fragment$b,
  meshbasic_vert: vertex$a,
  meshbasic_frag: fragment$a,
  meshlambert_vert: vertex$9,
  meshlambert_frag: fragment$9,
  meshmatcap_vert: vertex$8,
  meshmatcap_frag: fragment$8,
  meshnormal_vert: vertex$7,
  meshnormal_frag: fragment$7,
  meshphong_vert: vertex$6,
  meshphong_frag: fragment$6,
  meshphysical_vert: vertex$5,
  meshphysical_frag: fragment$5,
  meshtoon_vert: vertex$4,
  meshtoon_frag: fragment$4,
  points_vert: vertex$3,
  points_frag: fragment$3,
  shadow_vert: vertex$2,
  shadow_frag: fragment$2,
  sprite_vert: vertex$1,
  sprite_frag: fragment$1
};
const UniformsLib = {
  common: {
    diffuse: { value: /* @__PURE__ */ new Color(16777215) },
    opacity: { value: 1 },
    map: { value: null },
    mapTransform: { value: /* @__PURE__ */ new Matrix3() },
    alphaMap: { value: null },
    alphaMapTransform: { value: /* @__PURE__ */ new Matrix3() },
    alphaTest: { value: 0 }
  },
  specularmap: {
    specularMap: { value: null },
    specularMapTransform: { value: /* @__PURE__ */ new Matrix3() }
  },
  envmap: {
    envMap: { value: null },
    envMapRotation: { value: /* @__PURE__ */ new Matrix3() },
    flipEnvMap: { value: -1 },
    reflectivity: { value: 1 },
    // basic, lambert, phong
    ior: { value: 1.5 },
    // physical
    refractionRatio: { value: 0.98 }
    // basic, lambert, phong
  },
  aomap: {
    aoMap: { value: null },
    aoMapIntensity: { value: 1 },
    aoMapTransform: { value: /* @__PURE__ */ new Matrix3() }
  },
  lightmap: {
    lightMap: { value: null },
    lightMapIntensity: { value: 1 },
    lightMapTransform: { value: /* @__PURE__ */ new Matrix3() }
  },
  bumpmap: {
    bumpMap: { value: null },
    bumpMapTransform: { value: /* @__PURE__ */ new Matrix3() },
    bumpScale: { value: 1 }
  },
  normalmap: {
    normalMap: { value: null },
    normalMapTransform: { value: /* @__PURE__ */ new Matrix3() },
    normalScale: { value: /* @__PURE__ */ new Vector2(1, 1) }
  },
  displacementmap: {
    displacementMap: { value: null },
    displacementMapTransform: { value: /* @__PURE__ */ new Matrix3() },
    displacementScale: { value: 1 },
    displacementBias: { value: 0 }
  },
  emissivemap: {
    emissiveMap: { value: null },
    emissiveMapTransform: { value: /* @__PURE__ */ new Matrix3() }
  },
  metalnessmap: {
    metalnessMap: { value: null },
    metalnessMapTransform: { value: /* @__PURE__ */ new Matrix3() }
  },
  roughnessmap: {
    roughnessMap: { value: null },
    roughnessMapTransform: { value: /* @__PURE__ */ new Matrix3() }
  },
  gradientmap: {
    gradientMap: { value: null }
  },
  fog: {
    fogDensity: { value: 25e-5 },
    fogNear: { value: 1 },
    fogFar: { value: 2e3 },
    fogColor: { value: /* @__PURE__ */ new Color(16777215) }
  },
  lights: {
    ambientLightColor: { value: [] },
    lightProbe: { value: [] },
    directionalLights: { value: [], properties: {
      direction: {},
      color: {}
    } },
    directionalLightShadows: { value: [], properties: {
      shadowIntensity: 1,
      shadowBias: {},
      shadowNormalBias: {},
      shadowRadius: {},
      shadowMapSize: {}
    } },
    directionalShadowMap: { value: [] },
    directionalShadowMatrix: { value: [] },
    spotLights: { value: [], properties: {
      color: {},
      position: {},
      direction: {},
      distance: {},
      coneCos: {},
      penumbraCos: {},
      decay: {}
    } },
    spotLightShadows: { value: [], properties: {
      shadowIntensity: 1,
      shadowBias: {},
      shadowNormalBias: {},
      shadowRadius: {},
      shadowMapSize: {}
    } },
    spotLightMap: { value: [] },
    spotShadowMap: { value: [] },
    spotLightMatrix: { value: [] },
    pointLights: { value: [], properties: {
      color: {},
      position: {},
      decay: {},
      distance: {}
    } },
    pointLightShadows: { value: [], properties: {
      shadowIntensity: 1,
      shadowBias: {},
      shadowNormalBias: {},
      shadowRadius: {},
      shadowMapSize: {},
      shadowCameraNear: {},
      shadowCameraFar: {}
    } },
    pointShadowMap: { value: [] },
    pointShadowMatrix: { value: [] },
    hemisphereLights: { value: [], properties: {
      direction: {},
      skyColor: {},
      groundColor: {}
    } },
    // TODO (abelnation): RectAreaLight BRDF data needs to be moved from example to main src
    rectAreaLights: { value: [], properties: {
      color: {},
      position: {},
      width: {},
      height: {}
    } },
    ltc_1: { value: null },
    ltc_2: { value: null }
  },
  points: {
    diffuse: { value: /* @__PURE__ */ new Color(16777215) },
    opacity: { value: 1 },
    size: { value: 1 },
    scale: { value: 1 },
    map: { value: null },
    alphaMap: { value: null },
    alphaMapTransform: { value: /* @__PURE__ */ new Matrix3() },
    alphaTest: { value: 0 },
    uvTransform: { value: /* @__PURE__ */ new Matrix3() }
  },
  sprite: {
    diffuse: { value: /* @__PURE__ */ new Color(16777215) },
    opacity: { value: 1 },
    center: { value: /* @__PURE__ */ new Vector2(0.5, 0.5) },
    rotation: { value: 0 },
    map: { value: null },
    mapTransform: { value: /* @__PURE__ */ new Matrix3() },
    alphaMap: { value: null },
    alphaMapTransform: { value: /* @__PURE__ */ new Matrix3() },
    alphaTest: { value: 0 }
  }
};
const ShaderLib = {
  basic: {
    uniforms: /* @__PURE__ */ mergeUniforms([
      UniformsLib.common,
      UniformsLib.specularmap,
      UniformsLib.envmap,
      UniformsLib.aomap,
      UniformsLib.lightmap,
      UniformsLib.fog
    ]),
    vertexShader: ShaderChunk.meshbasic_vert,
    fragmentShader: ShaderChunk.meshbasic_frag
  },
  lambert: {
    uniforms: /* @__PURE__ */ mergeUniforms([
      UniformsLib.common,
      UniformsLib.specularmap,
      UniformsLib.envmap,
      UniformsLib.aomap,
      UniformsLib.lightmap,
      UniformsLib.emissivemap,
      UniformsLib.bumpmap,
      UniformsLib.normalmap,
      UniformsLib.displacementmap,
      UniformsLib.fog,
      UniformsLib.lights,
      {
        emissive: { value: /* @__PURE__ */ new Color(0) }
      }
    ]),
    vertexShader: ShaderChunk.meshlambert_vert,
    fragmentShader: ShaderChunk.meshlambert_frag
  },
  phong: {
    uniforms: /* @__PURE__ */ mergeUniforms([
      UniformsLib.common,
      UniformsLib.specularmap,
      UniformsLib.envmap,
      UniformsLib.aomap,
      UniformsLib.lightmap,
      UniformsLib.emissivemap,
      UniformsLib.bumpmap,
      UniformsLib.normalmap,
      UniformsLib.displacementmap,
      UniformsLib.fog,
      UniformsLib.lights,
      {
        emissive: { value: /* @__PURE__ */ new Color(0) },
        specular: { value: /* @__PURE__ */ new Color(1118481) },
        shininess: { value: 30 }
      }
    ]),
    vertexShader: ShaderChunk.meshphong_vert,
    fragmentShader: ShaderChunk.meshphong_frag
  },
  standard: {
    uniforms: /* @__PURE__ */ mergeUniforms([
      UniformsLib.common,
      UniformsLib.envmap,
      UniformsLib.aomap,
      UniformsLib.lightmap,
      UniformsLib.emissivemap,
      UniformsLib.bumpmap,
      UniformsLib.normalmap,
      UniformsLib.displacementmap,
      UniformsLib.roughnessmap,
      UniformsLib.metalnessmap,
      UniformsLib.fog,
      UniformsLib.lights,
      {
        emissive: { value: /* @__PURE__ */ new Color(0) },
        roughness: { value: 1 },
        metalness: { value: 0 },
        envMapIntensity: { value: 1 }
      }
    ]),
    vertexShader: ShaderChunk.meshphysical_vert,
    fragmentShader: ShaderChunk.meshphysical_frag
  },
  toon: {
    uniforms: /* @__PURE__ */ mergeUniforms([
      UniformsLib.common,
      UniformsLib.aomap,
      UniformsLib.lightmap,
      UniformsLib.emissivemap,
      UniformsLib.bumpmap,
      UniformsLib.normalmap,
      UniformsLib.displacementmap,
      UniformsLib.gradientmap,
      UniformsLib.fog,
      UniformsLib.lights,
      {
        emissive: { value: /* @__PURE__ */ new Color(0) }
      }
    ]),
    vertexShader: ShaderChunk.meshtoon_vert,
    fragmentShader: ShaderChunk.meshtoon_frag
  },
  matcap: {
    uniforms: /* @__PURE__ */ mergeUniforms([
      UniformsLib.common,
      UniformsLib.bumpmap,
      UniformsLib.normalmap,
      UniformsLib.displacementmap,
      UniformsLib.fog,
      {
        matcap: { value: null }
      }
    ]),
    vertexShader: ShaderChunk.meshmatcap_vert,
    fragmentShader: ShaderChunk.meshmatcap_frag
  },
  points: {
    uniforms: /* @__PURE__ */ mergeUniforms([
      UniformsLib.points,
      UniformsLib.fog
    ]),
    vertexShader: ShaderChunk.points_vert,
    fragmentShader: ShaderChunk.points_frag
  },
  dashed: {
    uniforms: /* @__PURE__ */ mergeUniforms([
      UniformsLib.common,
      UniformsLib.fog,
      {
        scale: { value: 1 },
        dashSize: { value: 1 },
        totalSize: { value: 2 }
      }
    ]),
    vertexShader: ShaderChunk.linedashed_vert,
    fragmentShader: ShaderChunk.linedashed_frag
  },
  depth: {
    uniforms: /* @__PURE__ */ mergeUniforms([
      UniformsLib.common,
      UniformsLib.displacementmap
    ]),
    vertexShader: ShaderChunk.depth_vert,
    fragmentShader: ShaderChunk.depth_frag
  },
  normal: {
    uniforms: /* @__PURE__ */ mergeUniforms([
      UniformsLib.common,
      UniformsLib.bumpmap,
      UniformsLib.normalmap,
      UniformsLib.displacementmap,
      {
        opacity: { value: 1 }
      }
    ]),
    vertexShader: ShaderChunk.meshnormal_vert,
    fragmentShader: ShaderChunk.meshnormal_frag
  },
  sprite: {
    uniforms: /* @__PURE__ */ mergeUniforms([
      UniformsLib.sprite,
      UniformsLib.fog
    ]),
    vertexShader: ShaderChunk.sprite_vert,
    fragmentShader: ShaderChunk.sprite_frag
  },
  background: {
    uniforms: {
      uvTransform: { value: /* @__PURE__ */ new Matrix3() },
      t2D: { value: null },
      backgroundIntensity: { value: 1 }
    },
    vertexShader: ShaderChunk.background_vert,
    fragmentShader: ShaderChunk.background_frag
  },
  backgroundCube: {
    uniforms: {
      envMap: { value: null },
      flipEnvMap: { value: -1 },
      backgroundBlurriness: { value: 0 },
      backgroundIntensity: { value: 1 },
      backgroundRotation: { value: /* @__PURE__ */ new Matrix3() }
    },
    vertexShader: ShaderChunk.backgroundCube_vert,
    fragmentShader: ShaderChunk.backgroundCube_frag
  },
  cube: {
    uniforms: {
      tCube: { value: null },
      tFlip: { value: -1 },
      opacity: { value: 1 }
    },
    vertexShader: ShaderChunk.cube_vert,
    fragmentShader: ShaderChunk.cube_frag
  },
  equirect: {
    uniforms: {
      tEquirect: { value: null }
    },
    vertexShader: ShaderChunk.equirect_vert,
    fragmentShader: ShaderChunk.equirect_frag
  },
  distanceRGBA: {
    uniforms: /* @__PURE__ */ mergeUniforms([
      UniformsLib.common,
      UniformsLib.displacementmap,
      {
        referencePosition: { value: /* @__PURE__ */ new Vector3() },
        nearDistance: { value: 1 },
        farDistance: { value: 1e3 }
      }
    ]),
    vertexShader: ShaderChunk.distanceRGBA_vert,
    fragmentShader: ShaderChunk.distanceRGBA_frag
  },
  shadow: {
    uniforms: /* @__PURE__ */ mergeUniforms([
      UniformsLib.lights,
      UniformsLib.fog,
      {
        color: { value: /* @__PURE__ */ new Color(0) },
        opacity: { value: 1 }
      }
    ]),
    vertexShader: ShaderChunk.shadow_vert,
    fragmentShader: ShaderChunk.shadow_frag
  }
};
ShaderLib.physical = {
  uniforms: /* @__PURE__ */ mergeUniforms([
    ShaderLib.standard.uniforms,
    {
      clearcoat: { value: 0 },
      clearcoatMap: { value: null },
      clearcoatMapTransform: { value: /* @__PURE__ */ new Matrix3() },
      clearcoatNormalMap: { value: null },
      clearcoatNormalMapTransform: { value: /* @__PURE__ */ new Matrix3() },
      clearcoatNormalScale: { value: /* @__PURE__ */ new Vector2(1, 1) },
      clearcoatRoughness: { value: 0 },
      clearcoatRoughnessMap: { value: null },
      clearcoatRoughnessMapTransform: { value: /* @__PURE__ */ new Matrix3() },
      dispersion: { value: 0 },
      iridescence: { value: 0 },
      iridescenceMap: { value: null },
      iridescenceMapTransform: { value: /* @__PURE__ */ new Matrix3() },
      iridescenceIOR: { value: 1.3 },
      iridescenceThicknessMinimum: { value: 100 },
      iridescenceThicknessMaximum: { value: 400 },
      iridescenceThicknessMap: { value: null },
      iridescenceThicknessMapTransform: { value: /* @__PURE__ */ new Matrix3() },
      sheen: { value: 0 },
      sheenColor: { value: /* @__PURE__ */ new Color(0) },
      sheenColorMap: { value: null },
      sheenColorMapTransform: { value: /* @__PURE__ */ new Matrix3() },
      sheenRoughness: { value: 1 },
      sheenRoughnessMap: { value: null },
      sheenRoughnessMapTransform: { value: /* @__PURE__ */ new Matrix3() },
      transmission: { value: 0 },
      transmissionMap: { value: null },
      transmissionMapTransform: { value: /* @__PURE__ */ new Matrix3() },
      transmissionSamplerSize: { value: /* @__PURE__ */ new Vector2() },
      transmissionSamplerMap: { value: null },
      thickness: { value: 0 },
      thicknessMap: { value: null },
      thicknessMapTransform: { value: /* @__PURE__ */ new Matrix3() },
      attenuationDistance: { value: 0 },
      attenuationColor: { value: /* @__PURE__ */ new Color(0) },
      specularColor: { value: /* @__PURE__ */ new Color(1, 1, 1) },
      specularColorMap: { value: null },
      specularColorMapTransform: { value: /* @__PURE__ */ new Matrix3() },
      specularIntensity: { value: 1 },
      specularIntensityMap: { value: null },
      specularIntensityMapTransform: { value: /* @__PURE__ */ new Matrix3() },
      anisotropyVector: { value: /* @__PURE__ */ new Vector2() },
      anisotropyMap: { value: null },
      anisotropyMapTransform: { value: /* @__PURE__ */ new Matrix3() }
    }
  ]),
  vertexShader: ShaderChunk.meshphysical_vert,
  fragmentShader: ShaderChunk.meshphysical_frag
};
const _rgb = { r: 0, b: 0, g: 0 };
const _e1$1 = /* @__PURE__ */ new Euler();
const _m1$1 = /* @__PURE__ */ new Matrix4();
function WebGLBackground(renderer2, cubemaps, cubeuvmaps, state, objects, alpha, premultipliedAlpha) {
  const clearColor = new Color(0);
  let clearAlpha = alpha === true ? 0 : 1;
  let planeMesh;
  let boxMesh;
  let currentBackground = null;
  let currentBackgroundVersion = 0;
  let currentTonemapping = null;
  function getBackground(scene) {
    let background = scene.isScene === true ? scene.background : null;
    if (background && background.isTexture) {
      const usePMREM = scene.backgroundBlurriness > 0;
      background = (usePMREM ? cubeuvmaps : cubemaps).get(background);
    }
    return background;
  }
  function render(scene) {
    let forceClear = false;
    const background = getBackground(scene);
    if (background === null) {
      setClear(clearColor, clearAlpha);
    } else if (background && background.isColor) {
      setClear(background, 1);
      forceClear = true;
    }
    const environmentBlendMode = renderer2.xr.getEnvironmentBlendMode();
    if (environmentBlendMode === "additive") {
      state.buffers.color.setClear(0, 0, 0, 1, premultipliedAlpha);
    } else if (environmentBlendMode === "alpha-blend") {
      state.buffers.color.setClear(0, 0, 0, 0, premultipliedAlpha);
    }
    if (renderer2.autoClear || forceClear) {
      state.buffers.depth.setTest(true);
      state.buffers.depth.setMask(true);
      state.buffers.color.setMask(true);
      renderer2.clear(renderer2.autoClearColor, renderer2.autoClearDepth, renderer2.autoClearStencil);
    }
  }
  function addToRenderList(renderList, scene) {
    const background = getBackground(scene);
    if (background && (background.isCubeTexture || background.mapping === CubeUVReflectionMapping)) {
      if (boxMesh === void 0) {
        boxMesh = new Mesh(
          new BoxGeometry(1, 1, 1),
          new ShaderMaterial({
            name: "BackgroundCubeMaterial",
            uniforms: cloneUniforms(ShaderLib.backgroundCube.uniforms),
            vertexShader: ShaderLib.backgroundCube.vertexShader,
            fragmentShader: ShaderLib.backgroundCube.fragmentShader,
            side: BackSide,
            depthTest: false,
            depthWrite: false,
            fog: false
          })
        );
        boxMesh.geometry.deleteAttribute("normal");
        boxMesh.geometry.deleteAttribute("uv");
        boxMesh.onBeforeRender = function(renderer3, scene2, camera) {
          this.matrixWorld.copyPosition(camera.matrixWorld);
        };
        Object.defineProperty(boxMesh.material, "envMap", {
          get: function() {
            return this.uniforms.envMap.value;
          }
        });
        objects.update(boxMesh);
      }
      _e1$1.copy(scene.backgroundRotation);
      _e1$1.x *= -1;
      _e1$1.y *= -1;
      _e1$1.z *= -1;
      if (background.isCubeTexture && background.isRenderTargetTexture === false) {
        _e1$1.y *= -1;
        _e1$1.z *= -1;
      }
      boxMesh.material.uniforms.envMap.value = background;
      boxMesh.material.uniforms.flipEnvMap.value = background.isCubeTexture && background.isRenderTargetTexture === false ? -1 : 1;
      boxMesh.material.uniforms.backgroundBlurriness.value = scene.backgroundBlurriness;
      boxMesh.material.uniforms.backgroundIntensity.value = scene.backgroundIntensity;
      boxMesh.material.uniforms.backgroundRotation.value.setFromMatrix4(_m1$1.makeRotationFromEuler(_e1$1));
      boxMesh.material.toneMapped = ColorManagement.getTransfer(background.colorSpace) !== SRGBTransfer;
      if (currentBackground !== background || currentBackgroundVersion !== background.version || currentTonemapping !== renderer2.toneMapping) {
        boxMesh.material.needsUpdate = true;
        currentBackground = background;
        currentBackgroundVersion = background.version;
        currentTonemapping = renderer2.toneMapping;
      }
      boxMesh.layers.enableAll();
      renderList.unshift(boxMesh, boxMesh.geometry, boxMesh.material, 0, 0, null);
    } else if (background && background.isTexture) {
      if (planeMesh === void 0) {
        planeMesh = new Mesh(
          new PlaneGeometry(2, 2),
          new ShaderMaterial({
            name: "BackgroundMaterial",
            uniforms: cloneUniforms(ShaderLib.background.uniforms),
            vertexShader: ShaderLib.background.vertexShader,
            fragmentShader: ShaderLib.background.fragmentShader,
            side: FrontSide,
            depthTest: false,
            depthWrite: false,
            fog: false
          })
        );
        planeMesh.geometry.deleteAttribute("normal");
        Object.defineProperty(planeMesh.material, "map", {
          get: function() {
            return this.uniforms.t2D.value;
          }
        });
        objects.update(planeMesh);
      }
      planeMesh.material.uniforms.t2D.value = background;
      planeMesh.material.uniforms.backgroundIntensity.value = scene.backgroundIntensity;
      planeMesh.material.toneMapped = ColorManagement.getTransfer(background.colorSpace) !== SRGBTransfer;
      if (background.matrixAutoUpdate === true) {
        background.updateMatrix();
      }
      planeMesh.material.uniforms.uvTransform.value.copy(background.matrix);
      if (currentBackground !== background || currentBackgroundVersion !== background.version || currentTonemapping !== renderer2.toneMapping) {
        planeMesh.material.needsUpdate = true;
        currentBackground = background;
        currentBackgroundVersion = background.version;
        currentTonemapping = renderer2.toneMapping;
      }
      planeMesh.layers.enableAll();
      renderList.unshift(planeMesh, planeMesh.geometry, planeMesh.material, 0, 0, null);
    }
  }
  function setClear(color, alpha2) {
    color.getRGB(_rgb, getUnlitUniformColorSpace(renderer2));
    state.buffers.color.setClear(_rgb.r, _rgb.g, _rgb.b, alpha2, premultipliedAlpha);
  }
  return {
    getClearColor: function() {
      return clearColor;
    },
    setClearColor: function(color, alpha2 = 1) {
      clearColor.set(color);
      clearAlpha = alpha2;
      setClear(clearColor, clearAlpha);
    },
    getClearAlpha: function() {
      return clearAlpha;
    },
    setClearAlpha: function(alpha2) {
      clearAlpha = alpha2;
      setClear(clearColor, clearAlpha);
    },
    render,
    addToRenderList
  };
}
function WebGLBindingStates(gl2, attributes) {
  const maxVertexAttributes = gl2.getParameter(gl2.MAX_VERTEX_ATTRIBS);
  const bindingStates = {};
  const defaultState = createBindingState(null);
  let currentState = defaultState;
  let forceUpdate = false;
  function setup(object, material, program, geometry, index) {
    let updateBuffers = false;
    const state = getBindingState(geometry, program, material);
    if (currentState !== state) {
      currentState = state;
      bindVertexArrayObject(currentState.object);
    }
    updateBuffers = needsUpdate(object, geometry, program, index);
    if (updateBuffers) saveCache(object, geometry, program, index);
    if (index !== null) {
      attributes.update(index, gl2.ELEMENT_ARRAY_BUFFER);
    }
    if (updateBuffers || forceUpdate) {
      forceUpdate = false;
      setupVertexAttributes(object, material, program, geometry);
      if (index !== null) {
        gl2.bindBuffer(gl2.ELEMENT_ARRAY_BUFFER, attributes.get(index).buffer);
      }
    }
  }
  function createVertexArrayObject() {
    return gl2.createVertexArray();
  }
  function bindVertexArrayObject(vao) {
    return gl2.bindVertexArray(vao);
  }
  function deleteVertexArrayObject(vao) {
    return gl2.deleteVertexArray(vao);
  }
  function getBindingState(geometry, program, material) {
    const wireframe = material.wireframe === true;
    let programMap = bindingStates[geometry.id];
    if (programMap === void 0) {
      programMap = {};
      bindingStates[geometry.id] = programMap;
    }
    let stateMap = programMap[program.id];
    if (stateMap === void 0) {
      stateMap = {};
      programMap[program.id] = stateMap;
    }
    let state = stateMap[wireframe];
    if (state === void 0) {
      state = createBindingState(createVertexArrayObject());
      stateMap[wireframe] = state;
    }
    return state;
  }
  function createBindingState(vao) {
    const newAttributes = [];
    const enabledAttributes = [];
    const attributeDivisors = [];
    for (let i = 0; i < maxVertexAttributes; i++) {
      newAttributes[i] = 0;
      enabledAttributes[i] = 0;
      attributeDivisors[i] = 0;
    }
    return {
      // for backward compatibility on non-VAO support browser
      geometry: null,
      program: null,
      wireframe: false,
      newAttributes,
      enabledAttributes,
      attributeDivisors,
      object: vao,
      attributes: {},
      index: null
    };
  }
  function needsUpdate(object, geometry, program, index) {
    const cachedAttributes = currentState.attributes;
    const geometryAttributes = geometry.attributes;
    let attributesNum = 0;
    const programAttributes = program.getAttributes();
    for (const name2 in programAttributes) {
      const programAttribute = programAttributes[name2];
      if (programAttribute.location >= 0) {
        const cachedAttribute = cachedAttributes[name2];
        let geometryAttribute = geometryAttributes[name2];
        if (geometryAttribute === void 0) {
          if (name2 === "instanceMatrix" && object.instanceMatrix) geometryAttribute = object.instanceMatrix;
          if (name2 === "instanceColor" && object.instanceColor) geometryAttribute = object.instanceColor;
        }
        if (cachedAttribute === void 0) return true;
        if (cachedAttribute.attribute !== geometryAttribute) return true;
        if (geometryAttribute && cachedAttribute.data !== geometryAttribute.data) return true;
        attributesNum++;
      }
    }
    if (currentState.attributesNum !== attributesNum) return true;
    if (currentState.index !== index) return true;
    return false;
  }
  function saveCache(object, geometry, program, index) {
    const cache = {};
    const attributes2 = geometry.attributes;
    let attributesNum = 0;
    const programAttributes = program.getAttributes();
    for (const name2 in programAttributes) {
      const programAttribute = programAttributes[name2];
      if (programAttribute.location >= 0) {
        let attribute = attributes2[name2];
        if (attribute === void 0) {
          if (name2 === "instanceMatrix" && object.instanceMatrix) attribute = object.instanceMatrix;
          if (name2 === "instanceColor" && object.instanceColor) attribute = object.instanceColor;
        }
        const data = {};
        data.attribute = attribute;
        if (attribute && attribute.data) {
          data.data = attribute.data;
        }
        cache[name2] = data;
        attributesNum++;
      }
    }
    currentState.attributes = cache;
    currentState.attributesNum = attributesNum;
    currentState.index = index;
  }
  function initAttributes() {
    const newAttributes = currentState.newAttributes;
    for (let i = 0, il2 = newAttributes.length; i < il2; i++) {
      newAttributes[i] = 0;
    }
  }
  function enableAttribute(attribute) {
    enableAttributeAndDivisor(attribute, 0);
  }
  function enableAttributeAndDivisor(attribute, meshPerAttribute) {
    const newAttributes = currentState.newAttributes;
    const enabledAttributes = currentState.enabledAttributes;
    const attributeDivisors = currentState.attributeDivisors;
    newAttributes[attribute] = 1;
    if (enabledAttributes[attribute] === 0) {
      gl2.enableVertexAttribArray(attribute);
      enabledAttributes[attribute] = 1;
    }
    if (attributeDivisors[attribute] !== meshPerAttribute) {
      gl2.vertexAttribDivisor(attribute, meshPerAttribute);
      attributeDivisors[attribute] = meshPerAttribute;
    }
  }
  function disableUnusedAttributes() {
    const newAttributes = currentState.newAttributes;
    const enabledAttributes = currentState.enabledAttributes;
    for (let i = 0, il2 = enabledAttributes.length; i < il2; i++) {
      if (enabledAttributes[i] !== newAttributes[i]) {
        gl2.disableVertexAttribArray(i);
        enabledAttributes[i] = 0;
      }
    }
  }
  function vertexAttribPointer(index, size2, type, normalized, stride, offset, integer) {
    if (integer === true) {
      gl2.vertexAttribIPointer(index, size2, type, stride, offset);
    } else {
      gl2.vertexAttribPointer(index, size2, type, normalized, stride, offset);
    }
  }
  function setupVertexAttributes(object, material, program, geometry) {
    initAttributes();
    const geometryAttributes = geometry.attributes;
    const programAttributes = program.getAttributes();
    const materialDefaultAttributeValues = material.defaultAttributeValues;
    for (const name2 in programAttributes) {
      const programAttribute = programAttributes[name2];
      if (programAttribute.location >= 0) {
        let geometryAttribute = geometryAttributes[name2];
        if (geometryAttribute === void 0) {
          if (name2 === "instanceMatrix" && object.instanceMatrix) geometryAttribute = object.instanceMatrix;
          if (name2 === "instanceColor" && object.instanceColor) geometryAttribute = object.instanceColor;
        }
        if (geometryAttribute !== void 0) {
          const normalized = geometryAttribute.normalized;
          const size2 = geometryAttribute.itemSize;
          const attribute = attributes.get(geometryAttribute);
          if (attribute === void 0) continue;
          const buffer = attribute.buffer;
          const type = attribute.type;
          const bytesPerElement = attribute.bytesPerElement;
          const integer = type === gl2.INT || type === gl2.UNSIGNED_INT || geometryAttribute.gpuType === IntType;
          if (geometryAttribute.isInterleavedBufferAttribute) {
            const data = geometryAttribute.data;
            const stride = data.stride;
            const offset = geometryAttribute.offset;
            if (data.isInstancedInterleavedBuffer) {
              for (let i = 0; i < programAttribute.locationSize; i++) {
                enableAttributeAndDivisor(programAttribute.location + i, data.meshPerAttribute);
              }
              if (object.isInstancedMesh !== true && geometry._maxInstanceCount === void 0) {
                geometry._maxInstanceCount = data.meshPerAttribute * data.count;
              }
            } else {
              for (let i = 0; i < programAttribute.locationSize; i++) {
                enableAttribute(programAttribute.location + i);
              }
            }
            gl2.bindBuffer(gl2.ARRAY_BUFFER, buffer);
            for (let i = 0; i < programAttribute.locationSize; i++) {
              vertexAttribPointer(
                programAttribute.location + i,
                size2 / programAttribute.locationSize,
                type,
                normalized,
                stride * bytesPerElement,
                (offset + size2 / programAttribute.locationSize * i) * bytesPerElement,
                integer
              );
            }
          } else {
            if (geometryAttribute.isInstancedBufferAttribute) {
              for (let i = 0; i < programAttribute.locationSize; i++) {
                enableAttributeAndDivisor(programAttribute.location + i, geometryAttribute.meshPerAttribute);
              }
              if (object.isInstancedMesh !== true && geometry._maxInstanceCount === void 0) {
                geometry._maxInstanceCount = geometryAttribute.meshPerAttribute * geometryAttribute.count;
              }
            } else {
              for (let i = 0; i < programAttribute.locationSize; i++) {
                enableAttribute(programAttribute.location + i);
              }
            }
            gl2.bindBuffer(gl2.ARRAY_BUFFER, buffer);
            for (let i = 0; i < programAttribute.locationSize; i++) {
              vertexAttribPointer(
                programAttribute.location + i,
                size2 / programAttribute.locationSize,
                type,
                normalized,
                size2 * bytesPerElement,
                size2 / programAttribute.locationSize * i * bytesPerElement,
                integer
              );
            }
          }
        } else if (materialDefaultAttributeValues !== void 0) {
          const value = materialDefaultAttributeValues[name2];
          if (value !== void 0) {
            switch (value.length) {
              case 2:
                gl2.vertexAttrib2fv(programAttribute.location, value);
                break;
              case 3:
                gl2.vertexAttrib3fv(programAttribute.location, value);
                break;
              case 4:
                gl2.vertexAttrib4fv(programAttribute.location, value);
                break;
              default:
                gl2.vertexAttrib1fv(programAttribute.location, value);
            }
          }
        }
      }
    }
    disableUnusedAttributes();
  }
  function dispose() {
    reset();
    for (const geometryId in bindingStates) {
      const programMap = bindingStates[geometryId];
      for (const programId in programMap) {
        const stateMap = programMap[programId];
        for (const wireframe in stateMap) {
          deleteVertexArrayObject(stateMap[wireframe].object);
          delete stateMap[wireframe];
        }
        delete programMap[programId];
      }
      delete bindingStates[geometryId];
    }
  }
  function releaseStatesOfGeometry(geometry) {
    if (bindingStates[geometry.id] === void 0) return;
    const programMap = bindingStates[geometry.id];
    for (const programId in programMap) {
      const stateMap = programMap[programId];
      for (const wireframe in stateMap) {
        deleteVertexArrayObject(stateMap[wireframe].object);
        delete stateMap[wireframe];
      }
      delete programMap[programId];
    }
    delete bindingStates[geometry.id];
  }
  function releaseStatesOfProgram(program) {
    for (const geometryId in bindingStates) {
      const programMap = bindingStates[geometryId];
      if (programMap[program.id] === void 0) continue;
      const stateMap = programMap[program.id];
      for (const wireframe in stateMap) {
        deleteVertexArrayObject(stateMap[wireframe].object);
        delete stateMap[wireframe];
      }
      delete programMap[program.id];
    }
  }
  function reset() {
    resetDefaultState();
    forceUpdate = true;
    if (currentState === defaultState) return;
    currentState = defaultState;
    bindVertexArrayObject(currentState.object);
  }
  function resetDefaultState() {
    defaultState.geometry = null;
    defaultState.program = null;
    defaultState.wireframe = false;
  }
  return {
    setup,
    reset,
    resetDefaultState,
    dispose,
    releaseStatesOfGeometry,
    releaseStatesOfProgram,
    initAttributes,
    enableAttribute,
    disableUnusedAttributes
  };
}
function WebGLBufferRenderer(gl2, extensions, info) {
  let mode;
  function setMode(value) {
    mode = value;
  }
  function render(start, count) {
    gl2.drawArrays(mode, start, count);
    info.update(count, mode, 1);
  }
  function renderInstances(start, count, primcount) {
    if (primcount === 0) return;
    gl2.drawArraysInstanced(mode, start, count, primcount);
    info.update(count, mode, primcount);
  }
  function renderMultiDraw(starts, counts, drawCount) {
    if (drawCount === 0) return;
    const extension = extensions.get("WEBGL_multi_draw");
    extension.multiDrawArraysWEBGL(mode, starts, 0, counts, 0, drawCount);
    let elementCount = 0;
    for (let i = 0; i < drawCount; i++) {
      elementCount += counts[i];
    }
    info.update(elementCount, mode, 1);
  }
  function renderMultiDrawInstances(starts, counts, drawCount, primcount) {
    if (drawCount === 0) return;
    const extension = extensions.get("WEBGL_multi_draw");
    if (extension === null) {
      for (let i = 0; i < starts.length; i++) {
        renderInstances(starts[i], counts[i], primcount[i]);
      }
    } else {
      extension.multiDrawArraysInstancedWEBGL(mode, starts, 0, counts, 0, primcount, 0, drawCount);
      let elementCount = 0;
      for (let i = 0; i < drawCount; i++) {
        elementCount += counts[i];
      }
      for (let i = 0; i < primcount.length; i++) {
        info.update(elementCount, mode, primcount[i]);
      }
    }
  }
  this.setMode = setMode;
  this.render = render;
  this.renderInstances = renderInstances;
  this.renderMultiDraw = renderMultiDraw;
  this.renderMultiDrawInstances = renderMultiDrawInstances;
}
function WebGLCapabilities(gl2, extensions, parameters, utils) {
  let maxAnisotropy;
  function getMaxAnisotropy() {
    if (maxAnisotropy !== void 0) return maxAnisotropy;
    if (extensions.has("EXT_texture_filter_anisotropic") === true) {
      const extension = extensions.get("EXT_texture_filter_anisotropic");
      maxAnisotropy = gl2.getParameter(extension.MAX_TEXTURE_MAX_ANISOTROPY_EXT);
    } else {
      maxAnisotropy = 0;
    }
    return maxAnisotropy;
  }
  function textureFormatReadable(textureFormat) {
    if (textureFormat !== RGBAFormat && utils.convert(textureFormat) !== gl2.getParameter(gl2.IMPLEMENTATION_COLOR_READ_FORMAT)) {
      return false;
    }
    return true;
  }
  function textureTypeReadable(textureType) {
    const halfFloatSupportedByExt = textureType === HalfFloatType && (extensions.has("EXT_color_buffer_half_float") || extensions.has("EXT_color_buffer_float"));
    if (textureType !== UnsignedByteType && utils.convert(textureType) !== gl2.getParameter(gl2.IMPLEMENTATION_COLOR_READ_TYPE) && // Edge and Chrome Mac < 52 (#9513)
    textureType !== FloatType && !halfFloatSupportedByExt) {
      return false;
    }
    return true;
  }
  function getMaxPrecision(precision2) {
    if (precision2 === "highp") {
      if (gl2.getShaderPrecisionFormat(gl2.VERTEX_SHADER, gl2.HIGH_FLOAT).precision > 0 && gl2.getShaderPrecisionFormat(gl2.FRAGMENT_SHADER, gl2.HIGH_FLOAT).precision > 0) {
        return "highp";
      }
      precision2 = "mediump";
    }
    if (precision2 === "mediump") {
      if (gl2.getShaderPrecisionFormat(gl2.VERTEX_SHADER, gl2.MEDIUM_FLOAT).precision > 0 && gl2.getShaderPrecisionFormat(gl2.FRAGMENT_SHADER, gl2.MEDIUM_FLOAT).precision > 0) {
        return "mediump";
      }
    }
    return "lowp";
  }
  let precision = parameters.precision !== void 0 ? parameters.precision : "highp";
  const maxPrecision = getMaxPrecision(precision);
  if (maxPrecision !== precision) {
    console.warn("THREE.WebGLRenderer:", precision, "not supported, using", maxPrecision, "instead.");
    precision = maxPrecision;
  }
  const logarithmicDepthBuffer = parameters.logarithmicDepthBuffer === true;
  const reverseDepthBuffer = parameters.reverseDepthBuffer === true && extensions.has("EXT_clip_control");
  if (reverseDepthBuffer === true) {
    const ext = extensions.get("EXT_clip_control");
    ext.clipControlEXT(ext.LOWER_LEFT_EXT, ext.ZERO_TO_ONE_EXT);
  }
  const maxTextures = gl2.getParameter(gl2.MAX_TEXTURE_IMAGE_UNITS);
  const maxVertexTextures = gl2.getParameter(gl2.MAX_VERTEX_TEXTURE_IMAGE_UNITS);
  const maxTextureSize = gl2.getParameter(gl2.MAX_TEXTURE_SIZE);
  const maxCubemapSize = gl2.getParameter(gl2.MAX_CUBE_MAP_TEXTURE_SIZE);
  const maxAttributes = gl2.getParameter(gl2.MAX_VERTEX_ATTRIBS);
  const maxVertexUniforms = gl2.getParameter(gl2.MAX_VERTEX_UNIFORM_VECTORS);
  const maxVaryings = gl2.getParameter(gl2.MAX_VARYING_VECTORS);
  const maxFragmentUniforms = gl2.getParameter(gl2.MAX_FRAGMENT_UNIFORM_VECTORS);
  const vertexTextures = maxVertexTextures > 0;
  const maxSamples = gl2.getParameter(gl2.MAX_SAMPLES);
  return {
    isWebGL2: true,
    // keeping this for backwards compatibility
    getMaxAnisotropy,
    getMaxPrecision,
    textureFormatReadable,
    textureTypeReadable,
    precision,
    logarithmicDepthBuffer,
    reverseDepthBuffer,
    maxTextures,
    maxVertexTextures,
    maxTextureSize,
    maxCubemapSize,
    maxAttributes,
    maxVertexUniforms,
    maxVaryings,
    maxFragmentUniforms,
    vertexTextures,
    maxSamples
  };
}
function WebGLClipping(properties) {
  const scope = this;
  let globalState = null, numGlobalPlanes = 0, localClippingEnabled = false, renderingShadows = false;
  const plane = new Plane(), viewNormalMatrix = new Matrix3(), uniform = { value: null, needsUpdate: false };
  this.uniform = uniform;
  this.numPlanes = 0;
  this.numIntersection = 0;
  this.init = function(planes, enableLocalClipping) {
    const enabled = planes.length !== 0 || enableLocalClipping || // enable state of previous frame - the clipping code has to
    // run another frame in order to reset the state:
    numGlobalPlanes !== 0 || localClippingEnabled;
    localClippingEnabled = enableLocalClipping;
    numGlobalPlanes = planes.length;
    return enabled;
  };
  this.beginShadows = function() {
    renderingShadows = true;
    projectPlanes(null);
  };
  this.endShadows = function() {
    renderingShadows = false;
  };
  this.setGlobalState = function(planes, camera) {
    globalState = projectPlanes(planes, camera, 0);
  };
  this.setState = function(material, camera, useCache) {
    const planes = material.clippingPlanes, clipIntersection = material.clipIntersection, clipShadows = material.clipShadows;
    const materialProperties = properties.get(material);
    if (!localClippingEnabled || planes === null || planes.length === 0 || renderingShadows && !clipShadows) {
      if (renderingShadows) {
        projectPlanes(null);
      } else {
        resetGlobalState();
      }
    } else {
      const nGlobal = renderingShadows ? 0 : numGlobalPlanes, lGlobal = nGlobal * 4;
      let dstArray = materialProperties.clippingState || null;
      uniform.value = dstArray;
      dstArray = projectPlanes(planes, camera, lGlobal, useCache);
      for (let i = 0; i !== lGlobal; ++i) {
        dstArray[i] = globalState[i];
      }
      materialProperties.clippingState = dstArray;
      this.numIntersection = clipIntersection ? this.numPlanes : 0;
      this.numPlanes += nGlobal;
    }
  };
  function resetGlobalState() {
    if (uniform.value !== globalState) {
      uniform.value = globalState;
      uniform.needsUpdate = numGlobalPlanes > 0;
    }
    scope.numPlanes = numGlobalPlanes;
    scope.numIntersection = 0;
  }
  function projectPlanes(planes, camera, dstOffset, skipTransform) {
    const nPlanes = planes !== null ? planes.length : 0;
    let dstArray = null;
    if (nPlanes !== 0) {
      dstArray = uniform.value;
      if (skipTransform !== true || dstArray === null) {
        const flatSize = dstOffset + nPlanes * 4, viewMatrix = camera.matrixWorldInverse;
        viewNormalMatrix.getNormalMatrix(viewMatrix);
        if (dstArray === null || dstArray.length < flatSize) {
          dstArray = new Float32Array(flatSize);
        }
        for (let i = 0, i4 = dstOffset; i !== nPlanes; ++i, i4 += 4) {
          plane.copy(planes[i]).applyMatrix4(viewMatrix, viewNormalMatrix);
          plane.normal.toArray(dstArray, i4);
          dstArray[i4 + 3] = plane.constant;
        }
      }
      uniform.value = dstArray;
      uniform.needsUpdate = true;
    }
    scope.numPlanes = nPlanes;
    scope.numIntersection = 0;
    return dstArray;
  }
}
function WebGLCubeMaps(renderer2) {
  let cubemaps = /* @__PURE__ */ new WeakMap();
  function mapTextureMapping(texture, mapping) {
    if (mapping === EquirectangularReflectionMapping) {
      texture.mapping = CubeReflectionMapping;
    } else if (mapping === EquirectangularRefractionMapping) {
      texture.mapping = CubeRefractionMapping;
    }
    return texture;
  }
  function get2(texture) {
    if (texture && texture.isTexture) {
      const mapping = texture.mapping;
      if (mapping === EquirectangularReflectionMapping || mapping === EquirectangularRefractionMapping) {
        if (cubemaps.has(texture)) {
          const cubemap = cubemaps.get(texture).texture;
          return mapTextureMapping(cubemap, texture.mapping);
        } else {
          const image = texture.image;
          if (image && image.height > 0) {
            const renderTarget = new WebGLCubeRenderTarget(image.height);
            renderTarget.fromEquirectangularTexture(renderer2, texture);
            cubemaps.set(texture, renderTarget);
            texture.addEventListener("dispose", onTextureDispose);
            return mapTextureMapping(renderTarget.texture, texture.mapping);
          } else {
            return null;
          }
        }
      }
    }
    return texture;
  }
  function onTextureDispose(event) {
    const texture = event.target;
    texture.removeEventListener("dispose", onTextureDispose);
    const cubemap = cubemaps.get(texture);
    if (cubemap !== void 0) {
      cubemaps.delete(texture);
      cubemap.dispose();
    }
  }
  function dispose() {
    cubemaps = /* @__PURE__ */ new WeakMap();
  }
  return {
    get: get2,
    dispose
  };
}
class OrthographicCamera extends Camera {
  constructor(left = -1, right = 1, top = 1, bottom = -1, near = 0.1, far = 2e3) {
    super();
    this.isOrthographicCamera = true;
    this.type = "OrthographicCamera";
    this.zoom = 1;
    this.view = null;
    this.left = left;
    this.right = right;
    this.top = top;
    this.bottom = bottom;
    this.near = near;
    this.far = far;
    this.updateProjectionMatrix();
  }
  copy(source, recursive) {
    super.copy(source, recursive);
    this.left = source.left;
    this.right = source.right;
    this.top = source.top;
    this.bottom = source.bottom;
    this.near = source.near;
    this.far = source.far;
    this.zoom = source.zoom;
    this.view = source.view === null ? null : Object.assign({}, source.view);
    return this;
  }
  setViewOffset(fullWidth, fullHeight, x, y, width, height) {
    if (this.view === null) {
      this.view = {
        enabled: true,
        fullWidth: 1,
        fullHeight: 1,
        offsetX: 0,
        offsetY: 0,
        width: 1,
        height: 1
      };
    }
    this.view.enabled = true;
    this.view.fullWidth = fullWidth;
    this.view.fullHeight = fullHeight;
    this.view.offsetX = x;
    this.view.offsetY = y;
    this.view.width = width;
    this.view.height = height;
    this.updateProjectionMatrix();
  }
  clearViewOffset() {
    if (this.view !== null) {
      this.view.enabled = false;
    }
    this.updateProjectionMatrix();
  }
  updateProjectionMatrix() {
    const dx = (this.right - this.left) / (2 * this.zoom);
    const dy = (this.top - this.bottom) / (2 * this.zoom);
    const cx = (this.right + this.left) / 2;
    const cy = (this.top + this.bottom) / 2;
    let left = cx - dx;
    let right = cx + dx;
    let top = cy + dy;
    let bottom = cy - dy;
    if (this.view !== null && this.view.enabled) {
      const scaleW = (this.right - this.left) / this.view.fullWidth / this.zoom;
      const scaleH = (this.top - this.bottom) / this.view.fullHeight / this.zoom;
      left += scaleW * this.view.offsetX;
      right = left + scaleW * this.view.width;
      top -= scaleH * this.view.offsetY;
      bottom = top - scaleH * this.view.height;
    }
    this.projectionMatrix.makeOrthographic(left, right, top, bottom, this.near, this.far, this.coordinateSystem);
    this.projectionMatrixInverse.copy(this.projectionMatrix).invert();
  }
  toJSON(meta) {
    const data = super.toJSON(meta);
    data.object.zoom = this.zoom;
    data.object.left = this.left;
    data.object.right = this.right;
    data.object.top = this.top;
    data.object.bottom = this.bottom;
    data.object.near = this.near;
    data.object.far = this.far;
    if (this.view !== null) data.object.view = Object.assign({}, this.view);
    return data;
  }
}
const LOD_MIN = 4;
const EXTRA_LOD_SIGMA = [0.125, 0.215, 0.35, 0.446, 0.526, 0.582];
const MAX_SAMPLES = 20;
const _flatCamera = /* @__PURE__ */ new OrthographicCamera();
const _clearColor = /* @__PURE__ */ new Color();
let _oldTarget = null;
let _oldActiveCubeFace = 0;
let _oldActiveMipmapLevel = 0;
let _oldXrEnabled = false;
const PHI = (1 + Math.sqrt(5)) / 2;
const INV_PHI = 1 / PHI;
const _axisDirections = [
  /* @__PURE__ */ new Vector3(-PHI, INV_PHI, 0),
  /* @__PURE__ */ new Vector3(PHI, INV_PHI, 0),
  /* @__PURE__ */ new Vector3(-INV_PHI, 0, PHI),
  /* @__PURE__ */ new Vector3(INV_PHI, 0, PHI),
  /* @__PURE__ */ new Vector3(0, PHI, -INV_PHI),
  /* @__PURE__ */ new Vector3(0, PHI, INV_PHI),
  /* @__PURE__ */ new Vector3(-1, 1, -1),
  /* @__PURE__ */ new Vector3(1, 1, -1),
  /* @__PURE__ */ new Vector3(-1, 1, 1),
  /* @__PURE__ */ new Vector3(1, 1, 1)
];
class PMREMGenerator {
  constructor(renderer2) {
    this._renderer = renderer2;
    this._pingPongRenderTarget = null;
    this._lodMax = 0;
    this._cubeSize = 0;
    this._lodPlanes = [];
    this._sizeLods = [];
    this._sigmas = [];
    this._blurMaterial = null;
    this._cubemapMaterial = null;
    this._equirectMaterial = null;
    this._compileMaterial(this._blurMaterial);
  }
  /**
   * Generates a PMREM from a supplied Scene, which can be faster than using an
   * image if networking bandwidth is low. Optional sigma specifies a blur radius
   * in radians to be applied to the scene before PMREM generation. Optional near
   * and far planes ensure the scene is rendered in its entirety (the cubeCamera
   * is placed at the origin).
   */
  fromScene(scene, sigma = 0, near = 0.1, far = 100) {
    _oldTarget = this._renderer.getRenderTarget();
    _oldActiveCubeFace = this._renderer.getActiveCubeFace();
    _oldActiveMipmapLevel = this._renderer.getActiveMipmapLevel();
    _oldXrEnabled = this._renderer.xr.enabled;
    this._renderer.xr.enabled = false;
    this._setSize(256);
    const cubeUVRenderTarget = this._allocateTargets();
    cubeUVRenderTarget.depthBuffer = true;
    this._sceneToCubeUV(scene, near, far, cubeUVRenderTarget);
    if (sigma > 0) {
      this._blur(cubeUVRenderTarget, 0, 0, sigma);
    }
    this._applyPMREM(cubeUVRenderTarget);
    this._cleanup(cubeUVRenderTarget);
    return cubeUVRenderTarget;
  }
  /**
   * Generates a PMREM from an equirectangular texture, which can be either LDR
   * or HDR. The ideal input image size is 1k (1024 x 512),
   * as this matches best with the 256 x 256 cubemap output.
   * The smallest supported equirectangular image size is 64 x 32.
   */
  fromEquirectangular(equirectangular, renderTarget = null) {
    return this._fromTexture(equirectangular, renderTarget);
  }
  /**
   * Generates a PMREM from an cubemap texture, which can be either LDR
   * or HDR. The ideal input cube size is 256 x 256,
   * as this matches best with the 256 x 256 cubemap output.
   * The smallest supported cube size is 16 x 16.
   */
  fromCubemap(cubemap, renderTarget = null) {
    return this._fromTexture(cubemap, renderTarget);
  }
  /**
   * Pre-compiles the cubemap shader. You can get faster start-up by invoking this method during
   * your texture's network fetch for increased concurrency.
   */
  compileCubemapShader() {
    if (this._cubemapMaterial === null) {
      this._cubemapMaterial = _getCubemapMaterial();
      this._compileMaterial(this._cubemapMaterial);
    }
  }
  /**
   * Pre-compiles the equirectangular shader. You can get faster start-up by invoking this method during
   * your texture's network fetch for increased concurrency.
   */
  compileEquirectangularShader() {
    if (this._equirectMaterial === null) {
      this._equirectMaterial = _getEquirectMaterial();
      this._compileMaterial(this._equirectMaterial);
    }
  }
  /**
   * Disposes of the PMREMGenerator's internal memory. Note that PMREMGenerator is a static class,
   * so you should not need more than one PMREMGenerator object. If you do, calling dispose() on
   * one of them will cause any others to also become unusable.
   */
  dispose() {
    this._dispose();
    if (this._cubemapMaterial !== null) this._cubemapMaterial.dispose();
    if (this._equirectMaterial !== null) this._equirectMaterial.dispose();
  }
  // private interface
  _setSize(cubeSize) {
    this._lodMax = Math.floor(Math.log2(cubeSize));
    this._cubeSize = Math.pow(2, this._lodMax);
  }
  _dispose() {
    if (this._blurMaterial !== null) this._blurMaterial.dispose();
    if (this._pingPongRenderTarget !== null) this._pingPongRenderTarget.dispose();
    for (let i = 0; i < this._lodPlanes.length; i++) {
      this._lodPlanes[i].dispose();
    }
  }
  _cleanup(outputTarget) {
    this._renderer.setRenderTarget(_oldTarget, _oldActiveCubeFace, _oldActiveMipmapLevel);
    this._renderer.xr.enabled = _oldXrEnabled;
    outputTarget.scissorTest = false;
    _setViewport(outputTarget, 0, 0, outputTarget.width, outputTarget.height);
  }
  _fromTexture(texture, renderTarget) {
    if (texture.mapping === CubeReflectionMapping || texture.mapping === CubeRefractionMapping) {
      this._setSize(texture.image.length === 0 ? 16 : texture.image[0].width || texture.image[0].image.width);
    } else {
      this._setSize(texture.image.width / 4);
    }
    _oldTarget = this._renderer.getRenderTarget();
    _oldActiveCubeFace = this._renderer.getActiveCubeFace();
    _oldActiveMipmapLevel = this._renderer.getActiveMipmapLevel();
    _oldXrEnabled = this._renderer.xr.enabled;
    this._renderer.xr.enabled = false;
    const cubeUVRenderTarget = renderTarget || this._allocateTargets();
    this._textureToCubeUV(texture, cubeUVRenderTarget);
    this._applyPMREM(cubeUVRenderTarget);
    this._cleanup(cubeUVRenderTarget);
    return cubeUVRenderTarget;
  }
  _allocateTargets() {
    const width = 3 * Math.max(this._cubeSize, 16 * 7);
    const height = 4 * this._cubeSize;
    const params = {
      magFilter: LinearFilter,
      minFilter: LinearFilter,
      generateMipmaps: false,
      type: HalfFloatType,
      format: RGBAFormat,
      colorSpace: LinearSRGBColorSpace,
      depthBuffer: false
    };
    const cubeUVRenderTarget = _createRenderTarget(width, height, params);
    if (this._pingPongRenderTarget === null || this._pingPongRenderTarget.width !== width || this._pingPongRenderTarget.height !== height) {
      if (this._pingPongRenderTarget !== null) {
        this._dispose();
      }
      this._pingPongRenderTarget = _createRenderTarget(width, height, params);
      const { _lodMax } = this;
      ({ sizeLods: this._sizeLods, lodPlanes: this._lodPlanes, sigmas: this._sigmas } = _createPlanes(_lodMax));
      this._blurMaterial = _getBlurShader(_lodMax, width, height);
    }
    return cubeUVRenderTarget;
  }
  _compileMaterial(material) {
    const tmpMesh = new Mesh(this._lodPlanes[0], material);
    this._renderer.compile(tmpMesh, _flatCamera);
  }
  _sceneToCubeUV(scene, near, far, cubeUVRenderTarget) {
    const fov2 = 90;
    const aspect2 = 1;
    const cubeCamera = new PerspectiveCamera(fov2, aspect2, near, far);
    const upSign = [1, -1, 1, 1, 1, 1];
    const forwardSign = [1, 1, 1, -1, -1, -1];
    const renderer2 = this._renderer;
    const originalAutoClear = renderer2.autoClear;
    const toneMapping = renderer2.toneMapping;
    renderer2.getClearColor(_clearColor);
    renderer2.toneMapping = NoToneMapping;
    renderer2.autoClear = false;
    const backgroundMaterial = new MeshBasicMaterial({
      name: "PMREM.Background",
      side: BackSide,
      depthWrite: false,
      depthTest: false
    });
    const backgroundBox = new Mesh(new BoxGeometry(), backgroundMaterial);
    let useSolidColor = false;
    const background = scene.background;
    if (background) {
      if (background.isColor) {
        backgroundMaterial.color.copy(background);
        scene.background = null;
        useSolidColor = true;
      }
    } else {
      backgroundMaterial.color.copy(_clearColor);
      useSolidColor = true;
    }
    for (let i = 0; i < 6; i++) {
      const col = i % 3;
      if (col === 0) {
        cubeCamera.up.set(0, upSign[i], 0);
        cubeCamera.lookAt(forwardSign[i], 0, 0);
      } else if (col === 1) {
        cubeCamera.up.set(0, 0, upSign[i]);
        cubeCamera.lookAt(0, forwardSign[i], 0);
      } else {
        cubeCamera.up.set(0, upSign[i], 0);
        cubeCamera.lookAt(0, 0, forwardSign[i]);
      }
      const size2 = this._cubeSize;
      _setViewport(cubeUVRenderTarget, col * size2, i > 2 ? size2 : 0, size2, size2);
      renderer2.setRenderTarget(cubeUVRenderTarget);
      if (useSolidColor) {
        renderer2.render(backgroundBox, cubeCamera);
      }
      renderer2.render(scene, cubeCamera);
    }
    backgroundBox.geometry.dispose();
    backgroundBox.material.dispose();
    renderer2.toneMapping = toneMapping;
    renderer2.autoClear = originalAutoClear;
    scene.background = background;
  }
  _textureToCubeUV(texture, cubeUVRenderTarget) {
    const renderer2 = this._renderer;
    const isCubeTexture = texture.mapping === CubeReflectionMapping || texture.mapping === CubeRefractionMapping;
    if (isCubeTexture) {
      if (this._cubemapMaterial === null) {
        this._cubemapMaterial = _getCubemapMaterial();
      }
      this._cubemapMaterial.uniforms.flipEnvMap.value = texture.isRenderTargetTexture === false ? -1 : 1;
    } else {
      if (this._equirectMaterial === null) {
        this._equirectMaterial = _getEquirectMaterial();
      }
    }
    const material = isCubeTexture ? this._cubemapMaterial : this._equirectMaterial;
    const mesh = new Mesh(this._lodPlanes[0], material);
    const uniforms = material.uniforms;
    uniforms["envMap"].value = texture;
    const size2 = this._cubeSize;
    _setViewport(cubeUVRenderTarget, 0, 0, 3 * size2, 2 * size2);
    renderer2.setRenderTarget(cubeUVRenderTarget);
    renderer2.render(mesh, _flatCamera);
  }
  _applyPMREM(cubeUVRenderTarget) {
    const renderer2 = this._renderer;
    const autoClear = renderer2.autoClear;
    renderer2.autoClear = false;
    const n = this._lodPlanes.length;
    for (let i = 1; i < n; i++) {
      const sigma = Math.sqrt(this._sigmas[i] * this._sigmas[i] - this._sigmas[i - 1] * this._sigmas[i - 1]);
      const poleAxis = _axisDirections[(n - i - 1) % _axisDirections.length];
      this._blur(cubeUVRenderTarget, i - 1, i, sigma, poleAxis);
    }
    renderer2.autoClear = autoClear;
  }
  /**
   * This is a two-pass Gaussian blur for a cubemap. Normally this is done
   * vertically and horizontally, but this breaks down on a cube. Here we apply
   * the blur latitudinally (around the poles), and then longitudinally (towards
   * the poles) to approximate the orthogonally-separable blur. It is least
   * accurate at the poles, but still does a decent job.
   */
  _blur(cubeUVRenderTarget, lodIn, lodOut, sigma, poleAxis) {
    const pingPongRenderTarget = this._pingPongRenderTarget;
    this._halfBlur(
      cubeUVRenderTarget,
      pingPongRenderTarget,
      lodIn,
      lodOut,
      sigma,
      "latitudinal",
      poleAxis
    );
    this._halfBlur(
      pingPongRenderTarget,
      cubeUVRenderTarget,
      lodOut,
      lodOut,
      sigma,
      "longitudinal",
      poleAxis
    );
  }
  _halfBlur(targetIn, targetOut, lodIn, lodOut, sigmaRadians, direction, poleAxis) {
    const renderer2 = this._renderer;
    const blurMaterial = this._blurMaterial;
    if (direction !== "latitudinal" && direction !== "longitudinal") {
      console.error(
        "blur direction must be either latitudinal or longitudinal!"
      );
    }
    const STANDARD_DEVIATIONS = 3;
    const blurMesh = new Mesh(this._lodPlanes[lodOut], blurMaterial);
    const blurUniforms = blurMaterial.uniforms;
    const pixels = this._sizeLods[lodIn] - 1;
    const radiansPerPixel = isFinite(sigmaRadians) ? Math.PI / (2 * pixels) : 2 * Math.PI / (2 * MAX_SAMPLES - 1);
    const sigmaPixels = sigmaRadians / radiansPerPixel;
    const samples = isFinite(sigmaRadians) ? 1 + Math.floor(STANDARD_DEVIATIONS * sigmaPixels) : MAX_SAMPLES;
    if (samples > MAX_SAMPLES) {
      console.warn(`sigmaRadians, ${sigmaRadians}, is too large and will clip, as it requested ${samples} samples when the maximum is set to ${MAX_SAMPLES}`);
    }
    const weights = [];
    let sum = 0;
    for (let i = 0; i < MAX_SAMPLES; ++i) {
      const x2 = i / sigmaPixels;
      const weight = Math.exp(-x2 * x2 / 2);
      weights.push(weight);
      if (i === 0) {
        sum += weight;
      } else if (i < samples) {
        sum += 2 * weight;
      }
    }
    for (let i = 0; i < weights.length; i++) {
      weights[i] = weights[i] / sum;
    }
    blurUniforms["envMap"].value = targetIn.texture;
    blurUniforms["samples"].value = samples;
    blurUniforms["weights"].value = weights;
    blurUniforms["latitudinal"].value = direction === "latitudinal";
    if (poleAxis) {
      blurUniforms["poleAxis"].value = poleAxis;
    }
    const { _lodMax } = this;
    blurUniforms["dTheta"].value = radiansPerPixel;
    blurUniforms["mipInt"].value = _lodMax - lodIn;
    const outputSize = this._sizeLods[lodOut];
    const x = 3 * outputSize * (lodOut > _lodMax - LOD_MIN ? lodOut - _lodMax + LOD_MIN : 0);
    const y = 4 * (this._cubeSize - outputSize);
    _setViewport(targetOut, x, y, 3 * outputSize, 2 * outputSize);
    renderer2.setRenderTarget(targetOut);
    renderer2.render(blurMesh, _flatCamera);
  }
}
function _createPlanes(lodMax) {
  const lodPlanes = [];
  const sizeLods = [];
  const sigmas = [];
  let lod = lodMax;
  const totalLods = lodMax - LOD_MIN + 1 + EXTRA_LOD_SIGMA.length;
  for (let i = 0; i < totalLods; i++) {
    const sizeLod = Math.pow(2, lod);
    sizeLods.push(sizeLod);
    let sigma = 1 / sizeLod;
    if (i > lodMax - LOD_MIN) {
      sigma = EXTRA_LOD_SIGMA[i - lodMax + LOD_MIN - 1];
    } else if (i === 0) {
      sigma = 0;
    }
    sigmas.push(sigma);
    const texelSize = 1 / (sizeLod - 2);
    const min = -texelSize;
    const max = 1 + texelSize;
    const uv1 = [min, min, max, min, max, max, min, min, max, max, min, max];
    const cubeFaces = 6;
    const vertices = 6;
    const positionSize = 3;
    const uvSize = 2;
    const faceIndexSize = 1;
    const position = new Float32Array(positionSize * vertices * cubeFaces);
    const uv = new Float32Array(uvSize * vertices * cubeFaces);
    const faceIndex = new Float32Array(faceIndexSize * vertices * cubeFaces);
    for (let face = 0; face < cubeFaces; face++) {
      const x = face % 3 * 2 / 3 - 1;
      const y = face > 2 ? 0 : -1;
      const coordinates = [
        x,
        y,
        0,
        x + 2 / 3,
        y,
        0,
        x + 2 / 3,
        y + 1,
        0,
        x,
        y,
        0,
        x + 2 / 3,
        y + 1,
        0,
        x,
        y + 1,
        0
      ];
      position.set(coordinates, positionSize * vertices * face);
      uv.set(uv1, uvSize * vertices * face);
      const fill = [face, face, face, face, face, face];
      faceIndex.set(fill, faceIndexSize * vertices * face);
    }
    const planes = new BufferGeometry();
    planes.setAttribute("position", new BufferAttribute(position, positionSize));
    planes.setAttribute("uv", new BufferAttribute(uv, uvSize));
    planes.setAttribute("faceIndex", new BufferAttribute(faceIndex, faceIndexSize));
    lodPlanes.push(planes);
    if (lod > LOD_MIN) {
      lod--;
    }
  }
  return { lodPlanes, sizeLods, sigmas };
}
function _createRenderTarget(width, height, params) {
  const cubeUVRenderTarget = new WebGLRenderTarget(width, height, params);
  cubeUVRenderTarget.texture.mapping = CubeUVReflectionMapping;
  cubeUVRenderTarget.texture.name = "PMREM.cubeUv";
  cubeUVRenderTarget.scissorTest = true;
  return cubeUVRenderTarget;
}
function _setViewport(target, x, y, width, height) {
  target.viewport.set(x, y, width, height);
  target.scissor.set(x, y, width, height);
}
function _getBlurShader(lodMax, width, height) {
  const weights = new Float32Array(MAX_SAMPLES);
  const poleAxis = new Vector3(0, 1, 0);
  const shaderMaterial = new ShaderMaterial({
    name: "SphericalGaussianBlur",
    defines: {
      "n": MAX_SAMPLES,
      "CUBEUV_TEXEL_WIDTH": 1 / width,
      "CUBEUV_TEXEL_HEIGHT": 1 / height,
      "CUBEUV_MAX_MIP": `${lodMax}.0`
    },
    uniforms: {
      "envMap": { value: null },
      "samples": { value: 1 },
      "weights": { value: weights },
      "latitudinal": { value: false },
      "dTheta": { value: 0 },
      "mipInt": { value: 0 },
      "poleAxis": { value: poleAxis }
    },
    vertexShader: _getCommonVertexShader(),
    fragmentShader: (
      /* glsl */
      `

			precision mediump float;
			precision mediump int;

			varying vec3 vOutputDirection;

			uniform sampler2D envMap;
			uniform int samples;
			uniform float weights[ n ];
			uniform bool latitudinal;
			uniform float dTheta;
			uniform float mipInt;
			uniform vec3 poleAxis;

			#define ENVMAP_TYPE_CUBE_UV
			#include <cube_uv_reflection_fragment>

			vec3 getSample( float theta, vec3 axis ) {

				float cosTheta = cos( theta );
				// Rodrigues' axis-angle rotation
				vec3 sampleDirection = vOutputDirection * cosTheta
					+ cross( axis, vOutputDirection ) * sin( theta )
					+ axis * dot( axis, vOutputDirection ) * ( 1.0 - cosTheta );

				return bilinearCubeUV( envMap, sampleDirection, mipInt );

			}

			void main() {

				vec3 axis = latitudinal ? poleAxis : cross( poleAxis, vOutputDirection );

				if ( all( equal( axis, vec3( 0.0 ) ) ) ) {

					axis = vec3( vOutputDirection.z, 0.0, - vOutputDirection.x );

				}

				axis = normalize( axis );

				gl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );
				gl_FragColor.rgb += weights[ 0 ] * getSample( 0.0, axis );

				for ( int i = 1; i < n; i++ ) {

					if ( i >= samples ) {

						break;

					}

					float theta = dTheta * float( i );
					gl_FragColor.rgb += weights[ i ] * getSample( -1.0 * theta, axis );
					gl_FragColor.rgb += weights[ i ] * getSample( theta, axis );

				}

			}
		`
    ),
    blending: NoBlending,
    depthTest: false,
    depthWrite: false
  });
  return shaderMaterial;
}
function _getEquirectMaterial() {
  return new ShaderMaterial({
    name: "EquirectangularToCubeUV",
    uniforms: {
      "envMap": { value: null }
    },
    vertexShader: _getCommonVertexShader(),
    fragmentShader: (
      /* glsl */
      `

			precision mediump float;
			precision mediump int;

			varying vec3 vOutputDirection;

			uniform sampler2D envMap;

			#include <common>

			void main() {

				vec3 outputDirection = normalize( vOutputDirection );
				vec2 uv = equirectUv( outputDirection );

				gl_FragColor = vec4( texture2D ( envMap, uv ).rgb, 1.0 );

			}
		`
    ),
    blending: NoBlending,
    depthTest: false,
    depthWrite: false
  });
}
function _getCubemapMaterial() {
  return new ShaderMaterial({
    name: "CubemapToCubeUV",
    uniforms: {
      "envMap": { value: null },
      "flipEnvMap": { value: -1 }
    },
    vertexShader: _getCommonVertexShader(),
    fragmentShader: (
      /* glsl */
      `

			precision mediump float;
			precision mediump int;

			uniform float flipEnvMap;

			varying vec3 vOutputDirection;

			uniform samplerCube envMap;

			void main() {

				gl_FragColor = textureCube( envMap, vec3( flipEnvMap * vOutputDirection.x, vOutputDirection.yz ) );

			}
		`
    ),
    blending: NoBlending,
    depthTest: false,
    depthWrite: false
  });
}
function _getCommonVertexShader() {
  return (
    /* glsl */
    `

		precision mediump float;
		precision mediump int;

		attribute float faceIndex;

		varying vec3 vOutputDirection;

		// RH coordinate system; PMREM face-indexing convention
		vec3 getDirection( vec2 uv, float face ) {

			uv = 2.0 * uv - 1.0;

			vec3 direction = vec3( uv, 1.0 );

			if ( face == 0.0 ) {

				direction = direction.zyx; // ( 1, v, u ) pos x

			} else if ( face == 1.0 ) {

				direction = direction.xzy;
				direction.xz *= -1.0; // ( -u, 1, -v ) pos y

			} else if ( face == 2.0 ) {

				direction.x *= -1.0; // ( -u, v, 1 ) pos z

			} else if ( face == 3.0 ) {

				direction = direction.zyx;
				direction.xz *= -1.0; // ( -1, v, -u ) neg x

			} else if ( face == 4.0 ) {

				direction = direction.xzy;
				direction.xy *= -1.0; // ( -u, -1, v ) neg y

			} else if ( face == 5.0 ) {

				direction.z *= -1.0; // ( u, v, -1 ) neg z

			}

			return direction;

		}

		void main() {

			vOutputDirection = getDirection( uv, faceIndex );
			gl_Position = vec4( position, 1.0 );

		}
	`
  );
}
function WebGLCubeUVMaps(renderer2) {
  let cubeUVmaps = /* @__PURE__ */ new WeakMap();
  let pmremGenerator = null;
  function get2(texture) {
    if (texture && texture.isTexture) {
      const mapping = texture.mapping;
      const isEquirectMap = mapping === EquirectangularReflectionMapping || mapping === EquirectangularRefractionMapping;
      const isCubeMap = mapping === CubeReflectionMapping || mapping === CubeRefractionMapping;
      if (isEquirectMap || isCubeMap) {
        let renderTarget = cubeUVmaps.get(texture);
        const currentPMREMVersion = renderTarget !== void 0 ? renderTarget.texture.pmremVersion : 0;
        if (texture.isRenderTargetTexture && texture.pmremVersion !== currentPMREMVersion) {
          if (pmremGenerator === null) pmremGenerator = new PMREMGenerator(renderer2);
          renderTarget = isEquirectMap ? pmremGenerator.fromEquirectangular(texture, renderTarget) : pmremGenerator.fromCubemap(texture, renderTarget);
          renderTarget.texture.pmremVersion = texture.pmremVersion;
          cubeUVmaps.set(texture, renderTarget);
          return renderTarget.texture;
        } else {
          if (renderTarget !== void 0) {
            return renderTarget.texture;
          } else {
            const image = texture.image;
            if (isEquirectMap && image && image.height > 0 || isCubeMap && image && isCubeTextureComplete(image)) {
              if (pmremGenerator === null) pmremGenerator = new PMREMGenerator(renderer2);
              renderTarget = isEquirectMap ? pmremGenerator.fromEquirectangular(texture) : pmremGenerator.fromCubemap(texture);
              renderTarget.texture.pmremVersion = texture.pmremVersion;
              cubeUVmaps.set(texture, renderTarget);
              texture.addEventListener("dispose", onTextureDispose);
              return renderTarget.texture;
            } else {
              return null;
            }
          }
        }
      }
    }
    return texture;
  }
  function isCubeTextureComplete(image) {
    let count = 0;
    const length = 6;
    for (let i = 0; i < length; i++) {
      if (image[i] !== void 0) count++;
    }
    return count === length;
  }
  function onTextureDispose(event) {
    const texture = event.target;
    texture.removeEventListener("dispose", onTextureDispose);
    const cubemapUV = cubeUVmaps.get(texture);
    if (cubemapUV !== void 0) {
      cubeUVmaps.delete(texture);
      cubemapUV.dispose();
    }
  }
  function dispose() {
    cubeUVmaps = /* @__PURE__ */ new WeakMap();
    if (pmremGenerator !== null) {
      pmremGenerator.dispose();
      pmremGenerator = null;
    }
  }
  return {
    get: get2,
    dispose
  };
}
function WebGLExtensions(gl2) {
  const extensions = {};
  function getExtension(name2) {
    if (extensions[name2] !== void 0) {
      return extensions[name2];
    }
    let extension;
    switch (name2) {
      case "WEBGL_depth_texture":
        extension = gl2.getExtension("WEBGL_depth_texture") || gl2.getExtension("MOZ_WEBGL_depth_texture") || gl2.getExtension("WEBKIT_WEBGL_depth_texture");
        break;
      case "EXT_texture_filter_anisotropic":
        extension = gl2.getExtension("EXT_texture_filter_anisotropic") || gl2.getExtension("MOZ_EXT_texture_filter_anisotropic") || gl2.getExtension("WEBKIT_EXT_texture_filter_anisotropic");
        break;
      case "WEBGL_compressed_texture_s3tc":
        extension = gl2.getExtension("WEBGL_compressed_texture_s3tc") || gl2.getExtension("MOZ_WEBGL_compressed_texture_s3tc") || gl2.getExtension("WEBKIT_WEBGL_compressed_texture_s3tc");
        break;
      case "WEBGL_compressed_texture_pvrtc":
        extension = gl2.getExtension("WEBGL_compressed_texture_pvrtc") || gl2.getExtension("WEBKIT_WEBGL_compressed_texture_pvrtc");
        break;
      default:
        extension = gl2.getExtension(name2);
    }
    extensions[name2] = extension;
    return extension;
  }
  return {
    has: function(name2) {
      return getExtension(name2) !== null;
    },
    init: function() {
      getExtension("EXT_color_buffer_float");
      getExtension("WEBGL_clip_cull_distance");
      getExtension("OES_texture_float_linear");
      getExtension("EXT_color_buffer_half_float");
      getExtension("WEBGL_multisampled_render_to_texture");
      getExtension("WEBGL_render_shared_exponent");
    },
    get: function(name2) {
      const extension = getExtension(name2);
      if (extension === null) {
        warnOnce("THREE.WebGLRenderer: " + name2 + " extension not supported.");
      }
      return extension;
    }
  };
}
function WebGLGeometries(gl2, attributes, info, bindingStates) {
  const geometries = {};
  const wireframeAttributes = /* @__PURE__ */ new WeakMap();
  function onGeometryDispose(event) {
    const geometry = event.target;
    if (geometry.index !== null) {
      attributes.remove(geometry.index);
    }
    for (const name2 in geometry.attributes) {
      attributes.remove(geometry.attributes[name2]);
    }
    for (const name2 in geometry.morphAttributes) {
      const array = geometry.morphAttributes[name2];
      for (let i = 0, l = array.length; i < l; i++) {
        attributes.remove(array[i]);
      }
    }
    geometry.removeEventListener("dispose", onGeometryDispose);
    delete geometries[geometry.id];
    const attribute = wireframeAttributes.get(geometry);
    if (attribute) {
      attributes.remove(attribute);
      wireframeAttributes.delete(geometry);
    }
    bindingStates.releaseStatesOfGeometry(geometry);
    if (geometry.isInstancedBufferGeometry === true) {
      delete geometry._maxInstanceCount;
    }
    info.memory.geometries--;
  }
  function get2(object, geometry) {
    if (geometries[geometry.id] === true) return geometry;
    geometry.addEventListener("dispose", onGeometryDispose);
    geometries[geometry.id] = true;
    info.memory.geometries++;
    return geometry;
  }
  function update(geometry) {
    const geometryAttributes = geometry.attributes;
    for (const name2 in geometryAttributes) {
      attributes.update(geometryAttributes[name2], gl2.ARRAY_BUFFER);
    }
    const morphAttributes = geometry.morphAttributes;
    for (const name2 in morphAttributes) {
      const array = morphAttributes[name2];
      for (let i = 0, l = array.length; i < l; i++) {
        attributes.update(array[i], gl2.ARRAY_BUFFER);
      }
    }
  }
  function updateWireframeAttribute(geometry) {
    const indices = [];
    const geometryIndex = geometry.index;
    const geometryPosition = geometry.attributes.position;
    let version2 = 0;
    if (geometryIndex !== null) {
      const array = geometryIndex.array;
      version2 = geometryIndex.version;
      for (let i = 0, l = array.length; i < l; i += 3) {
        const a = array[i + 0];
        const b = array[i + 1];
        const c = array[i + 2];
        indices.push(a, b, b, c, c, a);
      }
    } else if (geometryPosition !== void 0) {
      const array = geometryPosition.array;
      version2 = geometryPosition.version;
      for (let i = 0, l = array.length / 3 - 1; i < l; i += 3) {
        const a = i + 0;
        const b = i + 1;
        const c = i + 2;
        indices.push(a, b, b, c, c, a);
      }
    } else {
      return;
    }
    const attribute = new (arrayNeedsUint32(indices) ? Uint32BufferAttribute : Uint16BufferAttribute)(indices, 1);
    attribute.version = version2;
    const previousAttribute = wireframeAttributes.get(geometry);
    if (previousAttribute) attributes.remove(previousAttribute);
    wireframeAttributes.set(geometry, attribute);
  }
  function getWireframeAttribute(geometry) {
    const currentAttribute = wireframeAttributes.get(geometry);
    if (currentAttribute) {
      const geometryIndex = geometry.index;
      if (geometryIndex !== null) {
        if (currentAttribute.version < geometryIndex.version) {
          updateWireframeAttribute(geometry);
        }
      }
    } else {
      updateWireframeAttribute(geometry);
    }
    return wireframeAttributes.get(geometry);
  }
  return {
    get: get2,
    update,
    getWireframeAttribute
  };
}
function WebGLIndexedBufferRenderer(gl2, extensions, info) {
  let mode;
  function setMode(value) {
    mode = value;
  }
  let type, bytesPerElement;
  function setIndex(value) {
    type = value.type;
    bytesPerElement = value.bytesPerElement;
  }
  function render(start, count) {
    gl2.drawElements(mode, count, type, start * bytesPerElement);
    info.update(count, mode, 1);
  }
  function renderInstances(start, count, primcount) {
    if (primcount === 0) return;
    gl2.drawElementsInstanced(mode, count, type, start * bytesPerElement, primcount);
    info.update(count, mode, primcount);
  }
  function renderMultiDraw(starts, counts, drawCount) {
    if (drawCount === 0) return;
    const extension = extensions.get("WEBGL_multi_draw");
    extension.multiDrawElementsWEBGL(mode, counts, 0, type, starts, 0, drawCount);
    let elementCount = 0;
    for (let i = 0; i < drawCount; i++) {
      elementCount += counts[i];
    }
    info.update(elementCount, mode, 1);
  }
  function renderMultiDrawInstances(starts, counts, drawCount, primcount) {
    if (drawCount === 0) return;
    const extension = extensions.get("WEBGL_multi_draw");
    if (extension === null) {
      for (let i = 0; i < starts.length; i++) {
        renderInstances(starts[i] / bytesPerElement, counts[i], primcount[i]);
      }
    } else {
      extension.multiDrawElementsInstancedWEBGL(mode, counts, 0, type, starts, 0, primcount, 0, drawCount);
      let elementCount = 0;
      for (let i = 0; i < drawCount; i++) {
        elementCount += counts[i];
      }
      for (let i = 0; i < primcount.length; i++) {
        info.update(elementCount, mode, primcount[i]);
      }
    }
  }
  this.setMode = setMode;
  this.setIndex = setIndex;
  this.render = render;
  this.renderInstances = renderInstances;
  this.renderMultiDraw = renderMultiDraw;
  this.renderMultiDrawInstances = renderMultiDrawInstances;
}
function WebGLInfo(gl2) {
  const memory = {
    geometries: 0,
    textures: 0
  };
  const render = {
    frame: 0,
    calls: 0,
    triangles: 0,
    points: 0,
    lines: 0
  };
  function update(count, mode, instanceCount) {
    render.calls++;
    switch (mode) {
      case gl2.TRIANGLES:
        render.triangles += instanceCount * (count / 3);
        break;
      case gl2.LINES:
        render.lines += instanceCount * (count / 2);
        break;
      case gl2.LINE_STRIP:
        render.lines += instanceCount * (count - 1);
        break;
      case gl2.LINE_LOOP:
        render.lines += instanceCount * count;
        break;
      case gl2.POINTS:
        render.points += instanceCount * count;
        break;
      default:
        console.error("THREE.WebGLInfo: Unknown draw mode:", mode);
        break;
    }
  }
  function reset() {
    render.calls = 0;
    render.triangles = 0;
    render.points = 0;
    render.lines = 0;
  }
  return {
    memory,
    render,
    programs: null,
    autoReset: true,
    reset,
    update
  };
}
function WebGLMorphtargets(gl2, capabilities, textures) {
  const morphTextures = /* @__PURE__ */ new WeakMap();
  const morph = new Vector4();
  function update(object, geometry, program) {
    const objectInfluences = object.morphTargetInfluences;
    const morphAttribute = geometry.morphAttributes.position || geometry.morphAttributes.normal || geometry.morphAttributes.color;
    const morphTargetsCount = morphAttribute !== void 0 ? morphAttribute.length : 0;
    let entry = morphTextures.get(geometry);
    if (entry === void 0 || entry.count !== morphTargetsCount) {
      let disposeTexture = function() {
        texture.dispose();
        morphTextures.delete(geometry);
        geometry.removeEventListener("dispose", disposeTexture);
      };
      if (entry !== void 0) entry.texture.dispose();
      const hasMorphPosition = geometry.morphAttributes.position !== void 0;
      const hasMorphNormals = geometry.morphAttributes.normal !== void 0;
      const hasMorphColors = geometry.morphAttributes.color !== void 0;
      const morphTargets = geometry.morphAttributes.position || [];
      const morphNormals = geometry.morphAttributes.normal || [];
      const morphColors = geometry.morphAttributes.color || [];
      let vertexDataCount = 0;
      if (hasMorphPosition === true) vertexDataCount = 1;
      if (hasMorphNormals === true) vertexDataCount = 2;
      if (hasMorphColors === true) vertexDataCount = 3;
      let width = geometry.attributes.position.count * vertexDataCount;
      let height = 1;
      if (width > capabilities.maxTextureSize) {
        height = Math.ceil(width / capabilities.maxTextureSize);
        width = capabilities.maxTextureSize;
      }
      const buffer = new Float32Array(width * height * 4 * morphTargetsCount);
      const texture = new DataArrayTexture(buffer, width, height, morphTargetsCount);
      texture.type = FloatType;
      texture.needsUpdate = true;
      const vertexDataStride = vertexDataCount * 4;
      for (let i = 0; i < morphTargetsCount; i++) {
        const morphTarget = morphTargets[i];
        const morphNormal = morphNormals[i];
        const morphColor = morphColors[i];
        const offset = width * height * 4 * i;
        for (let j2 = 0; j2 < morphTarget.count; j2++) {
          const stride = j2 * vertexDataStride;
          if (hasMorphPosition === true) {
            morph.fromBufferAttribute(morphTarget, j2);
            buffer[offset + stride + 0] = morph.x;
            buffer[offset + stride + 1] = morph.y;
            buffer[offset + stride + 2] = morph.z;
            buffer[offset + stride + 3] = 0;
          }
          if (hasMorphNormals === true) {
            morph.fromBufferAttribute(morphNormal, j2);
            buffer[offset + stride + 4] = morph.x;
            buffer[offset + stride + 5] = morph.y;
            buffer[offset + stride + 6] = morph.z;
            buffer[offset + stride + 7] = 0;
          }
          if (hasMorphColors === true) {
            morph.fromBufferAttribute(morphColor, j2);
            buffer[offset + stride + 8] = morph.x;
            buffer[offset + stride + 9] = morph.y;
            buffer[offset + stride + 10] = morph.z;
            buffer[offset + stride + 11] = morphColor.itemSize === 4 ? morph.w : 1;
          }
        }
      }
      entry = {
        count: morphTargetsCount,
        texture,
        size: new Vector2(width, height)
      };
      morphTextures.set(geometry, entry);
      geometry.addEventListener("dispose", disposeTexture);
    }
    if (object.isInstancedMesh === true && object.morphTexture !== null) {
      program.getUniforms().setValue(gl2, "morphTexture", object.morphTexture, textures);
    } else {
      let morphInfluencesSum = 0;
      for (let i = 0; i < objectInfluences.length; i++) {
        morphInfluencesSum += objectInfluences[i];
      }
      const morphBaseInfluence = geometry.morphTargetsRelative ? 1 : 1 - morphInfluencesSum;
      program.getUniforms().setValue(gl2, "morphTargetBaseInfluence", morphBaseInfluence);
      program.getUniforms().setValue(gl2, "morphTargetInfluences", objectInfluences);
    }
    program.getUniforms().setValue(gl2, "morphTargetsTexture", entry.texture, textures);
    program.getUniforms().setValue(gl2, "morphTargetsTextureSize", entry.size);
  }
  return {
    update
  };
}
function WebGLObjects(gl2, geometries, attributes, info) {
  let updateMap = /* @__PURE__ */ new WeakMap();
  function update(object) {
    const frame = info.render.frame;
    const geometry = object.geometry;
    const buffergeometry = geometries.get(object, geometry);
    if (updateMap.get(buffergeometry) !== frame) {
      geometries.update(buffergeometry);
      updateMap.set(buffergeometry, frame);
    }
    if (object.isInstancedMesh) {
      if (object.hasEventListener("dispose", onInstancedMeshDispose) === false) {
        object.addEventListener("dispose", onInstancedMeshDispose);
      }
      if (updateMap.get(object) !== frame) {
        attributes.update(object.instanceMatrix, gl2.ARRAY_BUFFER);
        if (object.instanceColor !== null) {
          attributes.update(object.instanceColor, gl2.ARRAY_BUFFER);
        }
        updateMap.set(object, frame);
      }
    }
    if (object.isSkinnedMesh) {
      const skeleton = object.skeleton;
      if (updateMap.get(skeleton) !== frame) {
        skeleton.update();
        updateMap.set(skeleton, frame);
      }
    }
    return buffergeometry;
  }
  function dispose() {
    updateMap = /* @__PURE__ */ new WeakMap();
  }
  function onInstancedMeshDispose(event) {
    const instancedMesh = event.target;
    instancedMesh.removeEventListener("dispose", onInstancedMeshDispose);
    attributes.remove(instancedMesh.instanceMatrix);
    if (instancedMesh.instanceColor !== null) attributes.remove(instancedMesh.instanceColor);
  }
  return {
    update,
    dispose
  };
}
class DepthTexture extends Texture {
  constructor(width, height, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, format = DepthFormat) {
    if (format !== DepthFormat && format !== DepthStencilFormat) {
      throw new Error("DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat");
    }
    if (type === void 0 && format === DepthFormat) type = UnsignedIntType;
    if (type === void 0 && format === DepthStencilFormat) type = UnsignedInt248Type;
    super(null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy);
    this.isDepthTexture = true;
    this.image = { width, height };
    this.magFilter = magFilter !== void 0 ? magFilter : NearestFilter;
    this.minFilter = minFilter !== void 0 ? minFilter : NearestFilter;
    this.flipY = false;
    this.generateMipmaps = false;
    this.compareFunction = null;
  }
  copy(source) {
    super.copy(source);
    this.compareFunction = source.compareFunction;
    return this;
  }
  toJSON(meta) {
    const data = super.toJSON(meta);
    if (this.compareFunction !== null) data.compareFunction = this.compareFunction;
    return data;
  }
}
const emptyTexture = /* @__PURE__ */ new Texture();
const emptyShadowTexture = /* @__PURE__ */ new DepthTexture(1, 1);
const emptyArrayTexture = /* @__PURE__ */ new DataArrayTexture();
const empty3dTexture = /* @__PURE__ */ new Data3DTexture();
const emptyCubeTexture = /* @__PURE__ */ new CubeTexture();
const arrayCacheF32 = [];
const arrayCacheI32 = [];
const mat4array = new Float32Array(16);
const mat3array = new Float32Array(9);
const mat2array = new Float32Array(4);
function flatten(array, nBlocks, blockSize) {
  const firstElem = array[0];
  if (firstElem <= 0 || firstElem > 0) return array;
  const n = nBlocks * blockSize;
  let r = arrayCacheF32[n];
  if (r === void 0) {
    r = new Float32Array(n);
    arrayCacheF32[n] = r;
  }
  if (nBlocks !== 0) {
    firstElem.toArray(r, 0);
    for (let i = 1, offset = 0; i !== nBlocks; ++i) {
      offset += blockSize;
      array[i].toArray(r, offset);
    }
  }
  return r;
}
function arraysEqual(a, b) {
  if (a.length !== b.length) return false;
  for (let i = 0, l = a.length; i < l; i++) {
    if (a[i] !== b[i]) return false;
  }
  return true;
}
function copyArray(a, b) {
  for (let i = 0, l = b.length; i < l; i++) {
    a[i] = b[i];
  }
}
function allocTexUnits(textures, n) {
  let r = arrayCacheI32[n];
  if (r === void 0) {
    r = new Int32Array(n);
    arrayCacheI32[n] = r;
  }
  for (let i = 0; i !== n; ++i) {
    r[i] = textures.allocateTextureUnit();
  }
  return r;
}
function setValueV1f(gl2, v) {
  const cache = this.cache;
  if (cache[0] === v) return;
  gl2.uniform1f(this.addr, v);
  cache[0] = v;
}
function setValueV2f(gl2, v) {
  const cache = this.cache;
  if (v.x !== void 0) {
    if (cache[0] !== v.x || cache[1] !== v.y) {
      gl2.uniform2f(this.addr, v.x, v.y);
      cache[0] = v.x;
      cache[1] = v.y;
    }
  } else {
    if (arraysEqual(cache, v)) return;
    gl2.uniform2fv(this.addr, v);
    copyArray(cache, v);
  }
}
function setValueV3f(gl2, v) {
  const cache = this.cache;
  if (v.x !== void 0) {
    if (cache[0] !== v.x || cache[1] !== v.y || cache[2] !== v.z) {
      gl2.uniform3f(this.addr, v.x, v.y, v.z);
      cache[0] = v.x;
      cache[1] = v.y;
      cache[2] = v.z;
    }
  } else if (v.r !== void 0) {
    if (cache[0] !== v.r || cache[1] !== v.g || cache[2] !== v.b) {
      gl2.uniform3f(this.addr, v.r, v.g, v.b);
      cache[0] = v.r;
      cache[1] = v.g;
      cache[2] = v.b;
    }
  } else {
    if (arraysEqual(cache, v)) return;
    gl2.uniform3fv(this.addr, v);
    copyArray(cache, v);
  }
}
function setValueV4f(gl2, v) {
  const cache = this.cache;
  if (v.x !== void 0) {
    if (cache[0] !== v.x || cache[1] !== v.y || cache[2] !== v.z || cache[3] !== v.w) {
      gl2.uniform4f(this.addr, v.x, v.y, v.z, v.w);
      cache[0] = v.x;
      cache[1] = v.y;
      cache[2] = v.z;
      cache[3] = v.w;
    }
  } else {
    if (arraysEqual(cache, v)) return;
    gl2.uniform4fv(this.addr, v);
    copyArray(cache, v);
  }
}
function setValueM2(gl2, v) {
  const cache = this.cache;
  const elements = v.elements;
  if (elements === void 0) {
    if (arraysEqual(cache, v)) return;
    gl2.uniformMatrix2fv(this.addr, false, v);
    copyArray(cache, v);
  } else {
    if (arraysEqual(cache, elements)) return;
    mat2array.set(elements);
    gl2.uniformMatrix2fv(this.addr, false, mat2array);
    copyArray(cache, elements);
  }
}
function setValueM3(gl2, v) {
  const cache = this.cache;
  const elements = v.elements;
  if (elements === void 0) {
    if (arraysEqual(cache, v)) return;
    gl2.uniformMatrix3fv(this.addr, false, v);
    copyArray(cache, v);
  } else {
    if (arraysEqual(cache, elements)) return;
    mat3array.set(elements);
    gl2.uniformMatrix3fv(this.addr, false, mat3array);
    copyArray(cache, elements);
  }
}
function setValueM4(gl2, v) {
  const cache = this.cache;
  const elements = v.elements;
  if (elements === void 0) {
    if (arraysEqual(cache, v)) return;
    gl2.uniformMatrix4fv(this.addr, false, v);
    copyArray(cache, v);
  } else {
    if (arraysEqual(cache, elements)) return;
    mat4array.set(elements);
    gl2.uniformMatrix4fv(this.addr, false, mat4array);
    copyArray(cache, elements);
  }
}
function setValueV1i(gl2, v) {
  const cache = this.cache;
  if (cache[0] === v) return;
  gl2.uniform1i(this.addr, v);
  cache[0] = v;
}
function setValueV2i(gl2, v) {
  const cache = this.cache;
  if (v.x !== void 0) {
    if (cache[0] !== v.x || cache[1] !== v.y) {
      gl2.uniform2i(this.addr, v.x, v.y);
      cache[0] = v.x;
      cache[1] = v.y;
    }
  } else {
    if (arraysEqual(cache, v)) return;
    gl2.uniform2iv(this.addr, v);
    copyArray(cache, v);
  }
}
function setValueV3i(gl2, v) {
  const cache = this.cache;
  if (v.x !== void 0) {
    if (cache[0] !== v.x || cache[1] !== v.y || cache[2] !== v.z) {
      gl2.uniform3i(this.addr, v.x, v.y, v.z);
      cache[0] = v.x;
      cache[1] = v.y;
      cache[2] = v.z;
    }
  } else {
    if (arraysEqual(cache, v)) return;
    gl2.uniform3iv(this.addr, v);
    copyArray(cache, v);
  }
}
function setValueV4i(gl2, v) {
  const cache = this.cache;
  if (v.x !== void 0) {
    if (cache[0] !== v.x || cache[1] !== v.y || cache[2] !== v.z || cache[3] !== v.w) {
      gl2.uniform4i(this.addr, v.x, v.y, v.z, v.w);
      cache[0] = v.x;
      cache[1] = v.y;
      cache[2] = v.z;
      cache[3] = v.w;
    }
  } else {
    if (arraysEqual(cache, v)) return;
    gl2.uniform4iv(this.addr, v);
    copyArray(cache, v);
  }
}
function setValueV1ui(gl2, v) {
  const cache = this.cache;
  if (cache[0] === v) return;
  gl2.uniform1ui(this.addr, v);
  cache[0] = v;
}
function setValueV2ui(gl2, v) {
  const cache = this.cache;
  if (v.x !== void 0) {
    if (cache[0] !== v.x || cache[1] !== v.y) {
      gl2.uniform2ui(this.addr, v.x, v.y);
      cache[0] = v.x;
      cache[1] = v.y;
    }
  } else {
    if (arraysEqual(cache, v)) return;
    gl2.uniform2uiv(this.addr, v);
    copyArray(cache, v);
  }
}
function setValueV3ui(gl2, v) {
  const cache = this.cache;
  if (v.x !== void 0) {
    if (cache[0] !== v.x || cache[1] !== v.y || cache[2] !== v.z) {
      gl2.uniform3ui(this.addr, v.x, v.y, v.z);
      cache[0] = v.x;
      cache[1] = v.y;
      cache[2] = v.z;
    }
  } else {
    if (arraysEqual(cache, v)) return;
    gl2.uniform3uiv(this.addr, v);
    copyArray(cache, v);
  }
}
function setValueV4ui(gl2, v) {
  const cache = this.cache;
  if (v.x !== void 0) {
    if (cache[0] !== v.x || cache[1] !== v.y || cache[2] !== v.z || cache[3] !== v.w) {
      gl2.uniform4ui(this.addr, v.x, v.y, v.z, v.w);
      cache[0] = v.x;
      cache[1] = v.y;
      cache[2] = v.z;
      cache[3] = v.w;
    }
  } else {
    if (arraysEqual(cache, v)) return;
    gl2.uniform4uiv(this.addr, v);
    copyArray(cache, v);
  }
}
function setValueT1(gl2, v, textures) {
  const cache = this.cache;
  const unit = textures.allocateTextureUnit();
  if (cache[0] !== unit) {
    gl2.uniform1i(this.addr, unit);
    cache[0] = unit;
  }
  let emptyTexture2D;
  if (this.type === gl2.SAMPLER_2D_SHADOW) {
    emptyShadowTexture.compareFunction = LessEqualCompare;
    emptyTexture2D = emptyShadowTexture;
  } else {
    emptyTexture2D = emptyTexture;
  }
  textures.setTexture2D(v || emptyTexture2D, unit);
}
function setValueT3D1(gl2, v, textures) {
  const cache = this.cache;
  const unit = textures.allocateTextureUnit();
  if (cache[0] !== unit) {
    gl2.uniform1i(this.addr, unit);
    cache[0] = unit;
  }
  textures.setTexture3D(v || empty3dTexture, unit);
}
function setValueT6(gl2, v, textures) {
  const cache = this.cache;
  const unit = textures.allocateTextureUnit();
  if (cache[0] !== unit) {
    gl2.uniform1i(this.addr, unit);
    cache[0] = unit;
  }
  textures.setTextureCube(v || emptyCubeTexture, unit);
}
function setValueT2DArray1(gl2, v, textures) {
  const cache = this.cache;
  const unit = textures.allocateTextureUnit();
  if (cache[0] !== unit) {
    gl2.uniform1i(this.addr, unit);
    cache[0] = unit;
  }
  textures.setTexture2DArray(v || emptyArrayTexture, unit);
}
function getSingularSetter(type) {
  switch (type) {
    case 5126:
      return setValueV1f;
    case 35664:
      return setValueV2f;
    case 35665:
      return setValueV3f;
    case 35666:
      return setValueV4f;
    case 35674:
      return setValueM2;
    case 35675:
      return setValueM3;
    case 35676:
      return setValueM4;
    case 5124:
    case 35670:
      return setValueV1i;
    case 35667:
    case 35671:
      return setValueV2i;
    case 35668:
    case 35672:
      return setValueV3i;
    case 35669:
    case 35673:
      return setValueV4i;
    case 5125:
      return setValueV1ui;
    case 36294:
      return setValueV2ui;
    case 36295:
      return setValueV3ui;
    case 36296:
      return setValueV4ui;
    case 35678:
    case 36198:
    case 36298:
    case 36306:
    case 35682:
      return setValueT1;
    case 35679:
    case 36299:
    case 36307:
      return setValueT3D1;
    case 35680:
    case 36300:
    case 36308:
    case 36293:
      return setValueT6;
    case 36289:
    case 36303:
    case 36311:
    case 36292:
      return setValueT2DArray1;
  }
}
function setValueV1fArray(gl2, v) {
  gl2.uniform1fv(this.addr, v);
}
function setValueV2fArray(gl2, v) {
  const data = flatten(v, this.size, 2);
  gl2.uniform2fv(this.addr, data);
}
function setValueV3fArray(gl2, v) {
  const data = flatten(v, this.size, 3);
  gl2.uniform3fv(this.addr, data);
}
function setValueV4fArray(gl2, v) {
  const data = flatten(v, this.size, 4);
  gl2.uniform4fv(this.addr, data);
}
function setValueM2Array(gl2, v) {
  const data = flatten(v, this.size, 4);
  gl2.uniformMatrix2fv(this.addr, false, data);
}
function setValueM3Array(gl2, v) {
  const data = flatten(v, this.size, 9);
  gl2.uniformMatrix3fv(this.addr, false, data);
}
function setValueM4Array(gl2, v) {
  const data = flatten(v, this.size, 16);
  gl2.uniformMatrix4fv(this.addr, false, data);
}
function setValueV1iArray(gl2, v) {
  gl2.uniform1iv(this.addr, v);
}
function setValueV2iArray(gl2, v) {
  gl2.uniform2iv(this.addr, v);
}
function setValueV3iArray(gl2, v) {
  gl2.uniform3iv(this.addr, v);
}
function setValueV4iArray(gl2, v) {
  gl2.uniform4iv(this.addr, v);
}
function setValueV1uiArray(gl2, v) {
  gl2.uniform1uiv(this.addr, v);
}
function setValueV2uiArray(gl2, v) {
  gl2.uniform2uiv(this.addr, v);
}
function setValueV3uiArray(gl2, v) {
  gl2.uniform3uiv(this.addr, v);
}
function setValueV4uiArray(gl2, v) {
  gl2.uniform4uiv(this.addr, v);
}
function setValueT1Array(gl2, v, textures) {
  const cache = this.cache;
  const n = v.length;
  const units = allocTexUnits(textures, n);
  if (!arraysEqual(cache, units)) {
    gl2.uniform1iv(this.addr, units);
    copyArray(cache, units);
  }
  for (let i = 0; i !== n; ++i) {
    textures.setTexture2D(v[i] || emptyTexture, units[i]);
  }
}
function setValueT3DArray(gl2, v, textures) {
  const cache = this.cache;
  const n = v.length;
  const units = allocTexUnits(textures, n);
  if (!arraysEqual(cache, units)) {
    gl2.uniform1iv(this.addr, units);
    copyArray(cache, units);
  }
  for (let i = 0; i !== n; ++i) {
    textures.setTexture3D(v[i] || empty3dTexture, units[i]);
  }
}
function setValueT6Array(gl2, v, textures) {
  const cache = this.cache;
  const n = v.length;
  const units = allocTexUnits(textures, n);
  if (!arraysEqual(cache, units)) {
    gl2.uniform1iv(this.addr, units);
    copyArray(cache, units);
  }
  for (let i = 0; i !== n; ++i) {
    textures.setTextureCube(v[i] || emptyCubeTexture, units[i]);
  }
}
function setValueT2DArrayArray(gl2, v, textures) {
  const cache = this.cache;
  const n = v.length;
  const units = allocTexUnits(textures, n);
  if (!arraysEqual(cache, units)) {
    gl2.uniform1iv(this.addr, units);
    copyArray(cache, units);
  }
  for (let i = 0; i !== n; ++i) {
    textures.setTexture2DArray(v[i] || emptyArrayTexture, units[i]);
  }
}
function getPureArraySetter(type) {
  switch (type) {
    case 5126:
      return setValueV1fArray;
    case 35664:
      return setValueV2fArray;
    case 35665:
      return setValueV3fArray;
    case 35666:
      return setValueV4fArray;
    case 35674:
      return setValueM2Array;
    case 35675:
      return setValueM3Array;
    case 35676:
      return setValueM4Array;
    case 5124:
    case 35670:
      return setValueV1iArray;
    case 35667:
    case 35671:
      return setValueV2iArray;
    case 35668:
    case 35672:
      return setValueV3iArray;
    case 35669:
    case 35673:
      return setValueV4iArray;
    case 5125:
      return setValueV1uiArray;
    case 36294:
      return setValueV2uiArray;
    case 36295:
      return setValueV3uiArray;
    case 36296:
      return setValueV4uiArray;
    case 35678:
    case 36198:
    case 36298:
    case 36306:
    case 35682:
      return setValueT1Array;
    case 35679:
    case 36299:
    case 36307:
      return setValueT3DArray;
    case 35680:
    case 36300:
    case 36308:
    case 36293:
      return setValueT6Array;
    case 36289:
    case 36303:
    case 36311:
    case 36292:
      return setValueT2DArrayArray;
  }
}
class SingleUniform {
  constructor(id2, activeInfo, addr) {
    this.id = id2;
    this.addr = addr;
    this.cache = [];
    this.type = activeInfo.type;
    this.setValue = getSingularSetter(activeInfo.type);
  }
}
class PureArrayUniform {
  constructor(id2, activeInfo, addr) {
    this.id = id2;
    this.addr = addr;
    this.cache = [];
    this.type = activeInfo.type;
    this.size = activeInfo.size;
    this.setValue = getPureArraySetter(activeInfo.type);
  }
}
class StructuredUniform {
  constructor(id2) {
    this.id = id2;
    this.seq = [];
    this.map = {};
  }
  setValue(gl2, value, textures) {
    const seq = this.seq;
    for (let i = 0, n = seq.length; i !== n; ++i) {
      const u = seq[i];
      u.setValue(gl2, value[u.id], textures);
    }
  }
}
const RePathPart = /(\w+)(\])?(\[|\.)?/g;
function addUniform(container, uniformObject) {
  container.seq.push(uniformObject);
  container.map[uniformObject.id] = uniformObject;
}
function parseUniform(activeInfo, addr, container) {
  const path = activeInfo.name, pathLength = path.length;
  RePathPart.lastIndex = 0;
  while (true) {
    const match = RePathPart.exec(path), matchEnd = RePathPart.lastIndex;
    let id2 = match[1];
    const idIsIndex = match[2] === "]", subscript = match[3];
    if (idIsIndex) id2 = id2 | 0;
    if (subscript === void 0 || subscript === "[" && matchEnd + 2 === pathLength) {
      addUniform(container, subscript === void 0 ? new SingleUniform(id2, activeInfo, addr) : new PureArrayUniform(id2, activeInfo, addr));
      break;
    } else {
      const map = container.map;
      let next = map[id2];
      if (next === void 0) {
        next = new StructuredUniform(id2);
        addUniform(container, next);
      }
      container = next;
    }
  }
}
class WebGLUniforms {
  constructor(gl2, program) {
    this.seq = [];
    this.map = {};
    const n = gl2.getProgramParameter(program, gl2.ACTIVE_UNIFORMS);
    for (let i = 0; i < n; ++i) {
      const info = gl2.getActiveUniform(program, i), addr = gl2.getUniformLocation(program, info.name);
      parseUniform(info, addr, this);
    }
  }
  setValue(gl2, name2, value, textures) {
    const u = this.map[name2];
    if (u !== void 0) u.setValue(gl2, value, textures);
  }
  setOptional(gl2, object, name2) {
    const v = object[name2];
    if (v !== void 0) this.setValue(gl2, name2, v);
  }
  static upload(gl2, seq, values, textures) {
    for (let i = 0, n = seq.length; i !== n; ++i) {
      const u = seq[i], v = values[u.id];
      if (v.needsUpdate !== false) {
        u.setValue(gl2, v.value, textures);
      }
    }
  }
  static seqWithValue(seq, values) {
    const r = [];
    for (let i = 0, n = seq.length; i !== n; ++i) {
      const u = seq[i];
      if (u.id in values) r.push(u);
    }
    return r;
  }
}
function WebGLShader(gl2, type, string) {
  const shader = gl2.createShader(type);
  gl2.shaderSource(shader, string);
  gl2.compileShader(shader);
  return shader;
}
const COMPLETION_STATUS_KHR = 37297;
let programIdCount = 0;
function handleSource(string, errorLine) {
  const lines = string.split("\n");
  const lines2 = [];
  const from = Math.max(errorLine - 6, 0);
  const to2 = Math.min(errorLine + 6, lines.length);
  for (let i = from; i < to2; i++) {
    const line = i + 1;
    lines2.push(`${line === errorLine ? ">" : " "} ${line}: ${lines[i]}`);
  }
  return lines2.join("\n");
}
function getEncodingComponents(colorSpace) {
  const workingPrimaries = ColorManagement.getPrimaries(ColorManagement.workingColorSpace);
  const encodingPrimaries = ColorManagement.getPrimaries(colorSpace);
  let gamutMapping;
  if (workingPrimaries === encodingPrimaries) {
    gamutMapping = "";
  } else if (workingPrimaries === P3Primaries && encodingPrimaries === Rec709Primaries) {
    gamutMapping = "LinearDisplayP3ToLinearSRGB";
  } else if (workingPrimaries === Rec709Primaries && encodingPrimaries === P3Primaries) {
    gamutMapping = "LinearSRGBToLinearDisplayP3";
  }
  switch (colorSpace) {
    case LinearSRGBColorSpace:
    case LinearDisplayP3ColorSpace:
      return [gamutMapping, "LinearTransferOETF"];
    case SRGBColorSpace:
    case DisplayP3ColorSpace:
      return [gamutMapping, "sRGBTransferOETF"];
    default:
      console.warn("THREE.WebGLProgram: Unsupported color space:", colorSpace);
      return [gamutMapping, "LinearTransferOETF"];
  }
}
function getShaderErrors(gl2, shader, type) {
  const status = gl2.getShaderParameter(shader, gl2.COMPILE_STATUS);
  const errors = gl2.getShaderInfoLog(shader).trim();
  if (status && errors === "") return "";
  const errorMatches = /ERROR: 0:(\d+)/.exec(errors);
  if (errorMatches) {
    const errorLine = parseInt(errorMatches[1]);
    return type.toUpperCase() + "\n\n" + errors + "\n\n" + handleSource(gl2.getShaderSource(shader), errorLine);
  } else {
    return errors;
  }
}
function getTexelEncodingFunction(functionName, colorSpace) {
  const components = getEncodingComponents(colorSpace);
  return `vec4 ${functionName}( vec4 value ) { return ${components[0]}( ${components[1]}( value ) ); }`;
}
function getToneMappingFunction(functionName, toneMapping) {
  let toneMappingName;
  switch (toneMapping) {
    case LinearToneMapping:
      toneMappingName = "Linear";
      break;
    case ReinhardToneMapping:
      toneMappingName = "Reinhard";
      break;
    case CineonToneMapping:
      toneMappingName = "Cineon";
      break;
    case ACESFilmicToneMapping:
      toneMappingName = "ACESFilmic";
      break;
    case AgXToneMapping:
      toneMappingName = "AgX";
      break;
    case NeutralToneMapping:
      toneMappingName = "Neutral";
      break;
    case CustomToneMapping:
      toneMappingName = "Custom";
      break;
    default:
      console.warn("THREE.WebGLProgram: Unsupported toneMapping:", toneMapping);
      toneMappingName = "Linear";
  }
  return "vec3 " + functionName + "( vec3 color ) { return " + toneMappingName + "ToneMapping( color ); }";
}
const _v0$1 = /* @__PURE__ */ new Vector3();
function getLuminanceFunction() {
  ColorManagement.getLuminanceCoefficients(_v0$1);
  const r = _v0$1.x.toFixed(4);
  const g = _v0$1.y.toFixed(4);
  const b = _v0$1.z.toFixed(4);
  return [
    "float luminance( const in vec3 rgb ) {",
    `	const vec3 weights = vec3( ${r}, ${g}, ${b} );`,
    "	return dot( weights, rgb );",
    "}"
  ].join("\n");
}
function generateVertexExtensions(parameters) {
  const chunks = [
    parameters.extensionClipCullDistance ? "#extension GL_ANGLE_clip_cull_distance : require" : "",
    parameters.extensionMultiDraw ? "#extension GL_ANGLE_multi_draw : require" : ""
  ];
  return chunks.filter(filterEmptyLine).join("\n");
}
function generateDefines(defines) {
  const chunks = [];
  for (const name2 in defines) {
    const value = defines[name2];
    if (value === false) continue;
    chunks.push("#define " + name2 + " " + value);
  }
  return chunks.join("\n");
}
function fetchAttributeLocations(gl2, program) {
  const attributes = {};
  const n = gl2.getProgramParameter(program, gl2.ACTIVE_ATTRIBUTES);
  for (let i = 0; i < n; i++) {
    const info = gl2.getActiveAttrib(program, i);
    const name2 = info.name;
    let locationSize = 1;
    if (info.type === gl2.FLOAT_MAT2) locationSize = 2;
    if (info.type === gl2.FLOAT_MAT3) locationSize = 3;
    if (info.type === gl2.FLOAT_MAT4) locationSize = 4;
    attributes[name2] = {
      type: info.type,
      location: gl2.getAttribLocation(program, name2),
      locationSize
    };
  }
  return attributes;
}
function filterEmptyLine(string) {
  return string !== "";
}
function replaceLightNums(string, parameters) {
  const numSpotLightCoords = parameters.numSpotLightShadows + parameters.numSpotLightMaps - parameters.numSpotLightShadowsWithMaps;
  return string.replace(/NUM_DIR_LIGHTS/g, parameters.numDirLights).replace(/NUM_SPOT_LIGHTS/g, parameters.numSpotLights).replace(/NUM_SPOT_LIGHT_MAPS/g, parameters.numSpotLightMaps).replace(/NUM_SPOT_LIGHT_COORDS/g, numSpotLightCoords).replace(/NUM_RECT_AREA_LIGHTS/g, parameters.numRectAreaLights).replace(/NUM_POINT_LIGHTS/g, parameters.numPointLights).replace(/NUM_HEMI_LIGHTS/g, parameters.numHemiLights).replace(/NUM_DIR_LIGHT_SHADOWS/g, parameters.numDirLightShadows).replace(/NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS/g, parameters.numSpotLightShadowsWithMaps).replace(/NUM_SPOT_LIGHT_SHADOWS/g, parameters.numSpotLightShadows).replace(/NUM_POINT_LIGHT_SHADOWS/g, parameters.numPointLightShadows);
}
function replaceClippingPlaneNums(string, parameters) {
  return string.replace(/NUM_CLIPPING_PLANES/g, parameters.numClippingPlanes).replace(/UNION_CLIPPING_PLANES/g, parameters.numClippingPlanes - parameters.numClipIntersection);
}
const includePattern = /^[ \t]*#include +<([\w\d./]+)>/gm;
function resolveIncludes(string) {
  return string.replace(includePattern, includeReplacer);
}
const shaderChunkMap = /* @__PURE__ */ new Map();
function includeReplacer(match, include) {
  let string = ShaderChunk[include];
  if (string === void 0) {
    const newInclude = shaderChunkMap.get(include);
    if (newInclude !== void 0) {
      string = ShaderChunk[newInclude];
      console.warn('THREE.WebGLRenderer: Shader chunk "%s" has been deprecated. Use "%s" instead.', include, newInclude);
    } else {
      throw new Error("Can not resolve #include <" + include + ">");
    }
  }
  return resolveIncludes(string);
}
const unrollLoopPattern = /#pragma unroll_loop_start\s+for\s*\(\s*int\s+i\s*=\s*(\d+)\s*;\s*i\s*<\s*(\d+)\s*;\s*i\s*\+\+\s*\)\s*{([\s\S]+?)}\s+#pragma unroll_loop_end/g;
function unrollLoops(string) {
  return string.replace(unrollLoopPattern, loopReplacer);
}
function loopReplacer(match, start, end, snippet) {
  let string = "";
  for (let i = parseInt(start); i < parseInt(end); i++) {
    string += snippet.replace(/\[\s*i\s*\]/g, "[ " + i + " ]").replace(/UNROLLED_LOOP_INDEX/g, i);
  }
  return string;
}
function generatePrecision(parameters) {
  let precisionstring = `precision ${parameters.precision} float;
	precision ${parameters.precision} int;
	precision ${parameters.precision} sampler2D;
	precision ${parameters.precision} samplerCube;
	precision ${parameters.precision} sampler3D;
	precision ${parameters.precision} sampler2DArray;
	precision ${parameters.precision} sampler2DShadow;
	precision ${parameters.precision} samplerCubeShadow;
	precision ${parameters.precision} sampler2DArrayShadow;
	precision ${parameters.precision} isampler2D;
	precision ${parameters.precision} isampler3D;
	precision ${parameters.precision} isamplerCube;
	precision ${parameters.precision} isampler2DArray;
	precision ${parameters.precision} usampler2D;
	precision ${parameters.precision} usampler3D;
	precision ${parameters.precision} usamplerCube;
	precision ${parameters.precision} usampler2DArray;
	`;
  if (parameters.precision === "highp") {
    precisionstring += "\n#define HIGH_PRECISION";
  } else if (parameters.precision === "mediump") {
    precisionstring += "\n#define MEDIUM_PRECISION";
  } else if (parameters.precision === "lowp") {
    precisionstring += "\n#define LOW_PRECISION";
  }
  return precisionstring;
}
function generateShadowMapTypeDefine(parameters) {
  let shadowMapTypeDefine = "SHADOWMAP_TYPE_BASIC";
  if (parameters.shadowMapType === PCFShadowMap) {
    shadowMapTypeDefine = "SHADOWMAP_TYPE_PCF";
  } else if (parameters.shadowMapType === PCFSoftShadowMap) {
    shadowMapTypeDefine = "SHADOWMAP_TYPE_PCF_SOFT";
  } else if (parameters.shadowMapType === VSMShadowMap) {
    shadowMapTypeDefine = "SHADOWMAP_TYPE_VSM";
  }
  return shadowMapTypeDefine;
}
function generateEnvMapTypeDefine(parameters) {
  let envMapTypeDefine = "ENVMAP_TYPE_CUBE";
  if (parameters.envMap) {
    switch (parameters.envMapMode) {
      case CubeReflectionMapping:
      case CubeRefractionMapping:
        envMapTypeDefine = "ENVMAP_TYPE_CUBE";
        break;
      case CubeUVReflectionMapping:
        envMapTypeDefine = "ENVMAP_TYPE_CUBE_UV";
        break;
    }
  }
  return envMapTypeDefine;
}
function generateEnvMapModeDefine(parameters) {
  let envMapModeDefine = "ENVMAP_MODE_REFLECTION";
  if (parameters.envMap) {
    switch (parameters.envMapMode) {
      case CubeRefractionMapping:
        envMapModeDefine = "ENVMAP_MODE_REFRACTION";
        break;
    }
  }
  return envMapModeDefine;
}
function generateEnvMapBlendingDefine(parameters) {
  let envMapBlendingDefine = "ENVMAP_BLENDING_NONE";
  if (parameters.envMap) {
    switch (parameters.combine) {
      case MultiplyOperation:
        envMapBlendingDefine = "ENVMAP_BLENDING_MULTIPLY";
        break;
      case MixOperation:
        envMapBlendingDefine = "ENVMAP_BLENDING_MIX";
        break;
      case AddOperation:
        envMapBlendingDefine = "ENVMAP_BLENDING_ADD";
        break;
    }
  }
  return envMapBlendingDefine;
}
function generateCubeUVSize(parameters) {
  const imageHeight = parameters.envMapCubeUVHeight;
  if (imageHeight === null) return null;
  const maxMip = Math.log2(imageHeight) - 2;
  const texelHeight = 1 / imageHeight;
  const texelWidth = 1 / (3 * Math.max(Math.pow(2, maxMip), 7 * 16));
  return { texelWidth, texelHeight, maxMip };
}
function WebGLProgram(renderer2, cacheKey, parameters, bindingStates) {
  const gl2 = renderer2.getContext();
  const defines = parameters.defines;
  let vertexShader = parameters.vertexShader;
  let fragmentShader = parameters.fragmentShader;
  const shadowMapTypeDefine = generateShadowMapTypeDefine(parameters);
  const envMapTypeDefine = generateEnvMapTypeDefine(parameters);
  const envMapModeDefine = generateEnvMapModeDefine(parameters);
  const envMapBlendingDefine = generateEnvMapBlendingDefine(parameters);
  const envMapCubeUVSize = generateCubeUVSize(parameters);
  const customVertexExtensions = generateVertexExtensions(parameters);
  const customDefines = generateDefines(defines);
  const program = gl2.createProgram();
  let prefixVertex, prefixFragment;
  let versionString = parameters.glslVersion ? "#version " + parameters.glslVersion + "\n" : "";
  if (parameters.isRawShaderMaterial) {
    prefixVertex = [
      "#define SHADER_TYPE " + parameters.shaderType,
      "#define SHADER_NAME " + parameters.shaderName,
      customDefines
    ].filter(filterEmptyLine).join("\n");
    if (prefixVertex.length > 0) {
      prefixVertex += "\n";
    }
    prefixFragment = [
      "#define SHADER_TYPE " + parameters.shaderType,
      "#define SHADER_NAME " + parameters.shaderName,
      customDefines
    ].filter(filterEmptyLine).join("\n");
    if (prefixFragment.length > 0) {
      prefixFragment += "\n";
    }
  } else {
    prefixVertex = [
      generatePrecision(parameters),
      "#define SHADER_TYPE " + parameters.shaderType,
      "#define SHADER_NAME " + parameters.shaderName,
      customDefines,
      parameters.extensionClipCullDistance ? "#define USE_CLIP_DISTANCE" : "",
      parameters.batching ? "#define USE_BATCHING" : "",
      parameters.batchingColor ? "#define USE_BATCHING_COLOR" : "",
      parameters.instancing ? "#define USE_INSTANCING" : "",
      parameters.instancingColor ? "#define USE_INSTANCING_COLOR" : "",
      parameters.instancingMorph ? "#define USE_INSTANCING_MORPH" : "",
      parameters.useFog && parameters.fog ? "#define USE_FOG" : "",
      parameters.useFog && parameters.fogExp2 ? "#define FOG_EXP2" : "",
      parameters.map ? "#define USE_MAP" : "",
      parameters.envMap ? "#define USE_ENVMAP" : "",
      parameters.envMap ? "#define " + envMapModeDefine : "",
      parameters.lightMap ? "#define USE_LIGHTMAP" : "",
      parameters.aoMap ? "#define USE_AOMAP" : "",
      parameters.bumpMap ? "#define USE_BUMPMAP" : "",
      parameters.normalMap ? "#define USE_NORMALMAP" : "",
      parameters.normalMapObjectSpace ? "#define USE_NORMALMAP_OBJECTSPACE" : "",
      parameters.normalMapTangentSpace ? "#define USE_NORMALMAP_TANGENTSPACE" : "",
      parameters.displacementMap ? "#define USE_DISPLACEMENTMAP" : "",
      parameters.emissiveMap ? "#define USE_EMISSIVEMAP" : "",
      parameters.anisotropy ? "#define USE_ANISOTROPY" : "",
      parameters.anisotropyMap ? "#define USE_ANISOTROPYMAP" : "",
      parameters.clearcoatMap ? "#define USE_CLEARCOATMAP" : "",
      parameters.clearcoatRoughnessMap ? "#define USE_CLEARCOAT_ROUGHNESSMAP" : "",
      parameters.clearcoatNormalMap ? "#define USE_CLEARCOAT_NORMALMAP" : "",
      parameters.iridescenceMap ? "#define USE_IRIDESCENCEMAP" : "",
      parameters.iridescenceThicknessMap ? "#define USE_IRIDESCENCE_THICKNESSMAP" : "",
      parameters.specularMap ? "#define USE_SPECULARMAP" : "",
      parameters.specularColorMap ? "#define USE_SPECULAR_COLORMAP" : "",
      parameters.specularIntensityMap ? "#define USE_SPECULAR_INTENSITYMAP" : "",
      parameters.roughnessMap ? "#define USE_ROUGHNESSMAP" : "",
      parameters.metalnessMap ? "#define USE_METALNESSMAP" : "",
      parameters.alphaMap ? "#define USE_ALPHAMAP" : "",
      parameters.alphaHash ? "#define USE_ALPHAHASH" : "",
      parameters.transmission ? "#define USE_TRANSMISSION" : "",
      parameters.transmissionMap ? "#define USE_TRANSMISSIONMAP" : "",
      parameters.thicknessMap ? "#define USE_THICKNESSMAP" : "",
      parameters.sheenColorMap ? "#define USE_SHEEN_COLORMAP" : "",
      parameters.sheenRoughnessMap ? "#define USE_SHEEN_ROUGHNESSMAP" : "",
      //
      parameters.mapUv ? "#define MAP_UV " + parameters.mapUv : "",
      parameters.alphaMapUv ? "#define ALPHAMAP_UV " + parameters.alphaMapUv : "",
      parameters.lightMapUv ? "#define LIGHTMAP_UV " + parameters.lightMapUv : "",
      parameters.aoMapUv ? "#define AOMAP_UV " + parameters.aoMapUv : "",
      parameters.emissiveMapUv ? "#define EMISSIVEMAP_UV " + parameters.emissiveMapUv : "",
      parameters.bumpMapUv ? "#define BUMPMAP_UV " + parameters.bumpMapUv : "",
      parameters.normalMapUv ? "#define NORMALMAP_UV " + parameters.normalMapUv : "",
      parameters.displacementMapUv ? "#define DISPLACEMENTMAP_UV " + parameters.displacementMapUv : "",
      parameters.metalnessMapUv ? "#define METALNESSMAP_UV " + parameters.metalnessMapUv : "",
      parameters.roughnessMapUv ? "#define ROUGHNESSMAP_UV " + parameters.roughnessMapUv : "",
      parameters.anisotropyMapUv ? "#define ANISOTROPYMAP_UV " + parameters.anisotropyMapUv : "",
      parameters.clearcoatMapUv ? "#define CLEARCOATMAP_UV " + parameters.clearcoatMapUv : "",
      parameters.clearcoatNormalMapUv ? "#define CLEARCOAT_NORMALMAP_UV " + parameters.clearcoatNormalMapUv : "",
      parameters.clearcoatRoughnessMapUv ? "#define CLEARCOAT_ROUGHNESSMAP_UV " + parameters.clearcoatRoughnessMapUv : "",
      parameters.iridescenceMapUv ? "#define IRIDESCENCEMAP_UV " + parameters.iridescenceMapUv : "",
      parameters.iridescenceThicknessMapUv ? "#define IRIDESCENCE_THICKNESSMAP_UV " + parameters.iridescenceThicknessMapUv : "",
      parameters.sheenColorMapUv ? "#define SHEEN_COLORMAP_UV " + parameters.sheenColorMapUv : "",
      parameters.sheenRoughnessMapUv ? "#define SHEEN_ROUGHNESSMAP_UV " + parameters.sheenRoughnessMapUv : "",
      parameters.specularMapUv ? "#define SPECULARMAP_UV " + parameters.specularMapUv : "",
      parameters.specularColorMapUv ? "#define SPECULAR_COLORMAP_UV " + parameters.specularColorMapUv : "",
      parameters.specularIntensityMapUv ? "#define SPECULAR_INTENSITYMAP_UV " + parameters.specularIntensityMapUv : "",
      parameters.transmissionMapUv ? "#define TRANSMISSIONMAP_UV " + parameters.transmissionMapUv : "",
      parameters.thicknessMapUv ? "#define THICKNESSMAP_UV " + parameters.thicknessMapUv : "",
      //
      parameters.vertexTangents && parameters.flatShading === false ? "#define USE_TANGENT" : "",
      parameters.vertexColors ? "#define USE_COLOR" : "",
      parameters.vertexAlphas ? "#define USE_COLOR_ALPHA" : "",
      parameters.vertexUv1s ? "#define USE_UV1" : "",
      parameters.vertexUv2s ? "#define USE_UV2" : "",
      parameters.vertexUv3s ? "#define USE_UV3" : "",
      parameters.pointsUvs ? "#define USE_POINTS_UV" : "",
      parameters.flatShading ? "#define FLAT_SHADED" : "",
      parameters.skinning ? "#define USE_SKINNING" : "",
      parameters.morphTargets ? "#define USE_MORPHTARGETS" : "",
      parameters.morphNormals && parameters.flatShading === false ? "#define USE_MORPHNORMALS" : "",
      parameters.morphColors ? "#define USE_MORPHCOLORS" : "",
      parameters.morphTargetsCount > 0 ? "#define MORPHTARGETS_TEXTURE_STRIDE " + parameters.morphTextureStride : "",
      parameters.morphTargetsCount > 0 ? "#define MORPHTARGETS_COUNT " + parameters.morphTargetsCount : "",
      parameters.doubleSided ? "#define DOUBLE_SIDED" : "",
      parameters.flipSided ? "#define FLIP_SIDED" : "",
      parameters.shadowMapEnabled ? "#define USE_SHADOWMAP" : "",
      parameters.shadowMapEnabled ? "#define " + shadowMapTypeDefine : "",
      parameters.sizeAttenuation ? "#define USE_SIZEATTENUATION" : "",
      parameters.numLightProbes > 0 ? "#define USE_LIGHT_PROBES" : "",
      parameters.logarithmicDepthBuffer ? "#define USE_LOGDEPTHBUF" : "",
      parameters.reverseDepthBuffer ? "#define USE_REVERSEDEPTHBUF" : "",
      "uniform mat4 modelMatrix;",
      "uniform mat4 modelViewMatrix;",
      "uniform mat4 projectionMatrix;",
      "uniform mat4 viewMatrix;",
      "uniform mat3 normalMatrix;",
      "uniform vec3 cameraPosition;",
      "uniform bool isOrthographic;",
      "#ifdef USE_INSTANCING",
      "	attribute mat4 instanceMatrix;",
      "#endif",
      "#ifdef USE_INSTANCING_COLOR",
      "	attribute vec3 instanceColor;",
      "#endif",
      "#ifdef USE_INSTANCING_MORPH",
      "	uniform sampler2D morphTexture;",
      "#endif",
      "attribute vec3 position;",
      "attribute vec3 normal;",
      "attribute vec2 uv;",
      "#ifdef USE_UV1",
      "	attribute vec2 uv1;",
      "#endif",
      "#ifdef USE_UV2",
      "	attribute vec2 uv2;",
      "#endif",
      "#ifdef USE_UV3",
      "	attribute vec2 uv3;",
      "#endif",
      "#ifdef USE_TANGENT",
      "	attribute vec4 tangent;",
      "#endif",
      "#if defined( USE_COLOR_ALPHA )",
      "	attribute vec4 color;",
      "#elif defined( USE_COLOR )",
      "	attribute vec3 color;",
      "#endif",
      "#ifdef USE_SKINNING",
      "	attribute vec4 skinIndex;",
      "	attribute vec4 skinWeight;",
      "#endif",
      "\n"
    ].filter(filterEmptyLine).join("\n");
    prefixFragment = [
      generatePrecision(parameters),
      "#define SHADER_TYPE " + parameters.shaderType,
      "#define SHADER_NAME " + parameters.shaderName,
      customDefines,
      parameters.useFog && parameters.fog ? "#define USE_FOG" : "",
      parameters.useFog && parameters.fogExp2 ? "#define FOG_EXP2" : "",
      parameters.alphaToCoverage ? "#define ALPHA_TO_COVERAGE" : "",
      parameters.map ? "#define USE_MAP" : "",
      parameters.matcap ? "#define USE_MATCAP" : "",
      parameters.envMap ? "#define USE_ENVMAP" : "",
      parameters.envMap ? "#define " + envMapTypeDefine : "",
      parameters.envMap ? "#define " + envMapModeDefine : "",
      parameters.envMap ? "#define " + envMapBlendingDefine : "",
      envMapCubeUVSize ? "#define CUBEUV_TEXEL_WIDTH " + envMapCubeUVSize.texelWidth : "",
      envMapCubeUVSize ? "#define CUBEUV_TEXEL_HEIGHT " + envMapCubeUVSize.texelHeight : "",
      envMapCubeUVSize ? "#define CUBEUV_MAX_MIP " + envMapCubeUVSize.maxMip + ".0" : "",
      parameters.lightMap ? "#define USE_LIGHTMAP" : "",
      parameters.aoMap ? "#define USE_AOMAP" : "",
      parameters.bumpMap ? "#define USE_BUMPMAP" : "",
      parameters.normalMap ? "#define USE_NORMALMAP" : "",
      parameters.normalMapObjectSpace ? "#define USE_NORMALMAP_OBJECTSPACE" : "",
      parameters.normalMapTangentSpace ? "#define USE_NORMALMAP_TANGENTSPACE" : "",
      parameters.emissiveMap ? "#define USE_EMISSIVEMAP" : "",
      parameters.anisotropy ? "#define USE_ANISOTROPY" : "",
      parameters.anisotropyMap ? "#define USE_ANISOTROPYMAP" : "",
      parameters.clearcoat ? "#define USE_CLEARCOAT" : "",
      parameters.clearcoatMap ? "#define USE_CLEARCOATMAP" : "",
      parameters.clearcoatRoughnessMap ? "#define USE_CLEARCOAT_ROUGHNESSMAP" : "",
      parameters.clearcoatNormalMap ? "#define USE_CLEARCOAT_NORMALMAP" : "",
      parameters.dispersion ? "#define USE_DISPERSION" : "",
      parameters.iridescence ? "#define USE_IRIDESCENCE" : "",
      parameters.iridescenceMap ? "#define USE_IRIDESCENCEMAP" : "",
      parameters.iridescenceThicknessMap ? "#define USE_IRIDESCENCE_THICKNESSMAP" : "",
      parameters.specularMap ? "#define USE_SPECULARMAP" : "",
      parameters.specularColorMap ? "#define USE_SPECULAR_COLORMAP" : "",
      parameters.specularIntensityMap ? "#define USE_SPECULAR_INTENSITYMAP" : "",
      parameters.roughnessMap ? "#define USE_ROUGHNESSMAP" : "",
      parameters.metalnessMap ? "#define USE_METALNESSMAP" : "",
      parameters.alphaMap ? "#define USE_ALPHAMAP" : "",
      parameters.alphaTest ? "#define USE_ALPHATEST" : "",
      parameters.alphaHash ? "#define USE_ALPHAHASH" : "",
      parameters.sheen ? "#define USE_SHEEN" : "",
      parameters.sheenColorMap ? "#define USE_SHEEN_COLORMAP" : "",
      parameters.sheenRoughnessMap ? "#define USE_SHEEN_ROUGHNESSMAP" : "",
      parameters.transmission ? "#define USE_TRANSMISSION" : "",
      parameters.transmissionMap ? "#define USE_TRANSMISSIONMAP" : "",
      parameters.thicknessMap ? "#define USE_THICKNESSMAP" : "",
      parameters.vertexTangents && parameters.flatShading === false ? "#define USE_TANGENT" : "",
      parameters.vertexColors || parameters.instancingColor || parameters.batchingColor ? "#define USE_COLOR" : "",
      parameters.vertexAlphas ? "#define USE_COLOR_ALPHA" : "",
      parameters.vertexUv1s ? "#define USE_UV1" : "",
      parameters.vertexUv2s ? "#define USE_UV2" : "",
      parameters.vertexUv3s ? "#define USE_UV3" : "",
      parameters.pointsUvs ? "#define USE_POINTS_UV" : "",
      parameters.gradientMap ? "#define USE_GRADIENTMAP" : "",
      parameters.flatShading ? "#define FLAT_SHADED" : "",
      parameters.doubleSided ? "#define DOUBLE_SIDED" : "",
      parameters.flipSided ? "#define FLIP_SIDED" : "",
      parameters.shadowMapEnabled ? "#define USE_SHADOWMAP" : "",
      parameters.shadowMapEnabled ? "#define " + shadowMapTypeDefine : "",
      parameters.premultipliedAlpha ? "#define PREMULTIPLIED_ALPHA" : "",
      parameters.numLightProbes > 0 ? "#define USE_LIGHT_PROBES" : "",
      parameters.decodeVideoTexture ? "#define DECODE_VIDEO_TEXTURE" : "",
      parameters.logarithmicDepthBuffer ? "#define USE_LOGDEPTHBUF" : "",
      parameters.reverseDepthBuffer ? "#define USE_REVERSEDEPTHBUF" : "",
      "uniform mat4 viewMatrix;",
      "uniform vec3 cameraPosition;",
      "uniform bool isOrthographic;",
      parameters.toneMapping !== NoToneMapping ? "#define TONE_MAPPING" : "",
      parameters.toneMapping !== NoToneMapping ? ShaderChunk["tonemapping_pars_fragment"] : "",
      // this code is required here because it is used by the toneMapping() function defined below
      parameters.toneMapping !== NoToneMapping ? getToneMappingFunction("toneMapping", parameters.toneMapping) : "",
      parameters.dithering ? "#define DITHERING" : "",
      parameters.opaque ? "#define OPAQUE" : "",
      ShaderChunk["colorspace_pars_fragment"],
      // this code is required here because it is used by the various encoding/decoding function defined below
      getTexelEncodingFunction("linearToOutputTexel", parameters.outputColorSpace),
      getLuminanceFunction(),
      parameters.useDepthPacking ? "#define DEPTH_PACKING " + parameters.depthPacking : "",
      "\n"
    ].filter(filterEmptyLine).join("\n");
  }
  vertexShader = resolveIncludes(vertexShader);
  vertexShader = replaceLightNums(vertexShader, parameters);
  vertexShader = replaceClippingPlaneNums(vertexShader, parameters);
  fragmentShader = resolveIncludes(fragmentShader);
  fragmentShader = replaceLightNums(fragmentShader, parameters);
  fragmentShader = replaceClippingPlaneNums(fragmentShader, parameters);
  vertexShader = unrollLoops(vertexShader);
  fragmentShader = unrollLoops(fragmentShader);
  if (parameters.isRawShaderMaterial !== true) {
    versionString = "#version 300 es\n";
    prefixVertex = [
      customVertexExtensions,
      "#define attribute in",
      "#define varying out",
      "#define texture2D texture"
    ].join("\n") + "\n" + prefixVertex;
    prefixFragment = [
      "#define varying in",
      parameters.glslVersion === GLSL3 ? "" : "layout(location = 0) out highp vec4 pc_fragColor;",
      parameters.glslVersion === GLSL3 ? "" : "#define gl_FragColor pc_fragColor",
      "#define gl_FragDepthEXT gl_FragDepth",
      "#define texture2D texture",
      "#define textureCube texture",
      "#define texture2DProj textureProj",
      "#define texture2DLodEXT textureLod",
      "#define texture2DProjLodEXT textureProjLod",
      "#define textureCubeLodEXT textureLod",
      "#define texture2DGradEXT textureGrad",
      "#define texture2DProjGradEXT textureProjGrad",
      "#define textureCubeGradEXT textureGrad"
    ].join("\n") + "\n" + prefixFragment;
  }
  const vertexGlsl = versionString + prefixVertex + vertexShader;
  const fragmentGlsl = versionString + prefixFragment + fragmentShader;
  const glVertexShader = WebGLShader(gl2, gl2.VERTEX_SHADER, vertexGlsl);
  const glFragmentShader = WebGLShader(gl2, gl2.FRAGMENT_SHADER, fragmentGlsl);
  gl2.attachShader(program, glVertexShader);
  gl2.attachShader(program, glFragmentShader);
  if (parameters.index0AttributeName !== void 0) {
    gl2.bindAttribLocation(program, 0, parameters.index0AttributeName);
  } else if (parameters.morphTargets === true) {
    gl2.bindAttribLocation(program, 0, "position");
  }
  gl2.linkProgram(program);
  function onFirstUse(self2) {
    if (renderer2.debug.checkShaderErrors) {
      const programLog = gl2.getProgramInfoLog(program).trim();
      const vertexLog = gl2.getShaderInfoLog(glVertexShader).trim();
      const fragmentLog = gl2.getShaderInfoLog(glFragmentShader).trim();
      let runnable = true;
      let haveDiagnostics = true;
      if (gl2.getProgramParameter(program, gl2.LINK_STATUS) === false) {
        runnable = false;
        if (typeof renderer2.debug.onShaderError === "function") {
          renderer2.debug.onShaderError(gl2, program, glVertexShader, glFragmentShader);
        } else {
          const vertexErrors = getShaderErrors(gl2, glVertexShader, "vertex");
          const fragmentErrors = getShaderErrors(gl2, glFragmentShader, "fragment");
          console.error(
            "THREE.WebGLProgram: Shader Error " + gl2.getError() + " - VALIDATE_STATUS " + gl2.getProgramParameter(program, gl2.VALIDATE_STATUS) + "\n\nMaterial Name: " + self2.name + "\nMaterial Type: " + self2.type + "\n\nProgram Info Log: " + programLog + "\n" + vertexErrors + "\n" + fragmentErrors
          );
        }
      } else if (programLog !== "") {
        console.warn("THREE.WebGLProgram: Program Info Log:", programLog);
      } else if (vertexLog === "" || fragmentLog === "") {
        haveDiagnostics = false;
      }
      if (haveDiagnostics) {
        self2.diagnostics = {
          runnable,
          programLog,
          vertexShader: {
            log: vertexLog,
            prefix: prefixVertex
          },
          fragmentShader: {
            log: fragmentLog,
            prefix: prefixFragment
          }
        };
      }
    }
    gl2.deleteShader(glVertexShader);
    gl2.deleteShader(glFragmentShader);
    cachedUniforms = new WebGLUniforms(gl2, program);
    cachedAttributes = fetchAttributeLocations(gl2, program);
  }
  let cachedUniforms;
  this.getUniforms = function() {
    if (cachedUniforms === void 0) {
      onFirstUse(this);
    }
    return cachedUniforms;
  };
  let cachedAttributes;
  this.getAttributes = function() {
    if (cachedAttributes === void 0) {
      onFirstUse(this);
    }
    return cachedAttributes;
  };
  let programReady = parameters.rendererExtensionParallelShaderCompile === false;
  this.isReady = function() {
    if (programReady === false) {
      programReady = gl2.getProgramParameter(program, COMPLETION_STATUS_KHR);
    }
    return programReady;
  };
  this.destroy = function() {
    bindingStates.releaseStatesOfProgram(this);
    gl2.deleteProgram(program);
    this.program = void 0;
  };
  this.type = parameters.shaderType;
  this.name = parameters.shaderName;
  this.id = programIdCount++;
  this.cacheKey = cacheKey;
  this.usedTimes = 1;
  this.program = program;
  this.vertexShader = glVertexShader;
  this.fragmentShader = glFragmentShader;
  return this;
}
let _id$1 = 0;
class WebGLShaderCache {
  constructor() {
    this.shaderCache = /* @__PURE__ */ new Map();
    this.materialCache = /* @__PURE__ */ new Map();
  }
  update(material) {
    const vertexShader = material.vertexShader;
    const fragmentShader = material.fragmentShader;
    const vertexShaderStage = this._getShaderStage(vertexShader);
    const fragmentShaderStage = this._getShaderStage(fragmentShader);
    const materialShaders = this._getShaderCacheForMaterial(material);
    if (materialShaders.has(vertexShaderStage) === false) {
      materialShaders.add(vertexShaderStage);
      vertexShaderStage.usedTimes++;
    }
    if (materialShaders.has(fragmentShaderStage) === false) {
      materialShaders.add(fragmentShaderStage);
      fragmentShaderStage.usedTimes++;
    }
    return this;
  }
  remove(material) {
    const materialShaders = this.materialCache.get(material);
    for (const shaderStage of materialShaders) {
      shaderStage.usedTimes--;
      if (shaderStage.usedTimes === 0) this.shaderCache.delete(shaderStage.code);
    }
    this.materialCache.delete(material);
    return this;
  }
  getVertexShaderID(material) {
    return this._getShaderStage(material.vertexShader).id;
  }
  getFragmentShaderID(material) {
    return this._getShaderStage(material.fragmentShader).id;
  }
  dispose() {
    this.shaderCache.clear();
    this.materialCache.clear();
  }
  _getShaderCacheForMaterial(material) {
    const cache = this.materialCache;
    let set2 = cache.get(material);
    if (set2 === void 0) {
      set2 = /* @__PURE__ */ new Set();
      cache.set(material, set2);
    }
    return set2;
  }
  _getShaderStage(code) {
    const cache = this.shaderCache;
    let stage = cache.get(code);
    if (stage === void 0) {
      stage = new WebGLShaderStage(code);
      cache.set(code, stage);
    }
    return stage;
  }
}
class WebGLShaderStage {
  constructor(code) {
    this.id = _id$1++;
    this.code = code;
    this.usedTimes = 0;
  }
}
function WebGLPrograms(renderer2, cubemaps, cubeuvmaps, extensions, capabilities, bindingStates, clipping) {
  const _programLayers = new Layers();
  const _customShaders = new WebGLShaderCache();
  const _activeChannels = /* @__PURE__ */ new Set();
  const programs = [];
  const logarithmicDepthBuffer = capabilities.logarithmicDepthBuffer;
  const reverseDepthBuffer = capabilities.reverseDepthBuffer;
  const SUPPORTS_VERTEX_TEXTURES = capabilities.vertexTextures;
  let precision = capabilities.precision;
  const shaderIDs = {
    MeshDepthMaterial: "depth",
    MeshDistanceMaterial: "distanceRGBA",
    MeshNormalMaterial: "normal",
    MeshBasicMaterial: "basic",
    MeshLambertMaterial: "lambert",
    MeshPhongMaterial: "phong",
    MeshToonMaterial: "toon",
    MeshStandardMaterial: "physical",
    MeshPhysicalMaterial: "physical",
    MeshMatcapMaterial: "matcap",
    LineBasicMaterial: "basic",
    LineDashedMaterial: "dashed",
    PointsMaterial: "points",
    ShadowMaterial: "shadow",
    SpriteMaterial: "sprite"
  };
  function getChannel(value) {
    _activeChannels.add(value);
    if (value === 0) return "uv";
    return `uv${value}`;
  }
  function getParameters(material, lights, shadows, scene, object) {
    const fog = scene.fog;
    const geometry = object.geometry;
    const environment = material.isMeshStandardMaterial ? scene.environment : null;
    const envMap = (material.isMeshStandardMaterial ? cubeuvmaps : cubemaps).get(material.envMap || environment);
    const envMapCubeUVHeight = !!envMap && envMap.mapping === CubeUVReflectionMapping ? envMap.image.height : null;
    const shaderID = shaderIDs[material.type];
    if (material.precision !== null) {
      precision = capabilities.getMaxPrecision(material.precision);
      if (precision !== material.precision) {
        console.warn("THREE.WebGLProgram.getParameters:", material.precision, "not supported, using", precision, "instead.");
      }
    }
    const morphAttribute = geometry.morphAttributes.position || geometry.morphAttributes.normal || geometry.morphAttributes.color;
    const morphTargetsCount = morphAttribute !== void 0 ? morphAttribute.length : 0;
    let morphTextureStride = 0;
    if (geometry.morphAttributes.position !== void 0) morphTextureStride = 1;
    if (geometry.morphAttributes.normal !== void 0) morphTextureStride = 2;
    if (geometry.morphAttributes.color !== void 0) morphTextureStride = 3;
    let vertexShader, fragmentShader;
    let customVertexShaderID, customFragmentShaderID;
    if (shaderID) {
      const shader = ShaderLib[shaderID];
      vertexShader = shader.vertexShader;
      fragmentShader = shader.fragmentShader;
    } else {
      vertexShader = material.vertexShader;
      fragmentShader = material.fragmentShader;
      _customShaders.update(material);
      customVertexShaderID = _customShaders.getVertexShaderID(material);
      customFragmentShaderID = _customShaders.getFragmentShaderID(material);
    }
    const currentRenderTarget = renderer2.getRenderTarget();
    const IS_INSTANCEDMESH = object.isInstancedMesh === true;
    const IS_BATCHEDMESH = object.isBatchedMesh === true;
    const HAS_MAP = !!material.map;
    const HAS_MATCAP = !!material.matcap;
    const HAS_ENVMAP = !!envMap;
    const HAS_AOMAP = !!material.aoMap;
    const HAS_LIGHTMAP = !!material.lightMap;
    const HAS_BUMPMAP = !!material.bumpMap;
    const HAS_NORMALMAP = !!material.normalMap;
    const HAS_DISPLACEMENTMAP = !!material.displacementMap;
    const HAS_EMISSIVEMAP = !!material.emissiveMap;
    const HAS_METALNESSMAP = !!material.metalnessMap;
    const HAS_ROUGHNESSMAP = !!material.roughnessMap;
    const HAS_ANISOTROPY = material.anisotropy > 0;
    const HAS_CLEARCOAT = material.clearcoat > 0;
    const HAS_DISPERSION = material.dispersion > 0;
    const HAS_IRIDESCENCE = material.iridescence > 0;
    const HAS_SHEEN = material.sheen > 0;
    const HAS_TRANSMISSION = material.transmission > 0;
    const HAS_ANISOTROPYMAP = HAS_ANISOTROPY && !!material.anisotropyMap;
    const HAS_CLEARCOATMAP = HAS_CLEARCOAT && !!material.clearcoatMap;
    const HAS_CLEARCOAT_NORMALMAP = HAS_CLEARCOAT && !!material.clearcoatNormalMap;
    const HAS_CLEARCOAT_ROUGHNESSMAP = HAS_CLEARCOAT && !!material.clearcoatRoughnessMap;
    const HAS_IRIDESCENCEMAP = HAS_IRIDESCENCE && !!material.iridescenceMap;
    const HAS_IRIDESCENCE_THICKNESSMAP = HAS_IRIDESCENCE && !!material.iridescenceThicknessMap;
    const HAS_SHEEN_COLORMAP = HAS_SHEEN && !!material.sheenColorMap;
    const HAS_SHEEN_ROUGHNESSMAP = HAS_SHEEN && !!material.sheenRoughnessMap;
    const HAS_SPECULARMAP = !!material.specularMap;
    const HAS_SPECULAR_COLORMAP = !!material.specularColorMap;
    const HAS_SPECULAR_INTENSITYMAP = !!material.specularIntensityMap;
    const HAS_TRANSMISSIONMAP = HAS_TRANSMISSION && !!material.transmissionMap;
    const HAS_THICKNESSMAP = HAS_TRANSMISSION && !!material.thicknessMap;
    const HAS_GRADIENTMAP = !!material.gradientMap;
    const HAS_ALPHAMAP = !!material.alphaMap;
    const HAS_ALPHATEST = material.alphaTest > 0;
    const HAS_ALPHAHASH = !!material.alphaHash;
    const HAS_EXTENSIONS = !!material.extensions;
    let toneMapping = NoToneMapping;
    if (material.toneMapped) {
      if (currentRenderTarget === null || currentRenderTarget.isXRRenderTarget === true) {
        toneMapping = renderer2.toneMapping;
      }
    }
    const parameters = {
      shaderID,
      shaderType: material.type,
      shaderName: material.name,
      vertexShader,
      fragmentShader,
      defines: material.defines,
      customVertexShaderID,
      customFragmentShaderID,
      isRawShaderMaterial: material.isRawShaderMaterial === true,
      glslVersion: material.glslVersion,
      precision,
      batching: IS_BATCHEDMESH,
      batchingColor: IS_BATCHEDMESH && object._colorsTexture !== null,
      instancing: IS_INSTANCEDMESH,
      instancingColor: IS_INSTANCEDMESH && object.instanceColor !== null,
      instancingMorph: IS_INSTANCEDMESH && object.morphTexture !== null,
      supportsVertexTextures: SUPPORTS_VERTEX_TEXTURES,
      outputColorSpace: currentRenderTarget === null ? renderer2.outputColorSpace : currentRenderTarget.isXRRenderTarget === true ? currentRenderTarget.texture.colorSpace : LinearSRGBColorSpace,
      alphaToCoverage: !!material.alphaToCoverage,
      map: HAS_MAP,
      matcap: HAS_MATCAP,
      envMap: HAS_ENVMAP,
      envMapMode: HAS_ENVMAP && envMap.mapping,
      envMapCubeUVHeight,
      aoMap: HAS_AOMAP,
      lightMap: HAS_LIGHTMAP,
      bumpMap: HAS_BUMPMAP,
      normalMap: HAS_NORMALMAP,
      displacementMap: SUPPORTS_VERTEX_TEXTURES && HAS_DISPLACEMENTMAP,
      emissiveMap: HAS_EMISSIVEMAP,
      normalMapObjectSpace: HAS_NORMALMAP && material.normalMapType === ObjectSpaceNormalMap,
      normalMapTangentSpace: HAS_NORMALMAP && material.normalMapType === TangentSpaceNormalMap,
      metalnessMap: HAS_METALNESSMAP,
      roughnessMap: HAS_ROUGHNESSMAP,
      anisotropy: HAS_ANISOTROPY,
      anisotropyMap: HAS_ANISOTROPYMAP,
      clearcoat: HAS_CLEARCOAT,
      clearcoatMap: HAS_CLEARCOATMAP,
      clearcoatNormalMap: HAS_CLEARCOAT_NORMALMAP,
      clearcoatRoughnessMap: HAS_CLEARCOAT_ROUGHNESSMAP,
      dispersion: HAS_DISPERSION,
      iridescence: HAS_IRIDESCENCE,
      iridescenceMap: HAS_IRIDESCENCEMAP,
      iridescenceThicknessMap: HAS_IRIDESCENCE_THICKNESSMAP,
      sheen: HAS_SHEEN,
      sheenColorMap: HAS_SHEEN_COLORMAP,
      sheenRoughnessMap: HAS_SHEEN_ROUGHNESSMAP,
      specularMap: HAS_SPECULARMAP,
      specularColorMap: HAS_SPECULAR_COLORMAP,
      specularIntensityMap: HAS_SPECULAR_INTENSITYMAP,
      transmission: HAS_TRANSMISSION,
      transmissionMap: HAS_TRANSMISSIONMAP,
      thicknessMap: HAS_THICKNESSMAP,
      gradientMap: HAS_GRADIENTMAP,
      opaque: material.transparent === false && material.blending === NormalBlending && material.alphaToCoverage === false,
      alphaMap: HAS_ALPHAMAP,
      alphaTest: HAS_ALPHATEST,
      alphaHash: HAS_ALPHAHASH,
      combine: material.combine,
      //
      mapUv: HAS_MAP && getChannel(material.map.channel),
      aoMapUv: HAS_AOMAP && getChannel(material.aoMap.channel),
      lightMapUv: HAS_LIGHTMAP && getChannel(material.lightMap.channel),
      bumpMapUv: HAS_BUMPMAP && getChannel(material.bumpMap.channel),
      normalMapUv: HAS_NORMALMAP && getChannel(material.normalMap.channel),
      displacementMapUv: HAS_DISPLACEMENTMAP && getChannel(material.displacementMap.channel),
      emissiveMapUv: HAS_EMISSIVEMAP && getChannel(material.emissiveMap.channel),
      metalnessMapUv: HAS_METALNESSMAP && getChannel(material.metalnessMap.channel),
      roughnessMapUv: HAS_ROUGHNESSMAP && getChannel(material.roughnessMap.channel),
      anisotropyMapUv: HAS_ANISOTROPYMAP && getChannel(material.anisotropyMap.channel),
      clearcoatMapUv: HAS_CLEARCOATMAP && getChannel(material.clearcoatMap.channel),
      clearcoatNormalMapUv: HAS_CLEARCOAT_NORMALMAP && getChannel(material.clearcoatNormalMap.channel),
      clearcoatRoughnessMapUv: HAS_CLEARCOAT_ROUGHNESSMAP && getChannel(material.clearcoatRoughnessMap.channel),
      iridescenceMapUv: HAS_IRIDESCENCEMAP && getChannel(material.iridescenceMap.channel),
      iridescenceThicknessMapUv: HAS_IRIDESCENCE_THICKNESSMAP && getChannel(material.iridescenceThicknessMap.channel),
      sheenColorMapUv: HAS_SHEEN_COLORMAP && getChannel(material.sheenColorMap.channel),
      sheenRoughnessMapUv: HAS_SHEEN_ROUGHNESSMAP && getChannel(material.sheenRoughnessMap.channel),
      specularMapUv: HAS_SPECULARMAP && getChannel(material.specularMap.channel),
      specularColorMapUv: HAS_SPECULAR_COLORMAP && getChannel(material.specularColorMap.channel),
      specularIntensityMapUv: HAS_SPECULAR_INTENSITYMAP && getChannel(material.specularIntensityMap.channel),
      transmissionMapUv: HAS_TRANSMISSIONMAP && getChannel(material.transmissionMap.channel),
      thicknessMapUv: HAS_THICKNESSMAP && getChannel(material.thicknessMap.channel),
      alphaMapUv: HAS_ALPHAMAP && getChannel(material.alphaMap.channel),
      //
      vertexTangents: !!geometry.attributes.tangent && (HAS_NORMALMAP || HAS_ANISOTROPY),
      vertexColors: material.vertexColors,
      vertexAlphas: material.vertexColors === true && !!geometry.attributes.color && geometry.attributes.color.itemSize === 4,
      pointsUvs: object.isPoints === true && !!geometry.attributes.uv && (HAS_MAP || HAS_ALPHAMAP),
      fog: !!fog,
      useFog: material.fog === true,
      fogExp2: !!fog && fog.isFogExp2,
      flatShading: material.flatShading === true,
      sizeAttenuation: material.sizeAttenuation === true,
      logarithmicDepthBuffer,
      reverseDepthBuffer,
      skinning: object.isSkinnedMesh === true,
      morphTargets: geometry.morphAttributes.position !== void 0,
      morphNormals: geometry.morphAttributes.normal !== void 0,
      morphColors: geometry.morphAttributes.color !== void 0,
      morphTargetsCount,
      morphTextureStride,
      numDirLights: lights.directional.length,
      numPointLights: lights.point.length,
      numSpotLights: lights.spot.length,
      numSpotLightMaps: lights.spotLightMap.length,
      numRectAreaLights: lights.rectArea.length,
      numHemiLights: lights.hemi.length,
      numDirLightShadows: lights.directionalShadowMap.length,
      numPointLightShadows: lights.pointShadowMap.length,
      numSpotLightShadows: lights.spotShadowMap.length,
      numSpotLightShadowsWithMaps: lights.numSpotLightShadowsWithMaps,
      numLightProbes: lights.numLightProbes,
      numClippingPlanes: clipping.numPlanes,
      numClipIntersection: clipping.numIntersection,
      dithering: material.dithering,
      shadowMapEnabled: renderer2.shadowMap.enabled && shadows.length > 0,
      shadowMapType: renderer2.shadowMap.type,
      toneMapping,
      decodeVideoTexture: HAS_MAP && material.map.isVideoTexture === true && ColorManagement.getTransfer(material.map.colorSpace) === SRGBTransfer,
      premultipliedAlpha: material.premultipliedAlpha,
      doubleSided: material.side === DoubleSide,
      flipSided: material.side === BackSide,
      useDepthPacking: material.depthPacking >= 0,
      depthPacking: material.depthPacking || 0,
      index0AttributeName: material.index0AttributeName,
      extensionClipCullDistance: HAS_EXTENSIONS && material.extensions.clipCullDistance === true && extensions.has("WEBGL_clip_cull_distance"),
      extensionMultiDraw: (HAS_EXTENSIONS && material.extensions.multiDraw === true || IS_BATCHEDMESH) && extensions.has("WEBGL_multi_draw"),
      rendererExtensionParallelShaderCompile: extensions.has("KHR_parallel_shader_compile"),
      customProgramCacheKey: material.customProgramCacheKey()
    };
    parameters.vertexUv1s = _activeChannels.has(1);
    parameters.vertexUv2s = _activeChannels.has(2);
    parameters.vertexUv3s = _activeChannels.has(3);
    _activeChannels.clear();
    return parameters;
  }
  function getProgramCacheKey(parameters) {
    const array = [];
    if (parameters.shaderID) {
      array.push(parameters.shaderID);
    } else {
      array.push(parameters.customVertexShaderID);
      array.push(parameters.customFragmentShaderID);
    }
    if (parameters.defines !== void 0) {
      for (const name2 in parameters.defines) {
        array.push(name2);
        array.push(parameters.defines[name2]);
      }
    }
    if (parameters.isRawShaderMaterial === false) {
      getProgramCacheKeyParameters(array, parameters);
      getProgramCacheKeyBooleans(array, parameters);
      array.push(renderer2.outputColorSpace);
    }
    array.push(parameters.customProgramCacheKey);
    return array.join();
  }
  function getProgramCacheKeyParameters(array, parameters) {
    array.push(parameters.precision);
    array.push(parameters.outputColorSpace);
    array.push(parameters.envMapMode);
    array.push(parameters.envMapCubeUVHeight);
    array.push(parameters.mapUv);
    array.push(parameters.alphaMapUv);
    array.push(parameters.lightMapUv);
    array.push(parameters.aoMapUv);
    array.push(parameters.bumpMapUv);
    array.push(parameters.normalMapUv);
    array.push(parameters.displacementMapUv);
    array.push(parameters.emissiveMapUv);
    array.push(parameters.metalnessMapUv);
    array.push(parameters.roughnessMapUv);
    array.push(parameters.anisotropyMapUv);
    array.push(parameters.clearcoatMapUv);
    array.push(parameters.clearcoatNormalMapUv);
    array.push(parameters.clearcoatRoughnessMapUv);
    array.push(parameters.iridescenceMapUv);
    array.push(parameters.iridescenceThicknessMapUv);
    array.push(parameters.sheenColorMapUv);
    array.push(parameters.sheenRoughnessMapUv);
    array.push(parameters.specularMapUv);
    array.push(parameters.specularColorMapUv);
    array.push(parameters.specularIntensityMapUv);
    array.push(parameters.transmissionMapUv);
    array.push(parameters.thicknessMapUv);
    array.push(parameters.combine);
    array.push(parameters.fogExp2);
    array.push(parameters.sizeAttenuation);
    array.push(parameters.morphTargetsCount);
    array.push(parameters.morphAttributeCount);
    array.push(parameters.numDirLights);
    array.push(parameters.numPointLights);
    array.push(parameters.numSpotLights);
    array.push(parameters.numSpotLightMaps);
    array.push(parameters.numHemiLights);
    array.push(parameters.numRectAreaLights);
    array.push(parameters.numDirLightShadows);
    array.push(parameters.numPointLightShadows);
    array.push(parameters.numSpotLightShadows);
    array.push(parameters.numSpotLightShadowsWithMaps);
    array.push(parameters.numLightProbes);
    array.push(parameters.shadowMapType);
    array.push(parameters.toneMapping);
    array.push(parameters.numClippingPlanes);
    array.push(parameters.numClipIntersection);
    array.push(parameters.depthPacking);
  }
  function getProgramCacheKeyBooleans(array, parameters) {
    _programLayers.disableAll();
    if (parameters.supportsVertexTextures)
      _programLayers.enable(0);
    if (parameters.instancing)
      _programLayers.enable(1);
    if (parameters.instancingColor)
      _programLayers.enable(2);
    if (parameters.instancingMorph)
      _programLayers.enable(3);
    if (parameters.matcap)
      _programLayers.enable(4);
    if (parameters.envMap)
      _programLayers.enable(5);
    if (parameters.normalMapObjectSpace)
      _programLayers.enable(6);
    if (parameters.normalMapTangentSpace)
      _programLayers.enable(7);
    if (parameters.clearcoat)
      _programLayers.enable(8);
    if (parameters.iridescence)
      _programLayers.enable(9);
    if (parameters.alphaTest)
      _programLayers.enable(10);
    if (parameters.vertexColors)
      _programLayers.enable(11);
    if (parameters.vertexAlphas)
      _programLayers.enable(12);
    if (parameters.vertexUv1s)
      _programLayers.enable(13);
    if (parameters.vertexUv2s)
      _programLayers.enable(14);
    if (parameters.vertexUv3s)
      _programLayers.enable(15);
    if (parameters.vertexTangents)
      _programLayers.enable(16);
    if (parameters.anisotropy)
      _programLayers.enable(17);
    if (parameters.alphaHash)
      _programLayers.enable(18);
    if (parameters.batching)
      _programLayers.enable(19);
    if (parameters.dispersion)
      _programLayers.enable(20);
    if (parameters.batchingColor)
      _programLayers.enable(21);
    array.push(_programLayers.mask);
    _programLayers.disableAll();
    if (parameters.fog)
      _programLayers.enable(0);
    if (parameters.useFog)
      _programLayers.enable(1);
    if (parameters.flatShading)
      _programLayers.enable(2);
    if (parameters.logarithmicDepthBuffer)
      _programLayers.enable(3);
    if (parameters.reverseDepthBuffer)
      _programLayers.enable(4);
    if (parameters.skinning)
      _programLayers.enable(5);
    if (parameters.morphTargets)
      _programLayers.enable(6);
    if (parameters.morphNormals)
      _programLayers.enable(7);
    if (parameters.morphColors)
      _programLayers.enable(8);
    if (parameters.premultipliedAlpha)
      _programLayers.enable(9);
    if (parameters.shadowMapEnabled)
      _programLayers.enable(10);
    if (parameters.doubleSided)
      _programLayers.enable(11);
    if (parameters.flipSided)
      _programLayers.enable(12);
    if (parameters.useDepthPacking)
      _programLayers.enable(13);
    if (parameters.dithering)
      _programLayers.enable(14);
    if (parameters.transmission)
      _programLayers.enable(15);
    if (parameters.sheen)
      _programLayers.enable(16);
    if (parameters.opaque)
      _programLayers.enable(17);
    if (parameters.pointsUvs)
      _programLayers.enable(18);
    if (parameters.decodeVideoTexture)
      _programLayers.enable(19);
    if (parameters.alphaToCoverage)
      _programLayers.enable(20);
    array.push(_programLayers.mask);
  }
  function getUniforms(material) {
    const shaderID = shaderIDs[material.type];
    let uniforms;
    if (shaderID) {
      const shader = ShaderLib[shaderID];
      uniforms = UniformsUtils.clone(shader.uniforms);
    } else {
      uniforms = material.uniforms;
    }
    return uniforms;
  }
  function acquireProgram(parameters, cacheKey) {
    let program;
    for (let p2 = 0, pl2 = programs.length; p2 < pl2; p2++) {
      const preexistingProgram = programs[p2];
      if (preexistingProgram.cacheKey === cacheKey) {
        program = preexistingProgram;
        ++program.usedTimes;
        break;
      }
    }
    if (program === void 0) {
      program = new WebGLProgram(renderer2, cacheKey, parameters, bindingStates);
      programs.push(program);
    }
    return program;
  }
  function releaseProgram(program) {
    if (--program.usedTimes === 0) {
      const i = programs.indexOf(program);
      programs[i] = programs[programs.length - 1];
      programs.pop();
      program.destroy();
    }
  }
  function releaseShaderCache(material) {
    _customShaders.remove(material);
  }
  function dispose() {
    _customShaders.dispose();
  }
  return {
    getParameters,
    getProgramCacheKey,
    getUniforms,
    acquireProgram,
    releaseProgram,
    releaseShaderCache,
    // Exposed for resource monitoring & error feedback via renderer.info:
    programs,
    dispose
  };
}
function WebGLProperties() {
  let properties = /* @__PURE__ */ new WeakMap();
  function has2(object) {
    return properties.has(object);
  }
  function get2(object) {
    let map = properties.get(object);
    if (map === void 0) {
      map = {};
      properties.set(object, map);
    }
    return map;
  }
  function remove2(object) {
    properties.delete(object);
  }
  function update(object, key, value) {
    properties.get(object)[key] = value;
  }
  function dispose() {
    properties = /* @__PURE__ */ new WeakMap();
  }
  return {
    has: has2,
    get: get2,
    remove: remove2,
    update,
    dispose
  };
}
function painterSortStable(a, b) {
  if (a.groupOrder !== b.groupOrder) {
    return a.groupOrder - b.groupOrder;
  } else if (a.renderOrder !== b.renderOrder) {
    return a.renderOrder - b.renderOrder;
  } else if (a.material.id !== b.material.id) {
    return a.material.id - b.material.id;
  } else if (a.z !== b.z) {
    return a.z - b.z;
  } else {
    return a.id - b.id;
  }
}
function reversePainterSortStable(a, b) {
  if (a.groupOrder !== b.groupOrder) {
    return a.groupOrder - b.groupOrder;
  } else if (a.renderOrder !== b.renderOrder) {
    return a.renderOrder - b.renderOrder;
  } else if (a.z !== b.z) {
    return b.z - a.z;
  } else {
    return a.id - b.id;
  }
}
function WebGLRenderList() {
  const renderItems = [];
  let renderItemsIndex = 0;
  const opaque = [];
  const transmissive = [];
  const transparent = [];
  function init() {
    renderItemsIndex = 0;
    opaque.length = 0;
    transmissive.length = 0;
    transparent.length = 0;
  }
  function getNextRenderItem(object, geometry, material, groupOrder, z2, group) {
    let renderItem = renderItems[renderItemsIndex];
    if (renderItem === void 0) {
      renderItem = {
        id: object.id,
        object,
        geometry,
        material,
        groupOrder,
        renderOrder: object.renderOrder,
        z: z2,
        group
      };
      renderItems[renderItemsIndex] = renderItem;
    } else {
      renderItem.id = object.id;
      renderItem.object = object;
      renderItem.geometry = geometry;
      renderItem.material = material;
      renderItem.groupOrder = groupOrder;
      renderItem.renderOrder = object.renderOrder;
      renderItem.z = z2;
      renderItem.group = group;
    }
    renderItemsIndex++;
    return renderItem;
  }
  function push(object, geometry, material, groupOrder, z2, group) {
    const renderItem = getNextRenderItem(object, geometry, material, groupOrder, z2, group);
    if (material.transmission > 0) {
      transmissive.push(renderItem);
    } else if (material.transparent === true) {
      transparent.push(renderItem);
    } else {
      opaque.push(renderItem);
    }
  }
  function unshift(object, geometry, material, groupOrder, z2, group) {
    const renderItem = getNextRenderItem(object, geometry, material, groupOrder, z2, group);
    if (material.transmission > 0) {
      transmissive.unshift(renderItem);
    } else if (material.transparent === true) {
      transparent.unshift(renderItem);
    } else {
      opaque.unshift(renderItem);
    }
  }
  function sort(customOpaqueSort, customTransparentSort) {
    if (opaque.length > 1) opaque.sort(customOpaqueSort || painterSortStable);
    if (transmissive.length > 1) transmissive.sort(customTransparentSort || reversePainterSortStable);
    if (transparent.length > 1) transparent.sort(customTransparentSort || reversePainterSortStable);
  }
  function finish() {
    for (let i = renderItemsIndex, il2 = renderItems.length; i < il2; i++) {
      const renderItem = renderItems[i];
      if (renderItem.id === null) break;
      renderItem.id = null;
      renderItem.object = null;
      renderItem.geometry = null;
      renderItem.material = null;
      renderItem.group = null;
    }
  }
  return {
    opaque,
    transmissive,
    transparent,
    init,
    push,
    unshift,
    finish,
    sort
  };
}
function WebGLRenderLists() {
  let lists = /* @__PURE__ */ new WeakMap();
  function get2(scene, renderCallDepth) {
    const listArray = lists.get(scene);
    let list;
    if (listArray === void 0) {
      list = new WebGLRenderList();
      lists.set(scene, [list]);
    } else {
      if (renderCallDepth >= listArray.length) {
        list = new WebGLRenderList();
        listArray.push(list);
      } else {
        list = listArray[renderCallDepth];
      }
    }
    return list;
  }
  function dispose() {
    lists = /* @__PURE__ */ new WeakMap();
  }
  return {
    get: get2,
    dispose
  };
}
function UniformsCache() {
  const lights = {};
  return {
    get: function(light) {
      if (lights[light.id] !== void 0) {
        return lights[light.id];
      }
      let uniforms;
      switch (light.type) {
        case "DirectionalLight":
          uniforms = {
            direction: new Vector3(),
            color: new Color()
          };
          break;
        case "SpotLight":
          uniforms = {
            position: new Vector3(),
            direction: new Vector3(),
            color: new Color(),
            distance: 0,
            coneCos: 0,
            penumbraCos: 0,
            decay: 0
          };
          break;
        case "PointLight":
          uniforms = {
            position: new Vector3(),
            color: new Color(),
            distance: 0,
            decay: 0
          };
          break;
        case "HemisphereLight":
          uniforms = {
            direction: new Vector3(),
            skyColor: new Color(),
            groundColor: new Color()
          };
          break;
        case "RectAreaLight":
          uniforms = {
            color: new Color(),
            position: new Vector3(),
            halfWidth: new Vector3(),
            halfHeight: new Vector3()
          };
          break;
      }
      lights[light.id] = uniforms;
      return uniforms;
    }
  };
}
function ShadowUniformsCache() {
  const lights = {};
  return {
    get: function(light) {
      if (lights[light.id] !== void 0) {
        return lights[light.id];
      }
      let uniforms;
      switch (light.type) {
        case "DirectionalLight":
          uniforms = {
            shadowIntensity: 1,
            shadowBias: 0,
            shadowNormalBias: 0,
            shadowRadius: 1,
            shadowMapSize: new Vector2()
          };
          break;
        case "SpotLight":
          uniforms = {
            shadowIntensity: 1,
            shadowBias: 0,
            shadowNormalBias: 0,
            shadowRadius: 1,
            shadowMapSize: new Vector2()
          };
          break;
        case "PointLight":
          uniforms = {
            shadowIntensity: 1,
            shadowBias: 0,
            shadowNormalBias: 0,
            shadowRadius: 1,
            shadowMapSize: new Vector2(),
            shadowCameraNear: 1,
            shadowCameraFar: 1e3
          };
          break;
      }
      lights[light.id] = uniforms;
      return uniforms;
    }
  };
}
let nextVersion = 0;
function shadowCastingAndTexturingLightsFirst(lightA, lightB) {
  return (lightB.castShadow ? 2 : 0) - (lightA.castShadow ? 2 : 0) + (lightB.map ? 1 : 0) - (lightA.map ? 1 : 0);
}
function WebGLLights(extensions) {
  const cache = new UniformsCache();
  const shadowCache = ShadowUniformsCache();
  const state = {
    version: 0,
    hash: {
      directionalLength: -1,
      pointLength: -1,
      spotLength: -1,
      rectAreaLength: -1,
      hemiLength: -1,
      numDirectionalShadows: -1,
      numPointShadows: -1,
      numSpotShadows: -1,
      numSpotMaps: -1,
      numLightProbes: -1
    },
    ambient: [0, 0, 0],
    probe: [],
    directional: [],
    directionalShadow: [],
    directionalShadowMap: [],
    directionalShadowMatrix: [],
    spot: [],
    spotLightMap: [],
    spotShadow: [],
    spotShadowMap: [],
    spotLightMatrix: [],
    rectArea: [],
    rectAreaLTC1: null,
    rectAreaLTC2: null,
    point: [],
    pointShadow: [],
    pointShadowMap: [],
    pointShadowMatrix: [],
    hemi: [],
    numSpotLightShadowsWithMaps: 0,
    numLightProbes: 0
  };
  for (let i = 0; i < 9; i++) state.probe.push(new Vector3());
  const vector3 = new Vector3();
  const matrix4 = new Matrix4();
  const matrix42 = new Matrix4();
  function setup(lights) {
    let r = 0, g = 0, b = 0;
    for (let i = 0; i < 9; i++) state.probe[i].set(0, 0, 0);
    let directionalLength = 0;
    let pointLength = 0;
    let spotLength = 0;
    let rectAreaLength = 0;
    let hemiLength = 0;
    let numDirectionalShadows = 0;
    let numPointShadows = 0;
    let numSpotShadows = 0;
    let numSpotMaps = 0;
    let numSpotShadowsWithMaps = 0;
    let numLightProbes = 0;
    lights.sort(shadowCastingAndTexturingLightsFirst);
    for (let i = 0, l = lights.length; i < l; i++) {
      const light = lights[i];
      const color = light.color;
      const intensity = light.intensity;
      const distance = light.distance;
      const shadowMap = light.shadow && light.shadow.map ? light.shadow.map.texture : null;
      if (light.isAmbientLight) {
        r += color.r * intensity;
        g += color.g * intensity;
        b += color.b * intensity;
      } else if (light.isLightProbe) {
        for (let j2 = 0; j2 < 9; j2++) {
          state.probe[j2].addScaledVector(light.sh.coefficients[j2], intensity);
        }
        numLightProbes++;
      } else if (light.isDirectionalLight) {
        const uniforms = cache.get(light);
        uniforms.color.copy(light.color).multiplyScalar(light.intensity);
        if (light.castShadow) {
          const shadow = light.shadow;
          const shadowUniforms = shadowCache.get(light);
          shadowUniforms.shadowIntensity = shadow.intensity;
          shadowUniforms.shadowBias = shadow.bias;
          shadowUniforms.shadowNormalBias = shadow.normalBias;
          shadowUniforms.shadowRadius = shadow.radius;
          shadowUniforms.shadowMapSize = shadow.mapSize;
          state.directionalShadow[directionalLength] = shadowUniforms;
          state.directionalShadowMap[directionalLength] = shadowMap;
          state.directionalShadowMatrix[directionalLength] = light.shadow.matrix;
          numDirectionalShadows++;
        }
        state.directional[directionalLength] = uniforms;
        directionalLength++;
      } else if (light.isSpotLight) {
        const uniforms = cache.get(light);
        uniforms.position.setFromMatrixPosition(light.matrixWorld);
        uniforms.color.copy(color).multiplyScalar(intensity);
        uniforms.distance = distance;
        uniforms.coneCos = Math.cos(light.angle);
        uniforms.penumbraCos = Math.cos(light.angle * (1 - light.penumbra));
        uniforms.decay = light.decay;
        state.spot[spotLength] = uniforms;
        const shadow = light.shadow;
        if (light.map) {
          state.spotLightMap[numSpotMaps] = light.map;
          numSpotMaps++;
          shadow.updateMatrices(light);
          if (light.castShadow) numSpotShadowsWithMaps++;
        }
        state.spotLightMatrix[spotLength] = shadow.matrix;
        if (light.castShadow) {
          const shadowUniforms = shadowCache.get(light);
          shadowUniforms.shadowIntensity = shadow.intensity;
          shadowUniforms.shadowBias = shadow.bias;
          shadowUniforms.shadowNormalBias = shadow.normalBias;
          shadowUniforms.shadowRadius = shadow.radius;
          shadowUniforms.shadowMapSize = shadow.mapSize;
          state.spotShadow[spotLength] = shadowUniforms;
          state.spotShadowMap[spotLength] = shadowMap;
          numSpotShadows++;
        }
        spotLength++;
      } else if (light.isRectAreaLight) {
        const uniforms = cache.get(light);
        uniforms.color.copy(color).multiplyScalar(intensity);
        uniforms.halfWidth.set(light.width * 0.5, 0, 0);
        uniforms.halfHeight.set(0, light.height * 0.5, 0);
        state.rectArea[rectAreaLength] = uniforms;
        rectAreaLength++;
      } else if (light.isPointLight) {
        const uniforms = cache.get(light);
        uniforms.color.copy(light.color).multiplyScalar(light.intensity);
        uniforms.distance = light.distance;
        uniforms.decay = light.decay;
        if (light.castShadow) {
          const shadow = light.shadow;
          const shadowUniforms = shadowCache.get(light);
          shadowUniforms.shadowIntensity = shadow.intensity;
          shadowUniforms.shadowBias = shadow.bias;
          shadowUniforms.shadowNormalBias = shadow.normalBias;
          shadowUniforms.shadowRadius = shadow.radius;
          shadowUniforms.shadowMapSize = shadow.mapSize;
          shadowUniforms.shadowCameraNear = shadow.camera.near;
          shadowUniforms.shadowCameraFar = shadow.camera.far;
          state.pointShadow[pointLength] = shadowUniforms;
          state.pointShadowMap[pointLength] = shadowMap;
          state.pointShadowMatrix[pointLength] = light.shadow.matrix;
          numPointShadows++;
        }
        state.point[pointLength] = uniforms;
        pointLength++;
      } else if (light.isHemisphereLight) {
        const uniforms = cache.get(light);
        uniforms.skyColor.copy(light.color).multiplyScalar(intensity);
        uniforms.groundColor.copy(light.groundColor).multiplyScalar(intensity);
        state.hemi[hemiLength] = uniforms;
        hemiLength++;
      }
    }
    if (rectAreaLength > 0) {
      if (extensions.has("OES_texture_float_linear") === true) {
        state.rectAreaLTC1 = UniformsLib.LTC_FLOAT_1;
        state.rectAreaLTC2 = UniformsLib.LTC_FLOAT_2;
      } else {
        state.rectAreaLTC1 = UniformsLib.LTC_HALF_1;
        state.rectAreaLTC2 = UniformsLib.LTC_HALF_2;
      }
    }
    state.ambient[0] = r;
    state.ambient[1] = g;
    state.ambient[2] = b;
    const hash = state.hash;
    if (hash.directionalLength !== directionalLength || hash.pointLength !== pointLength || hash.spotLength !== spotLength || hash.rectAreaLength !== rectAreaLength || hash.hemiLength !== hemiLength || hash.numDirectionalShadows !== numDirectionalShadows || hash.numPointShadows !== numPointShadows || hash.numSpotShadows !== numSpotShadows || hash.numSpotMaps !== numSpotMaps || hash.numLightProbes !== numLightProbes) {
      state.directional.length = directionalLength;
      state.spot.length = spotLength;
      state.rectArea.length = rectAreaLength;
      state.point.length = pointLength;
      state.hemi.length = hemiLength;
      state.directionalShadow.length = numDirectionalShadows;
      state.directionalShadowMap.length = numDirectionalShadows;
      state.pointShadow.length = numPointShadows;
      state.pointShadowMap.length = numPointShadows;
      state.spotShadow.length = numSpotShadows;
      state.spotShadowMap.length = numSpotShadows;
      state.directionalShadowMatrix.length = numDirectionalShadows;
      state.pointShadowMatrix.length = numPointShadows;
      state.spotLightMatrix.length = numSpotShadows + numSpotMaps - numSpotShadowsWithMaps;
      state.spotLightMap.length = numSpotMaps;
      state.numSpotLightShadowsWithMaps = numSpotShadowsWithMaps;
      state.numLightProbes = numLightProbes;
      hash.directionalLength = directionalLength;
      hash.pointLength = pointLength;
      hash.spotLength = spotLength;
      hash.rectAreaLength = rectAreaLength;
      hash.hemiLength = hemiLength;
      hash.numDirectionalShadows = numDirectionalShadows;
      hash.numPointShadows = numPointShadows;
      hash.numSpotShadows = numSpotShadows;
      hash.numSpotMaps = numSpotMaps;
      hash.numLightProbes = numLightProbes;
      state.version = nextVersion++;
    }
  }
  function setupView(lights, camera) {
    let directionalLength = 0;
    let pointLength = 0;
    let spotLength = 0;
    let rectAreaLength = 0;
    let hemiLength = 0;
    const viewMatrix = camera.matrixWorldInverse;
    for (let i = 0, l = lights.length; i < l; i++) {
      const light = lights[i];
      if (light.isDirectionalLight) {
        const uniforms = state.directional[directionalLength];
        uniforms.direction.setFromMatrixPosition(light.matrixWorld);
        vector3.setFromMatrixPosition(light.target.matrixWorld);
        uniforms.direction.sub(vector3);
        uniforms.direction.transformDirection(viewMatrix);
        directionalLength++;
      } else if (light.isSpotLight) {
        const uniforms = state.spot[spotLength];
        uniforms.position.setFromMatrixPosition(light.matrixWorld);
        uniforms.position.applyMatrix4(viewMatrix);
        uniforms.direction.setFromMatrixPosition(light.matrixWorld);
        vector3.setFromMatrixPosition(light.target.matrixWorld);
        uniforms.direction.sub(vector3);
        uniforms.direction.transformDirection(viewMatrix);
        spotLength++;
      } else if (light.isRectAreaLight) {
        const uniforms = state.rectArea[rectAreaLength];
        uniforms.position.setFromMatrixPosition(light.matrixWorld);
        uniforms.position.applyMatrix4(viewMatrix);
        matrix42.identity();
        matrix4.copy(light.matrixWorld);
        matrix4.premultiply(viewMatrix);
        matrix42.extractRotation(matrix4);
        uniforms.halfWidth.set(light.width * 0.5, 0, 0);
        uniforms.halfHeight.set(0, light.height * 0.5, 0);
        uniforms.halfWidth.applyMatrix4(matrix42);
        uniforms.halfHeight.applyMatrix4(matrix42);
        rectAreaLength++;
      } else if (light.isPointLight) {
        const uniforms = state.point[pointLength];
        uniforms.position.setFromMatrixPosition(light.matrixWorld);
        uniforms.position.applyMatrix4(viewMatrix);
        pointLength++;
      } else if (light.isHemisphereLight) {
        const uniforms = state.hemi[hemiLength];
        uniforms.direction.setFromMatrixPosition(light.matrixWorld);
        uniforms.direction.transformDirection(viewMatrix);
        hemiLength++;
      }
    }
  }
  return {
    setup,
    setupView,
    state
  };
}
function WebGLRenderState(extensions) {
  const lights = new WebGLLights(extensions);
  const lightsArray = [];
  const shadowsArray = [];
  function init(camera) {
    state.camera = camera;
    lightsArray.length = 0;
    shadowsArray.length = 0;
  }
  function pushLight(light) {
    lightsArray.push(light);
  }
  function pushShadow(shadowLight) {
    shadowsArray.push(shadowLight);
  }
  function setupLights() {
    lights.setup(lightsArray);
  }
  function setupLightsView(camera) {
    lights.setupView(lightsArray, camera);
  }
  const state = {
    lightsArray,
    shadowsArray,
    camera: null,
    lights,
    transmissionRenderTarget: {}
  };
  return {
    init,
    state,
    setupLights,
    setupLightsView,
    pushLight,
    pushShadow
  };
}
function WebGLRenderStates(extensions) {
  let renderStates = /* @__PURE__ */ new WeakMap();
  function get2(scene, renderCallDepth = 0) {
    const renderStateArray = renderStates.get(scene);
    let renderState;
    if (renderStateArray === void 0) {
      renderState = new WebGLRenderState(extensions);
      renderStates.set(scene, [renderState]);
    } else {
      if (renderCallDepth >= renderStateArray.length) {
        renderState = new WebGLRenderState(extensions);
        renderStateArray.push(renderState);
      } else {
        renderState = renderStateArray[renderCallDepth];
      }
    }
    return renderState;
  }
  function dispose() {
    renderStates = /* @__PURE__ */ new WeakMap();
  }
  return {
    get: get2,
    dispose
  };
}
class MeshDepthMaterial extends Material {
  constructor(parameters) {
    super();
    this.isMeshDepthMaterial = true;
    this.type = "MeshDepthMaterial";
    this.depthPacking = BasicDepthPacking;
    this.map = null;
    this.alphaMap = null;
    this.displacementMap = null;
    this.displacementScale = 1;
    this.displacementBias = 0;
    this.wireframe = false;
    this.wireframeLinewidth = 1;
    this.setValues(parameters);
  }
  copy(source) {
    super.copy(source);
    this.depthPacking = source.depthPacking;
    this.map = source.map;
    this.alphaMap = source.alphaMap;
    this.displacementMap = source.displacementMap;
    this.displacementScale = source.displacementScale;
    this.displacementBias = source.displacementBias;
    this.wireframe = source.wireframe;
    this.wireframeLinewidth = source.wireframeLinewidth;
    return this;
  }
}
class MeshDistanceMaterial extends Material {
  constructor(parameters) {
    super();
    this.isMeshDistanceMaterial = true;
    this.type = "MeshDistanceMaterial";
    this.map = null;
    this.alphaMap = null;
    this.displacementMap = null;
    this.displacementScale = 1;
    this.displacementBias = 0;
    this.setValues(parameters);
  }
  copy(source) {
    super.copy(source);
    this.map = source.map;
    this.alphaMap = source.alphaMap;
    this.displacementMap = source.displacementMap;
    this.displacementScale = source.displacementScale;
    this.displacementBias = source.displacementBias;
    return this;
  }
}
const vertex = "void main() {\n	gl_Position = vec4( position, 1.0 );\n}";
const fragment = "uniform sampler2D shadow_pass;\nuniform vec2 resolution;\nuniform float radius;\n#include <packing>\nvoid main() {\n	const float samples = float( VSM_SAMPLES );\n	float mean = 0.0;\n	float squared_mean = 0.0;\n	float uvStride = samples <= 1.0 ? 0.0 : 2.0 / ( samples - 1.0 );\n	float uvStart = samples <= 1.0 ? 0.0 : - 1.0;\n	for ( float i = 0.0; i < samples; i ++ ) {\n		float uvOffset = uvStart + i * uvStride;\n		#ifdef HORIZONTAL_PASS\n			vec2 distribution = unpackRGBATo2Half( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( uvOffset, 0.0 ) * radius ) / resolution ) );\n			mean += distribution.x;\n			squared_mean += distribution.y * distribution.y + distribution.x * distribution.x;\n		#else\n			float depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( 0.0, uvOffset ) * radius ) / resolution ) );\n			mean += depth;\n			squared_mean += depth * depth;\n		#endif\n	}\n	mean = mean / samples;\n	squared_mean = squared_mean / samples;\n	float std_dev = sqrt( squared_mean - mean * mean );\n	gl_FragColor = pack2HalfToRGBA( vec2( mean, std_dev ) );\n}";
function WebGLShadowMap(renderer2, objects, capabilities) {
  let _frustum = new Frustum();
  const _shadowMapSize = new Vector2(), _viewportSize = new Vector2(), _viewport2 = new Vector4(), _depthMaterial = new MeshDepthMaterial({ depthPacking: RGBADepthPacking }), _distanceMaterial = new MeshDistanceMaterial(), _materialCache = {}, _maxTextureSize = capabilities.maxTextureSize;
  const shadowSide = { [FrontSide]: BackSide, [BackSide]: FrontSide, [DoubleSide]: DoubleSide };
  const shadowMaterialVertical = new ShaderMaterial({
    defines: {
      VSM_SAMPLES: 8
    },
    uniforms: {
      shadow_pass: { value: null },
      resolution: { value: new Vector2() },
      radius: { value: 4 }
    },
    vertexShader: vertex,
    fragmentShader: fragment
  });
  const shadowMaterialHorizontal = shadowMaterialVertical.clone();
  shadowMaterialHorizontal.defines.HORIZONTAL_PASS = 1;
  const fullScreenTri = new BufferGeometry();
  fullScreenTri.setAttribute(
    "position",
    new BufferAttribute(
      new Float32Array([-1, -1, 0.5, 3, -1, 0.5, -1, 3, 0.5]),
      3
    )
  );
  const fullScreenMesh = new Mesh(fullScreenTri, shadowMaterialVertical);
  const scope = this;
  this.enabled = false;
  this.autoUpdate = true;
  this.needsUpdate = false;
  this.type = PCFShadowMap;
  let _previousType = this.type;
  this.render = function(lights, scene, camera) {
    if (scope.enabled === false) return;
    if (scope.autoUpdate === false && scope.needsUpdate === false) return;
    if (lights.length === 0) return;
    const currentRenderTarget = renderer2.getRenderTarget();
    const activeCubeFace = renderer2.getActiveCubeFace();
    const activeMipmapLevel = renderer2.getActiveMipmapLevel();
    const _state = renderer2.state;
    _state.setBlending(NoBlending);
    _state.buffers.color.setClear(1, 1, 1, 1);
    _state.buffers.depth.setTest(true);
    _state.setScissorTest(false);
    const toVSM = _previousType !== VSMShadowMap && this.type === VSMShadowMap;
    const fromVSM = _previousType === VSMShadowMap && this.type !== VSMShadowMap;
    for (let i = 0, il2 = lights.length; i < il2; i++) {
      const light = lights[i];
      const shadow = light.shadow;
      if (shadow === void 0) {
        console.warn("THREE.WebGLShadowMap:", light, "has no shadow.");
        continue;
      }
      if (shadow.autoUpdate === false && shadow.needsUpdate === false) continue;
      _shadowMapSize.copy(shadow.mapSize);
      const shadowFrameExtents = shadow.getFrameExtents();
      _shadowMapSize.multiply(shadowFrameExtents);
      _viewportSize.copy(shadow.mapSize);
      if (_shadowMapSize.x > _maxTextureSize || _shadowMapSize.y > _maxTextureSize) {
        if (_shadowMapSize.x > _maxTextureSize) {
          _viewportSize.x = Math.floor(_maxTextureSize / shadowFrameExtents.x);
          _shadowMapSize.x = _viewportSize.x * shadowFrameExtents.x;
          shadow.mapSize.x = _viewportSize.x;
        }
        if (_shadowMapSize.y > _maxTextureSize) {
          _viewportSize.y = Math.floor(_maxTextureSize / shadowFrameExtents.y);
          _shadowMapSize.y = _viewportSize.y * shadowFrameExtents.y;
          shadow.mapSize.y = _viewportSize.y;
        }
      }
      if (shadow.map === null || toVSM === true || fromVSM === true) {
        const pars = this.type !== VSMShadowMap ? { minFilter: NearestFilter, magFilter: NearestFilter } : {};
        if (shadow.map !== null) {
          shadow.map.dispose();
        }
        shadow.map = new WebGLRenderTarget(_shadowMapSize.x, _shadowMapSize.y, pars);
        shadow.map.texture.name = light.name + ".shadowMap";
        shadow.camera.updateProjectionMatrix();
      }
      renderer2.setRenderTarget(shadow.map);
      renderer2.clear();
      const viewportCount = shadow.getViewportCount();
      for (let vp2 = 0; vp2 < viewportCount; vp2++) {
        const viewport = shadow.getViewport(vp2);
        _viewport2.set(
          _viewportSize.x * viewport.x,
          _viewportSize.y * viewport.y,
          _viewportSize.x * viewport.z,
          _viewportSize.y * viewport.w
        );
        _state.viewport(_viewport2);
        shadow.updateMatrices(light, vp2);
        _frustum = shadow.getFrustum();
        renderObject(scene, camera, shadow.camera, light, this.type);
      }
      if (shadow.isPointLightShadow !== true && this.type === VSMShadowMap) {
        VSMPass(shadow, camera);
      }
      shadow.needsUpdate = false;
    }
    _previousType = this.type;
    scope.needsUpdate = false;
    renderer2.setRenderTarget(currentRenderTarget, activeCubeFace, activeMipmapLevel);
  };
  function VSMPass(shadow, camera) {
    const geometry = objects.update(fullScreenMesh);
    if (shadowMaterialVertical.defines.VSM_SAMPLES !== shadow.blurSamples) {
      shadowMaterialVertical.defines.VSM_SAMPLES = shadow.blurSamples;
      shadowMaterialHorizontal.defines.VSM_SAMPLES = shadow.blurSamples;
      shadowMaterialVertical.needsUpdate = true;
      shadowMaterialHorizontal.needsUpdate = true;
    }
    if (shadow.mapPass === null) {
      shadow.mapPass = new WebGLRenderTarget(_shadowMapSize.x, _shadowMapSize.y);
    }
    shadowMaterialVertical.uniforms.shadow_pass.value = shadow.map.texture;
    shadowMaterialVertical.uniforms.resolution.value = shadow.mapSize;
    shadowMaterialVertical.uniforms.radius.value = shadow.radius;
    renderer2.setRenderTarget(shadow.mapPass);
    renderer2.clear();
    renderer2.renderBufferDirect(camera, null, geometry, shadowMaterialVertical, fullScreenMesh, null);
    shadowMaterialHorizontal.uniforms.shadow_pass.value = shadow.mapPass.texture;
    shadowMaterialHorizontal.uniforms.resolution.value = shadow.mapSize;
    shadowMaterialHorizontal.uniforms.radius.value = shadow.radius;
    renderer2.setRenderTarget(shadow.map);
    renderer2.clear();
    renderer2.renderBufferDirect(camera, null, geometry, shadowMaterialHorizontal, fullScreenMesh, null);
  }
  function getDepthMaterial(object, material, light, type) {
    let result = null;
    const customMaterial = light.isPointLight === true ? object.customDistanceMaterial : object.customDepthMaterial;
    if (customMaterial !== void 0) {
      result = customMaterial;
    } else {
      result = light.isPointLight === true ? _distanceMaterial : _depthMaterial;
      if (renderer2.localClippingEnabled && material.clipShadows === true && Array.isArray(material.clippingPlanes) && material.clippingPlanes.length !== 0 || material.displacementMap && material.displacementScale !== 0 || material.alphaMap && material.alphaTest > 0 || material.map && material.alphaTest > 0) {
        const keyA = result.uuid, keyB = material.uuid;
        let materialsForVariant = _materialCache[keyA];
        if (materialsForVariant === void 0) {
          materialsForVariant = {};
          _materialCache[keyA] = materialsForVariant;
        }
        let cachedMaterial = materialsForVariant[keyB];
        if (cachedMaterial === void 0) {
          cachedMaterial = result.clone();
          materialsForVariant[keyB] = cachedMaterial;
          material.addEventListener("dispose", onMaterialDispose);
        }
        result = cachedMaterial;
      }
    }
    result.visible = material.visible;
    result.wireframe = material.wireframe;
    if (type === VSMShadowMap) {
      result.side = material.shadowSide !== null ? material.shadowSide : material.side;
    } else {
      result.side = material.shadowSide !== null ? material.shadowSide : shadowSide[material.side];
    }
    result.alphaMap = material.alphaMap;
    result.alphaTest = material.alphaTest;
    result.map = material.map;
    result.clipShadows = material.clipShadows;
    result.clippingPlanes = material.clippingPlanes;
    result.clipIntersection = material.clipIntersection;
    result.displacementMap = material.displacementMap;
    result.displacementScale = material.displacementScale;
    result.displacementBias = material.displacementBias;
    result.wireframeLinewidth = material.wireframeLinewidth;
    result.linewidth = material.linewidth;
    if (light.isPointLight === true && result.isMeshDistanceMaterial === true) {
      const materialProperties = renderer2.properties.get(result);
      materialProperties.light = light;
    }
    return result;
  }
  function renderObject(object, camera, shadowCamera, light, type) {
    if (object.visible === false) return;
    const visible = object.layers.test(camera.layers);
    if (visible && (object.isMesh || object.isLine || object.isPoints)) {
      if ((object.castShadow || object.receiveShadow && type === VSMShadowMap) && (!object.frustumCulled || _frustum.intersectsObject(object))) {
        object.modelViewMatrix.multiplyMatrices(shadowCamera.matrixWorldInverse, object.matrixWorld);
        const geometry = objects.update(object);
        const material = object.material;
        if (Array.isArray(material)) {
          const groups = geometry.groups;
          for (let k2 = 0, kl2 = groups.length; k2 < kl2; k2++) {
            const group = groups[k2];
            const groupMaterial = material[group.materialIndex];
            if (groupMaterial && groupMaterial.visible) {
              const depthMaterial = getDepthMaterial(object, groupMaterial, light, type);
              object.onBeforeShadow(renderer2, object, camera, shadowCamera, geometry, depthMaterial, group);
              renderer2.renderBufferDirect(shadowCamera, null, geometry, depthMaterial, object, group);
              object.onAfterShadow(renderer2, object, camera, shadowCamera, geometry, depthMaterial, group);
            }
          }
        } else if (material.visible) {
          const depthMaterial = getDepthMaterial(object, material, light, type);
          object.onBeforeShadow(renderer2, object, camera, shadowCamera, geometry, depthMaterial, null);
          renderer2.renderBufferDirect(shadowCamera, null, geometry, depthMaterial, object, null);
          object.onAfterShadow(renderer2, object, camera, shadowCamera, geometry, depthMaterial, null);
        }
      }
    }
    const children = object.children;
    for (let i = 0, l = children.length; i < l; i++) {
      renderObject(children[i], camera, shadowCamera, light, type);
    }
  }
  function onMaterialDispose(event) {
    const material = event.target;
    material.removeEventListener("dispose", onMaterialDispose);
    for (const id2 in _materialCache) {
      const cache = _materialCache[id2];
      const uuid = event.target.uuid;
      if (uuid in cache) {
        const shadowMaterial = cache[uuid];
        shadowMaterial.dispose();
        delete cache[uuid];
      }
    }
  }
}
const reversedFuncs = {
  [NeverDepth]: AlwaysDepth,
  [LessDepth]: GreaterDepth,
  [EqualDepth]: NotEqualDepth,
  [LessEqualDepth]: GreaterEqualDepth,
  [AlwaysDepth]: NeverDepth,
  [GreaterDepth]: LessDepth,
  [NotEqualDepth]: EqualDepth,
  [GreaterEqualDepth]: LessEqualDepth
};
function WebGLState(gl2) {
  function ColorBuffer() {
    let locked = false;
    const color = new Vector4();
    let currentColorMask = null;
    const currentColorClear = new Vector4(0, 0, 0, 0);
    return {
      setMask: function(colorMask) {
        if (currentColorMask !== colorMask && !locked) {
          gl2.colorMask(colorMask, colorMask, colorMask, colorMask);
          currentColorMask = colorMask;
        }
      },
      setLocked: function(lock) {
        locked = lock;
      },
      setClear: function(r, g, b, a, premultipliedAlpha) {
        if (premultipliedAlpha === true) {
          r *= a;
          g *= a;
          b *= a;
        }
        color.set(r, g, b, a);
        if (currentColorClear.equals(color) === false) {
          gl2.clearColor(r, g, b, a);
          currentColorClear.copy(color);
        }
      },
      reset: function() {
        locked = false;
        currentColorMask = null;
        currentColorClear.set(-1, 0, 0, 0);
      }
    };
  }
  function DepthBuffer() {
    let locked = false;
    let reversed = false;
    let currentDepthMask = null;
    let currentDepthFunc = null;
    let currentDepthClear = null;
    return {
      setReversed: function(value) {
        reversed = value;
      },
      setTest: function(depthTest) {
        if (depthTest) {
          enable(gl2.DEPTH_TEST);
        } else {
          disable(gl2.DEPTH_TEST);
        }
      },
      setMask: function(depthMask) {
        if (currentDepthMask !== depthMask && !locked) {
          gl2.depthMask(depthMask);
          currentDepthMask = depthMask;
        }
      },
      setFunc: function(depthFunc) {
        if (reversed) depthFunc = reversedFuncs[depthFunc];
        if (currentDepthFunc !== depthFunc) {
          switch (depthFunc) {
            case NeverDepth:
              gl2.depthFunc(gl2.NEVER);
              break;
            case AlwaysDepth:
              gl2.depthFunc(gl2.ALWAYS);
              break;
            case LessDepth:
              gl2.depthFunc(gl2.LESS);
              break;
            case LessEqualDepth:
              gl2.depthFunc(gl2.LEQUAL);
              break;
            case EqualDepth:
              gl2.depthFunc(gl2.EQUAL);
              break;
            case GreaterEqualDepth:
              gl2.depthFunc(gl2.GEQUAL);
              break;
            case GreaterDepth:
              gl2.depthFunc(gl2.GREATER);
              break;
            case NotEqualDepth:
              gl2.depthFunc(gl2.NOTEQUAL);
              break;
            default:
              gl2.depthFunc(gl2.LEQUAL);
          }
          currentDepthFunc = depthFunc;
        }
      },
      setLocked: function(lock) {
        locked = lock;
      },
      setClear: function(depth) {
        if (currentDepthClear !== depth) {
          gl2.clearDepth(depth);
          currentDepthClear = depth;
        }
      },
      reset: function() {
        locked = false;
        currentDepthMask = null;
        currentDepthFunc = null;
        currentDepthClear = null;
      }
    };
  }
  function StencilBuffer() {
    let locked = false;
    let currentStencilMask = null;
    let currentStencilFunc = null;
    let currentStencilRef = null;
    let currentStencilFuncMask = null;
    let currentStencilFail = null;
    let currentStencilZFail = null;
    let currentStencilZPass = null;
    let currentStencilClear = null;
    return {
      setTest: function(stencilTest) {
        if (!locked) {
          if (stencilTest) {
            enable(gl2.STENCIL_TEST);
          } else {
            disable(gl2.STENCIL_TEST);
          }
        }
      },
      setMask: function(stencilMask) {
        if (currentStencilMask !== stencilMask && !locked) {
          gl2.stencilMask(stencilMask);
          currentStencilMask = stencilMask;
        }
      },
      setFunc: function(stencilFunc, stencilRef, stencilMask) {
        if (currentStencilFunc !== stencilFunc || currentStencilRef !== stencilRef || currentStencilFuncMask !== stencilMask) {
          gl2.stencilFunc(stencilFunc, stencilRef, stencilMask);
          currentStencilFunc = stencilFunc;
          currentStencilRef = stencilRef;
          currentStencilFuncMask = stencilMask;
        }
      },
      setOp: function(stencilFail, stencilZFail, stencilZPass) {
        if (currentStencilFail !== stencilFail || currentStencilZFail !== stencilZFail || currentStencilZPass !== stencilZPass) {
          gl2.stencilOp(stencilFail, stencilZFail, stencilZPass);
          currentStencilFail = stencilFail;
          currentStencilZFail = stencilZFail;
          currentStencilZPass = stencilZPass;
        }
      },
      setLocked: function(lock) {
        locked = lock;
      },
      setClear: function(stencil) {
        if (currentStencilClear !== stencil) {
          gl2.clearStencil(stencil);
          currentStencilClear = stencil;
        }
      },
      reset: function() {
        locked = false;
        currentStencilMask = null;
        currentStencilFunc = null;
        currentStencilRef = null;
        currentStencilFuncMask = null;
        currentStencilFail = null;
        currentStencilZFail = null;
        currentStencilZPass = null;
        currentStencilClear = null;
      }
    };
  }
  const colorBuffer = new ColorBuffer();
  const depthBuffer = new DepthBuffer();
  const stencilBuffer = new StencilBuffer();
  const uboBindings = /* @__PURE__ */ new WeakMap();
  const uboProgramMap = /* @__PURE__ */ new WeakMap();
  let enabledCapabilities = {};
  let currentBoundFramebuffers = {};
  let currentDrawbuffers = /* @__PURE__ */ new WeakMap();
  let defaultDrawbuffers = [];
  let currentProgram = null;
  let currentBlendingEnabled = false;
  let currentBlending = null;
  let currentBlendEquation = null;
  let currentBlendSrc = null;
  let currentBlendDst = null;
  let currentBlendEquationAlpha = null;
  let currentBlendSrcAlpha = null;
  let currentBlendDstAlpha = null;
  let currentBlendColor = new Color(0, 0, 0);
  let currentBlendAlpha = 0;
  let currentPremultipledAlpha = false;
  let currentFlipSided = null;
  let currentCullFace = null;
  let currentLineWidth = null;
  let currentPolygonOffsetFactor = null;
  let currentPolygonOffsetUnits = null;
  const maxTextures = gl2.getParameter(gl2.MAX_COMBINED_TEXTURE_IMAGE_UNITS);
  let lineWidthAvailable = false;
  let version2 = 0;
  const glVersion = gl2.getParameter(gl2.VERSION);
  if (glVersion.indexOf("WebGL") !== -1) {
    version2 = parseFloat(/^WebGL (\d)/.exec(glVersion)[1]);
    lineWidthAvailable = version2 >= 1;
  } else if (glVersion.indexOf("OpenGL ES") !== -1) {
    version2 = parseFloat(/^OpenGL ES (\d)/.exec(glVersion)[1]);
    lineWidthAvailable = version2 >= 2;
  }
  let currentTextureSlot = null;
  let currentBoundTextures = {};
  const scissorParam = gl2.getParameter(gl2.SCISSOR_BOX);
  const viewportParam = gl2.getParameter(gl2.VIEWPORT);
  const currentScissor = new Vector4().fromArray(scissorParam);
  const currentViewport = new Vector4().fromArray(viewportParam);
  function createTexture(type, target, count, dimensions) {
    const data = new Uint8Array(4);
    const texture = gl2.createTexture();
    gl2.bindTexture(type, texture);
    gl2.texParameteri(type, gl2.TEXTURE_MIN_FILTER, gl2.NEAREST);
    gl2.texParameteri(type, gl2.TEXTURE_MAG_FILTER, gl2.NEAREST);
    for (let i = 0; i < count; i++) {
      if (type === gl2.TEXTURE_3D || type === gl2.TEXTURE_2D_ARRAY) {
        gl2.texImage3D(target, 0, gl2.RGBA, 1, 1, dimensions, 0, gl2.RGBA, gl2.UNSIGNED_BYTE, data);
      } else {
        gl2.texImage2D(target + i, 0, gl2.RGBA, 1, 1, 0, gl2.RGBA, gl2.UNSIGNED_BYTE, data);
      }
    }
    return texture;
  }
  const emptyTextures = {};
  emptyTextures[gl2.TEXTURE_2D] = createTexture(gl2.TEXTURE_2D, gl2.TEXTURE_2D, 1);
  emptyTextures[gl2.TEXTURE_CUBE_MAP] = createTexture(gl2.TEXTURE_CUBE_MAP, gl2.TEXTURE_CUBE_MAP_POSITIVE_X, 6);
  emptyTextures[gl2.TEXTURE_2D_ARRAY] = createTexture(gl2.TEXTURE_2D_ARRAY, gl2.TEXTURE_2D_ARRAY, 1, 1);
  emptyTextures[gl2.TEXTURE_3D] = createTexture(gl2.TEXTURE_3D, gl2.TEXTURE_3D, 1, 1);
  colorBuffer.setClear(0, 0, 0, 1);
  depthBuffer.setClear(1);
  stencilBuffer.setClear(0);
  enable(gl2.DEPTH_TEST);
  depthBuffer.setFunc(LessEqualDepth);
  setFlipSided(false);
  setCullFace(CullFaceBack);
  enable(gl2.CULL_FACE);
  setBlending(NoBlending);
  function enable(id2) {
    if (enabledCapabilities[id2] !== true) {
      gl2.enable(id2);
      enabledCapabilities[id2] = true;
    }
  }
  function disable(id2) {
    if (enabledCapabilities[id2] !== false) {
      gl2.disable(id2);
      enabledCapabilities[id2] = false;
    }
  }
  function bindFramebuffer(target, framebuffer) {
    if (currentBoundFramebuffers[target] !== framebuffer) {
      gl2.bindFramebuffer(target, framebuffer);
      currentBoundFramebuffers[target] = framebuffer;
      if (target === gl2.DRAW_FRAMEBUFFER) {
        currentBoundFramebuffers[gl2.FRAMEBUFFER] = framebuffer;
      }
      if (target === gl2.FRAMEBUFFER) {
        currentBoundFramebuffers[gl2.DRAW_FRAMEBUFFER] = framebuffer;
      }
      return true;
    }
    return false;
  }
  function drawBuffers(renderTarget, framebuffer) {
    let drawBuffers2 = defaultDrawbuffers;
    let needsUpdate = false;
    if (renderTarget) {
      drawBuffers2 = currentDrawbuffers.get(framebuffer);
      if (drawBuffers2 === void 0) {
        drawBuffers2 = [];
        currentDrawbuffers.set(framebuffer, drawBuffers2);
      }
      const textures = renderTarget.textures;
      if (drawBuffers2.length !== textures.length || drawBuffers2[0] !== gl2.COLOR_ATTACHMENT0) {
        for (let i = 0, il2 = textures.length; i < il2; i++) {
          drawBuffers2[i] = gl2.COLOR_ATTACHMENT0 + i;
        }
        drawBuffers2.length = textures.length;
        needsUpdate = true;
      }
    } else {
      if (drawBuffers2[0] !== gl2.BACK) {
        drawBuffers2[0] = gl2.BACK;
        needsUpdate = true;
      }
    }
    if (needsUpdate) {
      gl2.drawBuffers(drawBuffers2);
    }
  }
  function useProgram(program) {
    if (currentProgram !== program) {
      gl2.useProgram(program);
      currentProgram = program;
      return true;
    }
    return false;
  }
  const equationToGL = {
    [AddEquation]: gl2.FUNC_ADD,
    [SubtractEquation]: gl2.FUNC_SUBTRACT,
    [ReverseSubtractEquation]: gl2.FUNC_REVERSE_SUBTRACT
  };
  equationToGL[MinEquation] = gl2.MIN;
  equationToGL[MaxEquation] = gl2.MAX;
  const factorToGL = {
    [ZeroFactor]: gl2.ZERO,
    [OneFactor]: gl2.ONE,
    [SrcColorFactor]: gl2.SRC_COLOR,
    [SrcAlphaFactor]: gl2.SRC_ALPHA,
    [SrcAlphaSaturateFactor]: gl2.SRC_ALPHA_SATURATE,
    [DstColorFactor]: gl2.DST_COLOR,
    [DstAlphaFactor]: gl2.DST_ALPHA,
    [OneMinusSrcColorFactor]: gl2.ONE_MINUS_SRC_COLOR,
    [OneMinusSrcAlphaFactor]: gl2.ONE_MINUS_SRC_ALPHA,
    [OneMinusDstColorFactor]: gl2.ONE_MINUS_DST_COLOR,
    [OneMinusDstAlphaFactor]: gl2.ONE_MINUS_DST_ALPHA,
    [ConstantColorFactor]: gl2.CONSTANT_COLOR,
    [OneMinusConstantColorFactor]: gl2.ONE_MINUS_CONSTANT_COLOR,
    [ConstantAlphaFactor]: gl2.CONSTANT_ALPHA,
    [OneMinusConstantAlphaFactor]: gl2.ONE_MINUS_CONSTANT_ALPHA
  };
  function setBlending(blending, blendEquation, blendSrc, blendDst, blendEquationAlpha, blendSrcAlpha, blendDstAlpha, blendColor, blendAlpha, premultipliedAlpha) {
    if (blending === NoBlending) {
      if (currentBlendingEnabled === true) {
        disable(gl2.BLEND);
        currentBlendingEnabled = false;
      }
      return;
    }
    if (currentBlendingEnabled === false) {
      enable(gl2.BLEND);
      currentBlendingEnabled = true;
    }
    if (blending !== CustomBlending) {
      if (blending !== currentBlending || premultipliedAlpha !== currentPremultipledAlpha) {
        if (currentBlendEquation !== AddEquation || currentBlendEquationAlpha !== AddEquation) {
          gl2.blendEquation(gl2.FUNC_ADD);
          currentBlendEquation = AddEquation;
          currentBlendEquationAlpha = AddEquation;
        }
        if (premultipliedAlpha) {
          switch (blending) {
            case NormalBlending:
              gl2.blendFuncSeparate(gl2.ONE, gl2.ONE_MINUS_SRC_ALPHA, gl2.ONE, gl2.ONE_MINUS_SRC_ALPHA);
              break;
            case AdditiveBlending:
              gl2.blendFunc(gl2.ONE, gl2.ONE);
              break;
            case SubtractiveBlending:
              gl2.blendFuncSeparate(gl2.ZERO, gl2.ONE_MINUS_SRC_COLOR, gl2.ZERO, gl2.ONE);
              break;
            case MultiplyBlending:
              gl2.blendFuncSeparate(gl2.ZERO, gl2.SRC_COLOR, gl2.ZERO, gl2.SRC_ALPHA);
              break;
            default:
              console.error("THREE.WebGLState: Invalid blending: ", blending);
              break;
          }
        } else {
          switch (blending) {
            case NormalBlending:
              gl2.blendFuncSeparate(gl2.SRC_ALPHA, gl2.ONE_MINUS_SRC_ALPHA, gl2.ONE, gl2.ONE_MINUS_SRC_ALPHA);
              break;
            case AdditiveBlending:
              gl2.blendFunc(gl2.SRC_ALPHA, gl2.ONE);
              break;
            case SubtractiveBlending:
              gl2.blendFuncSeparate(gl2.ZERO, gl2.ONE_MINUS_SRC_COLOR, gl2.ZERO, gl2.ONE);
              break;
            case MultiplyBlending:
              gl2.blendFunc(gl2.ZERO, gl2.SRC_COLOR);
              break;
            default:
              console.error("THREE.WebGLState: Invalid blending: ", blending);
              break;
          }
        }
        currentBlendSrc = null;
        currentBlendDst = null;
        currentBlendSrcAlpha = null;
        currentBlendDstAlpha = null;
        currentBlendColor.set(0, 0, 0);
        currentBlendAlpha = 0;
        currentBlending = blending;
        currentPremultipledAlpha = premultipliedAlpha;
      }
      return;
    }
    blendEquationAlpha = blendEquationAlpha || blendEquation;
    blendSrcAlpha = blendSrcAlpha || blendSrc;
    blendDstAlpha = blendDstAlpha || blendDst;
    if (blendEquation !== currentBlendEquation || blendEquationAlpha !== currentBlendEquationAlpha) {
      gl2.blendEquationSeparate(equationToGL[blendEquation], equationToGL[blendEquationAlpha]);
      currentBlendEquation = blendEquation;
      currentBlendEquationAlpha = blendEquationAlpha;
    }
    if (blendSrc !== currentBlendSrc || blendDst !== currentBlendDst || blendSrcAlpha !== currentBlendSrcAlpha || blendDstAlpha !== currentBlendDstAlpha) {
      gl2.blendFuncSeparate(factorToGL[blendSrc], factorToGL[blendDst], factorToGL[blendSrcAlpha], factorToGL[blendDstAlpha]);
      currentBlendSrc = blendSrc;
      currentBlendDst = blendDst;
      currentBlendSrcAlpha = blendSrcAlpha;
      currentBlendDstAlpha = blendDstAlpha;
    }
    if (blendColor.equals(currentBlendColor) === false || blendAlpha !== currentBlendAlpha) {
      gl2.blendColor(blendColor.r, blendColor.g, blendColor.b, blendAlpha);
      currentBlendColor.copy(blendColor);
      currentBlendAlpha = blendAlpha;
    }
    currentBlending = blending;
    currentPremultipledAlpha = false;
  }
  function setMaterial(material, frontFaceCW) {
    material.side === DoubleSide ? disable(gl2.CULL_FACE) : enable(gl2.CULL_FACE);
    let flipSided = material.side === BackSide;
    if (frontFaceCW) flipSided = !flipSided;
    setFlipSided(flipSided);
    material.blending === NormalBlending && material.transparent === false ? setBlending(NoBlending) : setBlending(material.blending, material.blendEquation, material.blendSrc, material.blendDst, material.blendEquationAlpha, material.blendSrcAlpha, material.blendDstAlpha, material.blendColor, material.blendAlpha, material.premultipliedAlpha);
    depthBuffer.setFunc(material.depthFunc);
    depthBuffer.setTest(material.depthTest);
    depthBuffer.setMask(material.depthWrite);
    colorBuffer.setMask(material.colorWrite);
    const stencilWrite = material.stencilWrite;
    stencilBuffer.setTest(stencilWrite);
    if (stencilWrite) {
      stencilBuffer.setMask(material.stencilWriteMask);
      stencilBuffer.setFunc(material.stencilFunc, material.stencilRef, material.stencilFuncMask);
      stencilBuffer.setOp(material.stencilFail, material.stencilZFail, material.stencilZPass);
    }
    setPolygonOffset(material.polygonOffset, material.polygonOffsetFactor, material.polygonOffsetUnits);
    material.alphaToCoverage === true ? enable(gl2.SAMPLE_ALPHA_TO_COVERAGE) : disable(gl2.SAMPLE_ALPHA_TO_COVERAGE);
  }
  function setFlipSided(flipSided) {
    if (currentFlipSided !== flipSided) {
      if (flipSided) {
        gl2.frontFace(gl2.CW);
      } else {
        gl2.frontFace(gl2.CCW);
      }
      currentFlipSided = flipSided;
    }
  }
  function setCullFace(cullFace) {
    if (cullFace !== CullFaceNone) {
      enable(gl2.CULL_FACE);
      if (cullFace !== currentCullFace) {
        if (cullFace === CullFaceBack) {
          gl2.cullFace(gl2.BACK);
        } else if (cullFace === CullFaceFront) {
          gl2.cullFace(gl2.FRONT);
        } else {
          gl2.cullFace(gl2.FRONT_AND_BACK);
        }
      }
    } else {
      disable(gl2.CULL_FACE);
    }
    currentCullFace = cullFace;
  }
  function setLineWidth(width) {
    if (width !== currentLineWidth) {
      if (lineWidthAvailable) gl2.lineWidth(width);
      currentLineWidth = width;
    }
  }
  function setPolygonOffset(polygonOffset, factor, units) {
    if (polygonOffset) {
      enable(gl2.POLYGON_OFFSET_FILL);
      if (currentPolygonOffsetFactor !== factor || currentPolygonOffsetUnits !== units) {
        gl2.polygonOffset(factor, units);
        currentPolygonOffsetFactor = factor;
        currentPolygonOffsetUnits = units;
      }
    } else {
      disable(gl2.POLYGON_OFFSET_FILL);
    }
  }
  function setScissorTest(scissorTest) {
    if (scissorTest) {
      enable(gl2.SCISSOR_TEST);
    } else {
      disable(gl2.SCISSOR_TEST);
    }
  }
  function activeTexture(webglSlot) {
    if (webglSlot === void 0) webglSlot = gl2.TEXTURE0 + maxTextures - 1;
    if (currentTextureSlot !== webglSlot) {
      gl2.activeTexture(webglSlot);
      currentTextureSlot = webglSlot;
    }
  }
  function bindTexture(webglType, webglTexture, webglSlot) {
    if (webglSlot === void 0) {
      if (currentTextureSlot === null) {
        webglSlot = gl2.TEXTURE0 + maxTextures - 1;
      } else {
        webglSlot = currentTextureSlot;
      }
    }
    let boundTexture = currentBoundTextures[webglSlot];
    if (boundTexture === void 0) {
      boundTexture = { type: void 0, texture: void 0 };
      currentBoundTextures[webglSlot] = boundTexture;
    }
    if (boundTexture.type !== webglType || boundTexture.texture !== webglTexture) {
      if (currentTextureSlot !== webglSlot) {
        gl2.activeTexture(webglSlot);
        currentTextureSlot = webglSlot;
      }
      gl2.bindTexture(webglType, webglTexture || emptyTextures[webglType]);
      boundTexture.type = webglType;
      boundTexture.texture = webglTexture;
    }
  }
  function unbindTexture() {
    const boundTexture = currentBoundTextures[currentTextureSlot];
    if (boundTexture !== void 0 && boundTexture.type !== void 0) {
      gl2.bindTexture(boundTexture.type, null);
      boundTexture.type = void 0;
      boundTexture.texture = void 0;
    }
  }
  function compressedTexImage2D() {
    try {
      gl2.compressedTexImage2D.apply(gl2, arguments);
    } catch (error) {
      console.error("THREE.WebGLState:", error);
    }
  }
  function compressedTexImage3D() {
    try {
      gl2.compressedTexImage3D.apply(gl2, arguments);
    } catch (error) {
      console.error("THREE.WebGLState:", error);
    }
  }
  function texSubImage2D() {
    try {
      gl2.texSubImage2D.apply(gl2, arguments);
    } catch (error) {
      console.error("THREE.WebGLState:", error);
    }
  }
  function texSubImage3D() {
    try {
      gl2.texSubImage3D.apply(gl2, arguments);
    } catch (error) {
      console.error("THREE.WebGLState:", error);
    }
  }
  function compressedTexSubImage2D() {
    try {
      gl2.compressedTexSubImage2D.apply(gl2, arguments);
    } catch (error) {
      console.error("THREE.WebGLState:", error);
    }
  }
  function compressedTexSubImage3D() {
    try {
      gl2.compressedTexSubImage3D.apply(gl2, arguments);
    } catch (error) {
      console.error("THREE.WebGLState:", error);
    }
  }
  function texStorage2D() {
    try {
      gl2.texStorage2D.apply(gl2, arguments);
    } catch (error) {
      console.error("THREE.WebGLState:", error);
    }
  }
  function texStorage3D() {
    try {
      gl2.texStorage3D.apply(gl2, arguments);
    } catch (error) {
      console.error("THREE.WebGLState:", error);
    }
  }
  function texImage2D() {
    try {
      gl2.texImage2D.apply(gl2, arguments);
    } catch (error) {
      console.error("THREE.WebGLState:", error);
    }
  }
  function texImage3D() {
    try {
      gl2.texImage3D.apply(gl2, arguments);
    } catch (error) {
      console.error("THREE.WebGLState:", error);
    }
  }
  function scissor(scissor2) {
    if (currentScissor.equals(scissor2) === false) {
      gl2.scissor(scissor2.x, scissor2.y, scissor2.z, scissor2.w);
      currentScissor.copy(scissor2);
    }
  }
  function viewport(viewport2) {
    if (currentViewport.equals(viewport2) === false) {
      gl2.viewport(viewport2.x, viewport2.y, viewport2.z, viewport2.w);
      currentViewport.copy(viewport2);
    }
  }
  function updateUBOMapping(uniformsGroup, program) {
    let mapping = uboProgramMap.get(program);
    if (mapping === void 0) {
      mapping = /* @__PURE__ */ new WeakMap();
      uboProgramMap.set(program, mapping);
    }
    let blockIndex = mapping.get(uniformsGroup);
    if (blockIndex === void 0) {
      blockIndex = gl2.getUniformBlockIndex(program, uniformsGroup.name);
      mapping.set(uniformsGroup, blockIndex);
    }
  }
  function uniformBlockBinding(uniformsGroup, program) {
    const mapping = uboProgramMap.get(program);
    const blockIndex = mapping.get(uniformsGroup);
    if (uboBindings.get(program) !== blockIndex) {
      gl2.uniformBlockBinding(program, blockIndex, uniformsGroup.__bindingPointIndex);
      uboBindings.set(program, blockIndex);
    }
  }
  function reset() {
    gl2.disable(gl2.BLEND);
    gl2.disable(gl2.CULL_FACE);
    gl2.disable(gl2.DEPTH_TEST);
    gl2.disable(gl2.POLYGON_OFFSET_FILL);
    gl2.disable(gl2.SCISSOR_TEST);
    gl2.disable(gl2.STENCIL_TEST);
    gl2.disable(gl2.SAMPLE_ALPHA_TO_COVERAGE);
    gl2.blendEquation(gl2.FUNC_ADD);
    gl2.blendFunc(gl2.ONE, gl2.ZERO);
    gl2.blendFuncSeparate(gl2.ONE, gl2.ZERO, gl2.ONE, gl2.ZERO);
    gl2.blendColor(0, 0, 0, 0);
    gl2.colorMask(true, true, true, true);
    gl2.clearColor(0, 0, 0, 0);
    gl2.depthMask(true);
    gl2.depthFunc(gl2.LESS);
    gl2.clearDepth(1);
    gl2.stencilMask(4294967295);
    gl2.stencilFunc(gl2.ALWAYS, 0, 4294967295);
    gl2.stencilOp(gl2.KEEP, gl2.KEEP, gl2.KEEP);
    gl2.clearStencil(0);
    gl2.cullFace(gl2.BACK);
    gl2.frontFace(gl2.CCW);
    gl2.polygonOffset(0, 0);
    gl2.activeTexture(gl2.TEXTURE0);
    gl2.bindFramebuffer(gl2.FRAMEBUFFER, null);
    gl2.bindFramebuffer(gl2.DRAW_FRAMEBUFFER, null);
    gl2.bindFramebuffer(gl2.READ_FRAMEBUFFER, null);
    gl2.useProgram(null);
    gl2.lineWidth(1);
    gl2.scissor(0, 0, gl2.canvas.width, gl2.canvas.height);
    gl2.viewport(0, 0, gl2.canvas.width, gl2.canvas.height);
    enabledCapabilities = {};
    currentTextureSlot = null;
    currentBoundTextures = {};
    currentBoundFramebuffers = {};
    currentDrawbuffers = /* @__PURE__ */ new WeakMap();
    defaultDrawbuffers = [];
    currentProgram = null;
    currentBlendingEnabled = false;
    currentBlending = null;
    currentBlendEquation = null;
    currentBlendSrc = null;
    currentBlendDst = null;
    currentBlendEquationAlpha = null;
    currentBlendSrcAlpha = null;
    currentBlendDstAlpha = null;
    currentBlendColor = new Color(0, 0, 0);
    currentBlendAlpha = 0;
    currentPremultipledAlpha = false;
    currentFlipSided = null;
    currentCullFace = null;
    currentLineWidth = null;
    currentPolygonOffsetFactor = null;
    currentPolygonOffsetUnits = null;
    currentScissor.set(0, 0, gl2.canvas.width, gl2.canvas.height);
    currentViewport.set(0, 0, gl2.canvas.width, gl2.canvas.height);
    colorBuffer.reset();
    depthBuffer.reset();
    stencilBuffer.reset();
  }
  return {
    buffers: {
      color: colorBuffer,
      depth: depthBuffer,
      stencil: stencilBuffer
    },
    enable,
    disable,
    bindFramebuffer,
    drawBuffers,
    useProgram,
    setBlending,
    setMaterial,
    setFlipSided,
    setCullFace,
    setLineWidth,
    setPolygonOffset,
    setScissorTest,
    activeTexture,
    bindTexture,
    unbindTexture,
    compressedTexImage2D,
    compressedTexImage3D,
    texImage2D,
    texImage3D,
    updateUBOMapping,
    uniformBlockBinding,
    texStorage2D,
    texStorage3D,
    texSubImage2D,
    texSubImage3D,
    compressedTexSubImage2D,
    compressedTexSubImage3D,
    scissor,
    viewport,
    reset
  };
}
function getByteLength(width, height, format, type) {
  const typeByteLength = getTextureTypeByteLength(type);
  switch (format) {
    case AlphaFormat:
      return width * height;
    case LuminanceFormat:
      return width * height;
    case LuminanceAlphaFormat:
      return width * height * 2;
    case RedFormat:
      return width * height / typeByteLength.components * typeByteLength.byteLength;
    case RedIntegerFormat:
      return width * height / typeByteLength.components * typeByteLength.byteLength;
    case RGFormat:
      return width * height * 2 / typeByteLength.components * typeByteLength.byteLength;
    case RGIntegerFormat:
      return width * height * 2 / typeByteLength.components * typeByteLength.byteLength;
    case RGBFormat:
      return width * height * 3 / typeByteLength.components * typeByteLength.byteLength;
    case RGBAFormat:
      return width * height * 4 / typeByteLength.components * typeByteLength.byteLength;
    case RGBAIntegerFormat:
      return width * height * 4 / typeByteLength.components * typeByteLength.byteLength;
    case RGB_S3TC_DXT1_Format:
    case RGBA_S3TC_DXT1_Format:
      return Math.floor((width + 3) / 4) * Math.floor((height + 3) / 4) * 8;
    case RGBA_S3TC_DXT3_Format:
    case RGBA_S3TC_DXT5_Format:
      return Math.floor((width + 3) / 4) * Math.floor((height + 3) / 4) * 16;
    case RGB_PVRTC_2BPPV1_Format:
    case RGBA_PVRTC_2BPPV1_Format:
      return Math.max(width, 16) * Math.max(height, 8) / 4;
    case RGB_PVRTC_4BPPV1_Format:
    case RGBA_PVRTC_4BPPV1_Format:
      return Math.max(width, 8) * Math.max(height, 8) / 2;
    case RGB_ETC1_Format:
    case RGB_ETC2_Format:
      return Math.floor((width + 3) / 4) * Math.floor((height + 3) / 4) * 8;
    case RGBA_ETC2_EAC_Format:
      return Math.floor((width + 3) / 4) * Math.floor((height + 3) / 4) * 16;
    case RGBA_ASTC_4x4_Format:
      return Math.floor((width + 3) / 4) * Math.floor((height + 3) / 4) * 16;
    case RGBA_ASTC_5x4_Format:
      return Math.floor((width + 4) / 5) * Math.floor((height + 3) / 4) * 16;
    case RGBA_ASTC_5x5_Format:
      return Math.floor((width + 4) / 5) * Math.floor((height + 4) / 5) * 16;
    case RGBA_ASTC_6x5_Format:
      return Math.floor((width + 5) / 6) * Math.floor((height + 4) / 5) * 16;
    case RGBA_ASTC_6x6_Format:
      return Math.floor((width + 5) / 6) * Math.floor((height + 5) / 6) * 16;
    case RGBA_ASTC_8x5_Format:
      return Math.floor((width + 7) / 8) * Math.floor((height + 4) / 5) * 16;
    case RGBA_ASTC_8x6_Format:
      return Math.floor((width + 7) / 8) * Math.floor((height + 5) / 6) * 16;
    case RGBA_ASTC_8x8_Format:
      return Math.floor((width + 7) / 8) * Math.floor((height + 7) / 8) * 16;
    case RGBA_ASTC_10x5_Format:
      return Math.floor((width + 9) / 10) * Math.floor((height + 4) / 5) * 16;
    case RGBA_ASTC_10x6_Format:
      return Math.floor((width + 9) / 10) * Math.floor((height + 5) / 6) * 16;
    case RGBA_ASTC_10x8_Format:
      return Math.floor((width + 9) / 10) * Math.floor((height + 7) / 8) * 16;
    case RGBA_ASTC_10x10_Format:
      return Math.floor((width + 9) / 10) * Math.floor((height + 9) / 10) * 16;
    case RGBA_ASTC_12x10_Format:
      return Math.floor((width + 11) / 12) * Math.floor((height + 9) / 10) * 16;
    case RGBA_ASTC_12x12_Format:
      return Math.floor((width + 11) / 12) * Math.floor((height + 11) / 12) * 16;
    case RGBA_BPTC_Format:
    case RGB_BPTC_SIGNED_Format:
    case RGB_BPTC_UNSIGNED_Format:
      return Math.ceil(width / 4) * Math.ceil(height / 4) * 16;
    case RED_RGTC1_Format:
    case SIGNED_RED_RGTC1_Format:
      return Math.ceil(width / 4) * Math.ceil(height / 4) * 8;
    case RED_GREEN_RGTC2_Format:
    case SIGNED_RED_GREEN_RGTC2_Format:
      return Math.ceil(width / 4) * Math.ceil(height / 4) * 16;
  }
  throw new Error(
    `Unable to determine texture byte length for ${format} format.`
  );
}
function getTextureTypeByteLength(type) {
  switch (type) {
    case UnsignedByteType:
    case ByteType:
      return { byteLength: 1, components: 1 };
    case UnsignedShortType:
    case ShortType:
    case HalfFloatType:
      return { byteLength: 2, components: 1 };
    case UnsignedShort4444Type:
    case UnsignedShort5551Type:
      return { byteLength: 2, components: 4 };
    case UnsignedIntType:
    case IntType:
    case FloatType:
      return { byteLength: 4, components: 1 };
    case UnsignedInt5999Type:
      return { byteLength: 4, components: 3 };
  }
  throw new Error(`Unknown texture type ${type}.`);
}
function WebGLTextures(_gl, extensions, state, properties, capabilities, utils, info) {
  const multisampledRTTExt = extensions.has("WEBGL_multisampled_render_to_texture") ? extensions.get("WEBGL_multisampled_render_to_texture") : null;
  const supportsInvalidateFramebuffer = typeof navigator === "undefined" ? false : /OculusBrowser/g.test(navigator.userAgent);
  const _imageDimensions = new Vector2();
  const _videoTextures = /* @__PURE__ */ new WeakMap();
  let _canvas2;
  const _sources = /* @__PURE__ */ new WeakMap();
  let useOffscreenCanvas = false;
  try {
    useOffscreenCanvas = typeof OffscreenCanvas !== "undefined" && new OffscreenCanvas(1, 1).getContext("2d") !== null;
  } catch (err) {
  }
  function createCanvas(width, height) {
    return useOffscreenCanvas ? (
      // eslint-disable-next-line compat/compat
      new OffscreenCanvas(width, height)
    ) : createElementNS("canvas");
  }
  function resizeImage(image, needsNewCanvas, maxSize) {
    let scale = 1;
    const dimensions = getDimensions(image);
    if (dimensions.width > maxSize || dimensions.height > maxSize) {
      scale = maxSize / Math.max(dimensions.width, dimensions.height);
    }
    if (scale < 1) {
      if (typeof HTMLImageElement !== "undefined" && image instanceof HTMLImageElement || typeof HTMLCanvasElement !== "undefined" && image instanceof HTMLCanvasElement || typeof ImageBitmap !== "undefined" && image instanceof ImageBitmap || typeof VideoFrame !== "undefined" && image instanceof VideoFrame) {
        const width = Math.floor(scale * dimensions.width);
        const height = Math.floor(scale * dimensions.height);
        if (_canvas2 === void 0) _canvas2 = createCanvas(width, height);
        const canvas = needsNewCanvas ? createCanvas(width, height) : _canvas2;
        canvas.width = width;
        canvas.height = height;
        const context = canvas.getContext("2d");
        context.drawImage(image, 0, 0, width, height);
        console.warn("THREE.WebGLRenderer: Texture has been resized from (" + dimensions.width + "x" + dimensions.height + ") to (" + width + "x" + height + ").");
        return canvas;
      } else {
        if ("data" in image) {
          console.warn("THREE.WebGLRenderer: Image in DataTexture is too big (" + dimensions.width + "x" + dimensions.height + ").");
        }
        return image;
      }
    }
    return image;
  }
  function textureNeedsGenerateMipmaps(texture) {
    return texture.generateMipmaps && texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter;
  }
  function generateMipmap(target) {
    _gl.generateMipmap(target);
  }
  function getInternalFormat(internalFormatName, glFormat, glType, colorSpace, forceLinearTransfer = false) {
    if (internalFormatName !== null) {
      if (_gl[internalFormatName] !== void 0) return _gl[internalFormatName];
      console.warn("THREE.WebGLRenderer: Attempt to use non-existing WebGL internal format '" + internalFormatName + "'");
    }
    let internalFormat = glFormat;
    if (glFormat === _gl.RED) {
      if (glType === _gl.FLOAT) internalFormat = _gl.R32F;
      if (glType === _gl.HALF_FLOAT) internalFormat = _gl.R16F;
      if (glType === _gl.UNSIGNED_BYTE) internalFormat = _gl.R8;
    }
    if (glFormat === _gl.RED_INTEGER) {
      if (glType === _gl.UNSIGNED_BYTE) internalFormat = _gl.R8UI;
      if (glType === _gl.UNSIGNED_SHORT) internalFormat = _gl.R16UI;
      if (glType === _gl.UNSIGNED_INT) internalFormat = _gl.R32UI;
      if (glType === _gl.BYTE) internalFormat = _gl.R8I;
      if (glType === _gl.SHORT) internalFormat = _gl.R16I;
      if (glType === _gl.INT) internalFormat = _gl.R32I;
    }
    if (glFormat === _gl.RG) {
      if (glType === _gl.FLOAT) internalFormat = _gl.RG32F;
      if (glType === _gl.HALF_FLOAT) internalFormat = _gl.RG16F;
      if (glType === _gl.UNSIGNED_BYTE) internalFormat = _gl.RG8;
    }
    if (glFormat === _gl.RG_INTEGER) {
      if (glType === _gl.UNSIGNED_BYTE) internalFormat = _gl.RG8UI;
      if (glType === _gl.UNSIGNED_SHORT) internalFormat = _gl.RG16UI;
      if (glType === _gl.UNSIGNED_INT) internalFormat = _gl.RG32UI;
      if (glType === _gl.BYTE) internalFormat = _gl.RG8I;
      if (glType === _gl.SHORT) internalFormat = _gl.RG16I;
      if (glType === _gl.INT) internalFormat = _gl.RG32I;
    }
    if (glFormat === _gl.RGB_INTEGER) {
      if (glType === _gl.UNSIGNED_BYTE) internalFormat = _gl.RGB8UI;
      if (glType === _gl.UNSIGNED_SHORT) internalFormat = _gl.RGB16UI;
      if (glType === _gl.UNSIGNED_INT) internalFormat = _gl.RGB32UI;
      if (glType === _gl.BYTE) internalFormat = _gl.RGB8I;
      if (glType === _gl.SHORT) internalFormat = _gl.RGB16I;
      if (glType === _gl.INT) internalFormat = _gl.RGB32I;
    }
    if (glFormat === _gl.RGBA_INTEGER) {
      if (glType === _gl.UNSIGNED_BYTE) internalFormat = _gl.RGBA8UI;
      if (glType === _gl.UNSIGNED_SHORT) internalFormat = _gl.RGBA16UI;
      if (glType === _gl.UNSIGNED_INT) internalFormat = _gl.RGBA32UI;
      if (glType === _gl.BYTE) internalFormat = _gl.RGBA8I;
      if (glType === _gl.SHORT) internalFormat = _gl.RGBA16I;
      if (glType === _gl.INT) internalFormat = _gl.RGBA32I;
    }
    if (glFormat === _gl.RGB) {
      if (glType === _gl.UNSIGNED_INT_5_9_9_9_REV) internalFormat = _gl.RGB9_E5;
    }
    if (glFormat === _gl.RGBA) {
      const transfer = forceLinearTransfer ? LinearTransfer : ColorManagement.getTransfer(colorSpace);
      if (glType === _gl.FLOAT) internalFormat = _gl.RGBA32F;
      if (glType === _gl.HALF_FLOAT) internalFormat = _gl.RGBA16F;
      if (glType === _gl.UNSIGNED_BYTE) internalFormat = transfer === SRGBTransfer ? _gl.SRGB8_ALPHA8 : _gl.RGBA8;
      if (glType === _gl.UNSIGNED_SHORT_4_4_4_4) internalFormat = _gl.RGBA4;
      if (glType === _gl.UNSIGNED_SHORT_5_5_5_1) internalFormat = _gl.RGB5_A1;
    }
    if (internalFormat === _gl.R16F || internalFormat === _gl.R32F || internalFormat === _gl.RG16F || internalFormat === _gl.RG32F || internalFormat === _gl.RGBA16F || internalFormat === _gl.RGBA32F) {
      extensions.get("EXT_color_buffer_float");
    }
    return internalFormat;
  }
  function getInternalDepthFormat(useStencil, depthType) {
    let glInternalFormat;
    if (useStencil) {
      if (depthType === null || depthType === UnsignedIntType || depthType === UnsignedInt248Type) {
        glInternalFormat = _gl.DEPTH24_STENCIL8;
      } else if (depthType === FloatType) {
        glInternalFormat = _gl.DEPTH32F_STENCIL8;
      } else if (depthType === UnsignedShortType) {
        glInternalFormat = _gl.DEPTH24_STENCIL8;
        console.warn("DepthTexture: 16 bit depth attachment is not supported with stencil. Using 24-bit attachment.");
      }
    } else {
      if (depthType === null || depthType === UnsignedIntType || depthType === UnsignedInt248Type) {
        glInternalFormat = _gl.DEPTH_COMPONENT24;
      } else if (depthType === FloatType) {
        glInternalFormat = _gl.DEPTH_COMPONENT32F;
      } else if (depthType === UnsignedShortType) {
        glInternalFormat = _gl.DEPTH_COMPONENT16;
      }
    }
    return glInternalFormat;
  }
  function getMipLevels(texture, image) {
    if (textureNeedsGenerateMipmaps(texture) === true || texture.isFramebufferTexture && texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter) {
      return Math.log2(Math.max(image.width, image.height)) + 1;
    } else if (texture.mipmaps !== void 0 && texture.mipmaps.length > 0) {
      return texture.mipmaps.length;
    } else if (texture.isCompressedTexture && Array.isArray(texture.image)) {
      return image.mipmaps.length;
    } else {
      return 1;
    }
  }
  function onTextureDispose(event) {
    const texture = event.target;
    texture.removeEventListener("dispose", onTextureDispose);
    deallocateTexture(texture);
    if (texture.isVideoTexture) {
      _videoTextures.delete(texture);
    }
  }
  function onRenderTargetDispose(event) {
    const renderTarget = event.target;
    renderTarget.removeEventListener("dispose", onRenderTargetDispose);
    deallocateRenderTarget(renderTarget);
  }
  function deallocateTexture(texture) {
    const textureProperties = properties.get(texture);
    if (textureProperties.__webglInit === void 0) return;
    const source = texture.source;
    const webglTextures = _sources.get(source);
    if (webglTextures) {
      const webglTexture = webglTextures[textureProperties.__cacheKey];
      webglTexture.usedTimes--;
      if (webglTexture.usedTimes === 0) {
        deleteTexture(texture);
      }
      if (Object.keys(webglTextures).length === 0) {
        _sources.delete(source);
      }
    }
    properties.remove(texture);
  }
  function deleteTexture(texture) {
    const textureProperties = properties.get(texture);
    _gl.deleteTexture(textureProperties.__webglTexture);
    const source = texture.source;
    const webglTextures = _sources.get(source);
    delete webglTextures[textureProperties.__cacheKey];
    info.memory.textures--;
  }
  function deallocateRenderTarget(renderTarget) {
    const renderTargetProperties = properties.get(renderTarget);
    if (renderTarget.depthTexture) {
      renderTarget.depthTexture.dispose();
    }
    if (renderTarget.isWebGLCubeRenderTarget) {
      for (let i = 0; i < 6; i++) {
        if (Array.isArray(renderTargetProperties.__webglFramebuffer[i])) {
          for (let level = 0; level < renderTargetProperties.__webglFramebuffer[i].length; level++) _gl.deleteFramebuffer(renderTargetProperties.__webglFramebuffer[i][level]);
        } else {
          _gl.deleteFramebuffer(renderTargetProperties.__webglFramebuffer[i]);
        }
        if (renderTargetProperties.__webglDepthbuffer) _gl.deleteRenderbuffer(renderTargetProperties.__webglDepthbuffer[i]);
      }
    } else {
      if (Array.isArray(renderTargetProperties.__webglFramebuffer)) {
        for (let level = 0; level < renderTargetProperties.__webglFramebuffer.length; level++) _gl.deleteFramebuffer(renderTargetProperties.__webglFramebuffer[level]);
      } else {
        _gl.deleteFramebuffer(renderTargetProperties.__webglFramebuffer);
      }
      if (renderTargetProperties.__webglDepthbuffer) _gl.deleteRenderbuffer(renderTargetProperties.__webglDepthbuffer);
      if (renderTargetProperties.__webglMultisampledFramebuffer) _gl.deleteFramebuffer(renderTargetProperties.__webglMultisampledFramebuffer);
      if (renderTargetProperties.__webglColorRenderbuffer) {
        for (let i = 0; i < renderTargetProperties.__webglColorRenderbuffer.length; i++) {
          if (renderTargetProperties.__webglColorRenderbuffer[i]) _gl.deleteRenderbuffer(renderTargetProperties.__webglColorRenderbuffer[i]);
        }
      }
      if (renderTargetProperties.__webglDepthRenderbuffer) _gl.deleteRenderbuffer(renderTargetProperties.__webglDepthRenderbuffer);
    }
    const textures = renderTarget.textures;
    for (let i = 0, il2 = textures.length; i < il2; i++) {
      const attachmentProperties = properties.get(textures[i]);
      if (attachmentProperties.__webglTexture) {
        _gl.deleteTexture(attachmentProperties.__webglTexture);
        info.memory.textures--;
      }
      properties.remove(textures[i]);
    }
    properties.remove(renderTarget);
  }
  let textureUnits = 0;
  function resetTextureUnits() {
    textureUnits = 0;
  }
  function allocateTextureUnit() {
    const textureUnit = textureUnits;
    if (textureUnit >= capabilities.maxTextures) {
      console.warn("THREE.WebGLTextures: Trying to use " + textureUnit + " texture units while this GPU supports only " + capabilities.maxTextures);
    }
    textureUnits += 1;
    return textureUnit;
  }
  function getTextureCacheKey(texture) {
    const array = [];
    array.push(texture.wrapS);
    array.push(texture.wrapT);
    array.push(texture.wrapR || 0);
    array.push(texture.magFilter);
    array.push(texture.minFilter);
    array.push(texture.anisotropy);
    array.push(texture.internalFormat);
    array.push(texture.format);
    array.push(texture.type);
    array.push(texture.generateMipmaps);
    array.push(texture.premultiplyAlpha);
    array.push(texture.flipY);
    array.push(texture.unpackAlignment);
    array.push(texture.colorSpace);
    return array.join();
  }
  function setTexture2D(texture, slot) {
    const textureProperties = properties.get(texture);
    if (texture.isVideoTexture) updateVideoTexture(texture);
    if (texture.isRenderTargetTexture === false && texture.version > 0 && textureProperties.__version !== texture.version) {
      const image = texture.image;
      if (image === null) {
        console.warn("THREE.WebGLRenderer: Texture marked for update but no image data found.");
      } else if (image.complete === false) {
        console.warn("THREE.WebGLRenderer: Texture marked for update but image is incomplete");
      } else {
        uploadTexture(textureProperties, texture, slot);
        return;
      }
    }
    state.bindTexture(_gl.TEXTURE_2D, textureProperties.__webglTexture, _gl.TEXTURE0 + slot);
  }
  function setTexture2DArray(texture, slot) {
    const textureProperties = properties.get(texture);
    if (texture.version > 0 && textureProperties.__version !== texture.version) {
      uploadTexture(textureProperties, texture, slot);
      return;
    }
    state.bindTexture(_gl.TEXTURE_2D_ARRAY, textureProperties.__webglTexture, _gl.TEXTURE0 + slot);
  }
  function setTexture3D(texture, slot) {
    const textureProperties = properties.get(texture);
    if (texture.version > 0 && textureProperties.__version !== texture.version) {
      uploadTexture(textureProperties, texture, slot);
      return;
    }
    state.bindTexture(_gl.TEXTURE_3D, textureProperties.__webglTexture, _gl.TEXTURE0 + slot);
  }
  function setTextureCube(texture, slot) {
    const textureProperties = properties.get(texture);
    if (texture.version > 0 && textureProperties.__version !== texture.version) {
      uploadCubeTexture(textureProperties, texture, slot);
      return;
    }
    state.bindTexture(_gl.TEXTURE_CUBE_MAP, textureProperties.__webglTexture, _gl.TEXTURE0 + slot);
  }
  const wrappingToGL = {
    [RepeatWrapping]: _gl.REPEAT,
    [ClampToEdgeWrapping]: _gl.CLAMP_TO_EDGE,
    [MirroredRepeatWrapping]: _gl.MIRRORED_REPEAT
  };
  const filterToGL = {
    [NearestFilter]: _gl.NEAREST,
    [NearestMipmapNearestFilter]: _gl.NEAREST_MIPMAP_NEAREST,
    [NearestMipmapLinearFilter]: _gl.NEAREST_MIPMAP_LINEAR,
    [LinearFilter]: _gl.LINEAR,
    [LinearMipmapNearestFilter]: _gl.LINEAR_MIPMAP_NEAREST,
    [LinearMipmapLinearFilter]: _gl.LINEAR_MIPMAP_LINEAR
  };
  const compareToGL = {
    [NeverCompare]: _gl.NEVER,
    [AlwaysCompare]: _gl.ALWAYS,
    [LessCompare]: _gl.LESS,
    [LessEqualCompare]: _gl.LEQUAL,
    [EqualCompare]: _gl.EQUAL,
    [GreaterEqualCompare]: _gl.GEQUAL,
    [GreaterCompare]: _gl.GREATER,
    [NotEqualCompare]: _gl.NOTEQUAL
  };
  function setTextureParameters(textureType, texture) {
    if (texture.type === FloatType && extensions.has("OES_texture_float_linear") === false && (texture.magFilter === LinearFilter || texture.magFilter === LinearMipmapNearestFilter || texture.magFilter === NearestMipmapLinearFilter || texture.magFilter === LinearMipmapLinearFilter || texture.minFilter === LinearFilter || texture.minFilter === LinearMipmapNearestFilter || texture.minFilter === NearestMipmapLinearFilter || texture.minFilter === LinearMipmapLinearFilter)) {
      console.warn("THREE.WebGLRenderer: Unable to use linear filtering with floating point textures. OES_texture_float_linear not supported on this device.");
    }
    _gl.texParameteri(textureType, _gl.TEXTURE_WRAP_S, wrappingToGL[texture.wrapS]);
    _gl.texParameteri(textureType, _gl.TEXTURE_WRAP_T, wrappingToGL[texture.wrapT]);
    if (textureType === _gl.TEXTURE_3D || textureType === _gl.TEXTURE_2D_ARRAY) {
      _gl.texParameteri(textureType, _gl.TEXTURE_WRAP_R, wrappingToGL[texture.wrapR]);
    }
    _gl.texParameteri(textureType, _gl.TEXTURE_MAG_FILTER, filterToGL[texture.magFilter]);
    _gl.texParameteri(textureType, _gl.TEXTURE_MIN_FILTER, filterToGL[texture.minFilter]);
    if (texture.compareFunction) {
      _gl.texParameteri(textureType, _gl.TEXTURE_COMPARE_MODE, _gl.COMPARE_REF_TO_TEXTURE);
      _gl.texParameteri(textureType, _gl.TEXTURE_COMPARE_FUNC, compareToGL[texture.compareFunction]);
    }
    if (extensions.has("EXT_texture_filter_anisotropic") === true) {
      if (texture.magFilter === NearestFilter) return;
      if (texture.minFilter !== NearestMipmapLinearFilter && texture.minFilter !== LinearMipmapLinearFilter) return;
      if (texture.type === FloatType && extensions.has("OES_texture_float_linear") === false) return;
      if (texture.anisotropy > 1 || properties.get(texture).__currentAnisotropy) {
        const extension = extensions.get("EXT_texture_filter_anisotropic");
        _gl.texParameterf(textureType, extension.TEXTURE_MAX_ANISOTROPY_EXT, Math.min(texture.anisotropy, capabilities.getMaxAnisotropy()));
        properties.get(texture).__currentAnisotropy = texture.anisotropy;
      }
    }
  }
  function initTexture(textureProperties, texture) {
    let forceUpload = false;
    if (textureProperties.__webglInit === void 0) {
      textureProperties.__webglInit = true;
      texture.addEventListener("dispose", onTextureDispose);
    }
    const source = texture.source;
    let webglTextures = _sources.get(source);
    if (webglTextures === void 0) {
      webglTextures = {};
      _sources.set(source, webglTextures);
    }
    const textureCacheKey = getTextureCacheKey(texture);
    if (textureCacheKey !== textureProperties.__cacheKey) {
      if (webglTextures[textureCacheKey] === void 0) {
        webglTextures[textureCacheKey] = {
          texture: _gl.createTexture(),
          usedTimes: 0
        };
        info.memory.textures++;
        forceUpload = true;
      }
      webglTextures[textureCacheKey].usedTimes++;
      const webglTexture = webglTextures[textureProperties.__cacheKey];
      if (webglTexture !== void 0) {
        webglTextures[textureProperties.__cacheKey].usedTimes--;
        if (webglTexture.usedTimes === 0) {
          deleteTexture(texture);
        }
      }
      textureProperties.__cacheKey = textureCacheKey;
      textureProperties.__webglTexture = webglTextures[textureCacheKey].texture;
    }
    return forceUpload;
  }
  function uploadTexture(textureProperties, texture, slot) {
    let textureType = _gl.TEXTURE_2D;
    if (texture.isDataArrayTexture || texture.isCompressedArrayTexture) textureType = _gl.TEXTURE_2D_ARRAY;
    if (texture.isData3DTexture) textureType = _gl.TEXTURE_3D;
    const forceUpload = initTexture(textureProperties, texture);
    const source = texture.source;
    state.bindTexture(textureType, textureProperties.__webglTexture, _gl.TEXTURE0 + slot);
    const sourceProperties = properties.get(source);
    if (source.version !== sourceProperties.__version || forceUpload === true) {
      state.activeTexture(_gl.TEXTURE0 + slot);
      const workingPrimaries = ColorManagement.getPrimaries(ColorManagement.workingColorSpace);
      const texturePrimaries = texture.colorSpace === NoColorSpace ? null : ColorManagement.getPrimaries(texture.colorSpace);
      const unpackConversion = texture.colorSpace === NoColorSpace || workingPrimaries === texturePrimaries ? _gl.NONE : _gl.BROWSER_DEFAULT_WEBGL;
      _gl.pixelStorei(_gl.UNPACK_FLIP_Y_WEBGL, texture.flipY);
      _gl.pixelStorei(_gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, texture.premultiplyAlpha);
      _gl.pixelStorei(_gl.UNPACK_ALIGNMENT, texture.unpackAlignment);
      _gl.pixelStorei(_gl.UNPACK_COLORSPACE_CONVERSION_WEBGL, unpackConversion);
      let image = resizeImage(texture.image, false, capabilities.maxTextureSize);
      image = verifyColorSpace(texture, image);
      const glFormat = utils.convert(texture.format, texture.colorSpace);
      const glType = utils.convert(texture.type);
      let glInternalFormat = getInternalFormat(texture.internalFormat, glFormat, glType, texture.colorSpace, texture.isVideoTexture);
      setTextureParameters(textureType, texture);
      let mipmap;
      const mipmaps = texture.mipmaps;
      const useTexStorage = texture.isVideoTexture !== true;
      const allocateMemory = sourceProperties.__version === void 0 || forceUpload === true;
      const dataReady = source.dataReady;
      const levels = getMipLevels(texture, image);
      if (texture.isDepthTexture) {
        glInternalFormat = getInternalDepthFormat(texture.format === DepthStencilFormat, texture.type);
        if (allocateMemory) {
          if (useTexStorage) {
            state.texStorage2D(_gl.TEXTURE_2D, 1, glInternalFormat, image.width, image.height);
          } else {
            state.texImage2D(_gl.TEXTURE_2D, 0, glInternalFormat, image.width, image.height, 0, glFormat, glType, null);
          }
        }
      } else if (texture.isDataTexture) {
        if (mipmaps.length > 0) {
          if (useTexStorage && allocateMemory) {
            state.texStorage2D(_gl.TEXTURE_2D, levels, glInternalFormat, mipmaps[0].width, mipmaps[0].height);
          }
          for (let i = 0, il2 = mipmaps.length; i < il2; i++) {
            mipmap = mipmaps[i];
            if (useTexStorage) {
              if (dataReady) {
                state.texSubImage2D(_gl.TEXTURE_2D, i, 0, 0, mipmap.width, mipmap.height, glFormat, glType, mipmap.data);
              }
            } else {
              state.texImage2D(_gl.TEXTURE_2D, i, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data);
            }
          }
          texture.generateMipmaps = false;
        } else {
          if (useTexStorage) {
            if (allocateMemory) {
              state.texStorage2D(_gl.TEXTURE_2D, levels, glInternalFormat, image.width, image.height);
            }
            if (dataReady) {
              state.texSubImage2D(_gl.TEXTURE_2D, 0, 0, 0, image.width, image.height, glFormat, glType, image.data);
            }
          } else {
            state.texImage2D(_gl.TEXTURE_2D, 0, glInternalFormat, image.width, image.height, 0, glFormat, glType, image.data);
          }
        }
      } else if (texture.isCompressedTexture) {
        if (texture.isCompressedArrayTexture) {
          if (useTexStorage && allocateMemory) {
            state.texStorage3D(_gl.TEXTURE_2D_ARRAY, levels, glInternalFormat, mipmaps[0].width, mipmaps[0].height, image.depth);
          }
          for (let i = 0, il2 = mipmaps.length; i < il2; i++) {
            mipmap = mipmaps[i];
            if (texture.format !== RGBAFormat) {
              if (glFormat !== null) {
                if (useTexStorage) {
                  if (dataReady) {
                    if (texture.layerUpdates.size > 0) {
                      const layerByteLength = getByteLength(mipmap.width, mipmap.height, texture.format, texture.type);
                      for (const layerIndex of texture.layerUpdates) {
                        const layerData = mipmap.data.subarray(
                          layerIndex * layerByteLength / mipmap.data.BYTES_PER_ELEMENT,
                          (layerIndex + 1) * layerByteLength / mipmap.data.BYTES_PER_ELEMENT
                        );
                        state.compressedTexSubImage3D(_gl.TEXTURE_2D_ARRAY, i, 0, 0, layerIndex, mipmap.width, mipmap.height, 1, glFormat, layerData, 0, 0);
                      }
                      texture.clearLayerUpdates();
                    } else {
                      state.compressedTexSubImage3D(_gl.TEXTURE_2D_ARRAY, i, 0, 0, 0, mipmap.width, mipmap.height, image.depth, glFormat, mipmap.data, 0, 0);
                    }
                  }
                } else {
                  state.compressedTexImage3D(_gl.TEXTURE_2D_ARRAY, i, glInternalFormat, mipmap.width, mipmap.height, image.depth, 0, mipmap.data, 0, 0);
                }
              } else {
                console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()");
              }
            } else {
              if (useTexStorage) {
                if (dataReady) {
                  state.texSubImage3D(_gl.TEXTURE_2D_ARRAY, i, 0, 0, 0, mipmap.width, mipmap.height, image.depth, glFormat, glType, mipmap.data);
                }
              } else {
                state.texImage3D(_gl.TEXTURE_2D_ARRAY, i, glInternalFormat, mipmap.width, mipmap.height, image.depth, 0, glFormat, glType, mipmap.data);
              }
            }
          }
        } else {
          if (useTexStorage && allocateMemory) {
            state.texStorage2D(_gl.TEXTURE_2D, levels, glInternalFormat, mipmaps[0].width, mipmaps[0].height);
          }
          for (let i = 0, il2 = mipmaps.length; i < il2; i++) {
            mipmap = mipmaps[i];
            if (texture.format !== RGBAFormat) {
              if (glFormat !== null) {
                if (useTexStorage) {
                  if (dataReady) {
                    state.compressedTexSubImage2D(_gl.TEXTURE_2D, i, 0, 0, mipmap.width, mipmap.height, glFormat, mipmap.data);
                  }
                } else {
                  state.compressedTexImage2D(_gl.TEXTURE_2D, i, glInternalFormat, mipmap.width, mipmap.height, 0, mipmap.data);
                }
              } else {
                console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()");
              }
            } else {
              if (useTexStorage) {
                if (dataReady) {
                  state.texSubImage2D(_gl.TEXTURE_2D, i, 0, 0, mipmap.width, mipmap.height, glFormat, glType, mipmap.data);
                }
              } else {
                state.texImage2D(_gl.TEXTURE_2D, i, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data);
              }
            }
          }
        }
      } else if (texture.isDataArrayTexture) {
        if (useTexStorage) {
          if (allocateMemory) {
            state.texStorage3D(_gl.TEXTURE_2D_ARRAY, levels, glInternalFormat, image.width, image.height, image.depth);
          }
          if (dataReady) {
            if (texture.layerUpdates.size > 0) {
              const layerByteLength = getByteLength(image.width, image.height, texture.format, texture.type);
              for (const layerIndex of texture.layerUpdates) {
                const layerData = image.data.subarray(
                  layerIndex * layerByteLength / image.data.BYTES_PER_ELEMENT,
                  (layerIndex + 1) * layerByteLength / image.data.BYTES_PER_ELEMENT
                );
                state.texSubImage3D(_gl.TEXTURE_2D_ARRAY, 0, 0, 0, layerIndex, image.width, image.height, 1, glFormat, glType, layerData);
              }
              texture.clearLayerUpdates();
            } else {
              state.texSubImage3D(_gl.TEXTURE_2D_ARRAY, 0, 0, 0, 0, image.width, image.height, image.depth, glFormat, glType, image.data);
            }
          }
        } else {
          state.texImage3D(_gl.TEXTURE_2D_ARRAY, 0, glInternalFormat, image.width, image.height, image.depth, 0, glFormat, glType, image.data);
        }
      } else if (texture.isData3DTexture) {
        if (useTexStorage) {
          if (allocateMemory) {
            state.texStorage3D(_gl.TEXTURE_3D, levels, glInternalFormat, image.width, image.height, image.depth);
          }
          if (dataReady) {
            state.texSubImage3D(_gl.TEXTURE_3D, 0, 0, 0, 0, image.width, image.height, image.depth, glFormat, glType, image.data);
          }
        } else {
          state.texImage3D(_gl.TEXTURE_3D, 0, glInternalFormat, image.width, image.height, image.depth, 0, glFormat, glType, image.data);
        }
      } else if (texture.isFramebufferTexture) {
        if (allocateMemory) {
          if (useTexStorage) {
            state.texStorage2D(_gl.TEXTURE_2D, levels, glInternalFormat, image.width, image.height);
          } else {
            let width = image.width, height = image.height;
            for (let i = 0; i < levels; i++) {
              state.texImage2D(_gl.TEXTURE_2D, i, glInternalFormat, width, height, 0, glFormat, glType, null);
              width >>= 1;
              height >>= 1;
            }
          }
        }
      } else {
        if (mipmaps.length > 0) {
          if (useTexStorage && allocateMemory) {
            const dimensions = getDimensions(mipmaps[0]);
            state.texStorage2D(_gl.TEXTURE_2D, levels, glInternalFormat, dimensions.width, dimensions.height);
          }
          for (let i = 0, il2 = mipmaps.length; i < il2; i++) {
            mipmap = mipmaps[i];
            if (useTexStorage) {
              if (dataReady) {
                state.texSubImage2D(_gl.TEXTURE_2D, i, 0, 0, glFormat, glType, mipmap);
              }
            } else {
              state.texImage2D(_gl.TEXTURE_2D, i, glInternalFormat, glFormat, glType, mipmap);
            }
          }
          texture.generateMipmaps = false;
        } else {
          if (useTexStorage) {
            if (allocateMemory) {
              const dimensions = getDimensions(image);
              state.texStorage2D(_gl.TEXTURE_2D, levels, glInternalFormat, dimensions.width, dimensions.height);
            }
            if (dataReady) {
              state.texSubImage2D(_gl.TEXTURE_2D, 0, 0, 0, glFormat, glType, image);
            }
          } else {
            state.texImage2D(_gl.TEXTURE_2D, 0, glInternalFormat, glFormat, glType, image);
          }
        }
      }
      if (textureNeedsGenerateMipmaps(texture)) {
        generateMipmap(textureType);
      }
      sourceProperties.__version = source.version;
      if (texture.onUpdate) texture.onUpdate(texture);
    }
    textureProperties.__version = texture.version;
  }
  function uploadCubeTexture(textureProperties, texture, slot) {
    if (texture.image.length !== 6) return;
    const forceUpload = initTexture(textureProperties, texture);
    const source = texture.source;
    state.bindTexture(_gl.TEXTURE_CUBE_MAP, textureProperties.__webglTexture, _gl.TEXTURE0 + slot);
    const sourceProperties = properties.get(source);
    if (source.version !== sourceProperties.__version || forceUpload === true) {
      state.activeTexture(_gl.TEXTURE0 + slot);
      const workingPrimaries = ColorManagement.getPrimaries(ColorManagement.workingColorSpace);
      const texturePrimaries = texture.colorSpace === NoColorSpace ? null : ColorManagement.getPrimaries(texture.colorSpace);
      const unpackConversion = texture.colorSpace === NoColorSpace || workingPrimaries === texturePrimaries ? _gl.NONE : _gl.BROWSER_DEFAULT_WEBGL;
      _gl.pixelStorei(_gl.UNPACK_FLIP_Y_WEBGL, texture.flipY);
      _gl.pixelStorei(_gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, texture.premultiplyAlpha);
      _gl.pixelStorei(_gl.UNPACK_ALIGNMENT, texture.unpackAlignment);
      _gl.pixelStorei(_gl.UNPACK_COLORSPACE_CONVERSION_WEBGL, unpackConversion);
      const isCompressed = texture.isCompressedTexture || texture.image[0].isCompressedTexture;
      const isDataTexture = texture.image[0] && texture.image[0].isDataTexture;
      const cubeImage = [];
      for (let i = 0; i < 6; i++) {
        if (!isCompressed && !isDataTexture) {
          cubeImage[i] = resizeImage(texture.image[i], true, capabilities.maxCubemapSize);
        } else {
          cubeImage[i] = isDataTexture ? texture.image[i].image : texture.image[i];
        }
        cubeImage[i] = verifyColorSpace(texture, cubeImage[i]);
      }
      const image = cubeImage[0], glFormat = utils.convert(texture.format, texture.colorSpace), glType = utils.convert(texture.type), glInternalFormat = getInternalFormat(texture.internalFormat, glFormat, glType, texture.colorSpace);
      const useTexStorage = texture.isVideoTexture !== true;
      const allocateMemory = sourceProperties.__version === void 0 || forceUpload === true;
      const dataReady = source.dataReady;
      let levels = getMipLevels(texture, image);
      setTextureParameters(_gl.TEXTURE_CUBE_MAP, texture);
      let mipmaps;
      if (isCompressed) {
        if (useTexStorage && allocateMemory) {
          state.texStorage2D(_gl.TEXTURE_CUBE_MAP, levels, glInternalFormat, image.width, image.height);
        }
        for (let i = 0; i < 6; i++) {
          mipmaps = cubeImage[i].mipmaps;
          for (let j2 = 0; j2 < mipmaps.length; j2++) {
            const mipmap = mipmaps[j2];
            if (texture.format !== RGBAFormat) {
              if (glFormat !== null) {
                if (useTexStorage) {
                  if (dataReady) {
                    state.compressedTexSubImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j2, 0, 0, mipmap.width, mipmap.height, glFormat, mipmap.data);
                  }
                } else {
                  state.compressedTexImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j2, glInternalFormat, mipmap.width, mipmap.height, 0, mipmap.data);
                }
              } else {
                console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()");
              }
            } else {
              if (useTexStorage) {
                if (dataReady) {
                  state.texSubImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j2, 0, 0, mipmap.width, mipmap.height, glFormat, glType, mipmap.data);
                }
              } else {
                state.texImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j2, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data);
              }
            }
          }
        }
      } else {
        mipmaps = texture.mipmaps;
        if (useTexStorage && allocateMemory) {
          if (mipmaps.length > 0) levels++;
          const dimensions = getDimensions(cubeImage[0]);
          state.texStorage2D(_gl.TEXTURE_CUBE_MAP, levels, glInternalFormat, dimensions.width, dimensions.height);
        }
        for (let i = 0; i < 6; i++) {
          if (isDataTexture) {
            if (useTexStorage) {
              if (dataReady) {
                state.texSubImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, 0, 0, cubeImage[i].width, cubeImage[i].height, glFormat, glType, cubeImage[i].data);
              }
            } else {
              state.texImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, glInternalFormat, cubeImage[i].width, cubeImage[i].height, 0, glFormat, glType, cubeImage[i].data);
            }
            for (let j2 = 0; j2 < mipmaps.length; j2++) {
              const mipmap = mipmaps[j2];
              const mipmapImage = mipmap.image[i].image;
              if (useTexStorage) {
                if (dataReady) {
                  state.texSubImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j2 + 1, 0, 0, mipmapImage.width, mipmapImage.height, glFormat, glType, mipmapImage.data);
                }
              } else {
                state.texImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j2 + 1, glInternalFormat, mipmapImage.width, mipmapImage.height, 0, glFormat, glType, mipmapImage.data);
              }
            }
          } else {
            if (useTexStorage) {
              if (dataReady) {
                state.texSubImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, 0, 0, glFormat, glType, cubeImage[i]);
              }
            } else {
              state.texImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, glInternalFormat, glFormat, glType, cubeImage[i]);
            }
            for (let j2 = 0; j2 < mipmaps.length; j2++) {
              const mipmap = mipmaps[j2];
              if (useTexStorage) {
                if (dataReady) {
                  state.texSubImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j2 + 1, 0, 0, glFormat, glType, mipmap.image[i]);
                }
              } else {
                state.texImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j2 + 1, glInternalFormat, glFormat, glType, mipmap.image[i]);
              }
            }
          }
        }
      }
      if (textureNeedsGenerateMipmaps(texture)) {
        generateMipmap(_gl.TEXTURE_CUBE_MAP);
      }
      sourceProperties.__version = source.version;
      if (texture.onUpdate) texture.onUpdate(texture);
    }
    textureProperties.__version = texture.version;
  }
  function setupFrameBufferTexture(framebuffer, renderTarget, texture, attachment, textureTarget, level) {
    const glFormat = utils.convert(texture.format, texture.colorSpace);
    const glType = utils.convert(texture.type);
    const glInternalFormat = getInternalFormat(texture.internalFormat, glFormat, glType, texture.colorSpace);
    const renderTargetProperties = properties.get(renderTarget);
    if (!renderTargetProperties.__hasExternalTextures) {
      const width = Math.max(1, renderTarget.width >> level);
      const height = Math.max(1, renderTarget.height >> level);
      if (textureTarget === _gl.TEXTURE_3D || textureTarget === _gl.TEXTURE_2D_ARRAY) {
        state.texImage3D(textureTarget, level, glInternalFormat, width, height, renderTarget.depth, 0, glFormat, glType, null);
      } else {
        state.texImage2D(textureTarget, level, glInternalFormat, width, height, 0, glFormat, glType, null);
      }
    }
    state.bindFramebuffer(_gl.FRAMEBUFFER, framebuffer);
    if (useMultisampledRTT(renderTarget)) {
      multisampledRTTExt.framebufferTexture2DMultisampleEXT(_gl.FRAMEBUFFER, attachment, textureTarget, properties.get(texture).__webglTexture, 0, getRenderTargetSamples(renderTarget));
    } else if (textureTarget === _gl.TEXTURE_2D || textureTarget >= _gl.TEXTURE_CUBE_MAP_POSITIVE_X && textureTarget <= _gl.TEXTURE_CUBE_MAP_NEGATIVE_Z) {
      _gl.framebufferTexture2D(_gl.FRAMEBUFFER, attachment, textureTarget, properties.get(texture).__webglTexture, level);
    }
    state.bindFramebuffer(_gl.FRAMEBUFFER, null);
  }
  function setupRenderBufferStorage(renderbuffer, renderTarget, isMultisample) {
    _gl.bindRenderbuffer(_gl.RENDERBUFFER, renderbuffer);
    if (renderTarget.depthBuffer) {
      const depthTexture = renderTarget.depthTexture;
      const depthType = depthTexture && depthTexture.isDepthTexture ? depthTexture.type : null;
      const glInternalFormat = getInternalDepthFormat(renderTarget.stencilBuffer, depthType);
      const glAttachmentType = renderTarget.stencilBuffer ? _gl.DEPTH_STENCIL_ATTACHMENT : _gl.DEPTH_ATTACHMENT;
      const samples = getRenderTargetSamples(renderTarget);
      const isUseMultisampledRTT = useMultisampledRTT(renderTarget);
      if (isUseMultisampledRTT) {
        multisampledRTTExt.renderbufferStorageMultisampleEXT(_gl.RENDERBUFFER, samples, glInternalFormat, renderTarget.width, renderTarget.height);
      } else if (isMultisample) {
        _gl.renderbufferStorageMultisample(_gl.RENDERBUFFER, samples, glInternalFormat, renderTarget.width, renderTarget.height);
      } else {
        _gl.renderbufferStorage(_gl.RENDERBUFFER, glInternalFormat, renderTarget.width, renderTarget.height);
      }
      _gl.framebufferRenderbuffer(_gl.FRAMEBUFFER, glAttachmentType, _gl.RENDERBUFFER, renderbuffer);
    } else {
      const textures = renderTarget.textures;
      for (let i = 0; i < textures.length; i++) {
        const texture = textures[i];
        const glFormat = utils.convert(texture.format, texture.colorSpace);
        const glType = utils.convert(texture.type);
        const glInternalFormat = getInternalFormat(texture.internalFormat, glFormat, glType, texture.colorSpace);
        const samples = getRenderTargetSamples(renderTarget);
        if (isMultisample && useMultisampledRTT(renderTarget) === false) {
          _gl.renderbufferStorageMultisample(_gl.RENDERBUFFER, samples, glInternalFormat, renderTarget.width, renderTarget.height);
        } else if (useMultisampledRTT(renderTarget)) {
          multisampledRTTExt.renderbufferStorageMultisampleEXT(_gl.RENDERBUFFER, samples, glInternalFormat, renderTarget.width, renderTarget.height);
        } else {
          _gl.renderbufferStorage(_gl.RENDERBUFFER, glInternalFormat, renderTarget.width, renderTarget.height);
        }
      }
    }
    _gl.bindRenderbuffer(_gl.RENDERBUFFER, null);
  }
  function setupDepthTexture(framebuffer, renderTarget) {
    const isCube = renderTarget && renderTarget.isWebGLCubeRenderTarget;
    if (isCube) throw new Error("Depth Texture with cube render targets is not supported");
    state.bindFramebuffer(_gl.FRAMEBUFFER, framebuffer);
    if (!(renderTarget.depthTexture && renderTarget.depthTexture.isDepthTexture)) {
      throw new Error("renderTarget.depthTexture must be an instance of THREE.DepthTexture");
    }
    if (!properties.get(renderTarget.depthTexture).__webglTexture || renderTarget.depthTexture.image.width !== renderTarget.width || renderTarget.depthTexture.image.height !== renderTarget.height) {
      renderTarget.depthTexture.image.width = renderTarget.width;
      renderTarget.depthTexture.image.height = renderTarget.height;
      renderTarget.depthTexture.needsUpdate = true;
    }
    setTexture2D(renderTarget.depthTexture, 0);
    const webglDepthTexture = properties.get(renderTarget.depthTexture).__webglTexture;
    const samples = getRenderTargetSamples(renderTarget);
    if (renderTarget.depthTexture.format === DepthFormat) {
      if (useMultisampledRTT(renderTarget)) {
        multisampledRTTExt.framebufferTexture2DMultisampleEXT(_gl.FRAMEBUFFER, _gl.DEPTH_ATTACHMENT, _gl.TEXTURE_2D, webglDepthTexture, 0, samples);
      } else {
        _gl.framebufferTexture2D(_gl.FRAMEBUFFER, _gl.DEPTH_ATTACHMENT, _gl.TEXTURE_2D, webglDepthTexture, 0);
      }
    } else if (renderTarget.depthTexture.format === DepthStencilFormat) {
      if (useMultisampledRTT(renderTarget)) {
        multisampledRTTExt.framebufferTexture2DMultisampleEXT(_gl.FRAMEBUFFER, _gl.DEPTH_STENCIL_ATTACHMENT, _gl.TEXTURE_2D, webglDepthTexture, 0, samples);
      } else {
        _gl.framebufferTexture2D(_gl.FRAMEBUFFER, _gl.DEPTH_STENCIL_ATTACHMENT, _gl.TEXTURE_2D, webglDepthTexture, 0);
      }
    } else {
      throw new Error("Unknown depthTexture format");
    }
  }
  function setupDepthRenderbuffer(renderTarget) {
    const renderTargetProperties = properties.get(renderTarget);
    const isCube = renderTarget.isWebGLCubeRenderTarget === true;
    if (renderTargetProperties.__boundDepthTexture !== renderTarget.depthTexture) {
      const depthTexture = renderTarget.depthTexture;
      if (renderTargetProperties.__depthDisposeCallback) {
        renderTargetProperties.__depthDisposeCallback();
      }
      if (depthTexture) {
        const disposeEvent = () => {
          delete renderTargetProperties.__boundDepthTexture;
          delete renderTargetProperties.__depthDisposeCallback;
          depthTexture.removeEventListener("dispose", disposeEvent);
        };
        depthTexture.addEventListener("dispose", disposeEvent);
        renderTargetProperties.__depthDisposeCallback = disposeEvent;
      }
      renderTargetProperties.__boundDepthTexture = depthTexture;
    }
    if (renderTarget.depthTexture && !renderTargetProperties.__autoAllocateDepthBuffer) {
      if (isCube) throw new Error("target.depthTexture not supported in Cube render targets");
      setupDepthTexture(renderTargetProperties.__webglFramebuffer, renderTarget);
    } else {
      if (isCube) {
        renderTargetProperties.__webglDepthbuffer = [];
        for (let i = 0; i < 6; i++) {
          state.bindFramebuffer(_gl.FRAMEBUFFER, renderTargetProperties.__webglFramebuffer[i]);
          if (renderTargetProperties.__webglDepthbuffer[i] === void 0) {
            renderTargetProperties.__webglDepthbuffer[i] = _gl.createRenderbuffer();
            setupRenderBufferStorage(renderTargetProperties.__webglDepthbuffer[i], renderTarget, false);
          } else {
            const glAttachmentType = renderTarget.stencilBuffer ? _gl.DEPTH_STENCIL_ATTACHMENT : _gl.DEPTH_ATTACHMENT;
            const renderbuffer = renderTargetProperties.__webglDepthbuffer[i];
            _gl.bindRenderbuffer(_gl.RENDERBUFFER, renderbuffer);
            _gl.framebufferRenderbuffer(_gl.FRAMEBUFFER, glAttachmentType, _gl.RENDERBUFFER, renderbuffer);
          }
        }
      } else {
        state.bindFramebuffer(_gl.FRAMEBUFFER, renderTargetProperties.__webglFramebuffer);
        if (renderTargetProperties.__webglDepthbuffer === void 0) {
          renderTargetProperties.__webglDepthbuffer = _gl.createRenderbuffer();
          setupRenderBufferStorage(renderTargetProperties.__webglDepthbuffer, renderTarget, false);
        } else {
          const glAttachmentType = renderTarget.stencilBuffer ? _gl.DEPTH_STENCIL_ATTACHMENT : _gl.DEPTH_ATTACHMENT;
          const renderbuffer = renderTargetProperties.__webglDepthbuffer;
          _gl.bindRenderbuffer(_gl.RENDERBUFFER, renderbuffer);
          _gl.framebufferRenderbuffer(_gl.FRAMEBUFFER, glAttachmentType, _gl.RENDERBUFFER, renderbuffer);
        }
      }
    }
    state.bindFramebuffer(_gl.FRAMEBUFFER, null);
  }
  function rebindTextures(renderTarget, colorTexture, depthTexture) {
    const renderTargetProperties = properties.get(renderTarget);
    if (colorTexture !== void 0) {
      setupFrameBufferTexture(renderTargetProperties.__webglFramebuffer, renderTarget, renderTarget.texture, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_2D, 0);
    }
    if (depthTexture !== void 0) {
      setupDepthRenderbuffer(renderTarget);
    }
  }
  function setupRenderTarget(renderTarget) {
    const texture = renderTarget.texture;
    const renderTargetProperties = properties.get(renderTarget);
    const textureProperties = properties.get(texture);
    renderTarget.addEventListener("dispose", onRenderTargetDispose);
    const textures = renderTarget.textures;
    const isCube = renderTarget.isWebGLCubeRenderTarget === true;
    const isMultipleRenderTargets = textures.length > 1;
    if (!isMultipleRenderTargets) {
      if (textureProperties.__webglTexture === void 0) {
        textureProperties.__webglTexture = _gl.createTexture();
      }
      textureProperties.__version = texture.version;
      info.memory.textures++;
    }
    if (isCube) {
      renderTargetProperties.__webglFramebuffer = [];
      for (let i = 0; i < 6; i++) {
        if (texture.mipmaps && texture.mipmaps.length > 0) {
          renderTargetProperties.__webglFramebuffer[i] = [];
          for (let level = 0; level < texture.mipmaps.length; level++) {
            renderTargetProperties.__webglFramebuffer[i][level] = _gl.createFramebuffer();
          }
        } else {
          renderTargetProperties.__webglFramebuffer[i] = _gl.createFramebuffer();
        }
      }
    } else {
      if (texture.mipmaps && texture.mipmaps.length > 0) {
        renderTargetProperties.__webglFramebuffer = [];
        for (let level = 0; level < texture.mipmaps.length; level++) {
          renderTargetProperties.__webglFramebuffer[level] = _gl.createFramebuffer();
        }
      } else {
        renderTargetProperties.__webglFramebuffer = _gl.createFramebuffer();
      }
      if (isMultipleRenderTargets) {
        for (let i = 0, il2 = textures.length; i < il2; i++) {
          const attachmentProperties = properties.get(textures[i]);
          if (attachmentProperties.__webglTexture === void 0) {
            attachmentProperties.__webglTexture = _gl.createTexture();
            info.memory.textures++;
          }
        }
      }
      if (renderTarget.samples > 0 && useMultisampledRTT(renderTarget) === false) {
        renderTargetProperties.__webglMultisampledFramebuffer = _gl.createFramebuffer();
        renderTargetProperties.__webglColorRenderbuffer = [];
        state.bindFramebuffer(_gl.FRAMEBUFFER, renderTargetProperties.__webglMultisampledFramebuffer);
        for (let i = 0; i < textures.length; i++) {
          const texture2 = textures[i];
          renderTargetProperties.__webglColorRenderbuffer[i] = _gl.createRenderbuffer();
          _gl.bindRenderbuffer(_gl.RENDERBUFFER, renderTargetProperties.__webglColorRenderbuffer[i]);
          const glFormat = utils.convert(texture2.format, texture2.colorSpace);
          const glType = utils.convert(texture2.type);
          const glInternalFormat = getInternalFormat(texture2.internalFormat, glFormat, glType, texture2.colorSpace, renderTarget.isXRRenderTarget === true);
          const samples = getRenderTargetSamples(renderTarget);
          _gl.renderbufferStorageMultisample(_gl.RENDERBUFFER, samples, glInternalFormat, renderTarget.width, renderTarget.height);
          _gl.framebufferRenderbuffer(_gl.FRAMEBUFFER, _gl.COLOR_ATTACHMENT0 + i, _gl.RENDERBUFFER, renderTargetProperties.__webglColorRenderbuffer[i]);
        }
        _gl.bindRenderbuffer(_gl.RENDERBUFFER, null);
        if (renderTarget.depthBuffer) {
          renderTargetProperties.__webglDepthRenderbuffer = _gl.createRenderbuffer();
          setupRenderBufferStorage(renderTargetProperties.__webglDepthRenderbuffer, renderTarget, true);
        }
        state.bindFramebuffer(_gl.FRAMEBUFFER, null);
      }
    }
    if (isCube) {
      state.bindTexture(_gl.TEXTURE_CUBE_MAP, textureProperties.__webglTexture);
      setTextureParameters(_gl.TEXTURE_CUBE_MAP, texture);
      for (let i = 0; i < 6; i++) {
        if (texture.mipmaps && texture.mipmaps.length > 0) {
          for (let level = 0; level < texture.mipmaps.length; level++) {
            setupFrameBufferTexture(renderTargetProperties.__webglFramebuffer[i][level], renderTarget, texture, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, level);
          }
        } else {
          setupFrameBufferTexture(renderTargetProperties.__webglFramebuffer[i], renderTarget, texture, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0);
        }
      }
      if (textureNeedsGenerateMipmaps(texture)) {
        generateMipmap(_gl.TEXTURE_CUBE_MAP);
      }
      state.unbindTexture();
    } else if (isMultipleRenderTargets) {
      for (let i = 0, il2 = textures.length; i < il2; i++) {
        const attachment = textures[i];
        const attachmentProperties = properties.get(attachment);
        state.bindTexture(_gl.TEXTURE_2D, attachmentProperties.__webglTexture);
        setTextureParameters(_gl.TEXTURE_2D, attachment);
        setupFrameBufferTexture(renderTargetProperties.__webglFramebuffer, renderTarget, attachment, _gl.COLOR_ATTACHMENT0 + i, _gl.TEXTURE_2D, 0);
        if (textureNeedsGenerateMipmaps(attachment)) {
          generateMipmap(_gl.TEXTURE_2D);
        }
      }
      state.unbindTexture();
    } else {
      let glTextureType = _gl.TEXTURE_2D;
      if (renderTarget.isWebGL3DRenderTarget || renderTarget.isWebGLArrayRenderTarget) {
        glTextureType = renderTarget.isWebGL3DRenderTarget ? _gl.TEXTURE_3D : _gl.TEXTURE_2D_ARRAY;
      }
      state.bindTexture(glTextureType, textureProperties.__webglTexture);
      setTextureParameters(glTextureType, texture);
      if (texture.mipmaps && texture.mipmaps.length > 0) {
        for (let level = 0; level < texture.mipmaps.length; level++) {
          setupFrameBufferTexture(renderTargetProperties.__webglFramebuffer[level], renderTarget, texture, _gl.COLOR_ATTACHMENT0, glTextureType, level);
        }
      } else {
        setupFrameBufferTexture(renderTargetProperties.__webglFramebuffer, renderTarget, texture, _gl.COLOR_ATTACHMENT0, glTextureType, 0);
      }
      if (textureNeedsGenerateMipmaps(texture)) {
        generateMipmap(glTextureType);
      }
      state.unbindTexture();
    }
    if (renderTarget.depthBuffer) {
      setupDepthRenderbuffer(renderTarget);
    }
  }
  function updateRenderTargetMipmap(renderTarget) {
    const textures = renderTarget.textures;
    for (let i = 0, il2 = textures.length; i < il2; i++) {
      const texture = textures[i];
      if (textureNeedsGenerateMipmaps(texture)) {
        const target = renderTarget.isWebGLCubeRenderTarget ? _gl.TEXTURE_CUBE_MAP : _gl.TEXTURE_2D;
        const webglTexture = properties.get(texture).__webglTexture;
        state.bindTexture(target, webglTexture);
        generateMipmap(target);
        state.unbindTexture();
      }
    }
  }
  const invalidationArrayRead = [];
  const invalidationArrayDraw = [];
  function updateMultisampleRenderTarget(renderTarget) {
    if (renderTarget.samples > 0) {
      if (useMultisampledRTT(renderTarget) === false) {
        const textures = renderTarget.textures;
        const width = renderTarget.width;
        const height = renderTarget.height;
        let mask = _gl.COLOR_BUFFER_BIT;
        const depthStyle = renderTarget.stencilBuffer ? _gl.DEPTH_STENCIL_ATTACHMENT : _gl.DEPTH_ATTACHMENT;
        const renderTargetProperties = properties.get(renderTarget);
        const isMultipleRenderTargets = textures.length > 1;
        if (isMultipleRenderTargets) {
          for (let i = 0; i < textures.length; i++) {
            state.bindFramebuffer(_gl.FRAMEBUFFER, renderTargetProperties.__webglMultisampledFramebuffer);
            _gl.framebufferRenderbuffer(_gl.FRAMEBUFFER, _gl.COLOR_ATTACHMENT0 + i, _gl.RENDERBUFFER, null);
            state.bindFramebuffer(_gl.FRAMEBUFFER, renderTargetProperties.__webglFramebuffer);
            _gl.framebufferTexture2D(_gl.DRAW_FRAMEBUFFER, _gl.COLOR_ATTACHMENT0 + i, _gl.TEXTURE_2D, null, 0);
          }
        }
        state.bindFramebuffer(_gl.READ_FRAMEBUFFER, renderTargetProperties.__webglMultisampledFramebuffer);
        state.bindFramebuffer(_gl.DRAW_FRAMEBUFFER, renderTargetProperties.__webglFramebuffer);
        for (let i = 0; i < textures.length; i++) {
          if (renderTarget.resolveDepthBuffer) {
            if (renderTarget.depthBuffer) mask |= _gl.DEPTH_BUFFER_BIT;
            if (renderTarget.stencilBuffer && renderTarget.resolveStencilBuffer) mask |= _gl.STENCIL_BUFFER_BIT;
          }
          if (isMultipleRenderTargets) {
            _gl.framebufferRenderbuffer(_gl.READ_FRAMEBUFFER, _gl.COLOR_ATTACHMENT0, _gl.RENDERBUFFER, renderTargetProperties.__webglColorRenderbuffer[i]);
            const webglTexture = properties.get(textures[i]).__webglTexture;
            _gl.framebufferTexture2D(_gl.DRAW_FRAMEBUFFER, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_2D, webglTexture, 0);
          }
          _gl.blitFramebuffer(0, 0, width, height, 0, 0, width, height, mask, _gl.NEAREST);
          if (supportsInvalidateFramebuffer === true) {
            invalidationArrayRead.length = 0;
            invalidationArrayDraw.length = 0;
            invalidationArrayRead.push(_gl.COLOR_ATTACHMENT0 + i);
            if (renderTarget.depthBuffer && renderTarget.resolveDepthBuffer === false) {
              invalidationArrayRead.push(depthStyle);
              invalidationArrayDraw.push(depthStyle);
              _gl.invalidateFramebuffer(_gl.DRAW_FRAMEBUFFER, invalidationArrayDraw);
            }
            _gl.invalidateFramebuffer(_gl.READ_FRAMEBUFFER, invalidationArrayRead);
          }
        }
        state.bindFramebuffer(_gl.READ_FRAMEBUFFER, null);
        state.bindFramebuffer(_gl.DRAW_FRAMEBUFFER, null);
        if (isMultipleRenderTargets) {
          for (let i = 0; i < textures.length; i++) {
            state.bindFramebuffer(_gl.FRAMEBUFFER, renderTargetProperties.__webglMultisampledFramebuffer);
            _gl.framebufferRenderbuffer(_gl.FRAMEBUFFER, _gl.COLOR_ATTACHMENT0 + i, _gl.RENDERBUFFER, renderTargetProperties.__webglColorRenderbuffer[i]);
            const webglTexture = properties.get(textures[i]).__webglTexture;
            state.bindFramebuffer(_gl.FRAMEBUFFER, renderTargetProperties.__webglFramebuffer);
            _gl.framebufferTexture2D(_gl.DRAW_FRAMEBUFFER, _gl.COLOR_ATTACHMENT0 + i, _gl.TEXTURE_2D, webglTexture, 0);
          }
        }
        state.bindFramebuffer(_gl.DRAW_FRAMEBUFFER, renderTargetProperties.__webglMultisampledFramebuffer);
      } else {
        if (renderTarget.depthBuffer && renderTarget.resolveDepthBuffer === false && supportsInvalidateFramebuffer) {
          const depthStyle = renderTarget.stencilBuffer ? _gl.DEPTH_STENCIL_ATTACHMENT : _gl.DEPTH_ATTACHMENT;
          _gl.invalidateFramebuffer(_gl.DRAW_FRAMEBUFFER, [depthStyle]);
        }
      }
    }
  }
  function getRenderTargetSamples(renderTarget) {
    return Math.min(capabilities.maxSamples, renderTarget.samples);
  }
  function useMultisampledRTT(renderTarget) {
    const renderTargetProperties = properties.get(renderTarget);
    return renderTarget.samples > 0 && extensions.has("WEBGL_multisampled_render_to_texture") === true && renderTargetProperties.__useRenderToTexture !== false;
  }
  function updateVideoTexture(texture) {
    const frame = info.render.frame;
    if (_videoTextures.get(texture) !== frame) {
      _videoTextures.set(texture, frame);
      texture.update();
    }
  }
  function verifyColorSpace(texture, image) {
    const colorSpace = texture.colorSpace;
    const format = texture.format;
    const type = texture.type;
    if (texture.isCompressedTexture === true || texture.isVideoTexture === true) return image;
    if (colorSpace !== LinearSRGBColorSpace && colorSpace !== NoColorSpace) {
      if (ColorManagement.getTransfer(colorSpace) === SRGBTransfer) {
        if (format !== RGBAFormat || type !== UnsignedByteType) {
          console.warn("THREE.WebGLTextures: sRGB encoded textures have to use RGBAFormat and UnsignedByteType.");
        }
      } else {
        console.error("THREE.WebGLTextures: Unsupported texture color space:", colorSpace);
      }
    }
    return image;
  }
  function getDimensions(image) {
    if (typeof HTMLImageElement !== "undefined" && image instanceof HTMLImageElement) {
      _imageDimensions.width = image.naturalWidth || image.width;
      _imageDimensions.height = image.naturalHeight || image.height;
    } else if (typeof VideoFrame !== "undefined" && image instanceof VideoFrame) {
      _imageDimensions.width = image.displayWidth;
      _imageDimensions.height = image.displayHeight;
    } else {
      _imageDimensions.width = image.width;
      _imageDimensions.height = image.height;
    }
    return _imageDimensions;
  }
  this.allocateTextureUnit = allocateTextureUnit;
  this.resetTextureUnits = resetTextureUnits;
  this.setTexture2D = setTexture2D;
  this.setTexture2DArray = setTexture2DArray;
  this.setTexture3D = setTexture3D;
  this.setTextureCube = setTextureCube;
  this.rebindTextures = rebindTextures;
  this.setupRenderTarget = setupRenderTarget;
  this.updateRenderTargetMipmap = updateRenderTargetMipmap;
  this.updateMultisampleRenderTarget = updateMultisampleRenderTarget;
  this.setupDepthRenderbuffer = setupDepthRenderbuffer;
  this.setupFrameBufferTexture = setupFrameBufferTexture;
  this.useMultisampledRTT = useMultisampledRTT;
}
function WebGLUtils(gl2, extensions) {
  function convert(p2, colorSpace = NoColorSpace) {
    let extension;
    const transfer = ColorManagement.getTransfer(colorSpace);
    if (p2 === UnsignedByteType) return gl2.UNSIGNED_BYTE;
    if (p2 === UnsignedShort4444Type) return gl2.UNSIGNED_SHORT_4_4_4_4;
    if (p2 === UnsignedShort5551Type) return gl2.UNSIGNED_SHORT_5_5_5_1;
    if (p2 === UnsignedInt5999Type) return gl2.UNSIGNED_INT_5_9_9_9_REV;
    if (p2 === ByteType) return gl2.BYTE;
    if (p2 === ShortType) return gl2.SHORT;
    if (p2 === UnsignedShortType) return gl2.UNSIGNED_SHORT;
    if (p2 === IntType) return gl2.INT;
    if (p2 === UnsignedIntType) return gl2.UNSIGNED_INT;
    if (p2 === FloatType) return gl2.FLOAT;
    if (p2 === HalfFloatType) return gl2.HALF_FLOAT;
    if (p2 === AlphaFormat) return gl2.ALPHA;
    if (p2 === RGBFormat) return gl2.RGB;
    if (p2 === RGBAFormat) return gl2.RGBA;
    if (p2 === LuminanceFormat) return gl2.LUMINANCE;
    if (p2 === LuminanceAlphaFormat) return gl2.LUMINANCE_ALPHA;
    if (p2 === DepthFormat) return gl2.DEPTH_COMPONENT;
    if (p2 === DepthStencilFormat) return gl2.DEPTH_STENCIL;
    if (p2 === RedFormat) return gl2.RED;
    if (p2 === RedIntegerFormat) return gl2.RED_INTEGER;
    if (p2 === RGFormat) return gl2.RG;
    if (p2 === RGIntegerFormat) return gl2.RG_INTEGER;
    if (p2 === RGBAIntegerFormat) return gl2.RGBA_INTEGER;
    if (p2 === RGB_S3TC_DXT1_Format || p2 === RGBA_S3TC_DXT1_Format || p2 === RGBA_S3TC_DXT3_Format || p2 === RGBA_S3TC_DXT5_Format) {
      if (transfer === SRGBTransfer) {
        extension = extensions.get("WEBGL_compressed_texture_s3tc_srgb");
        if (extension !== null) {
          if (p2 === RGB_S3TC_DXT1_Format) return extension.COMPRESSED_SRGB_S3TC_DXT1_EXT;
          if (p2 === RGBA_S3TC_DXT1_Format) return extension.COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT;
          if (p2 === RGBA_S3TC_DXT3_Format) return extension.COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT;
          if (p2 === RGBA_S3TC_DXT5_Format) return extension.COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT;
        } else {
          return null;
        }
      } else {
        extension = extensions.get("WEBGL_compressed_texture_s3tc");
        if (extension !== null) {
          if (p2 === RGB_S3TC_DXT1_Format) return extension.COMPRESSED_RGB_S3TC_DXT1_EXT;
          if (p2 === RGBA_S3TC_DXT1_Format) return extension.COMPRESSED_RGBA_S3TC_DXT1_EXT;
          if (p2 === RGBA_S3TC_DXT3_Format) return extension.COMPRESSED_RGBA_S3TC_DXT3_EXT;
          if (p2 === RGBA_S3TC_DXT5_Format) return extension.COMPRESSED_RGBA_S3TC_DXT5_EXT;
        } else {
          return null;
        }
      }
    }
    if (p2 === RGB_PVRTC_4BPPV1_Format || p2 === RGB_PVRTC_2BPPV1_Format || p2 === RGBA_PVRTC_4BPPV1_Format || p2 === RGBA_PVRTC_2BPPV1_Format) {
      extension = extensions.get("WEBGL_compressed_texture_pvrtc");
      if (extension !== null) {
        if (p2 === RGB_PVRTC_4BPPV1_Format) return extension.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;
        if (p2 === RGB_PVRTC_2BPPV1_Format) return extension.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;
        if (p2 === RGBA_PVRTC_4BPPV1_Format) return extension.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;
        if (p2 === RGBA_PVRTC_2BPPV1_Format) return extension.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG;
      } else {
        return null;
      }
    }
    if (p2 === RGB_ETC1_Format || p2 === RGB_ETC2_Format || p2 === RGBA_ETC2_EAC_Format) {
      extension = extensions.get("WEBGL_compressed_texture_etc");
      if (extension !== null) {
        if (p2 === RGB_ETC1_Format || p2 === RGB_ETC2_Format) return transfer === SRGBTransfer ? extension.COMPRESSED_SRGB8_ETC2 : extension.COMPRESSED_RGB8_ETC2;
        if (p2 === RGBA_ETC2_EAC_Format) return transfer === SRGBTransfer ? extension.COMPRESSED_SRGB8_ALPHA8_ETC2_EAC : extension.COMPRESSED_RGBA8_ETC2_EAC;
      } else {
        return null;
      }
    }
    if (p2 === RGBA_ASTC_4x4_Format || p2 === RGBA_ASTC_5x4_Format || p2 === RGBA_ASTC_5x5_Format || p2 === RGBA_ASTC_6x5_Format || p2 === RGBA_ASTC_6x6_Format || p2 === RGBA_ASTC_8x5_Format || p2 === RGBA_ASTC_8x6_Format || p2 === RGBA_ASTC_8x8_Format || p2 === RGBA_ASTC_10x5_Format || p2 === RGBA_ASTC_10x6_Format || p2 === RGBA_ASTC_10x8_Format || p2 === RGBA_ASTC_10x10_Format || p2 === RGBA_ASTC_12x10_Format || p2 === RGBA_ASTC_12x12_Format) {
      extension = extensions.get("WEBGL_compressed_texture_astc");
      if (extension !== null) {
        if (p2 === RGBA_ASTC_4x4_Format) return transfer === SRGBTransfer ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR : extension.COMPRESSED_RGBA_ASTC_4x4_KHR;
        if (p2 === RGBA_ASTC_5x4_Format) return transfer === SRGBTransfer ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR : extension.COMPRESSED_RGBA_ASTC_5x4_KHR;
        if (p2 === RGBA_ASTC_5x5_Format) return transfer === SRGBTransfer ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR : extension.COMPRESSED_RGBA_ASTC_5x5_KHR;
        if (p2 === RGBA_ASTC_6x5_Format) return transfer === SRGBTransfer ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR : extension.COMPRESSED_RGBA_ASTC_6x5_KHR;
        if (p2 === RGBA_ASTC_6x6_Format) return transfer === SRGBTransfer ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR : extension.COMPRESSED_RGBA_ASTC_6x6_KHR;
        if (p2 === RGBA_ASTC_8x5_Format) return transfer === SRGBTransfer ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR : extension.COMPRESSED_RGBA_ASTC_8x5_KHR;
        if (p2 === RGBA_ASTC_8x6_Format) return transfer === SRGBTransfer ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR : extension.COMPRESSED_RGBA_ASTC_8x6_KHR;
        if (p2 === RGBA_ASTC_8x8_Format) return transfer === SRGBTransfer ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR : extension.COMPRESSED_RGBA_ASTC_8x8_KHR;
        if (p2 === RGBA_ASTC_10x5_Format) return transfer === SRGBTransfer ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR : extension.COMPRESSED_RGBA_ASTC_10x5_KHR;
        if (p2 === RGBA_ASTC_10x6_Format) return transfer === SRGBTransfer ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR : extension.COMPRESSED_RGBA_ASTC_10x6_KHR;
        if (p2 === RGBA_ASTC_10x8_Format) return transfer === SRGBTransfer ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR : extension.COMPRESSED_RGBA_ASTC_10x8_KHR;
        if (p2 === RGBA_ASTC_10x10_Format) return transfer === SRGBTransfer ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR : extension.COMPRESSED_RGBA_ASTC_10x10_KHR;
        if (p2 === RGBA_ASTC_12x10_Format) return transfer === SRGBTransfer ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR : extension.COMPRESSED_RGBA_ASTC_12x10_KHR;
        if (p2 === RGBA_ASTC_12x12_Format) return transfer === SRGBTransfer ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR : extension.COMPRESSED_RGBA_ASTC_12x12_KHR;
      } else {
        return null;
      }
    }
    if (p2 === RGBA_BPTC_Format || p2 === RGB_BPTC_SIGNED_Format || p2 === RGB_BPTC_UNSIGNED_Format) {
      extension = extensions.get("EXT_texture_compression_bptc");
      if (extension !== null) {
        if (p2 === RGBA_BPTC_Format) return transfer === SRGBTransfer ? extension.COMPRESSED_SRGB_ALPHA_BPTC_UNORM_EXT : extension.COMPRESSED_RGBA_BPTC_UNORM_EXT;
        if (p2 === RGB_BPTC_SIGNED_Format) return extension.COMPRESSED_RGB_BPTC_SIGNED_FLOAT_EXT;
        if (p2 === RGB_BPTC_UNSIGNED_Format) return extension.COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_EXT;
      } else {
        return null;
      }
    }
    if (p2 === RED_RGTC1_Format || p2 === SIGNED_RED_RGTC1_Format || p2 === RED_GREEN_RGTC2_Format || p2 === SIGNED_RED_GREEN_RGTC2_Format) {
      extension = extensions.get("EXT_texture_compression_rgtc");
      if (extension !== null) {
        if (p2 === RGBA_BPTC_Format) return extension.COMPRESSED_RED_RGTC1_EXT;
        if (p2 === SIGNED_RED_RGTC1_Format) return extension.COMPRESSED_SIGNED_RED_RGTC1_EXT;
        if (p2 === RED_GREEN_RGTC2_Format) return extension.COMPRESSED_RED_GREEN_RGTC2_EXT;
        if (p2 === SIGNED_RED_GREEN_RGTC2_Format) return extension.COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT;
      } else {
        return null;
      }
    }
    if (p2 === UnsignedInt248Type) return gl2.UNSIGNED_INT_24_8;
    return gl2[p2] !== void 0 ? gl2[p2] : null;
  }
  return { convert };
}
class ArrayCamera extends PerspectiveCamera {
  constructor(array = []) {
    super();
    this.isArrayCamera = true;
    this.cameras = array;
  }
}
class Group extends Object3D {
  constructor() {
    super();
    this.isGroup = true;
    this.type = "Group";
  }
}
const _moveEvent = { type: "move" };
class WebXRController {
  constructor() {
    this._targetRay = null;
    this._grip = null;
    this._hand = null;
  }
  getHandSpace() {
    if (this._hand === null) {
      this._hand = new Group();
      this._hand.matrixAutoUpdate = false;
      this._hand.visible = false;
      this._hand.joints = {};
      this._hand.inputState = { pinching: false };
    }
    return this._hand;
  }
  getTargetRaySpace() {
    if (this._targetRay === null) {
      this._targetRay = new Group();
      this._targetRay.matrixAutoUpdate = false;
      this._targetRay.visible = false;
      this._targetRay.hasLinearVelocity = false;
      this._targetRay.linearVelocity = new Vector3();
      this._targetRay.hasAngularVelocity = false;
      this._targetRay.angularVelocity = new Vector3();
    }
    return this._targetRay;
  }
  getGripSpace() {
    if (this._grip === null) {
      this._grip = new Group();
      this._grip.matrixAutoUpdate = false;
      this._grip.visible = false;
      this._grip.hasLinearVelocity = false;
      this._grip.linearVelocity = new Vector3();
      this._grip.hasAngularVelocity = false;
      this._grip.angularVelocity = new Vector3();
    }
    return this._grip;
  }
  dispatchEvent(event) {
    if (this._targetRay !== null) {
      this._targetRay.dispatchEvent(event);
    }
    if (this._grip !== null) {
      this._grip.dispatchEvent(event);
    }
    if (this._hand !== null) {
      this._hand.dispatchEvent(event);
    }
    return this;
  }
  connect(inputSource) {
    if (inputSource && inputSource.hand) {
      const hand = this._hand;
      if (hand) {
        for (const inputjoint of inputSource.hand.values()) {
          this._getHandJoint(hand, inputjoint);
        }
      }
    }
    this.dispatchEvent({ type: "connected", data: inputSource });
    return this;
  }
  disconnect(inputSource) {
    this.dispatchEvent({ type: "disconnected", data: inputSource });
    if (this._targetRay !== null) {
      this._targetRay.visible = false;
    }
    if (this._grip !== null) {
      this._grip.visible = false;
    }
    if (this._hand !== null) {
      this._hand.visible = false;
    }
    return this;
  }
  update(inputSource, frame, referenceSpace) {
    let inputPose = null;
    let gripPose = null;
    let handPose = null;
    const targetRay = this._targetRay;
    const grip = this._grip;
    const hand = this._hand;
    if (inputSource && frame.session.visibilityState !== "visible-blurred") {
      if (hand && inputSource.hand) {
        handPose = true;
        for (const inputjoint of inputSource.hand.values()) {
          const jointPose = frame.getJointPose(inputjoint, referenceSpace);
          const joint = this._getHandJoint(hand, inputjoint);
          if (jointPose !== null) {
            joint.matrix.fromArray(jointPose.transform.matrix);
            joint.matrix.decompose(joint.position, joint.rotation, joint.scale);
            joint.matrixWorldNeedsUpdate = true;
            joint.jointRadius = jointPose.radius;
          }
          joint.visible = jointPose !== null;
        }
        const indexTip = hand.joints["index-finger-tip"];
        const thumbTip = hand.joints["thumb-tip"];
        const distance = indexTip.position.distanceTo(thumbTip.position);
        const distanceToPinch = 0.02;
        const threshold = 5e-3;
        if (hand.inputState.pinching && distance > distanceToPinch + threshold) {
          hand.inputState.pinching = false;
          this.dispatchEvent({
            type: "pinchend",
            handedness: inputSource.handedness,
            target: this
          });
        } else if (!hand.inputState.pinching && distance <= distanceToPinch - threshold) {
          hand.inputState.pinching = true;
          this.dispatchEvent({
            type: "pinchstart",
            handedness: inputSource.handedness,
            target: this
          });
        }
      } else {
        if (grip !== null && inputSource.gripSpace) {
          gripPose = frame.getPose(inputSource.gripSpace, referenceSpace);
          if (gripPose !== null) {
            grip.matrix.fromArray(gripPose.transform.matrix);
            grip.matrix.decompose(grip.position, grip.rotation, grip.scale);
            grip.matrixWorldNeedsUpdate = true;
            if (gripPose.linearVelocity) {
              grip.hasLinearVelocity = true;
              grip.linearVelocity.copy(gripPose.linearVelocity);
            } else {
              grip.hasLinearVelocity = false;
            }
            if (gripPose.angularVelocity) {
              grip.hasAngularVelocity = true;
              grip.angularVelocity.copy(gripPose.angularVelocity);
            } else {
              grip.hasAngularVelocity = false;
            }
          }
        }
      }
      if (targetRay !== null) {
        inputPose = frame.getPose(inputSource.targetRaySpace, referenceSpace);
        if (inputPose === null && gripPose !== null) {
          inputPose = gripPose;
        }
        if (inputPose !== null) {
          targetRay.matrix.fromArray(inputPose.transform.matrix);
          targetRay.matrix.decompose(targetRay.position, targetRay.rotation, targetRay.scale);
          targetRay.matrixWorldNeedsUpdate = true;
          if (inputPose.linearVelocity) {
            targetRay.hasLinearVelocity = true;
            targetRay.linearVelocity.copy(inputPose.linearVelocity);
          } else {
            targetRay.hasLinearVelocity = false;
          }
          if (inputPose.angularVelocity) {
            targetRay.hasAngularVelocity = true;
            targetRay.angularVelocity.copy(inputPose.angularVelocity);
          } else {
            targetRay.hasAngularVelocity = false;
          }
          this.dispatchEvent(_moveEvent);
        }
      }
    }
    if (targetRay !== null) {
      targetRay.visible = inputPose !== null;
    }
    if (grip !== null) {
      grip.visible = gripPose !== null;
    }
    if (hand !== null) {
      hand.visible = handPose !== null;
    }
    return this;
  }
  // private method
  _getHandJoint(hand, inputjoint) {
    if (hand.joints[inputjoint.jointName] === void 0) {
      const joint = new Group();
      joint.matrixAutoUpdate = false;
      joint.visible = false;
      hand.joints[inputjoint.jointName] = joint;
      hand.add(joint);
    }
    return hand.joints[inputjoint.jointName];
  }
}
const _occlusion_vertex = `
void main() {

	gl_Position = vec4( position, 1.0 );

}`;
const _occlusion_fragment = `
uniform sampler2DArray depthColor;
uniform float depthWidth;
uniform float depthHeight;

void main() {

	vec2 coord = vec2( gl_FragCoord.x / depthWidth, gl_FragCoord.y / depthHeight );

	if ( coord.x >= 1.0 ) {

		gl_FragDepth = texture( depthColor, vec3( coord.x - 1.0, coord.y, 1 ) ).r;

	} else {

		gl_FragDepth = texture( depthColor, vec3( coord.x, coord.y, 0 ) ).r;

	}

}`;
class WebXRDepthSensing {
  constructor() {
    this.texture = null;
    this.mesh = null;
    this.depthNear = 0;
    this.depthFar = 0;
  }
  init(renderer2, depthData, renderState) {
    if (this.texture === null) {
      const texture = new Texture();
      const texProps = renderer2.properties.get(texture);
      texProps.__webglTexture = depthData.texture;
      if (depthData.depthNear != renderState.depthNear || depthData.depthFar != renderState.depthFar) {
        this.depthNear = depthData.depthNear;
        this.depthFar = depthData.depthFar;
      }
      this.texture = texture;
    }
  }
  getMesh(cameraXR) {
    if (this.texture !== null) {
      if (this.mesh === null) {
        const viewport = cameraXR.cameras[0].viewport;
        const material = new ShaderMaterial({
          vertexShader: _occlusion_vertex,
          fragmentShader: _occlusion_fragment,
          uniforms: {
            depthColor: { value: this.texture },
            depthWidth: { value: viewport.z },
            depthHeight: { value: viewport.w }
          }
        });
        this.mesh = new Mesh(new PlaneGeometry(20, 20), material);
      }
    }
    return this.mesh;
  }
  reset() {
    this.texture = null;
    this.mesh = null;
  }
  getDepthTexture() {
    return this.texture;
  }
}
class WebXRManager extends EventDispatcher {
  constructor(renderer2, gl2) {
    super();
    const scope = this;
    let session = null;
    let framebufferScaleFactor = 1;
    let referenceSpace = null;
    let referenceSpaceType = "local-floor";
    let foveation = 1;
    let customReferenceSpace = null;
    let pose = null;
    let glBinding = null;
    let glProjLayer = null;
    let glBaseLayer = null;
    let xrFrame = null;
    const depthSensing = new WebXRDepthSensing();
    const attributes = gl2.getContextAttributes();
    let initialRenderTarget = null;
    let newRenderTarget = null;
    const controllers = [];
    const controllerInputSources = [];
    const currentSize = new Vector2();
    let currentPixelRatio = null;
    const cameraL = new PerspectiveCamera();
    cameraL.layers.enable(1);
    cameraL.viewport = new Vector4();
    const cameraR = new PerspectiveCamera();
    cameraR.layers.enable(2);
    cameraR.viewport = new Vector4();
    const cameras = [cameraL, cameraR];
    const cameraXR = new ArrayCamera();
    cameraXR.layers.enable(1);
    cameraXR.layers.enable(2);
    let _currentDepthNear = null;
    let _currentDepthFar = null;
    this.cameraAutoUpdate = true;
    this.enabled = false;
    this.isPresenting = false;
    this.getController = function(index) {
      let controller = controllers[index];
      if (controller === void 0) {
        controller = new WebXRController();
        controllers[index] = controller;
      }
      return controller.getTargetRaySpace();
    };
    this.getControllerGrip = function(index) {
      let controller = controllers[index];
      if (controller === void 0) {
        controller = new WebXRController();
        controllers[index] = controller;
      }
      return controller.getGripSpace();
    };
    this.getHand = function(index) {
      let controller = controllers[index];
      if (controller === void 0) {
        controller = new WebXRController();
        controllers[index] = controller;
      }
      return controller.getHandSpace();
    };
    function onSessionEvent(event) {
      const controllerIndex = controllerInputSources.indexOf(event.inputSource);
      if (controllerIndex === -1) {
        return;
      }
      const controller = controllers[controllerIndex];
      if (controller !== void 0) {
        controller.update(event.inputSource, event.frame, customReferenceSpace || referenceSpace);
        controller.dispatchEvent({ type: event.type, data: event.inputSource });
      }
    }
    function onSessionEnd() {
      session.removeEventListener("select", onSessionEvent);
      session.removeEventListener("selectstart", onSessionEvent);
      session.removeEventListener("selectend", onSessionEvent);
      session.removeEventListener("squeeze", onSessionEvent);
      session.removeEventListener("squeezestart", onSessionEvent);
      session.removeEventListener("squeezeend", onSessionEvent);
      session.removeEventListener("end", onSessionEnd);
      session.removeEventListener("inputsourceschange", onInputSourcesChange);
      for (let i = 0; i < controllers.length; i++) {
        const inputSource = controllerInputSources[i];
        if (inputSource === null) continue;
        controllerInputSources[i] = null;
        controllers[i].disconnect(inputSource);
      }
      _currentDepthNear = null;
      _currentDepthFar = null;
      depthSensing.reset();
      renderer2.setRenderTarget(initialRenderTarget);
      glBaseLayer = null;
      glProjLayer = null;
      glBinding = null;
      session = null;
      newRenderTarget = null;
      animation.stop();
      scope.isPresenting = false;
      renderer2.setPixelRatio(currentPixelRatio);
      renderer2.setSize(currentSize.width, currentSize.height, false);
      scope.dispatchEvent({ type: "sessionend" });
    }
    this.setFramebufferScaleFactor = function(value) {
      framebufferScaleFactor = value;
      if (scope.isPresenting === true) {
        console.warn("THREE.WebXRManager: Cannot change framebuffer scale while presenting.");
      }
    };
    this.setReferenceSpaceType = function(value) {
      referenceSpaceType = value;
      if (scope.isPresenting === true) {
        console.warn("THREE.WebXRManager: Cannot change reference space type while presenting.");
      }
    };
    this.getReferenceSpace = function() {
      return customReferenceSpace || referenceSpace;
    };
    this.setReferenceSpace = function(space) {
      customReferenceSpace = space;
    };
    this.getBaseLayer = function() {
      return glProjLayer !== null ? glProjLayer : glBaseLayer;
    };
    this.getBinding = function() {
      return glBinding;
    };
    this.getFrame = function() {
      return xrFrame;
    };
    this.getSession = function() {
      return session;
    };
    this.setSession = async function(value) {
      session = value;
      if (session !== null) {
        initialRenderTarget = renderer2.getRenderTarget();
        session.addEventListener("select", onSessionEvent);
        session.addEventListener("selectstart", onSessionEvent);
        session.addEventListener("selectend", onSessionEvent);
        session.addEventListener("squeeze", onSessionEvent);
        session.addEventListener("squeezestart", onSessionEvent);
        session.addEventListener("squeezeend", onSessionEvent);
        session.addEventListener("end", onSessionEnd);
        session.addEventListener("inputsourceschange", onInputSourcesChange);
        if (attributes.xrCompatible !== true) {
          await gl2.makeXRCompatible();
        }
        currentPixelRatio = renderer2.getPixelRatio();
        renderer2.getSize(currentSize);
        if (session.renderState.layers === void 0) {
          const layerInit = {
            antialias: attributes.antialias,
            alpha: true,
            depth: attributes.depth,
            stencil: attributes.stencil,
            framebufferScaleFactor
          };
          glBaseLayer = new XRWebGLLayer(session, gl2, layerInit);
          session.updateRenderState({ baseLayer: glBaseLayer });
          renderer2.setPixelRatio(1);
          renderer2.setSize(glBaseLayer.framebufferWidth, glBaseLayer.framebufferHeight, false);
          newRenderTarget = new WebGLRenderTarget(
            glBaseLayer.framebufferWidth,
            glBaseLayer.framebufferHeight,
            {
              format: RGBAFormat,
              type: UnsignedByteType,
              colorSpace: renderer2.outputColorSpace,
              stencilBuffer: attributes.stencil
            }
          );
        } else {
          let depthFormat = null;
          let depthType = null;
          let glDepthFormat = null;
          if (attributes.depth) {
            glDepthFormat = attributes.stencil ? gl2.DEPTH24_STENCIL8 : gl2.DEPTH_COMPONENT24;
            depthFormat = attributes.stencil ? DepthStencilFormat : DepthFormat;
            depthType = attributes.stencil ? UnsignedInt248Type : UnsignedIntType;
          }
          const projectionlayerInit = {
            colorFormat: gl2.RGBA8,
            depthFormat: glDepthFormat,
            scaleFactor: framebufferScaleFactor
          };
          glBinding = new XRWebGLBinding(session, gl2);
          glProjLayer = glBinding.createProjectionLayer(projectionlayerInit);
          session.updateRenderState({ layers: [glProjLayer] });
          renderer2.setPixelRatio(1);
          renderer2.setSize(glProjLayer.textureWidth, glProjLayer.textureHeight, false);
          newRenderTarget = new WebGLRenderTarget(
            glProjLayer.textureWidth,
            glProjLayer.textureHeight,
            {
              format: RGBAFormat,
              type: UnsignedByteType,
              depthTexture: new DepthTexture(glProjLayer.textureWidth, glProjLayer.textureHeight, depthType, void 0, void 0, void 0, void 0, void 0, void 0, depthFormat),
              stencilBuffer: attributes.stencil,
              colorSpace: renderer2.outputColorSpace,
              samples: attributes.antialias ? 4 : 0,
              resolveDepthBuffer: glProjLayer.ignoreDepthValues === false
            }
          );
        }
        newRenderTarget.isXRRenderTarget = true;
        this.setFoveation(foveation);
        customReferenceSpace = null;
        referenceSpace = await session.requestReferenceSpace(referenceSpaceType);
        animation.setContext(session);
        animation.start();
        scope.isPresenting = true;
        scope.dispatchEvent({ type: "sessionstart" });
      }
    };
    this.getEnvironmentBlendMode = function() {
      if (session !== null) {
        return session.environmentBlendMode;
      }
    };
    this.getDepthTexture = function() {
      return depthSensing.getDepthTexture();
    };
    function onInputSourcesChange(event) {
      for (let i = 0; i < event.removed.length; i++) {
        const inputSource = event.removed[i];
        const index = controllerInputSources.indexOf(inputSource);
        if (index >= 0) {
          controllerInputSources[index] = null;
          controllers[index].disconnect(inputSource);
        }
      }
      for (let i = 0; i < event.added.length; i++) {
        const inputSource = event.added[i];
        let controllerIndex = controllerInputSources.indexOf(inputSource);
        if (controllerIndex === -1) {
          for (let i2 = 0; i2 < controllers.length; i2++) {
            if (i2 >= controllerInputSources.length) {
              controllerInputSources.push(inputSource);
              controllerIndex = i2;
              break;
            } else if (controllerInputSources[i2] === null) {
              controllerInputSources[i2] = inputSource;
              controllerIndex = i2;
              break;
            }
          }
          if (controllerIndex === -1) break;
        }
        const controller = controllers[controllerIndex];
        if (controller) {
          controller.connect(inputSource);
        }
      }
    }
    const cameraLPos = new Vector3();
    const cameraRPos = new Vector3();
    function setProjectionFromUnion(camera, cameraL2, cameraR2) {
      cameraLPos.setFromMatrixPosition(cameraL2.matrixWorld);
      cameraRPos.setFromMatrixPosition(cameraR2.matrixWorld);
      const ipd = cameraLPos.distanceTo(cameraRPos);
      const projL = cameraL2.projectionMatrix.elements;
      const projR = cameraR2.projectionMatrix.elements;
      const near = projL[14] / (projL[10] - 1);
      const far = projL[14] / (projL[10] + 1);
      const topFov = (projL[9] + 1) / projL[5];
      const bottomFov = (projL[9] - 1) / projL[5];
      const leftFov = (projL[8] - 1) / projL[0];
      const rightFov = (projR[8] + 1) / projR[0];
      const left = near * leftFov;
      const right = near * rightFov;
      const zOffset = ipd / (-leftFov + rightFov);
      const xOffset = zOffset * -leftFov;
      cameraL2.matrixWorld.decompose(camera.position, camera.quaternion, camera.scale);
      camera.translateX(xOffset);
      camera.translateZ(zOffset);
      camera.matrixWorld.compose(camera.position, camera.quaternion, camera.scale);
      camera.matrixWorldInverse.copy(camera.matrixWorld).invert();
      if (projL[10] === -1) {
        camera.projectionMatrix.copy(cameraL2.projectionMatrix);
        camera.projectionMatrixInverse.copy(cameraL2.projectionMatrixInverse);
      } else {
        const near2 = near + zOffset;
        const far2 = far + zOffset;
        const left2 = left - xOffset;
        const right2 = right + (ipd - xOffset);
        const top2 = topFov * far / far2 * near2;
        const bottom2 = bottomFov * far / far2 * near2;
        camera.projectionMatrix.makePerspective(left2, right2, top2, bottom2, near2, far2);
        camera.projectionMatrixInverse.copy(camera.projectionMatrix).invert();
      }
    }
    function updateCamera(camera, parent) {
      if (parent === null) {
        camera.matrixWorld.copy(camera.matrix);
      } else {
        camera.matrixWorld.multiplyMatrices(parent.matrixWorld, camera.matrix);
      }
      camera.matrixWorldInverse.copy(camera.matrixWorld).invert();
    }
    this.updateCamera = function(camera) {
      if (session === null) return;
      let depthNear = camera.near;
      let depthFar = camera.far;
      if (depthSensing.texture !== null) {
        if (depthSensing.depthNear > 0) depthNear = depthSensing.depthNear;
        if (depthSensing.depthFar > 0) depthFar = depthSensing.depthFar;
      }
      cameraXR.near = cameraR.near = cameraL.near = depthNear;
      cameraXR.far = cameraR.far = cameraL.far = depthFar;
      if (_currentDepthNear !== cameraXR.near || _currentDepthFar !== cameraXR.far) {
        session.updateRenderState({
          depthNear: cameraXR.near,
          depthFar: cameraXR.far
        });
        _currentDepthNear = cameraXR.near;
        _currentDepthFar = cameraXR.far;
      }
      const parent = camera.parent;
      const cameras2 = cameraXR.cameras;
      updateCamera(cameraXR, parent);
      for (let i = 0; i < cameras2.length; i++) {
        updateCamera(cameras2[i], parent);
      }
      if (cameras2.length === 2) {
        setProjectionFromUnion(cameraXR, cameraL, cameraR);
      } else {
        cameraXR.projectionMatrix.copy(cameraL.projectionMatrix);
      }
      updateUserCamera(camera, cameraXR, parent);
    };
    function updateUserCamera(camera, cameraXR2, parent) {
      if (parent === null) {
        camera.matrix.copy(cameraXR2.matrixWorld);
      } else {
        camera.matrix.copy(parent.matrixWorld);
        camera.matrix.invert();
        camera.matrix.multiply(cameraXR2.matrixWorld);
      }
      camera.matrix.decompose(camera.position, camera.quaternion, camera.scale);
      camera.updateMatrixWorld(true);
      camera.projectionMatrix.copy(cameraXR2.projectionMatrix);
      camera.projectionMatrixInverse.copy(cameraXR2.projectionMatrixInverse);
      if (camera.isPerspectiveCamera) {
        camera.fov = RAD2DEG * 2 * Math.atan(1 / camera.projectionMatrix.elements[5]);
        camera.zoom = 1;
      }
    }
    this.getCamera = function() {
      return cameraXR;
    };
    this.getFoveation = function() {
      if (glProjLayer === null && glBaseLayer === null) {
        return void 0;
      }
      return foveation;
    };
    this.setFoveation = function(value) {
      foveation = value;
      if (glProjLayer !== null) {
        glProjLayer.fixedFoveation = value;
      }
      if (glBaseLayer !== null && glBaseLayer.fixedFoveation !== void 0) {
        glBaseLayer.fixedFoveation = value;
      }
    };
    this.hasDepthSensing = function() {
      return depthSensing.texture !== null;
    };
    this.getDepthSensingMesh = function() {
      return depthSensing.getMesh(cameraXR);
    };
    let onAnimationFrameCallback = null;
    function onAnimationFrame(time, frame) {
      pose = frame.getViewerPose(customReferenceSpace || referenceSpace);
      xrFrame = frame;
      if (pose !== null) {
        const views = pose.views;
        if (glBaseLayer !== null) {
          renderer2.setRenderTargetFramebuffer(newRenderTarget, glBaseLayer.framebuffer);
          renderer2.setRenderTarget(newRenderTarget);
        }
        let cameraXRNeedsUpdate = false;
        if (views.length !== cameraXR.cameras.length) {
          cameraXR.cameras.length = 0;
          cameraXRNeedsUpdate = true;
        }
        for (let i = 0; i < views.length; i++) {
          const view = views[i];
          let viewport = null;
          if (glBaseLayer !== null) {
            viewport = glBaseLayer.getViewport(view);
          } else {
            const glSubImage = glBinding.getViewSubImage(glProjLayer, view);
            viewport = glSubImage.viewport;
            if (i === 0) {
              renderer2.setRenderTargetTextures(
                newRenderTarget,
                glSubImage.colorTexture,
                glProjLayer.ignoreDepthValues ? void 0 : glSubImage.depthStencilTexture
              );
              renderer2.setRenderTarget(newRenderTarget);
            }
          }
          let camera = cameras[i];
          if (camera === void 0) {
            camera = new PerspectiveCamera();
            camera.layers.enable(i);
            camera.viewport = new Vector4();
            cameras[i] = camera;
          }
          camera.matrix.fromArray(view.transform.matrix);
          camera.matrix.decompose(camera.position, camera.quaternion, camera.scale);
          camera.projectionMatrix.fromArray(view.projectionMatrix);
          camera.projectionMatrixInverse.copy(camera.projectionMatrix).invert();
          camera.viewport.set(viewport.x, viewport.y, viewport.width, viewport.height);
          if (i === 0) {
            cameraXR.matrix.copy(camera.matrix);
            cameraXR.matrix.decompose(cameraXR.position, cameraXR.quaternion, cameraXR.scale);
          }
          if (cameraXRNeedsUpdate === true) {
            cameraXR.cameras.push(camera);
          }
        }
        const enabledFeatures = session.enabledFeatures;
        if (enabledFeatures && enabledFeatures.includes("depth-sensing")) {
          const depthData = glBinding.getDepthInformation(views[0]);
          if (depthData && depthData.isValid && depthData.texture) {
            depthSensing.init(renderer2, depthData, session.renderState);
          }
        }
      }
      for (let i = 0; i < controllers.length; i++) {
        const inputSource = controllerInputSources[i];
        const controller = controllers[i];
        if (inputSource !== null && controller !== void 0) {
          controller.update(inputSource, frame, customReferenceSpace || referenceSpace);
        }
      }
      if (onAnimationFrameCallback) onAnimationFrameCallback(time, frame);
      if (frame.detectedPlanes) {
        scope.dispatchEvent({ type: "planesdetected", data: frame });
      }
      xrFrame = null;
    }
    const animation = new WebGLAnimation();
    animation.setAnimationLoop(onAnimationFrame);
    this.setAnimationLoop = function(callback) {
      onAnimationFrameCallback = callback;
    };
    this.dispose = function() {
    };
  }
}
const _e1 = /* @__PURE__ */ new Euler();
const _m1 = /* @__PURE__ */ new Matrix4();
function WebGLMaterials(renderer2, properties) {
  function refreshTransformUniform(map, uniform) {
    if (map.matrixAutoUpdate === true) {
      map.updateMatrix();
    }
    uniform.value.copy(map.matrix);
  }
  function refreshFogUniforms(uniforms, fog) {
    fog.color.getRGB(uniforms.fogColor.value, getUnlitUniformColorSpace(renderer2));
    if (fog.isFog) {
      uniforms.fogNear.value = fog.near;
      uniforms.fogFar.value = fog.far;
    } else if (fog.isFogExp2) {
      uniforms.fogDensity.value = fog.density;
    }
  }
  function refreshMaterialUniforms(uniforms, material, pixelRatio, height, transmissionRenderTarget) {
    if (material.isMeshBasicMaterial) {
      refreshUniformsCommon(uniforms, material);
    } else if (material.isMeshLambertMaterial) {
      refreshUniformsCommon(uniforms, material);
    } else if (material.isMeshToonMaterial) {
      refreshUniformsCommon(uniforms, material);
      refreshUniformsToon(uniforms, material);
    } else if (material.isMeshPhongMaterial) {
      refreshUniformsCommon(uniforms, material);
      refreshUniformsPhong(uniforms, material);
    } else if (material.isMeshStandardMaterial) {
      refreshUniformsCommon(uniforms, material);
      refreshUniformsStandard(uniforms, material);
      if (material.isMeshPhysicalMaterial) {
        refreshUniformsPhysical(uniforms, material, transmissionRenderTarget);
      }
    } else if (material.isMeshMatcapMaterial) {
      refreshUniformsCommon(uniforms, material);
      refreshUniformsMatcap(uniforms, material);
    } else if (material.isMeshDepthMaterial) {
      refreshUniformsCommon(uniforms, material);
    } else if (material.isMeshDistanceMaterial) {
      refreshUniformsCommon(uniforms, material);
      refreshUniformsDistance(uniforms, material);
    } else if (material.isMeshNormalMaterial) {
      refreshUniformsCommon(uniforms, material);
    } else if (material.isLineBasicMaterial) {
      refreshUniformsLine(uniforms, material);
      if (material.isLineDashedMaterial) {
        refreshUniformsDash(uniforms, material);
      }
    } else if (material.isPointsMaterial) {
      refreshUniformsPoints(uniforms, material, pixelRatio, height);
    } else if (material.isSpriteMaterial) {
      refreshUniformsSprites(uniforms, material);
    } else if (material.isShadowMaterial) {
      uniforms.color.value.copy(material.color);
      uniforms.opacity.value = material.opacity;
    } else if (material.isShaderMaterial) {
      material.uniformsNeedUpdate = false;
    }
  }
  function refreshUniformsCommon(uniforms, material) {
    uniforms.opacity.value = material.opacity;
    if (material.color) {
      uniforms.diffuse.value.copy(material.color);
    }
    if (material.emissive) {
      uniforms.emissive.value.copy(material.emissive).multiplyScalar(material.emissiveIntensity);
    }
    if (material.map) {
      uniforms.map.value = material.map;
      refreshTransformUniform(material.map, uniforms.mapTransform);
    }
    if (material.alphaMap) {
      uniforms.alphaMap.value = material.alphaMap;
      refreshTransformUniform(material.alphaMap, uniforms.alphaMapTransform);
    }
    if (material.bumpMap) {
      uniforms.bumpMap.value = material.bumpMap;
      refreshTransformUniform(material.bumpMap, uniforms.bumpMapTransform);
      uniforms.bumpScale.value = material.bumpScale;
      if (material.side === BackSide) {
        uniforms.bumpScale.value *= -1;
      }
    }
    if (material.normalMap) {
      uniforms.normalMap.value = material.normalMap;
      refreshTransformUniform(material.normalMap, uniforms.normalMapTransform);
      uniforms.normalScale.value.copy(material.normalScale);
      if (material.side === BackSide) {
        uniforms.normalScale.value.negate();
      }
    }
    if (material.displacementMap) {
      uniforms.displacementMap.value = material.displacementMap;
      refreshTransformUniform(material.displacementMap, uniforms.displacementMapTransform);
      uniforms.displacementScale.value = material.displacementScale;
      uniforms.displacementBias.value = material.displacementBias;
    }
    if (material.emissiveMap) {
      uniforms.emissiveMap.value = material.emissiveMap;
      refreshTransformUniform(material.emissiveMap, uniforms.emissiveMapTransform);
    }
    if (material.specularMap) {
      uniforms.specularMap.value = material.specularMap;
      refreshTransformUniform(material.specularMap, uniforms.specularMapTransform);
    }
    if (material.alphaTest > 0) {
      uniforms.alphaTest.value = material.alphaTest;
    }
    const materialProperties = properties.get(material);
    const envMap = materialProperties.envMap;
    const envMapRotation = materialProperties.envMapRotation;
    if (envMap) {
      uniforms.envMap.value = envMap;
      _e1.copy(envMapRotation);
      _e1.x *= -1;
      _e1.y *= -1;
      _e1.z *= -1;
      if (envMap.isCubeTexture && envMap.isRenderTargetTexture === false) {
        _e1.y *= -1;
        _e1.z *= -1;
      }
      uniforms.envMapRotation.value.setFromMatrix4(_m1.makeRotationFromEuler(_e1));
      uniforms.flipEnvMap.value = envMap.isCubeTexture && envMap.isRenderTargetTexture === false ? -1 : 1;
      uniforms.reflectivity.value = material.reflectivity;
      uniforms.ior.value = material.ior;
      uniforms.refractionRatio.value = material.refractionRatio;
    }
    if (material.lightMap) {
      uniforms.lightMap.value = material.lightMap;
      uniforms.lightMapIntensity.value = material.lightMapIntensity;
      refreshTransformUniform(material.lightMap, uniforms.lightMapTransform);
    }
    if (material.aoMap) {
      uniforms.aoMap.value = material.aoMap;
      uniforms.aoMapIntensity.value = material.aoMapIntensity;
      refreshTransformUniform(material.aoMap, uniforms.aoMapTransform);
    }
  }
  function refreshUniformsLine(uniforms, material) {
    uniforms.diffuse.value.copy(material.color);
    uniforms.opacity.value = material.opacity;
    if (material.map) {
      uniforms.map.value = material.map;
      refreshTransformUniform(material.map, uniforms.mapTransform);
    }
  }
  function refreshUniformsDash(uniforms, material) {
    uniforms.dashSize.value = material.dashSize;
    uniforms.totalSize.value = material.dashSize + material.gapSize;
    uniforms.scale.value = material.scale;
  }
  function refreshUniformsPoints(uniforms, material, pixelRatio, height) {
    uniforms.diffuse.value.copy(material.color);
    uniforms.opacity.value = material.opacity;
    uniforms.size.value = material.size * pixelRatio;
    uniforms.scale.value = height * 0.5;
    if (material.map) {
      uniforms.map.value = material.map;
      refreshTransformUniform(material.map, uniforms.uvTransform);
    }
    if (material.alphaMap) {
      uniforms.alphaMap.value = material.alphaMap;
      refreshTransformUniform(material.alphaMap, uniforms.alphaMapTransform);
    }
    if (material.alphaTest > 0) {
      uniforms.alphaTest.value = material.alphaTest;
    }
  }
  function refreshUniformsSprites(uniforms, material) {
    uniforms.diffuse.value.copy(material.color);
    uniforms.opacity.value = material.opacity;
    uniforms.rotation.value = material.rotation;
    if (material.map) {
      uniforms.map.value = material.map;
      refreshTransformUniform(material.map, uniforms.mapTransform);
    }
    if (material.alphaMap) {
      uniforms.alphaMap.value = material.alphaMap;
      refreshTransformUniform(material.alphaMap, uniforms.alphaMapTransform);
    }
    if (material.alphaTest > 0) {
      uniforms.alphaTest.value = material.alphaTest;
    }
  }
  function refreshUniformsPhong(uniforms, material) {
    uniforms.specular.value.copy(material.specular);
    uniforms.shininess.value = Math.max(material.shininess, 1e-4);
  }
  function refreshUniformsToon(uniforms, material) {
    if (material.gradientMap) {
      uniforms.gradientMap.value = material.gradientMap;
    }
  }
  function refreshUniformsStandard(uniforms, material) {
    uniforms.metalness.value = material.metalness;
    if (material.metalnessMap) {
      uniforms.metalnessMap.value = material.metalnessMap;
      refreshTransformUniform(material.metalnessMap, uniforms.metalnessMapTransform);
    }
    uniforms.roughness.value = material.roughness;
    if (material.roughnessMap) {
      uniforms.roughnessMap.value = material.roughnessMap;
      refreshTransformUniform(material.roughnessMap, uniforms.roughnessMapTransform);
    }
    if (material.envMap) {
      uniforms.envMapIntensity.value = material.envMapIntensity;
    }
  }
  function refreshUniformsPhysical(uniforms, material, transmissionRenderTarget) {
    uniforms.ior.value = material.ior;
    if (material.sheen > 0) {
      uniforms.sheenColor.value.copy(material.sheenColor).multiplyScalar(material.sheen);
      uniforms.sheenRoughness.value = material.sheenRoughness;
      if (material.sheenColorMap) {
        uniforms.sheenColorMap.value = material.sheenColorMap;
        refreshTransformUniform(material.sheenColorMap, uniforms.sheenColorMapTransform);
      }
      if (material.sheenRoughnessMap) {
        uniforms.sheenRoughnessMap.value = material.sheenRoughnessMap;
        refreshTransformUniform(material.sheenRoughnessMap, uniforms.sheenRoughnessMapTransform);
      }
    }
    if (material.clearcoat > 0) {
      uniforms.clearcoat.value = material.clearcoat;
      uniforms.clearcoatRoughness.value = material.clearcoatRoughness;
      if (material.clearcoatMap) {
        uniforms.clearcoatMap.value = material.clearcoatMap;
        refreshTransformUniform(material.clearcoatMap, uniforms.clearcoatMapTransform);
      }
      if (material.clearcoatRoughnessMap) {
        uniforms.clearcoatRoughnessMap.value = material.clearcoatRoughnessMap;
        refreshTransformUniform(material.clearcoatRoughnessMap, uniforms.clearcoatRoughnessMapTransform);
      }
      if (material.clearcoatNormalMap) {
        uniforms.clearcoatNormalMap.value = material.clearcoatNormalMap;
        refreshTransformUniform(material.clearcoatNormalMap, uniforms.clearcoatNormalMapTransform);
        uniforms.clearcoatNormalScale.value.copy(material.clearcoatNormalScale);
        if (material.side === BackSide) {
          uniforms.clearcoatNormalScale.value.negate();
        }
      }
    }
    if (material.dispersion > 0) {
      uniforms.dispersion.value = material.dispersion;
    }
    if (material.iridescence > 0) {
      uniforms.iridescence.value = material.iridescence;
      uniforms.iridescenceIOR.value = material.iridescenceIOR;
      uniforms.iridescenceThicknessMinimum.value = material.iridescenceThicknessRange[0];
      uniforms.iridescenceThicknessMaximum.value = material.iridescenceThicknessRange[1];
      if (material.iridescenceMap) {
        uniforms.iridescenceMap.value = material.iridescenceMap;
        refreshTransformUniform(material.iridescenceMap, uniforms.iridescenceMapTransform);
      }
      if (material.iridescenceThicknessMap) {
        uniforms.iridescenceThicknessMap.value = material.iridescenceThicknessMap;
        refreshTransformUniform(material.iridescenceThicknessMap, uniforms.iridescenceThicknessMapTransform);
      }
    }
    if (material.transmission > 0) {
      uniforms.transmission.value = material.transmission;
      uniforms.transmissionSamplerMap.value = transmissionRenderTarget.texture;
      uniforms.transmissionSamplerSize.value.set(transmissionRenderTarget.width, transmissionRenderTarget.height);
      if (material.transmissionMap) {
        uniforms.transmissionMap.value = material.transmissionMap;
        refreshTransformUniform(material.transmissionMap, uniforms.transmissionMapTransform);
      }
      uniforms.thickness.value = material.thickness;
      if (material.thicknessMap) {
        uniforms.thicknessMap.value = material.thicknessMap;
        refreshTransformUniform(material.thicknessMap, uniforms.thicknessMapTransform);
      }
      uniforms.attenuationDistance.value = material.attenuationDistance;
      uniforms.attenuationColor.value.copy(material.attenuationColor);
    }
    if (material.anisotropy > 0) {
      uniforms.anisotropyVector.value.set(material.anisotropy * Math.cos(material.anisotropyRotation), material.anisotropy * Math.sin(material.anisotropyRotation));
      if (material.anisotropyMap) {
        uniforms.anisotropyMap.value = material.anisotropyMap;
        refreshTransformUniform(material.anisotropyMap, uniforms.anisotropyMapTransform);
      }
    }
    uniforms.specularIntensity.value = material.specularIntensity;
    uniforms.specularColor.value.copy(material.specularColor);
    if (material.specularColorMap) {
      uniforms.specularColorMap.value = material.specularColorMap;
      refreshTransformUniform(material.specularColorMap, uniforms.specularColorMapTransform);
    }
    if (material.specularIntensityMap) {
      uniforms.specularIntensityMap.value = material.specularIntensityMap;
      refreshTransformUniform(material.specularIntensityMap, uniforms.specularIntensityMapTransform);
    }
  }
  function refreshUniformsMatcap(uniforms, material) {
    if (material.matcap) {
      uniforms.matcap.value = material.matcap;
    }
  }
  function refreshUniformsDistance(uniforms, material) {
    const light = properties.get(material).light;
    uniforms.referencePosition.value.setFromMatrixPosition(light.matrixWorld);
    uniforms.nearDistance.value = light.shadow.camera.near;
    uniforms.farDistance.value = light.shadow.camera.far;
  }
  return {
    refreshFogUniforms,
    refreshMaterialUniforms
  };
}
function WebGLUniformsGroups(gl2, info, capabilities, state) {
  let buffers = {};
  let updateList = {};
  let allocatedBindingPoints = [];
  const maxBindingPoints = gl2.getParameter(gl2.MAX_UNIFORM_BUFFER_BINDINGS);
  function bind(uniformsGroup, program) {
    const webglProgram = program.program;
    state.uniformBlockBinding(uniformsGroup, webglProgram);
  }
  function update(uniformsGroup, program) {
    let buffer = buffers[uniformsGroup.id];
    if (buffer === void 0) {
      prepareUniformsGroup(uniformsGroup);
      buffer = createBuffer(uniformsGroup);
      buffers[uniformsGroup.id] = buffer;
      uniformsGroup.addEventListener("dispose", onUniformsGroupsDispose);
    }
    const webglProgram = program.program;
    state.updateUBOMapping(uniformsGroup, webglProgram);
    const frame = info.render.frame;
    if (updateList[uniformsGroup.id] !== frame) {
      updateBufferData(uniformsGroup);
      updateList[uniformsGroup.id] = frame;
    }
  }
  function createBuffer(uniformsGroup) {
    const bindingPointIndex = allocateBindingPointIndex();
    uniformsGroup.__bindingPointIndex = bindingPointIndex;
    const buffer = gl2.createBuffer();
    const size2 = uniformsGroup.__size;
    const usage = uniformsGroup.usage;
    gl2.bindBuffer(gl2.UNIFORM_BUFFER, buffer);
    gl2.bufferData(gl2.UNIFORM_BUFFER, size2, usage);
    gl2.bindBuffer(gl2.UNIFORM_BUFFER, null);
    gl2.bindBufferBase(gl2.UNIFORM_BUFFER, bindingPointIndex, buffer);
    return buffer;
  }
  function allocateBindingPointIndex() {
    for (let i = 0; i < maxBindingPoints; i++) {
      if (allocatedBindingPoints.indexOf(i) === -1) {
        allocatedBindingPoints.push(i);
        return i;
      }
    }
    console.error("THREE.WebGLRenderer: Maximum number of simultaneously usable uniforms groups reached.");
    return 0;
  }
  function updateBufferData(uniformsGroup) {
    const buffer = buffers[uniformsGroup.id];
    const uniforms = uniformsGroup.uniforms;
    const cache = uniformsGroup.__cache;
    gl2.bindBuffer(gl2.UNIFORM_BUFFER, buffer);
    for (let i = 0, il2 = uniforms.length; i < il2; i++) {
      const uniformArray = Array.isArray(uniforms[i]) ? uniforms[i] : [uniforms[i]];
      for (let j2 = 0, jl2 = uniformArray.length; j2 < jl2; j2++) {
        const uniform = uniformArray[j2];
        if (hasUniformChanged(uniform, i, j2, cache) === true) {
          const offset = uniform.__offset;
          const values = Array.isArray(uniform.value) ? uniform.value : [uniform.value];
          let arrayOffset = 0;
          for (let k2 = 0; k2 < values.length; k2++) {
            const value = values[k2];
            const info2 = getUniformSize(value);
            if (typeof value === "number" || typeof value === "boolean") {
              uniform.__data[0] = value;
              gl2.bufferSubData(gl2.UNIFORM_BUFFER, offset + arrayOffset, uniform.__data);
            } else if (value.isMatrix3) {
              uniform.__data[0] = value.elements[0];
              uniform.__data[1] = value.elements[1];
              uniform.__data[2] = value.elements[2];
              uniform.__data[3] = 0;
              uniform.__data[4] = value.elements[3];
              uniform.__data[5] = value.elements[4];
              uniform.__data[6] = value.elements[5];
              uniform.__data[7] = 0;
              uniform.__data[8] = value.elements[6];
              uniform.__data[9] = value.elements[7];
              uniform.__data[10] = value.elements[8];
              uniform.__data[11] = 0;
            } else {
              value.toArray(uniform.__data, arrayOffset);
              arrayOffset += info2.storage / Float32Array.BYTES_PER_ELEMENT;
            }
          }
          gl2.bufferSubData(gl2.UNIFORM_BUFFER, offset, uniform.__data);
        }
      }
    }
    gl2.bindBuffer(gl2.UNIFORM_BUFFER, null);
  }
  function hasUniformChanged(uniform, index, indexArray, cache) {
    const value = uniform.value;
    const indexString = index + "_" + indexArray;
    if (cache[indexString] === void 0) {
      if (typeof value === "number" || typeof value === "boolean") {
        cache[indexString] = value;
      } else {
        cache[indexString] = value.clone();
      }
      return true;
    } else {
      const cachedObject = cache[indexString];
      if (typeof value === "number" || typeof value === "boolean") {
        if (cachedObject !== value) {
          cache[indexString] = value;
          return true;
        }
      } else {
        if (cachedObject.equals(value) === false) {
          cachedObject.copy(value);
          return true;
        }
      }
    }
    return false;
  }
  function prepareUniformsGroup(uniformsGroup) {
    const uniforms = uniformsGroup.uniforms;
    let offset = 0;
    const chunkSize = 16;
    for (let i = 0, l = uniforms.length; i < l; i++) {
      const uniformArray = Array.isArray(uniforms[i]) ? uniforms[i] : [uniforms[i]];
      for (let j2 = 0, jl2 = uniformArray.length; j2 < jl2; j2++) {
        const uniform = uniformArray[j2];
        const values = Array.isArray(uniform.value) ? uniform.value : [uniform.value];
        for (let k2 = 0, kl2 = values.length; k2 < kl2; k2++) {
          const value = values[k2];
          const info2 = getUniformSize(value);
          const chunkOffset2 = offset % chunkSize;
          const chunkPadding = chunkOffset2 % info2.boundary;
          const chunkStart = chunkOffset2 + chunkPadding;
          offset += chunkPadding;
          if (chunkStart !== 0 && chunkSize - chunkStart < info2.storage) {
            offset += chunkSize - chunkStart;
          }
          uniform.__data = new Float32Array(info2.storage / Float32Array.BYTES_PER_ELEMENT);
          uniform.__offset = offset;
          offset += info2.storage;
        }
      }
    }
    const chunkOffset = offset % chunkSize;
    if (chunkOffset > 0) offset += chunkSize - chunkOffset;
    uniformsGroup.__size = offset;
    uniformsGroup.__cache = {};
    return this;
  }
  function getUniformSize(value) {
    const info2 = {
      boundary: 0,
      // bytes
      storage: 0
      // bytes
    };
    if (typeof value === "number" || typeof value === "boolean") {
      info2.boundary = 4;
      info2.storage = 4;
    } else if (value.isVector2) {
      info2.boundary = 8;
      info2.storage = 8;
    } else if (value.isVector3 || value.isColor) {
      info2.boundary = 16;
      info2.storage = 12;
    } else if (value.isVector4) {
      info2.boundary = 16;
      info2.storage = 16;
    } else if (value.isMatrix3) {
      info2.boundary = 48;
      info2.storage = 48;
    } else if (value.isMatrix4) {
      info2.boundary = 64;
      info2.storage = 64;
    } else if (value.isTexture) {
      console.warn("THREE.WebGLRenderer: Texture samplers can not be part of an uniforms group.");
    } else {
      console.warn("THREE.WebGLRenderer: Unsupported uniform value type.", value);
    }
    return info2;
  }
  function onUniformsGroupsDispose(event) {
    const uniformsGroup = event.target;
    uniformsGroup.removeEventListener("dispose", onUniformsGroupsDispose);
    const index = allocatedBindingPoints.indexOf(uniformsGroup.__bindingPointIndex);
    allocatedBindingPoints.splice(index, 1);
    gl2.deleteBuffer(buffers[uniformsGroup.id]);
    delete buffers[uniformsGroup.id];
    delete updateList[uniformsGroup.id];
  }
  function dispose() {
    for (const id2 in buffers) {
      gl2.deleteBuffer(buffers[id2]);
    }
    allocatedBindingPoints = [];
    buffers = {};
    updateList = {};
  }
  return {
    bind,
    update,
    dispose
  };
}
class WebGLRenderer {
  constructor(parameters = {}) {
    const {
      canvas = createCanvasElement(),
      context = null,
      depth = true,
      stencil = false,
      alpha = false,
      antialias = false,
      premultipliedAlpha = true,
      preserveDrawingBuffer = false,
      powerPreference = "default",
      failIfMajorPerformanceCaveat = false
    } = parameters;
    this.isWebGLRenderer = true;
    let _alpha;
    if (context !== null) {
      if (typeof WebGLRenderingContext !== "undefined" && context instanceof WebGLRenderingContext) {
        throw new Error("THREE.WebGLRenderer: WebGL 1 is not supported since r163.");
      }
      _alpha = context.getContextAttributes().alpha;
    } else {
      _alpha = alpha;
    }
    const uintClearColor = new Uint32Array(4);
    const intClearColor = new Int32Array(4);
    let currentRenderList = null;
    let currentRenderState = null;
    const renderListStack = [];
    const renderStateStack = [];
    this.domElement = canvas;
    this.debug = {
      /**
       * Enables error checking and reporting when shader programs are being compiled
       * @type {boolean}
       */
      checkShaderErrors: true,
      /**
       * Callback for custom error reporting.
       * @type {?Function}
       */
      onShaderError: null
    };
    this.autoClear = true;
    this.autoClearColor = true;
    this.autoClearDepth = true;
    this.autoClearStencil = true;
    this.sortObjects = true;
    this.clippingPlanes = [];
    this.localClippingEnabled = false;
    this._outputColorSpace = SRGBColorSpace;
    this.toneMapping = NoToneMapping;
    this.toneMappingExposure = 1;
    const _this = this;
    let _isContextLost = false;
    let _currentActiveCubeFace = 0;
    let _currentActiveMipmapLevel = 0;
    let _currentRenderTarget = null;
    let _currentMaterialId = -1;
    let _currentCamera = null;
    const _currentViewport = new Vector4();
    const _currentScissor = new Vector4();
    let _currentScissorTest = null;
    const _currentClearColor = new Color(0);
    let _currentClearAlpha = 0;
    let _width = canvas.width;
    let _height = canvas.height;
    let _pixelRatio = 1;
    let _opaqueSort = null;
    let _transparentSort = null;
    const _viewport2 = new Vector4(0, 0, _width, _height);
    const _scissor = new Vector4(0, 0, _width, _height);
    let _scissorTest = false;
    const _frustum = new Frustum();
    let _clippingEnabled = false;
    let _localClippingEnabled = false;
    const _currentProjectionMatrix = new Matrix4();
    const _projScreenMatrix = new Matrix4();
    const _vector3 = new Vector3();
    const _vector4 = new Vector4();
    const _emptyScene = { background: null, fog: null, environment: null, overrideMaterial: null, isScene: true };
    let _renderBackground = false;
    function getTargetPixelRatio() {
      return _currentRenderTarget === null ? _pixelRatio : 1;
    }
    let _gl = context;
    function getContext(contextName, contextAttributes) {
      return canvas.getContext(contextName, contextAttributes);
    }
    try {
      const contextAttributes = {
        alpha: true,
        depth,
        stencil,
        antialias,
        premultipliedAlpha,
        preserveDrawingBuffer,
        powerPreference,
        failIfMajorPerformanceCaveat
      };
      if ("setAttribute" in canvas) canvas.setAttribute("data-engine", `three.js r${REVISION}`);
      canvas.addEventListener("webglcontextlost", onContextLost, false);
      canvas.addEventListener("webglcontextrestored", onContextRestore, false);
      canvas.addEventListener("webglcontextcreationerror", onContextCreationError, false);
      if (_gl === null) {
        const contextName = "webgl2";
        _gl = getContext(contextName, contextAttributes);
        if (_gl === null) {
          if (getContext(contextName)) {
            throw new Error("Error creating WebGL context with your selected attributes.");
          } else {
            throw new Error("Error creating WebGL context.");
          }
        }
      }
    } catch (error) {
      console.error("THREE.WebGLRenderer: " + error.message);
      throw error;
    }
    let extensions, capabilities, state, info;
    let properties, textures, cubemaps, cubeuvmaps, attributes, geometries, objects;
    let programCache, materials, renderLists, renderStates, clipping, shadowMap;
    let background, morphtargets, bufferRenderer, indexedBufferRenderer;
    let utils, bindingStates, uniformsGroups;
    function initGLContext() {
      extensions = new WebGLExtensions(_gl);
      extensions.init();
      utils = new WebGLUtils(_gl, extensions);
      capabilities = new WebGLCapabilities(_gl, extensions, parameters, utils);
      state = new WebGLState(_gl);
      if (capabilities.reverseDepthBuffer) state.buffers.depth.setReversed(true);
      info = new WebGLInfo(_gl);
      properties = new WebGLProperties();
      textures = new WebGLTextures(_gl, extensions, state, properties, capabilities, utils, info);
      cubemaps = new WebGLCubeMaps(_this);
      cubeuvmaps = new WebGLCubeUVMaps(_this);
      attributes = new WebGLAttributes(_gl);
      bindingStates = new WebGLBindingStates(_gl, attributes);
      geometries = new WebGLGeometries(_gl, attributes, info, bindingStates);
      objects = new WebGLObjects(_gl, geometries, attributes, info);
      morphtargets = new WebGLMorphtargets(_gl, capabilities, textures);
      clipping = new WebGLClipping(properties);
      programCache = new WebGLPrograms(_this, cubemaps, cubeuvmaps, extensions, capabilities, bindingStates, clipping);
      materials = new WebGLMaterials(_this, properties);
      renderLists = new WebGLRenderLists();
      renderStates = new WebGLRenderStates(extensions);
      background = new WebGLBackground(_this, cubemaps, cubeuvmaps, state, objects, _alpha, premultipliedAlpha);
      shadowMap = new WebGLShadowMap(_this, objects, capabilities);
      uniformsGroups = new WebGLUniformsGroups(_gl, info, capabilities, state);
      bufferRenderer = new WebGLBufferRenderer(_gl, extensions, info);
      indexedBufferRenderer = new WebGLIndexedBufferRenderer(_gl, extensions, info);
      info.programs = programCache.programs;
      _this.capabilities = capabilities;
      _this.extensions = extensions;
      _this.properties = properties;
      _this.renderLists = renderLists;
      _this.shadowMap = shadowMap;
      _this.state = state;
      _this.info = info;
    }
    initGLContext();
    const xr2 = new WebXRManager(_this, _gl);
    this.xr = xr2;
    this.getContext = function() {
      return _gl;
    };
    this.getContextAttributes = function() {
      return _gl.getContextAttributes();
    };
    this.forceContextLoss = function() {
      const extension = extensions.get("WEBGL_lose_context");
      if (extension) extension.loseContext();
    };
    this.forceContextRestore = function() {
      const extension = extensions.get("WEBGL_lose_context");
      if (extension) extension.restoreContext();
    };
    this.getPixelRatio = function() {
      return _pixelRatio;
    };
    this.setPixelRatio = function(value) {
      if (value === void 0) return;
      _pixelRatio = value;
      this.setSize(_width, _height, false);
    };
    this.getSize = function(target) {
      return target.set(_width, _height);
    };
    this.setSize = function(width, height, updateStyle = true) {
      if (xr2.isPresenting) {
        console.warn("THREE.WebGLRenderer: Can't change size while VR device is presenting.");
        return;
      }
      _width = width;
      _height = height;
      canvas.width = Math.floor(width * _pixelRatio);
      canvas.height = Math.floor(height * _pixelRatio);
      if (updateStyle === true) {
        canvas.style.width = width + "px";
        canvas.style.height = height + "px";
      }
      this.setViewport(0, 0, width, height);
    };
    this.getDrawingBufferSize = function(target) {
      return target.set(_width * _pixelRatio, _height * _pixelRatio).floor();
    };
    this.setDrawingBufferSize = function(width, height, pixelRatio) {
      _width = width;
      _height = height;
      _pixelRatio = pixelRatio;
      canvas.width = Math.floor(width * pixelRatio);
      canvas.height = Math.floor(height * pixelRatio);
      this.setViewport(0, 0, width, height);
    };
    this.getCurrentViewport = function(target) {
      return target.copy(_currentViewport);
    };
    this.getViewport = function(target) {
      return target.copy(_viewport2);
    };
    this.setViewport = function(x, y, width, height) {
      if (x.isVector4) {
        _viewport2.set(x.x, x.y, x.z, x.w);
      } else {
        _viewport2.set(x, y, width, height);
      }
      state.viewport(_currentViewport.copy(_viewport2).multiplyScalar(_pixelRatio).round());
    };
    this.getScissor = function(target) {
      return target.copy(_scissor);
    };
    this.setScissor = function(x, y, width, height) {
      if (x.isVector4) {
        _scissor.set(x.x, x.y, x.z, x.w);
      } else {
        _scissor.set(x, y, width, height);
      }
      state.scissor(_currentScissor.copy(_scissor).multiplyScalar(_pixelRatio).round());
    };
    this.getScissorTest = function() {
      return _scissorTest;
    };
    this.setScissorTest = function(boolean) {
      state.setScissorTest(_scissorTest = boolean);
    };
    this.setOpaqueSort = function(method) {
      _opaqueSort = method;
    };
    this.setTransparentSort = function(method) {
      _transparentSort = method;
    };
    this.getClearColor = function(target) {
      return target.copy(background.getClearColor());
    };
    this.setClearColor = function() {
      background.setClearColor.apply(background, arguments);
    };
    this.getClearAlpha = function() {
      return background.getClearAlpha();
    };
    this.setClearAlpha = function() {
      background.setClearAlpha.apply(background, arguments);
    };
    this.clear = function(color = true, depth2 = true, stencil2 = true) {
      let bits = 0;
      if (color) {
        let isIntegerFormat = false;
        if (_currentRenderTarget !== null) {
          const targetFormat = _currentRenderTarget.texture.format;
          isIntegerFormat = targetFormat === RGBAIntegerFormat || targetFormat === RGIntegerFormat || targetFormat === RedIntegerFormat;
        }
        if (isIntegerFormat) {
          const targetType = _currentRenderTarget.texture.type;
          const isUnsignedType = targetType === UnsignedByteType || targetType === UnsignedIntType || targetType === UnsignedShortType || targetType === UnsignedInt248Type || targetType === UnsignedShort4444Type || targetType === UnsignedShort5551Type;
          const clearColor = background.getClearColor();
          const a = background.getClearAlpha();
          const r = clearColor.r;
          const g = clearColor.g;
          const b = clearColor.b;
          if (isUnsignedType) {
            uintClearColor[0] = r;
            uintClearColor[1] = g;
            uintClearColor[2] = b;
            uintClearColor[3] = a;
            _gl.clearBufferuiv(_gl.COLOR, 0, uintClearColor);
          } else {
            intClearColor[0] = r;
            intClearColor[1] = g;
            intClearColor[2] = b;
            intClearColor[3] = a;
            _gl.clearBufferiv(_gl.COLOR, 0, intClearColor);
          }
        } else {
          bits |= _gl.COLOR_BUFFER_BIT;
        }
      }
      if (depth2) {
        bits |= _gl.DEPTH_BUFFER_BIT;
        _gl.clearDepth(this.capabilities.reverseDepthBuffer ? 0 : 1);
      }
      if (stencil2) {
        bits |= _gl.STENCIL_BUFFER_BIT;
        this.state.buffers.stencil.setMask(4294967295);
      }
      _gl.clear(bits);
    };
    this.clearColor = function() {
      this.clear(true, false, false);
    };
    this.clearDepth = function() {
      this.clear(false, true, false);
    };
    this.clearStencil = function() {
      this.clear(false, false, true);
    };
    this.dispose = function() {
      canvas.removeEventListener("webglcontextlost", onContextLost, false);
      canvas.removeEventListener("webglcontextrestored", onContextRestore, false);
      canvas.removeEventListener("webglcontextcreationerror", onContextCreationError, false);
      renderLists.dispose();
      renderStates.dispose();
      properties.dispose();
      cubemaps.dispose();
      cubeuvmaps.dispose();
      objects.dispose();
      bindingStates.dispose();
      uniformsGroups.dispose();
      programCache.dispose();
      xr2.dispose();
      xr2.removeEventListener("sessionstart", onXRSessionStart);
      xr2.removeEventListener("sessionend", onXRSessionEnd);
      animation.stop();
    };
    function onContextLost(event) {
      event.preventDefault();
      console.log("THREE.WebGLRenderer: Context Lost.");
      _isContextLost = true;
    }
    function onContextRestore() {
      console.log("THREE.WebGLRenderer: Context Restored.");
      _isContextLost = false;
      const infoAutoReset = info.autoReset;
      const shadowMapEnabled = shadowMap.enabled;
      const shadowMapAutoUpdate = shadowMap.autoUpdate;
      const shadowMapNeedsUpdate = shadowMap.needsUpdate;
      const shadowMapType = shadowMap.type;
      initGLContext();
      info.autoReset = infoAutoReset;
      shadowMap.enabled = shadowMapEnabled;
      shadowMap.autoUpdate = shadowMapAutoUpdate;
      shadowMap.needsUpdate = shadowMapNeedsUpdate;
      shadowMap.type = shadowMapType;
    }
    function onContextCreationError(event) {
      console.error("THREE.WebGLRenderer: A WebGL context could not be created. Reason: ", event.statusMessage);
    }
    function onMaterialDispose(event) {
      const material = event.target;
      material.removeEventListener("dispose", onMaterialDispose);
      deallocateMaterial(material);
    }
    function deallocateMaterial(material) {
      releaseMaterialProgramReferences(material);
      properties.remove(material);
    }
    function releaseMaterialProgramReferences(material) {
      const programs = properties.get(material).programs;
      if (programs !== void 0) {
        programs.forEach(function(program) {
          programCache.releaseProgram(program);
        });
        if (material.isShaderMaterial) {
          programCache.releaseShaderCache(material);
        }
      }
    }
    this.renderBufferDirect = function(camera, scene, geometry, material, object, group) {
      if (scene === null) scene = _emptyScene;
      const frontFaceCW = object.isMesh && object.matrixWorld.determinant() < 0;
      const program = setProgram(camera, scene, geometry, material, object);
      state.setMaterial(material, frontFaceCW);
      let index = geometry.index;
      let rangeFactor = 1;
      if (material.wireframe === true) {
        index = geometries.getWireframeAttribute(geometry);
        if (index === void 0) return;
        rangeFactor = 2;
      }
      const drawRange = geometry.drawRange;
      const position = geometry.attributes.position;
      let drawStart = drawRange.start * rangeFactor;
      let drawEnd = (drawRange.start + drawRange.count) * rangeFactor;
      if (group !== null) {
        drawStart = Math.max(drawStart, group.start * rangeFactor);
        drawEnd = Math.min(drawEnd, (group.start + group.count) * rangeFactor);
      }
      if (index !== null) {
        drawStart = Math.max(drawStart, 0);
        drawEnd = Math.min(drawEnd, index.count);
      } else if (position !== void 0 && position !== null) {
        drawStart = Math.max(drawStart, 0);
        drawEnd = Math.min(drawEnd, position.count);
      }
      const drawCount = drawEnd - drawStart;
      if (drawCount < 0 || drawCount === Infinity) return;
      bindingStates.setup(object, material, program, geometry, index);
      let attribute;
      let renderer2 = bufferRenderer;
      if (index !== null) {
        attribute = attributes.get(index);
        renderer2 = indexedBufferRenderer;
        renderer2.setIndex(attribute);
      }
      if (object.isMesh) {
        if (material.wireframe === true) {
          state.setLineWidth(material.wireframeLinewidth * getTargetPixelRatio());
          renderer2.setMode(_gl.LINES);
        } else {
          renderer2.setMode(_gl.TRIANGLES);
        }
      } else if (object.isLine) {
        let lineWidth = material.linewidth;
        if (lineWidth === void 0) lineWidth = 1;
        state.setLineWidth(lineWidth * getTargetPixelRatio());
        if (object.isLineSegments) {
          renderer2.setMode(_gl.LINES);
        } else if (object.isLineLoop) {
          renderer2.setMode(_gl.LINE_LOOP);
        } else {
          renderer2.setMode(_gl.LINE_STRIP);
        }
      } else if (object.isPoints) {
        renderer2.setMode(_gl.POINTS);
      } else if (object.isSprite) {
        renderer2.setMode(_gl.TRIANGLES);
      }
      if (object.isBatchedMesh) {
        if (object._multiDrawInstances !== null) {
          renderer2.renderMultiDrawInstances(object._multiDrawStarts, object._multiDrawCounts, object._multiDrawCount, object._multiDrawInstances);
        } else {
          if (!extensions.get("WEBGL_multi_draw")) {
            const starts = object._multiDrawStarts;
            const counts = object._multiDrawCounts;
            const drawCount2 = object._multiDrawCount;
            const bytesPerElement = index ? attributes.get(index).bytesPerElement : 1;
            const uniforms = properties.get(material).currentProgram.getUniforms();
            for (let i = 0; i < drawCount2; i++) {
              uniforms.setValue(_gl, "_gl_DrawID", i);
              renderer2.render(starts[i] / bytesPerElement, counts[i]);
            }
          } else {
            renderer2.renderMultiDraw(object._multiDrawStarts, object._multiDrawCounts, object._multiDrawCount);
          }
        }
      } else if (object.isInstancedMesh) {
        renderer2.renderInstances(drawStart, drawCount, object.count);
      } else if (geometry.isInstancedBufferGeometry) {
        const maxInstanceCount = geometry._maxInstanceCount !== void 0 ? geometry._maxInstanceCount : Infinity;
        const instanceCount = Math.min(geometry.instanceCount, maxInstanceCount);
        renderer2.renderInstances(drawStart, drawCount, instanceCount);
      } else {
        renderer2.render(drawStart, drawCount);
      }
    };
    function prepareMaterial(material, scene, object) {
      if (material.transparent === true && material.side === DoubleSide && material.forceSinglePass === false) {
        material.side = BackSide;
        material.needsUpdate = true;
        getProgram(material, scene, object);
        material.side = FrontSide;
        material.needsUpdate = true;
        getProgram(material, scene, object);
        material.side = DoubleSide;
      } else {
        getProgram(material, scene, object);
      }
    }
    this.compile = function(scene, camera, targetScene = null) {
      if (targetScene === null) targetScene = scene;
      currentRenderState = renderStates.get(targetScene);
      currentRenderState.init(camera);
      renderStateStack.push(currentRenderState);
      targetScene.traverseVisible(function(object) {
        if (object.isLight && object.layers.test(camera.layers)) {
          currentRenderState.pushLight(object);
          if (object.castShadow) {
            currentRenderState.pushShadow(object);
          }
        }
      });
      if (scene !== targetScene) {
        scene.traverseVisible(function(object) {
          if (object.isLight && object.layers.test(camera.layers)) {
            currentRenderState.pushLight(object);
            if (object.castShadow) {
              currentRenderState.pushShadow(object);
            }
          }
        });
      }
      currentRenderState.setupLights();
      const materials2 = /* @__PURE__ */ new Set();
      scene.traverse(function(object) {
        if (!(object.isMesh || object.isPoints || object.isLine || object.isSprite)) {
          return;
        }
        const material = object.material;
        if (material) {
          if (Array.isArray(material)) {
            for (let i = 0; i < material.length; i++) {
              const material2 = material[i];
              prepareMaterial(material2, targetScene, object);
              materials2.add(material2);
            }
          } else {
            prepareMaterial(material, targetScene, object);
            materials2.add(material);
          }
        }
      });
      renderStateStack.pop();
      currentRenderState = null;
      return materials2;
    };
    this.compileAsync = function(scene, camera, targetScene = null) {
      const materials2 = this.compile(scene, camera, targetScene);
      return new Promise((resolve2) => {
        function checkMaterialsReady() {
          materials2.forEach(function(material) {
            const materialProperties = properties.get(material);
            const program = materialProperties.currentProgram;
            if (program.isReady()) {
              materials2.delete(material);
            }
          });
          if (materials2.size === 0) {
            resolve2(scene);
            return;
          }
          setTimeout(checkMaterialsReady, 10);
        }
        if (extensions.get("KHR_parallel_shader_compile") !== null) {
          checkMaterialsReady();
        } else {
          setTimeout(checkMaterialsReady, 10);
        }
      });
    };
    let onAnimationFrameCallback = null;
    function onAnimationFrame(time) {
      if (onAnimationFrameCallback) onAnimationFrameCallback(time);
    }
    function onXRSessionStart() {
      animation.stop();
    }
    function onXRSessionEnd() {
      animation.start();
    }
    const animation = new WebGLAnimation();
    animation.setAnimationLoop(onAnimationFrame);
    if (typeof self !== "undefined") animation.setContext(self);
    this.setAnimationLoop = function(callback) {
      onAnimationFrameCallback = callback;
      xr2.setAnimationLoop(callback);
      callback === null ? animation.stop() : animation.start();
    };
    xr2.addEventListener("sessionstart", onXRSessionStart);
    xr2.addEventListener("sessionend", onXRSessionEnd);
    this.render = function(scene, camera) {
      if (camera !== void 0 && camera.isCamera !== true) {
        console.error("THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.");
        return;
      }
      if (_isContextLost === true) return;
      if (scene.matrixWorldAutoUpdate === true) scene.updateMatrixWorld();
      if (camera.parent === null && camera.matrixWorldAutoUpdate === true) camera.updateMatrixWorld();
      if (xr2.enabled === true && xr2.isPresenting === true) {
        if (xr2.cameraAutoUpdate === true) xr2.updateCamera(camera);
        camera = xr2.getCamera();
      }
      if (scene.isScene === true) scene.onBeforeRender(_this, scene, camera, _currentRenderTarget);
      currentRenderState = renderStates.get(scene, renderStateStack.length);
      currentRenderState.init(camera);
      renderStateStack.push(currentRenderState);
      _projScreenMatrix.multiplyMatrices(camera.projectionMatrix, camera.matrixWorldInverse);
      _frustum.setFromProjectionMatrix(_projScreenMatrix);
      _localClippingEnabled = this.localClippingEnabled;
      _clippingEnabled = clipping.init(this.clippingPlanes, _localClippingEnabled);
      currentRenderList = renderLists.get(scene, renderListStack.length);
      currentRenderList.init();
      renderListStack.push(currentRenderList);
      if (xr2.enabled === true && xr2.isPresenting === true) {
        const depthSensingMesh = _this.xr.getDepthSensingMesh();
        if (depthSensingMesh !== null) {
          projectObject(depthSensingMesh, camera, -Infinity, _this.sortObjects);
        }
      }
      projectObject(scene, camera, 0, _this.sortObjects);
      currentRenderList.finish();
      if (_this.sortObjects === true) {
        currentRenderList.sort(_opaqueSort, _transparentSort);
      }
      _renderBackground = xr2.enabled === false || xr2.isPresenting === false || xr2.hasDepthSensing() === false;
      if (_renderBackground) {
        background.addToRenderList(currentRenderList, scene);
      }
      this.info.render.frame++;
      if (_clippingEnabled === true) clipping.beginShadows();
      const shadowsArray = currentRenderState.state.shadowsArray;
      shadowMap.render(shadowsArray, scene, camera);
      if (_clippingEnabled === true) clipping.endShadows();
      if (this.info.autoReset === true) this.info.reset();
      const opaqueObjects = currentRenderList.opaque;
      const transmissiveObjects = currentRenderList.transmissive;
      currentRenderState.setupLights();
      if (camera.isArrayCamera) {
        const cameras = camera.cameras;
        if (transmissiveObjects.length > 0) {
          for (let i = 0, l = cameras.length; i < l; i++) {
            const camera2 = cameras[i];
            renderTransmissionPass(opaqueObjects, transmissiveObjects, scene, camera2);
          }
        }
        if (_renderBackground) background.render(scene);
        for (let i = 0, l = cameras.length; i < l; i++) {
          const camera2 = cameras[i];
          renderScene(currentRenderList, scene, camera2, camera2.viewport);
        }
      } else {
        if (transmissiveObjects.length > 0) renderTransmissionPass(opaqueObjects, transmissiveObjects, scene, camera);
        if (_renderBackground) background.render(scene);
        renderScene(currentRenderList, scene, camera);
      }
      if (_currentRenderTarget !== null) {
        textures.updateMultisampleRenderTarget(_currentRenderTarget);
        textures.updateRenderTargetMipmap(_currentRenderTarget);
      }
      if (scene.isScene === true) scene.onAfterRender(_this, scene, camera);
      bindingStates.resetDefaultState();
      _currentMaterialId = -1;
      _currentCamera = null;
      renderStateStack.pop();
      if (renderStateStack.length > 0) {
        currentRenderState = renderStateStack[renderStateStack.length - 1];
        if (_clippingEnabled === true) clipping.setGlobalState(_this.clippingPlanes, currentRenderState.state.camera);
      } else {
        currentRenderState = null;
      }
      renderListStack.pop();
      if (renderListStack.length > 0) {
        currentRenderList = renderListStack[renderListStack.length - 1];
      } else {
        currentRenderList = null;
      }
    };
    function projectObject(object, camera, groupOrder, sortObjects) {
      if (object.visible === false) return;
      const visible = object.layers.test(camera.layers);
      if (visible) {
        if (object.isGroup) {
          groupOrder = object.renderOrder;
        } else if (object.isLOD) {
          if (object.autoUpdate === true) object.update(camera);
        } else if (object.isLight) {
          currentRenderState.pushLight(object);
          if (object.castShadow) {
            currentRenderState.pushShadow(object);
          }
        } else if (object.isSprite) {
          if (!object.frustumCulled || _frustum.intersectsSprite(object)) {
            if (sortObjects) {
              _vector4.setFromMatrixPosition(object.matrixWorld).applyMatrix4(_projScreenMatrix);
            }
            const geometry = objects.update(object);
            const material = object.material;
            if (material.visible) {
              currentRenderList.push(object, geometry, material, groupOrder, _vector4.z, null);
            }
          }
        } else if (object.isMesh || object.isLine || object.isPoints) {
          if (!object.frustumCulled || _frustum.intersectsObject(object)) {
            const geometry = objects.update(object);
            const material = object.material;
            if (sortObjects) {
              if (object.boundingSphere !== void 0) {
                if (object.boundingSphere === null) object.computeBoundingSphere();
                _vector4.copy(object.boundingSphere.center);
              } else {
                if (geometry.boundingSphere === null) geometry.computeBoundingSphere();
                _vector4.copy(geometry.boundingSphere.center);
              }
              _vector4.applyMatrix4(object.matrixWorld).applyMatrix4(_projScreenMatrix);
            }
            if (Array.isArray(material)) {
              const groups = geometry.groups;
              for (let i = 0, l = groups.length; i < l; i++) {
                const group = groups[i];
                const groupMaterial = material[group.materialIndex];
                if (groupMaterial && groupMaterial.visible) {
                  currentRenderList.push(object, geometry, groupMaterial, groupOrder, _vector4.z, group);
                }
              }
            } else if (material.visible) {
              currentRenderList.push(object, geometry, material, groupOrder, _vector4.z, null);
            }
          }
        }
      }
      const children = object.children;
      for (let i = 0, l = children.length; i < l; i++) {
        projectObject(children[i], camera, groupOrder, sortObjects);
      }
    }
    function renderScene(currentRenderList2, scene, camera, viewport) {
      const opaqueObjects = currentRenderList2.opaque;
      const transmissiveObjects = currentRenderList2.transmissive;
      const transparentObjects = currentRenderList2.transparent;
      currentRenderState.setupLightsView(camera);
      if (_clippingEnabled === true) clipping.setGlobalState(_this.clippingPlanes, camera);
      if (viewport) state.viewport(_currentViewport.copy(viewport));
      if (opaqueObjects.length > 0) renderObjects(opaqueObjects, scene, camera);
      if (transmissiveObjects.length > 0) renderObjects(transmissiveObjects, scene, camera);
      if (transparentObjects.length > 0) renderObjects(transparentObjects, scene, camera);
      state.buffers.depth.setTest(true);
      state.buffers.depth.setMask(true);
      state.buffers.color.setMask(true);
      state.setPolygonOffset(false);
    }
    function renderTransmissionPass(opaqueObjects, transmissiveObjects, scene, camera) {
      const overrideMaterial = scene.isScene === true ? scene.overrideMaterial : null;
      if (overrideMaterial !== null) {
        return;
      }
      if (currentRenderState.state.transmissionRenderTarget[camera.id] === void 0) {
        currentRenderState.state.transmissionRenderTarget[camera.id] = new WebGLRenderTarget(1, 1, {
          generateMipmaps: true,
          type: extensions.has("EXT_color_buffer_half_float") || extensions.has("EXT_color_buffer_float") ? HalfFloatType : UnsignedByteType,
          minFilter: LinearMipmapLinearFilter,
          samples: 4,
          stencilBuffer: stencil,
          resolveDepthBuffer: false,
          resolveStencilBuffer: false,
          colorSpace: ColorManagement.workingColorSpace
        });
      }
      const transmissionRenderTarget = currentRenderState.state.transmissionRenderTarget[camera.id];
      const activeViewport = camera.viewport || _currentViewport;
      transmissionRenderTarget.setSize(activeViewport.z, activeViewport.w);
      const currentRenderTarget = _this.getRenderTarget();
      _this.setRenderTarget(transmissionRenderTarget);
      _this.getClearColor(_currentClearColor);
      _currentClearAlpha = _this.getClearAlpha();
      if (_currentClearAlpha < 1) _this.setClearColor(16777215, 0.5);
      _this.clear();
      if (_renderBackground) background.render(scene);
      const currentToneMapping = _this.toneMapping;
      _this.toneMapping = NoToneMapping;
      const currentCameraViewport = camera.viewport;
      if (camera.viewport !== void 0) camera.viewport = void 0;
      currentRenderState.setupLightsView(camera);
      if (_clippingEnabled === true) clipping.setGlobalState(_this.clippingPlanes, camera);
      renderObjects(opaqueObjects, scene, camera);
      textures.updateMultisampleRenderTarget(transmissionRenderTarget);
      textures.updateRenderTargetMipmap(transmissionRenderTarget);
      if (extensions.has("WEBGL_multisampled_render_to_texture") === false) {
        let renderTargetNeedsUpdate = false;
        for (let i = 0, l = transmissiveObjects.length; i < l; i++) {
          const renderItem = transmissiveObjects[i];
          const object = renderItem.object;
          const geometry = renderItem.geometry;
          const material = renderItem.material;
          const group = renderItem.group;
          if (material.side === DoubleSide && object.layers.test(camera.layers)) {
            const currentSide = material.side;
            material.side = BackSide;
            material.needsUpdate = true;
            renderObject(object, scene, camera, geometry, material, group);
            material.side = currentSide;
            material.needsUpdate = true;
            renderTargetNeedsUpdate = true;
          }
        }
        if (renderTargetNeedsUpdate === true) {
          textures.updateMultisampleRenderTarget(transmissionRenderTarget);
          textures.updateRenderTargetMipmap(transmissionRenderTarget);
        }
      }
      _this.setRenderTarget(currentRenderTarget);
      _this.setClearColor(_currentClearColor, _currentClearAlpha);
      if (currentCameraViewport !== void 0) camera.viewport = currentCameraViewport;
      _this.toneMapping = currentToneMapping;
    }
    function renderObjects(renderList, scene, camera) {
      const overrideMaterial = scene.isScene === true ? scene.overrideMaterial : null;
      for (let i = 0, l = renderList.length; i < l; i++) {
        const renderItem = renderList[i];
        const object = renderItem.object;
        const geometry = renderItem.geometry;
        const material = overrideMaterial === null ? renderItem.material : overrideMaterial;
        const group = renderItem.group;
        if (object.layers.test(camera.layers)) {
          renderObject(object, scene, camera, geometry, material, group);
        }
      }
    }
    function renderObject(object, scene, camera, geometry, material, group) {
      object.onBeforeRender(_this, scene, camera, geometry, material, group);
      object.modelViewMatrix.multiplyMatrices(camera.matrixWorldInverse, object.matrixWorld);
      object.normalMatrix.getNormalMatrix(object.modelViewMatrix);
      material.onBeforeRender(_this, scene, camera, geometry, object, group);
      if (material.transparent === true && material.side === DoubleSide && material.forceSinglePass === false) {
        material.side = BackSide;
        material.needsUpdate = true;
        _this.renderBufferDirect(camera, scene, geometry, material, object, group);
        material.side = FrontSide;
        material.needsUpdate = true;
        _this.renderBufferDirect(camera, scene, geometry, material, object, group);
        material.side = DoubleSide;
      } else {
        _this.renderBufferDirect(camera, scene, geometry, material, object, group);
      }
      object.onAfterRender(_this, scene, camera, geometry, material, group);
    }
    function getProgram(material, scene, object) {
      if (scene.isScene !== true) scene = _emptyScene;
      const materialProperties = properties.get(material);
      const lights = currentRenderState.state.lights;
      const shadowsArray = currentRenderState.state.shadowsArray;
      const lightsStateVersion = lights.state.version;
      const parameters2 = programCache.getParameters(material, lights.state, shadowsArray, scene, object);
      const programCacheKey = programCache.getProgramCacheKey(parameters2);
      let programs = materialProperties.programs;
      materialProperties.environment = material.isMeshStandardMaterial ? scene.environment : null;
      materialProperties.fog = scene.fog;
      materialProperties.envMap = (material.isMeshStandardMaterial ? cubeuvmaps : cubemaps).get(material.envMap || materialProperties.environment);
      materialProperties.envMapRotation = materialProperties.environment !== null && material.envMap === null ? scene.environmentRotation : material.envMapRotation;
      if (programs === void 0) {
        material.addEventListener("dispose", onMaterialDispose);
        programs = /* @__PURE__ */ new Map();
        materialProperties.programs = programs;
      }
      let program = programs.get(programCacheKey);
      if (program !== void 0) {
        if (materialProperties.currentProgram === program && materialProperties.lightsStateVersion === lightsStateVersion) {
          updateCommonMaterialProperties(material, parameters2);
          return program;
        }
      } else {
        parameters2.uniforms = programCache.getUniforms(material);
        material.onBeforeCompile(parameters2, _this);
        program = programCache.acquireProgram(parameters2, programCacheKey);
        programs.set(programCacheKey, program);
        materialProperties.uniforms = parameters2.uniforms;
      }
      const uniforms = materialProperties.uniforms;
      if (!material.isShaderMaterial && !material.isRawShaderMaterial || material.clipping === true) {
        uniforms.clippingPlanes = clipping.uniform;
      }
      updateCommonMaterialProperties(material, parameters2);
      materialProperties.needsLights = materialNeedsLights(material);
      materialProperties.lightsStateVersion = lightsStateVersion;
      if (materialProperties.needsLights) {
        uniforms.ambientLightColor.value = lights.state.ambient;
        uniforms.lightProbe.value = lights.state.probe;
        uniforms.directionalLights.value = lights.state.directional;
        uniforms.directionalLightShadows.value = lights.state.directionalShadow;
        uniforms.spotLights.value = lights.state.spot;
        uniforms.spotLightShadows.value = lights.state.spotShadow;
        uniforms.rectAreaLights.value = lights.state.rectArea;
        uniforms.ltc_1.value = lights.state.rectAreaLTC1;
        uniforms.ltc_2.value = lights.state.rectAreaLTC2;
        uniforms.pointLights.value = lights.state.point;
        uniforms.pointLightShadows.value = lights.state.pointShadow;
        uniforms.hemisphereLights.value = lights.state.hemi;
        uniforms.directionalShadowMap.value = lights.state.directionalShadowMap;
        uniforms.directionalShadowMatrix.value = lights.state.directionalShadowMatrix;
        uniforms.spotShadowMap.value = lights.state.spotShadowMap;
        uniforms.spotLightMatrix.value = lights.state.spotLightMatrix;
        uniforms.spotLightMap.value = lights.state.spotLightMap;
        uniforms.pointShadowMap.value = lights.state.pointShadowMap;
        uniforms.pointShadowMatrix.value = lights.state.pointShadowMatrix;
      }
      materialProperties.currentProgram = program;
      materialProperties.uniformsList = null;
      return program;
    }
    function getUniformList(materialProperties) {
      if (materialProperties.uniformsList === null) {
        const progUniforms = materialProperties.currentProgram.getUniforms();
        materialProperties.uniformsList = WebGLUniforms.seqWithValue(progUniforms.seq, materialProperties.uniforms);
      }
      return materialProperties.uniformsList;
    }
    function updateCommonMaterialProperties(material, parameters2) {
      const materialProperties = properties.get(material);
      materialProperties.outputColorSpace = parameters2.outputColorSpace;
      materialProperties.batching = parameters2.batching;
      materialProperties.batchingColor = parameters2.batchingColor;
      materialProperties.instancing = parameters2.instancing;
      materialProperties.instancingColor = parameters2.instancingColor;
      materialProperties.instancingMorph = parameters2.instancingMorph;
      materialProperties.skinning = parameters2.skinning;
      materialProperties.morphTargets = parameters2.morphTargets;
      materialProperties.morphNormals = parameters2.morphNormals;
      materialProperties.morphColors = parameters2.morphColors;
      materialProperties.morphTargetsCount = parameters2.morphTargetsCount;
      materialProperties.numClippingPlanes = parameters2.numClippingPlanes;
      materialProperties.numIntersection = parameters2.numClipIntersection;
      materialProperties.vertexAlphas = parameters2.vertexAlphas;
      materialProperties.vertexTangents = parameters2.vertexTangents;
      materialProperties.toneMapping = parameters2.toneMapping;
    }
    function setProgram(camera, scene, geometry, material, object) {
      if (scene.isScene !== true) scene = _emptyScene;
      textures.resetTextureUnits();
      const fog = scene.fog;
      const environment = material.isMeshStandardMaterial ? scene.environment : null;
      const colorSpace = _currentRenderTarget === null ? _this.outputColorSpace : _currentRenderTarget.isXRRenderTarget === true ? _currentRenderTarget.texture.colorSpace : LinearSRGBColorSpace;
      const envMap = (material.isMeshStandardMaterial ? cubeuvmaps : cubemaps).get(material.envMap || environment);
      const vertexAlphas = material.vertexColors === true && !!geometry.attributes.color && geometry.attributes.color.itemSize === 4;
      const vertexTangents = !!geometry.attributes.tangent && (!!material.normalMap || material.anisotropy > 0);
      const morphTargets = !!geometry.morphAttributes.position;
      const morphNormals = !!geometry.morphAttributes.normal;
      const morphColors = !!geometry.morphAttributes.color;
      let toneMapping = NoToneMapping;
      if (material.toneMapped) {
        if (_currentRenderTarget === null || _currentRenderTarget.isXRRenderTarget === true) {
          toneMapping = _this.toneMapping;
        }
      }
      const morphAttribute = geometry.morphAttributes.position || geometry.morphAttributes.normal || geometry.morphAttributes.color;
      const morphTargetsCount = morphAttribute !== void 0 ? morphAttribute.length : 0;
      const materialProperties = properties.get(material);
      const lights = currentRenderState.state.lights;
      if (_clippingEnabled === true) {
        if (_localClippingEnabled === true || camera !== _currentCamera) {
          const useCache = camera === _currentCamera && material.id === _currentMaterialId;
          clipping.setState(material, camera, useCache);
        }
      }
      let needsProgramChange = false;
      if (material.version === materialProperties.__version) {
        if (materialProperties.needsLights && materialProperties.lightsStateVersion !== lights.state.version) {
          needsProgramChange = true;
        } else if (materialProperties.outputColorSpace !== colorSpace) {
          needsProgramChange = true;
        } else if (object.isBatchedMesh && materialProperties.batching === false) {
          needsProgramChange = true;
        } else if (!object.isBatchedMesh && materialProperties.batching === true) {
          needsProgramChange = true;
        } else if (object.isBatchedMesh && materialProperties.batchingColor === true && object.colorTexture === null) {
          needsProgramChange = true;
        } else if (object.isBatchedMesh && materialProperties.batchingColor === false && object.colorTexture !== null) {
          needsProgramChange = true;
        } else if (object.isInstancedMesh && materialProperties.instancing === false) {
          needsProgramChange = true;
        } else if (!object.isInstancedMesh && materialProperties.instancing === true) {
          needsProgramChange = true;
        } else if (object.isSkinnedMesh && materialProperties.skinning === false) {
          needsProgramChange = true;
        } else if (!object.isSkinnedMesh && materialProperties.skinning === true) {
          needsProgramChange = true;
        } else if (object.isInstancedMesh && materialProperties.instancingColor === true && object.instanceColor === null) {
          needsProgramChange = true;
        } else if (object.isInstancedMesh && materialProperties.instancingColor === false && object.instanceColor !== null) {
          needsProgramChange = true;
        } else if (object.isInstancedMesh && materialProperties.instancingMorph === true && object.morphTexture === null) {
          needsProgramChange = true;
        } else if (object.isInstancedMesh && materialProperties.instancingMorph === false && object.morphTexture !== null) {
          needsProgramChange = true;
        } else if (materialProperties.envMap !== envMap) {
          needsProgramChange = true;
        } else if (material.fog === true && materialProperties.fog !== fog) {
          needsProgramChange = true;
        } else if (materialProperties.numClippingPlanes !== void 0 && (materialProperties.numClippingPlanes !== clipping.numPlanes || materialProperties.numIntersection !== clipping.numIntersection)) {
          needsProgramChange = true;
        } else if (materialProperties.vertexAlphas !== vertexAlphas) {
          needsProgramChange = true;
        } else if (materialProperties.vertexTangents !== vertexTangents) {
          needsProgramChange = true;
        } else if (materialProperties.morphTargets !== morphTargets) {
          needsProgramChange = true;
        } else if (materialProperties.morphNormals !== morphNormals) {
          needsProgramChange = true;
        } else if (materialProperties.morphColors !== morphColors) {
          needsProgramChange = true;
        } else if (materialProperties.toneMapping !== toneMapping) {
          needsProgramChange = true;
        } else if (materialProperties.morphTargetsCount !== morphTargetsCount) {
          needsProgramChange = true;
        }
      } else {
        needsProgramChange = true;
        materialProperties.__version = material.version;
      }
      let program = materialProperties.currentProgram;
      if (needsProgramChange === true) {
        program = getProgram(material, scene, object);
      }
      let refreshProgram = false;
      let refreshMaterial = false;
      let refreshLights = false;
      const p_uniforms = program.getUniforms(), m_uniforms = materialProperties.uniforms;
      if (state.useProgram(program.program)) {
        refreshProgram = true;
        refreshMaterial = true;
        refreshLights = true;
      }
      if (material.id !== _currentMaterialId) {
        _currentMaterialId = material.id;
        refreshMaterial = true;
      }
      if (refreshProgram || _currentCamera !== camera) {
        if (capabilities.reverseDepthBuffer) {
          _currentProjectionMatrix.copy(camera.projectionMatrix);
          toNormalizedProjectionMatrix(_currentProjectionMatrix);
          toReversedProjectionMatrix(_currentProjectionMatrix);
          p_uniforms.setValue(_gl, "projectionMatrix", _currentProjectionMatrix);
        } else {
          p_uniforms.setValue(_gl, "projectionMatrix", camera.projectionMatrix);
        }
        p_uniforms.setValue(_gl, "viewMatrix", camera.matrixWorldInverse);
        const uCamPos = p_uniforms.map.cameraPosition;
        if (uCamPos !== void 0) {
          uCamPos.setValue(_gl, _vector3.setFromMatrixPosition(camera.matrixWorld));
        }
        if (capabilities.logarithmicDepthBuffer) {
          p_uniforms.setValue(
            _gl,
            "logDepthBufFC",
            2 / (Math.log(camera.far + 1) / Math.LN2)
          );
        }
        if (material.isMeshPhongMaterial || material.isMeshToonMaterial || material.isMeshLambertMaterial || material.isMeshBasicMaterial || material.isMeshStandardMaterial || material.isShaderMaterial) {
          p_uniforms.setValue(_gl, "isOrthographic", camera.isOrthographicCamera === true);
        }
        if (_currentCamera !== camera) {
          _currentCamera = camera;
          refreshMaterial = true;
          refreshLights = true;
        }
      }
      if (object.isSkinnedMesh) {
        p_uniforms.setOptional(_gl, object, "bindMatrix");
        p_uniforms.setOptional(_gl, object, "bindMatrixInverse");
        const skeleton = object.skeleton;
        if (skeleton) {
          if (skeleton.boneTexture === null) skeleton.computeBoneTexture();
          p_uniforms.setValue(_gl, "boneTexture", skeleton.boneTexture, textures);
        }
      }
      if (object.isBatchedMesh) {
        p_uniforms.setOptional(_gl, object, "batchingTexture");
        p_uniforms.setValue(_gl, "batchingTexture", object._matricesTexture, textures);
        p_uniforms.setOptional(_gl, object, "batchingIdTexture");
        p_uniforms.setValue(_gl, "batchingIdTexture", object._indirectTexture, textures);
        p_uniforms.setOptional(_gl, object, "batchingColorTexture");
        if (object._colorsTexture !== null) {
          p_uniforms.setValue(_gl, "batchingColorTexture", object._colorsTexture, textures);
        }
      }
      const morphAttributes = geometry.morphAttributes;
      if (morphAttributes.position !== void 0 || morphAttributes.normal !== void 0 || morphAttributes.color !== void 0) {
        morphtargets.update(object, geometry, program);
      }
      if (refreshMaterial || materialProperties.receiveShadow !== object.receiveShadow) {
        materialProperties.receiveShadow = object.receiveShadow;
        p_uniforms.setValue(_gl, "receiveShadow", object.receiveShadow);
      }
      if (material.isMeshGouraudMaterial && material.envMap !== null) {
        m_uniforms.envMap.value = envMap;
        m_uniforms.flipEnvMap.value = envMap.isCubeTexture && envMap.isRenderTargetTexture === false ? -1 : 1;
      }
      if (material.isMeshStandardMaterial && material.envMap === null && scene.environment !== null) {
        m_uniforms.envMapIntensity.value = scene.environmentIntensity;
      }
      if (refreshMaterial) {
        p_uniforms.setValue(_gl, "toneMappingExposure", _this.toneMappingExposure);
        if (materialProperties.needsLights) {
          markUniformsLightsNeedsUpdate(m_uniforms, refreshLights);
        }
        if (fog && material.fog === true) {
          materials.refreshFogUniforms(m_uniforms, fog);
        }
        materials.refreshMaterialUniforms(m_uniforms, material, _pixelRatio, _height, currentRenderState.state.transmissionRenderTarget[camera.id]);
        WebGLUniforms.upload(_gl, getUniformList(materialProperties), m_uniforms, textures);
      }
      if (material.isShaderMaterial && material.uniformsNeedUpdate === true) {
        WebGLUniforms.upload(_gl, getUniformList(materialProperties), m_uniforms, textures);
        material.uniformsNeedUpdate = false;
      }
      if (material.isSpriteMaterial) {
        p_uniforms.setValue(_gl, "center", object.center);
      }
      p_uniforms.setValue(_gl, "modelViewMatrix", object.modelViewMatrix);
      p_uniforms.setValue(_gl, "normalMatrix", object.normalMatrix);
      p_uniforms.setValue(_gl, "modelMatrix", object.matrixWorld);
      if (material.isShaderMaterial || material.isRawShaderMaterial) {
        const groups = material.uniformsGroups;
        for (let i = 0, l = groups.length; i < l; i++) {
          const group = groups[i];
          uniformsGroups.update(group, program);
          uniformsGroups.bind(group, program);
        }
      }
      return program;
    }
    function markUniformsLightsNeedsUpdate(uniforms, value) {
      uniforms.ambientLightColor.needsUpdate = value;
      uniforms.lightProbe.needsUpdate = value;
      uniforms.directionalLights.needsUpdate = value;
      uniforms.directionalLightShadows.needsUpdate = value;
      uniforms.pointLights.needsUpdate = value;
      uniforms.pointLightShadows.needsUpdate = value;
      uniforms.spotLights.needsUpdate = value;
      uniforms.spotLightShadows.needsUpdate = value;
      uniforms.rectAreaLights.needsUpdate = value;
      uniforms.hemisphereLights.needsUpdate = value;
    }
    function materialNeedsLights(material) {
      return material.isMeshLambertMaterial || material.isMeshToonMaterial || material.isMeshPhongMaterial || material.isMeshStandardMaterial || material.isShadowMaterial || material.isShaderMaterial && material.lights === true;
    }
    this.getActiveCubeFace = function() {
      return _currentActiveCubeFace;
    };
    this.getActiveMipmapLevel = function() {
      return _currentActiveMipmapLevel;
    };
    this.getRenderTarget = function() {
      return _currentRenderTarget;
    };
    this.setRenderTargetTextures = function(renderTarget, colorTexture, depthTexture) {
      properties.get(renderTarget.texture).__webglTexture = colorTexture;
      properties.get(renderTarget.depthTexture).__webglTexture = depthTexture;
      const renderTargetProperties = properties.get(renderTarget);
      renderTargetProperties.__hasExternalTextures = true;
      renderTargetProperties.__autoAllocateDepthBuffer = depthTexture === void 0;
      if (!renderTargetProperties.__autoAllocateDepthBuffer) {
        if (extensions.has("WEBGL_multisampled_render_to_texture") === true) {
          console.warn("THREE.WebGLRenderer: Render-to-texture extension was disabled because an external texture was provided");
          renderTargetProperties.__useRenderToTexture = false;
        }
      }
    };
    this.setRenderTargetFramebuffer = function(renderTarget, defaultFramebuffer) {
      const renderTargetProperties = properties.get(renderTarget);
      renderTargetProperties.__webglFramebuffer = defaultFramebuffer;
      renderTargetProperties.__useDefaultFramebuffer = defaultFramebuffer === void 0;
    };
    this.setRenderTarget = function(renderTarget, activeCubeFace = 0, activeMipmapLevel = 0) {
      _currentRenderTarget = renderTarget;
      _currentActiveCubeFace = activeCubeFace;
      _currentActiveMipmapLevel = activeMipmapLevel;
      let useDefaultFramebuffer = true;
      let framebuffer = null;
      let isCube = false;
      let isRenderTarget3D = false;
      if (renderTarget) {
        const renderTargetProperties = properties.get(renderTarget);
        if (renderTargetProperties.__useDefaultFramebuffer !== void 0) {
          state.bindFramebuffer(_gl.FRAMEBUFFER, null);
          useDefaultFramebuffer = false;
        } else if (renderTargetProperties.__webglFramebuffer === void 0) {
          textures.setupRenderTarget(renderTarget);
        } else if (renderTargetProperties.__hasExternalTextures) {
          textures.rebindTextures(renderTarget, properties.get(renderTarget.texture).__webglTexture, properties.get(renderTarget.depthTexture).__webglTexture);
        } else if (renderTarget.depthBuffer) {
          const depthTexture = renderTarget.depthTexture;
          if (renderTargetProperties.__boundDepthTexture !== depthTexture) {
            if (depthTexture !== null && properties.has(depthTexture) && (renderTarget.width !== depthTexture.image.width || renderTarget.height !== depthTexture.image.height)) {
              throw new Error("WebGLRenderTarget: Attached DepthTexture is initialized to the incorrect size.");
            }
            textures.setupDepthRenderbuffer(renderTarget);
          }
        }
        const texture = renderTarget.texture;
        if (texture.isData3DTexture || texture.isDataArrayTexture || texture.isCompressedArrayTexture) {
          isRenderTarget3D = true;
        }
        const __webglFramebuffer = properties.get(renderTarget).__webglFramebuffer;
        if (renderTarget.isWebGLCubeRenderTarget) {
          if (Array.isArray(__webglFramebuffer[activeCubeFace])) {
            framebuffer = __webglFramebuffer[activeCubeFace][activeMipmapLevel];
          } else {
            framebuffer = __webglFramebuffer[activeCubeFace];
          }
          isCube = true;
        } else if (renderTarget.samples > 0 && textures.useMultisampledRTT(renderTarget) === false) {
          framebuffer = properties.get(renderTarget).__webglMultisampledFramebuffer;
        } else {
          if (Array.isArray(__webglFramebuffer)) {
            framebuffer = __webglFramebuffer[activeMipmapLevel];
          } else {
            framebuffer = __webglFramebuffer;
          }
        }
        _currentViewport.copy(renderTarget.viewport);
        _currentScissor.copy(renderTarget.scissor);
        _currentScissorTest = renderTarget.scissorTest;
      } else {
        _currentViewport.copy(_viewport2).multiplyScalar(_pixelRatio).floor();
        _currentScissor.copy(_scissor).multiplyScalar(_pixelRatio).floor();
        _currentScissorTest = _scissorTest;
      }
      const framebufferBound = state.bindFramebuffer(_gl.FRAMEBUFFER, framebuffer);
      if (framebufferBound && useDefaultFramebuffer) {
        state.drawBuffers(renderTarget, framebuffer);
      }
      state.viewport(_currentViewport);
      state.scissor(_currentScissor);
      state.setScissorTest(_currentScissorTest);
      if (isCube) {
        const textureProperties = properties.get(renderTarget.texture);
        _gl.framebufferTexture2D(_gl.FRAMEBUFFER, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_CUBE_MAP_POSITIVE_X + activeCubeFace, textureProperties.__webglTexture, activeMipmapLevel);
      } else if (isRenderTarget3D) {
        const textureProperties = properties.get(renderTarget.texture);
        const layer = activeCubeFace || 0;
        _gl.framebufferTextureLayer(_gl.FRAMEBUFFER, _gl.COLOR_ATTACHMENT0, textureProperties.__webglTexture, activeMipmapLevel || 0, layer);
      }
      _currentMaterialId = -1;
    };
    this.readRenderTargetPixels = function(renderTarget, x, y, width, height, buffer, activeCubeFaceIndex) {
      if (!(renderTarget && renderTarget.isWebGLRenderTarget)) {
        console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.");
        return;
      }
      let framebuffer = properties.get(renderTarget).__webglFramebuffer;
      if (renderTarget.isWebGLCubeRenderTarget && activeCubeFaceIndex !== void 0) {
        framebuffer = framebuffer[activeCubeFaceIndex];
      }
      if (framebuffer) {
        state.bindFramebuffer(_gl.FRAMEBUFFER, framebuffer);
        try {
          const texture = renderTarget.texture;
          const textureFormat = texture.format;
          const textureType = texture.type;
          if (!capabilities.textureFormatReadable(textureFormat)) {
            console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.");
            return;
          }
          if (!capabilities.textureTypeReadable(textureType)) {
            console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.");
            return;
          }
          if (x >= 0 && x <= renderTarget.width - width && (y >= 0 && y <= renderTarget.height - height)) {
            _gl.readPixels(x, y, width, height, utils.convert(textureFormat), utils.convert(textureType), buffer);
          }
        } finally {
          const framebuffer2 = _currentRenderTarget !== null ? properties.get(_currentRenderTarget).__webglFramebuffer : null;
          state.bindFramebuffer(_gl.FRAMEBUFFER, framebuffer2);
        }
      }
    };
    this.readRenderTargetPixelsAsync = async function(renderTarget, x, y, width, height, buffer, activeCubeFaceIndex) {
      if (!(renderTarget && renderTarget.isWebGLRenderTarget)) {
        throw new Error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.");
      }
      let framebuffer = properties.get(renderTarget).__webglFramebuffer;
      if (renderTarget.isWebGLCubeRenderTarget && activeCubeFaceIndex !== void 0) {
        framebuffer = framebuffer[activeCubeFaceIndex];
      }
      if (framebuffer) {
        const texture = renderTarget.texture;
        const textureFormat = texture.format;
        const textureType = texture.type;
        if (!capabilities.textureFormatReadable(textureFormat)) {
          throw new Error("THREE.WebGLRenderer.readRenderTargetPixelsAsync: renderTarget is not in RGBA or implementation defined format.");
        }
        if (!capabilities.textureTypeReadable(textureType)) {
          throw new Error("THREE.WebGLRenderer.readRenderTargetPixelsAsync: renderTarget is not in UnsignedByteType or implementation defined type.");
        }
        if (x >= 0 && x <= renderTarget.width - width && (y >= 0 && y <= renderTarget.height - height)) {
          state.bindFramebuffer(_gl.FRAMEBUFFER, framebuffer);
          const glBuffer = _gl.createBuffer();
          _gl.bindBuffer(_gl.PIXEL_PACK_BUFFER, glBuffer);
          _gl.bufferData(_gl.PIXEL_PACK_BUFFER, buffer.byteLength, _gl.STREAM_READ);
          _gl.readPixels(x, y, width, height, utils.convert(textureFormat), utils.convert(textureType), 0);
          const currFramebuffer = _currentRenderTarget !== null ? properties.get(_currentRenderTarget).__webglFramebuffer : null;
          state.bindFramebuffer(_gl.FRAMEBUFFER, currFramebuffer);
          const sync = _gl.fenceSync(_gl.SYNC_GPU_COMMANDS_COMPLETE, 0);
          _gl.flush();
          await probeAsync(_gl, sync, 4);
          _gl.bindBuffer(_gl.PIXEL_PACK_BUFFER, glBuffer);
          _gl.getBufferSubData(_gl.PIXEL_PACK_BUFFER, 0, buffer);
          _gl.deleteBuffer(glBuffer);
          _gl.deleteSync(sync);
          return buffer;
        } else {
          throw new Error("THREE.WebGLRenderer.readRenderTargetPixelsAsync: requested read bounds are out of range.");
        }
      }
    };
    this.copyFramebufferToTexture = function(texture, position = null, level = 0) {
      if (texture.isTexture !== true) {
        warnOnce("WebGLRenderer: copyFramebufferToTexture function signature has changed.");
        position = arguments[0] || null;
        texture = arguments[1];
      }
      const levelScale = Math.pow(2, -level);
      const width = Math.floor(texture.image.width * levelScale);
      const height = Math.floor(texture.image.height * levelScale);
      const x = position !== null ? position.x : 0;
      const y = position !== null ? position.y : 0;
      textures.setTexture2D(texture, 0);
      _gl.copyTexSubImage2D(_gl.TEXTURE_2D, level, 0, 0, x, y, width, height);
      state.unbindTexture();
    };
    this.copyTextureToTexture = function(srcTexture, dstTexture, srcRegion = null, dstPosition = null, level = 0) {
      if (srcTexture.isTexture !== true) {
        warnOnce("WebGLRenderer: copyTextureToTexture function signature has changed.");
        dstPosition = arguments[0] || null;
        srcTexture = arguments[1];
        dstTexture = arguments[2];
        level = arguments[3] || 0;
        srcRegion = null;
      }
      let width, height, minX, minY;
      let dstX, dstY;
      if (srcRegion !== null) {
        width = srcRegion.max.x - srcRegion.min.x;
        height = srcRegion.max.y - srcRegion.min.y;
        minX = srcRegion.min.x;
        minY = srcRegion.min.y;
      } else {
        width = srcTexture.image.width;
        height = srcTexture.image.height;
        minX = 0;
        minY = 0;
      }
      if (dstPosition !== null) {
        dstX = dstPosition.x;
        dstY = dstPosition.y;
      } else {
        dstX = 0;
        dstY = 0;
      }
      const glFormat = utils.convert(dstTexture.format);
      const glType = utils.convert(dstTexture.type);
      textures.setTexture2D(dstTexture, 0);
      _gl.pixelStorei(_gl.UNPACK_FLIP_Y_WEBGL, dstTexture.flipY);
      _gl.pixelStorei(_gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, dstTexture.premultiplyAlpha);
      _gl.pixelStorei(_gl.UNPACK_ALIGNMENT, dstTexture.unpackAlignment);
      const currentUnpackRowLen = _gl.getParameter(_gl.UNPACK_ROW_LENGTH);
      const currentUnpackImageHeight = _gl.getParameter(_gl.UNPACK_IMAGE_HEIGHT);
      const currentUnpackSkipPixels = _gl.getParameter(_gl.UNPACK_SKIP_PIXELS);
      const currentUnpackSkipRows = _gl.getParameter(_gl.UNPACK_SKIP_ROWS);
      const currentUnpackSkipImages = _gl.getParameter(_gl.UNPACK_SKIP_IMAGES);
      const image = srcTexture.isCompressedTexture ? srcTexture.mipmaps[level] : srcTexture.image;
      _gl.pixelStorei(_gl.UNPACK_ROW_LENGTH, image.width);
      _gl.pixelStorei(_gl.UNPACK_IMAGE_HEIGHT, image.height);
      _gl.pixelStorei(_gl.UNPACK_SKIP_PIXELS, minX);
      _gl.pixelStorei(_gl.UNPACK_SKIP_ROWS, minY);
      if (srcTexture.isDataTexture) {
        _gl.texSubImage2D(_gl.TEXTURE_2D, level, dstX, dstY, width, height, glFormat, glType, image.data);
      } else {
        if (srcTexture.isCompressedTexture) {
          _gl.compressedTexSubImage2D(_gl.TEXTURE_2D, level, dstX, dstY, image.width, image.height, glFormat, image.data);
        } else {
          _gl.texSubImage2D(_gl.TEXTURE_2D, level, dstX, dstY, width, height, glFormat, glType, image);
        }
      }
      _gl.pixelStorei(_gl.UNPACK_ROW_LENGTH, currentUnpackRowLen);
      _gl.pixelStorei(_gl.UNPACK_IMAGE_HEIGHT, currentUnpackImageHeight);
      _gl.pixelStorei(_gl.UNPACK_SKIP_PIXELS, currentUnpackSkipPixels);
      _gl.pixelStorei(_gl.UNPACK_SKIP_ROWS, currentUnpackSkipRows);
      _gl.pixelStorei(_gl.UNPACK_SKIP_IMAGES, currentUnpackSkipImages);
      if (level === 0 && dstTexture.generateMipmaps) _gl.generateMipmap(_gl.TEXTURE_2D);
      state.unbindTexture();
    };
    this.copyTextureToTexture3D = function(srcTexture, dstTexture, srcRegion = null, dstPosition = null, level = 0) {
      if (srcTexture.isTexture !== true) {
        warnOnce("WebGLRenderer: copyTextureToTexture3D function signature has changed.");
        srcRegion = arguments[0] || null;
        dstPosition = arguments[1] || null;
        srcTexture = arguments[2];
        dstTexture = arguments[3];
        level = arguments[4] || 0;
      }
      let width, height, depth2, minX, minY, minZ;
      let dstX, dstY, dstZ;
      const image = srcTexture.isCompressedTexture ? srcTexture.mipmaps[level] : srcTexture.image;
      if (srcRegion !== null) {
        width = srcRegion.max.x - srcRegion.min.x;
        height = srcRegion.max.y - srcRegion.min.y;
        depth2 = srcRegion.max.z - srcRegion.min.z;
        minX = srcRegion.min.x;
        minY = srcRegion.min.y;
        minZ = srcRegion.min.z;
      } else {
        width = image.width;
        height = image.height;
        depth2 = image.depth;
        minX = 0;
        minY = 0;
        minZ = 0;
      }
      if (dstPosition !== null) {
        dstX = dstPosition.x;
        dstY = dstPosition.y;
        dstZ = dstPosition.z;
      } else {
        dstX = 0;
        dstY = 0;
        dstZ = 0;
      }
      const glFormat = utils.convert(dstTexture.format);
      const glType = utils.convert(dstTexture.type);
      let glTarget;
      if (dstTexture.isData3DTexture) {
        textures.setTexture3D(dstTexture, 0);
        glTarget = _gl.TEXTURE_3D;
      } else if (dstTexture.isDataArrayTexture || dstTexture.isCompressedArrayTexture) {
        textures.setTexture2DArray(dstTexture, 0);
        glTarget = _gl.TEXTURE_2D_ARRAY;
      } else {
        console.warn("THREE.WebGLRenderer.copyTextureToTexture3D: only supports THREE.DataTexture3D and THREE.DataTexture2DArray.");
        return;
      }
      _gl.pixelStorei(_gl.UNPACK_FLIP_Y_WEBGL, dstTexture.flipY);
      _gl.pixelStorei(_gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, dstTexture.premultiplyAlpha);
      _gl.pixelStorei(_gl.UNPACK_ALIGNMENT, dstTexture.unpackAlignment);
      const currentUnpackRowLen = _gl.getParameter(_gl.UNPACK_ROW_LENGTH);
      const currentUnpackImageHeight = _gl.getParameter(_gl.UNPACK_IMAGE_HEIGHT);
      const currentUnpackSkipPixels = _gl.getParameter(_gl.UNPACK_SKIP_PIXELS);
      const currentUnpackSkipRows = _gl.getParameter(_gl.UNPACK_SKIP_ROWS);
      const currentUnpackSkipImages = _gl.getParameter(_gl.UNPACK_SKIP_IMAGES);
      _gl.pixelStorei(_gl.UNPACK_ROW_LENGTH, image.width);
      _gl.pixelStorei(_gl.UNPACK_IMAGE_HEIGHT, image.height);
      _gl.pixelStorei(_gl.UNPACK_SKIP_PIXELS, minX);
      _gl.pixelStorei(_gl.UNPACK_SKIP_ROWS, minY);
      _gl.pixelStorei(_gl.UNPACK_SKIP_IMAGES, minZ);
      if (srcTexture.isDataTexture || srcTexture.isData3DTexture) {
        _gl.texSubImage3D(glTarget, level, dstX, dstY, dstZ, width, height, depth2, glFormat, glType, image.data);
      } else {
        if (dstTexture.isCompressedArrayTexture) {
          _gl.compressedTexSubImage3D(glTarget, level, dstX, dstY, dstZ, width, height, depth2, glFormat, image.data);
        } else {
          _gl.texSubImage3D(glTarget, level, dstX, dstY, dstZ, width, height, depth2, glFormat, glType, image);
        }
      }
      _gl.pixelStorei(_gl.UNPACK_ROW_LENGTH, currentUnpackRowLen);
      _gl.pixelStorei(_gl.UNPACK_IMAGE_HEIGHT, currentUnpackImageHeight);
      _gl.pixelStorei(_gl.UNPACK_SKIP_PIXELS, currentUnpackSkipPixels);
      _gl.pixelStorei(_gl.UNPACK_SKIP_ROWS, currentUnpackSkipRows);
      _gl.pixelStorei(_gl.UNPACK_SKIP_IMAGES, currentUnpackSkipImages);
      if (level === 0 && dstTexture.generateMipmaps) _gl.generateMipmap(glTarget);
      state.unbindTexture();
    };
    this.initRenderTarget = function(target) {
      if (properties.get(target).__webglFramebuffer === void 0) {
        textures.setupRenderTarget(target);
      }
    };
    this.initTexture = function(texture) {
      if (texture.isCubeTexture) {
        textures.setTextureCube(texture, 0);
      } else if (texture.isData3DTexture) {
        textures.setTexture3D(texture, 0);
      } else if (texture.isDataArrayTexture || texture.isCompressedArrayTexture) {
        textures.setTexture2DArray(texture, 0);
      } else {
        textures.setTexture2D(texture, 0);
      }
      state.unbindTexture();
    };
    this.resetState = function() {
      _currentActiveCubeFace = 0;
      _currentActiveMipmapLevel = 0;
      _currentRenderTarget = null;
      state.reset();
      bindingStates.reset();
    };
    if (typeof __THREE_DEVTOOLS__ !== "undefined") {
      __THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe", { detail: this }));
    }
  }
  get coordinateSystem() {
    return WebGLCoordinateSystem;
  }
  get outputColorSpace() {
    return this._outputColorSpace;
  }
  set outputColorSpace(colorSpace) {
    this._outputColorSpace = colorSpace;
    const gl2 = this.getContext();
    gl2.drawingBufferColorSpace = colorSpace === DisplayP3ColorSpace ? "display-p3" : "srgb";
    gl2.unpackColorSpace = ColorManagement.workingColorSpace === LinearDisplayP3ColorSpace ? "display-p3" : "srgb";
  }
}
class Scene extends Object3D {
  constructor() {
    super();
    this.isScene = true;
    this.type = "Scene";
    this.background = null;
    this.environment = null;
    this.fog = null;
    this.backgroundBlurriness = 0;
    this.backgroundIntensity = 1;
    this.backgroundRotation = new Euler();
    this.environmentIntensity = 1;
    this.environmentRotation = new Euler();
    this.overrideMaterial = null;
    if (typeof __THREE_DEVTOOLS__ !== "undefined") {
      __THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe", { detail: this }));
    }
  }
  copy(source, recursive) {
    super.copy(source, recursive);
    if (source.background !== null) this.background = source.background.clone();
    if (source.environment !== null) this.environment = source.environment.clone();
    if (source.fog !== null) this.fog = source.fog.clone();
    this.backgroundBlurriness = source.backgroundBlurriness;
    this.backgroundIntensity = source.backgroundIntensity;
    this.backgroundRotation.copy(source.backgroundRotation);
    this.environmentIntensity = source.environmentIntensity;
    this.environmentRotation.copy(source.environmentRotation);
    if (source.overrideMaterial !== null) this.overrideMaterial = source.overrideMaterial.clone();
    this.matrixAutoUpdate = source.matrixAutoUpdate;
    return this;
  }
  toJSON(meta) {
    const data = super.toJSON(meta);
    if (this.fog !== null) data.object.fog = this.fog.toJSON();
    if (this.backgroundBlurriness > 0) data.object.backgroundBlurriness = this.backgroundBlurriness;
    if (this.backgroundIntensity !== 1) data.object.backgroundIntensity = this.backgroundIntensity;
    data.object.backgroundRotation = this.backgroundRotation.toArray();
    if (this.environmentIntensity !== 1) data.object.environmentIntensity = this.environmentIntensity;
    data.object.environmentRotation = this.environmentRotation.toArray();
    return data;
  }
}
class InterleavedBuffer {
  constructor(array, stride) {
    this.isInterleavedBuffer = true;
    this.array = array;
    this.stride = stride;
    this.count = array !== void 0 ? array.length / stride : 0;
    this.usage = StaticDrawUsage;
    this.updateRanges = [];
    this.version = 0;
    this.uuid = generateUUID();
  }
  onUploadCallback() {
  }
  set needsUpdate(value) {
    if (value === true) this.version++;
  }
  setUsage(value) {
    this.usage = value;
    return this;
  }
  addUpdateRange(start, count) {
    this.updateRanges.push({ start, count });
  }
  clearUpdateRanges() {
    this.updateRanges.length = 0;
  }
  copy(source) {
    this.array = new source.array.constructor(source.array);
    this.count = source.count;
    this.stride = source.stride;
    this.usage = source.usage;
    return this;
  }
  copyAt(index1, attribute, index2) {
    index1 *= this.stride;
    index2 *= attribute.stride;
    for (let i = 0, l = this.stride; i < l; i++) {
      this.array[index1 + i] = attribute.array[index2 + i];
    }
    return this;
  }
  set(value, offset = 0) {
    this.array.set(value, offset);
    return this;
  }
  clone(data) {
    if (data.arrayBuffers === void 0) {
      data.arrayBuffers = {};
    }
    if (this.array.buffer._uuid === void 0) {
      this.array.buffer._uuid = generateUUID();
    }
    if (data.arrayBuffers[this.array.buffer._uuid] === void 0) {
      data.arrayBuffers[this.array.buffer._uuid] = this.array.slice(0).buffer;
    }
    const array = new this.array.constructor(data.arrayBuffers[this.array.buffer._uuid]);
    const ib2 = new this.constructor(array, this.stride);
    ib2.setUsage(this.usage);
    return ib2;
  }
  onUpload(callback) {
    this.onUploadCallback = callback;
    return this;
  }
  toJSON(data) {
    if (data.arrayBuffers === void 0) {
      data.arrayBuffers = {};
    }
    if (this.array.buffer._uuid === void 0) {
      this.array.buffer._uuid = generateUUID();
    }
    if (data.arrayBuffers[this.array.buffer._uuid] === void 0) {
      data.arrayBuffers[this.array.buffer._uuid] = Array.from(new Uint32Array(this.array.buffer));
    }
    return {
      uuid: this.uuid,
      buffer: this.array.buffer._uuid,
      type: this.array.constructor.name,
      stride: this.stride
    };
  }
}
const _vector$6 = /* @__PURE__ */ new Vector3();
class InterleavedBufferAttribute {
  constructor(interleavedBuffer, itemSize, offset, normalized = false) {
    this.isInterleavedBufferAttribute = true;
    this.name = "";
    this.data = interleavedBuffer;
    this.itemSize = itemSize;
    this.offset = offset;
    this.normalized = normalized;
  }
  get count() {
    return this.data.count;
  }
  get array() {
    return this.data.array;
  }
  set needsUpdate(value) {
    this.data.needsUpdate = value;
  }
  applyMatrix4(m) {
    for (let i = 0, l = this.data.count; i < l; i++) {
      _vector$6.fromBufferAttribute(this, i);
      _vector$6.applyMatrix4(m);
      this.setXYZ(i, _vector$6.x, _vector$6.y, _vector$6.z);
    }
    return this;
  }
  applyNormalMatrix(m) {
    for (let i = 0, l = this.count; i < l; i++) {
      _vector$6.fromBufferAttribute(this, i);
      _vector$6.applyNormalMatrix(m);
      this.setXYZ(i, _vector$6.x, _vector$6.y, _vector$6.z);
    }
    return this;
  }
  transformDirection(m) {
    for (let i = 0, l = this.count; i < l; i++) {
      _vector$6.fromBufferAttribute(this, i);
      _vector$6.transformDirection(m);
      this.setXYZ(i, _vector$6.x, _vector$6.y, _vector$6.z);
    }
    return this;
  }
  getComponent(index, component) {
    let value = this.array[index * this.data.stride + this.offset + component];
    if (this.normalized) value = denormalize(value, this.array);
    return value;
  }
  setComponent(index, component, value) {
    if (this.normalized) value = normalize(value, this.array);
    this.data.array[index * this.data.stride + this.offset + component] = value;
    return this;
  }
  setX(index, x) {
    if (this.normalized) x = normalize(x, this.array);
    this.data.array[index * this.data.stride + this.offset] = x;
    return this;
  }
  setY(index, y) {
    if (this.normalized) y = normalize(y, this.array);
    this.data.array[index * this.data.stride + this.offset + 1] = y;
    return this;
  }
  setZ(index, z2) {
    if (this.normalized) z2 = normalize(z2, this.array);
    this.data.array[index * this.data.stride + this.offset + 2] = z2;
    return this;
  }
  setW(index, w) {
    if (this.normalized) w = normalize(w, this.array);
    this.data.array[index * this.data.stride + this.offset + 3] = w;
    return this;
  }
  getX(index) {
    let x = this.data.array[index * this.data.stride + this.offset];
    if (this.normalized) x = denormalize(x, this.array);
    return x;
  }
  getY(index) {
    let y = this.data.array[index * this.data.stride + this.offset + 1];
    if (this.normalized) y = denormalize(y, this.array);
    return y;
  }
  getZ(index) {
    let z2 = this.data.array[index * this.data.stride + this.offset + 2];
    if (this.normalized) z2 = denormalize(z2, this.array);
    return z2;
  }
  getW(index) {
    let w = this.data.array[index * this.data.stride + this.offset + 3];
    if (this.normalized) w = denormalize(w, this.array);
    return w;
  }
  setXY(index, x, y) {
    index = index * this.data.stride + this.offset;
    if (this.normalized) {
      x = normalize(x, this.array);
      y = normalize(y, this.array);
    }
    this.data.array[index + 0] = x;
    this.data.array[index + 1] = y;
    return this;
  }
  setXYZ(index, x, y, z2) {
    index = index * this.data.stride + this.offset;
    if (this.normalized) {
      x = normalize(x, this.array);
      y = normalize(y, this.array);
      z2 = normalize(z2, this.array);
    }
    this.data.array[index + 0] = x;
    this.data.array[index + 1] = y;
    this.data.array[index + 2] = z2;
    return this;
  }
  setXYZW(index, x, y, z2, w) {
    index = index * this.data.stride + this.offset;
    if (this.normalized) {
      x = normalize(x, this.array);
      y = normalize(y, this.array);
      z2 = normalize(z2, this.array);
      w = normalize(w, this.array);
    }
    this.data.array[index + 0] = x;
    this.data.array[index + 1] = y;
    this.data.array[index + 2] = z2;
    this.data.array[index + 3] = w;
    return this;
  }
  clone(data) {
    if (data === void 0) {
      console.log("THREE.InterleavedBufferAttribute.clone(): Cloning an interleaved buffer attribute will de-interleave buffer data.");
      const array = [];
      for (let i = 0; i < this.count; i++) {
        const index = i * this.data.stride + this.offset;
        for (let j2 = 0; j2 < this.itemSize; j2++) {
          array.push(this.data.array[index + j2]);
        }
      }
      return new BufferAttribute(new this.array.constructor(array), this.itemSize, this.normalized);
    } else {
      if (data.interleavedBuffers === void 0) {
        data.interleavedBuffers = {};
      }
      if (data.interleavedBuffers[this.data.uuid] === void 0) {
        data.interleavedBuffers[this.data.uuid] = this.data.clone(data);
      }
      return new InterleavedBufferAttribute(data.interleavedBuffers[this.data.uuid], this.itemSize, this.offset, this.normalized);
    }
  }
  toJSON(data) {
    if (data === void 0) {
      console.log("THREE.InterleavedBufferAttribute.toJSON(): Serializing an interleaved buffer attribute will de-interleave buffer data.");
      const array = [];
      for (let i = 0; i < this.count; i++) {
        const index = i * this.data.stride + this.offset;
        for (let j2 = 0; j2 < this.itemSize; j2++) {
          array.push(this.data.array[index + j2]);
        }
      }
      return {
        itemSize: this.itemSize,
        type: this.array.constructor.name,
        array,
        normalized: this.normalized
      };
    } else {
      if (data.interleavedBuffers === void 0) {
        data.interleavedBuffers = {};
      }
      if (data.interleavedBuffers[this.data.uuid] === void 0) {
        data.interleavedBuffers[this.data.uuid] = this.data.toJSON(data);
      }
      return {
        isInterleavedBufferAttribute: true,
        itemSize: this.itemSize,
        data: this.data.uuid,
        offset: this.offset,
        normalized: this.normalized
      };
    }
  }
}
class LineBasicMaterial extends Material {
  constructor(parameters) {
    super();
    this.isLineBasicMaterial = true;
    this.type = "LineBasicMaterial";
    this.color = new Color(16777215);
    this.map = null;
    this.linewidth = 1;
    this.linecap = "round";
    this.linejoin = "round";
    this.fog = true;
    this.setValues(parameters);
  }
  copy(source) {
    super.copy(source);
    this.color.copy(source.color);
    this.map = source.map;
    this.linewidth = source.linewidth;
    this.linecap = source.linecap;
    this.linejoin = source.linejoin;
    this.fog = source.fog;
    return this;
  }
}
const _vStart = /* @__PURE__ */ new Vector3();
const _vEnd = /* @__PURE__ */ new Vector3();
const _inverseMatrix$1 = /* @__PURE__ */ new Matrix4();
const _ray$1 = /* @__PURE__ */ new Ray();
const _sphere$1 = /* @__PURE__ */ new Sphere();
const _intersectPointOnRay = /* @__PURE__ */ new Vector3();
const _intersectPointOnSegment = /* @__PURE__ */ new Vector3();
class Line extends Object3D {
  constructor(geometry = new BufferGeometry(), material = new LineBasicMaterial()) {
    super();
    this.isLine = true;
    this.type = "Line";
    this.geometry = geometry;
    this.material = material;
    this.updateMorphTargets();
  }
  copy(source, recursive) {
    super.copy(source, recursive);
    this.material = Array.isArray(source.material) ? source.material.slice() : source.material;
    this.geometry = source.geometry;
    return this;
  }
  computeLineDistances() {
    const geometry = this.geometry;
    if (geometry.index === null) {
      const positionAttribute = geometry.attributes.position;
      const lineDistances = [0];
      for (let i = 1, l = positionAttribute.count; i < l; i++) {
        _vStart.fromBufferAttribute(positionAttribute, i - 1);
        _vEnd.fromBufferAttribute(positionAttribute, i);
        lineDistances[i] = lineDistances[i - 1];
        lineDistances[i] += _vStart.distanceTo(_vEnd);
      }
      geometry.setAttribute("lineDistance", new Float32BufferAttribute(lineDistances, 1));
    } else {
      console.warn("THREE.Line.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.");
    }
    return this;
  }
  raycast(raycaster, intersects2) {
    const geometry = this.geometry;
    const matrixWorld = this.matrixWorld;
    const threshold = raycaster.params.Line.threshold;
    const drawRange = geometry.drawRange;
    if (geometry.boundingSphere === null) geometry.computeBoundingSphere();
    _sphere$1.copy(geometry.boundingSphere);
    _sphere$1.applyMatrix4(matrixWorld);
    _sphere$1.radius += threshold;
    if (raycaster.ray.intersectsSphere(_sphere$1) === false) return;
    _inverseMatrix$1.copy(matrixWorld).invert();
    _ray$1.copy(raycaster.ray).applyMatrix4(_inverseMatrix$1);
    const localThreshold = threshold / ((this.scale.x + this.scale.y + this.scale.z) / 3);
    const localThresholdSq = localThreshold * localThreshold;
    const step = this.isLineSegments ? 2 : 1;
    const index = geometry.index;
    const attributes = geometry.attributes;
    const positionAttribute = attributes.position;
    if (index !== null) {
      const start = Math.max(0, drawRange.start);
      const end = Math.min(index.count, drawRange.start + drawRange.count);
      for (let i = start, l = end - 1; i < l; i += step) {
        const a = index.getX(i);
        const b = index.getX(i + 1);
        const intersect2 = checkIntersection(this, raycaster, _ray$1, localThresholdSq, a, b);
        if (intersect2) {
          intersects2.push(intersect2);
        }
      }
      if (this.isLineLoop) {
        const a = index.getX(end - 1);
        const b = index.getX(start);
        const intersect2 = checkIntersection(this, raycaster, _ray$1, localThresholdSq, a, b);
        if (intersect2) {
          intersects2.push(intersect2);
        }
      }
    } else {
      const start = Math.max(0, drawRange.start);
      const end = Math.min(positionAttribute.count, drawRange.start + drawRange.count);
      for (let i = start, l = end - 1; i < l; i += step) {
        const intersect2 = checkIntersection(this, raycaster, _ray$1, localThresholdSq, i, i + 1);
        if (intersect2) {
          intersects2.push(intersect2);
        }
      }
      if (this.isLineLoop) {
        const intersect2 = checkIntersection(this, raycaster, _ray$1, localThresholdSq, end - 1, start);
        if (intersect2) {
          intersects2.push(intersect2);
        }
      }
    }
  }
  updateMorphTargets() {
    const geometry = this.geometry;
    const morphAttributes = geometry.morphAttributes;
    const keys = Object.keys(morphAttributes);
    if (keys.length > 0) {
      const morphAttribute = morphAttributes[keys[0]];
      if (morphAttribute !== void 0) {
        this.morphTargetInfluences = [];
        this.morphTargetDictionary = {};
        for (let m = 0, ml2 = morphAttribute.length; m < ml2; m++) {
          const name2 = morphAttribute[m].name || String(m);
          this.morphTargetInfluences.push(0);
          this.morphTargetDictionary[name2] = m;
        }
      }
    }
  }
}
function checkIntersection(object, raycaster, ray, thresholdSq, a, b) {
  const positionAttribute = object.geometry.attributes.position;
  _vStart.fromBufferAttribute(positionAttribute, a);
  _vEnd.fromBufferAttribute(positionAttribute, b);
  const distSq = ray.distanceSqToSegment(_vStart, _vEnd, _intersectPointOnRay, _intersectPointOnSegment);
  if (distSq > thresholdSq) return;
  _intersectPointOnRay.applyMatrix4(object.matrixWorld);
  const distance = raycaster.ray.origin.distanceTo(_intersectPointOnRay);
  if (distance < raycaster.near || distance > raycaster.far) return;
  return {
    distance,
    // What do we want? intersection point on the ray or on the segment??
    // point: raycaster.ray.at( distance ),
    point: _intersectPointOnSegment.clone().applyMatrix4(object.matrixWorld),
    index: a,
    face: null,
    faceIndex: null,
    barycoord: null,
    object
  };
}
const _start$1 = /* @__PURE__ */ new Vector3();
const _end$1 = /* @__PURE__ */ new Vector3();
class LineSegments extends Line {
  constructor(geometry, material) {
    super(geometry, material);
    this.isLineSegments = true;
    this.type = "LineSegments";
  }
  computeLineDistances() {
    const geometry = this.geometry;
    if (geometry.index === null) {
      const positionAttribute = geometry.attributes.position;
      const lineDistances = [];
      for (let i = 0, l = positionAttribute.count; i < l; i += 2) {
        _start$1.fromBufferAttribute(positionAttribute, i);
        _end$1.fromBufferAttribute(positionAttribute, i + 1);
        lineDistances[i] = i === 0 ? 0 : lineDistances[i - 1];
        lineDistances[i + 1] = lineDistances[i] + _start$1.distanceTo(_end$1);
      }
      geometry.setAttribute("lineDistance", new Float32BufferAttribute(lineDistances, 1));
    } else {
      console.warn("THREE.LineSegments.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.");
    }
    return this;
  }
}
class Curve {
  constructor() {
    this.type = "Curve";
    this.arcLengthDivisions = 200;
  }
  // Virtual base class method to overwrite and implement in subclasses
  //	- t [0 .. 1]
  getPoint() {
    console.warn("THREE.Curve: .getPoint() not implemented.");
    return null;
  }
  // Get point at relative position in curve according to arc length
  // - u [0 .. 1]
  getPointAt(u, optionalTarget) {
    const t = this.getUtoTmapping(u);
    return this.getPoint(t, optionalTarget);
  }
  // Get sequence of points using getPoint( t )
  getPoints(divisions = 5) {
    const points = [];
    for (let d = 0; d <= divisions; d++) {
      points.push(this.getPoint(d / divisions));
    }
    return points;
  }
  // Get sequence of points using getPointAt( u )
  getSpacedPoints(divisions = 5) {
    const points = [];
    for (let d = 0; d <= divisions; d++) {
      points.push(this.getPointAt(d / divisions));
    }
    return points;
  }
  // Get total curve arc length
  getLength() {
    const lengths = this.getLengths();
    return lengths[lengths.length - 1];
  }
  // Get list of cumulative segment lengths
  getLengths(divisions = this.arcLengthDivisions) {
    if (this.cacheArcLengths && this.cacheArcLengths.length === divisions + 1 && !this.needsUpdate) {
      return this.cacheArcLengths;
    }
    this.needsUpdate = false;
    const cache = [];
    let current, last = this.getPoint(0);
    let sum = 0;
    cache.push(0);
    for (let p2 = 1; p2 <= divisions; p2++) {
      current = this.getPoint(p2 / divisions);
      sum += current.distanceTo(last);
      cache.push(sum);
      last = current;
    }
    this.cacheArcLengths = cache;
    return cache;
  }
  updateArcLengths() {
    this.needsUpdate = true;
    this.getLengths();
  }
  // Given u ( 0 .. 1 ), get a t to find p. This gives you points which are equidistant
  getUtoTmapping(u, distance) {
    const arcLengths = this.getLengths();
    let i = 0;
    const il2 = arcLengths.length;
    let targetArcLength;
    if (distance) {
      targetArcLength = distance;
    } else {
      targetArcLength = u * arcLengths[il2 - 1];
    }
    let low = 0, high = il2 - 1, comparison;
    while (low <= high) {
      i = Math.floor(low + (high - low) / 2);
      comparison = arcLengths[i] - targetArcLength;
      if (comparison < 0) {
        low = i + 1;
      } else if (comparison > 0) {
        high = i - 1;
      } else {
        high = i;
        break;
      }
    }
    i = high;
    if (arcLengths[i] === targetArcLength) {
      return i / (il2 - 1);
    }
    const lengthBefore = arcLengths[i];
    const lengthAfter = arcLengths[i + 1];
    const segmentLength = lengthAfter - lengthBefore;
    const segmentFraction = (targetArcLength - lengthBefore) / segmentLength;
    const t = (i + segmentFraction) / (il2 - 1);
    return t;
  }
  // Returns a unit vector tangent at t
  // In case any sub curve does not implement its tangent derivation,
  // 2 points a small delta apart will be used to find its gradient
  // which seems to give a reasonable approximation
  getTangent(t, optionalTarget) {
    const delta = 1e-4;
    let t1 = t - delta;
    let t2 = t + delta;
    if (t1 < 0) t1 = 0;
    if (t2 > 1) t2 = 1;
    const pt1 = this.getPoint(t1);
    const pt2 = this.getPoint(t2);
    const tangent = optionalTarget || (pt1.isVector2 ? new Vector2() : new Vector3());
    tangent.copy(pt2).sub(pt1).normalize();
    return tangent;
  }
  getTangentAt(u, optionalTarget) {
    const t = this.getUtoTmapping(u);
    return this.getTangent(t, optionalTarget);
  }
  computeFrenetFrames(segments, closed) {
    const normal = new Vector3();
    const tangents = [];
    const normals = [];
    const binormals = [];
    const vec = new Vector3();
    const mat = new Matrix4();
    for (let i = 0; i <= segments; i++) {
      const u = i / segments;
      tangents[i] = this.getTangentAt(u, new Vector3());
    }
    normals[0] = new Vector3();
    binormals[0] = new Vector3();
    let min = Number.MAX_VALUE;
    const tx = Math.abs(tangents[0].x);
    const ty = Math.abs(tangents[0].y);
    const tz = Math.abs(tangents[0].z);
    if (tx <= min) {
      min = tx;
      normal.set(1, 0, 0);
    }
    if (ty <= min) {
      min = ty;
      normal.set(0, 1, 0);
    }
    if (tz <= min) {
      normal.set(0, 0, 1);
    }
    vec.crossVectors(tangents[0], normal).normalize();
    normals[0].crossVectors(tangents[0], vec);
    binormals[0].crossVectors(tangents[0], normals[0]);
    for (let i = 1; i <= segments; i++) {
      normals[i] = normals[i - 1].clone();
      binormals[i] = binormals[i - 1].clone();
      vec.crossVectors(tangents[i - 1], tangents[i]);
      if (vec.length() > Number.EPSILON) {
        vec.normalize();
        const theta = Math.acos(clamp(tangents[i - 1].dot(tangents[i]), -1, 1));
        normals[i].applyMatrix4(mat.makeRotationAxis(vec, theta));
      }
      binormals[i].crossVectors(tangents[i], normals[i]);
    }
    if (closed === true) {
      let theta = Math.acos(clamp(normals[0].dot(normals[segments]), -1, 1));
      theta /= segments;
      if (tangents[0].dot(vec.crossVectors(normals[0], normals[segments])) > 0) {
        theta = -theta;
      }
      for (let i = 1; i <= segments; i++) {
        normals[i].applyMatrix4(mat.makeRotationAxis(tangents[i], theta * i));
        binormals[i].crossVectors(tangents[i], normals[i]);
      }
    }
    return {
      tangents,
      normals,
      binormals
    };
  }
  clone() {
    return new this.constructor().copy(this);
  }
  copy(source) {
    this.arcLengthDivisions = source.arcLengthDivisions;
    return this;
  }
  toJSON() {
    const data = {
      metadata: {
        version: 4.6,
        type: "Curve",
        generator: "Curve.toJSON"
      }
    };
    data.arcLengthDivisions = this.arcLengthDivisions;
    data.type = this.type;
    return data;
  }
  fromJSON(json) {
    this.arcLengthDivisions = json.arcLengthDivisions;
    return this;
  }
}
class EllipseCurve extends Curve {
  constructor(aX = 0, aY = 0, xRadius = 1, yRadius = 1, aStartAngle = 0, aEndAngle = Math.PI * 2, aClockwise = false, aRotation = 0) {
    super();
    this.isEllipseCurve = true;
    this.type = "EllipseCurve";
    this.aX = aX;
    this.aY = aY;
    this.xRadius = xRadius;
    this.yRadius = yRadius;
    this.aStartAngle = aStartAngle;
    this.aEndAngle = aEndAngle;
    this.aClockwise = aClockwise;
    this.aRotation = aRotation;
  }
  getPoint(t, optionalTarget = new Vector2()) {
    const point = optionalTarget;
    const twoPi = Math.PI * 2;
    let deltaAngle = this.aEndAngle - this.aStartAngle;
    const samePoints = Math.abs(deltaAngle) < Number.EPSILON;
    while (deltaAngle < 0) deltaAngle += twoPi;
    while (deltaAngle > twoPi) deltaAngle -= twoPi;
    if (deltaAngle < Number.EPSILON) {
      if (samePoints) {
        deltaAngle = 0;
      } else {
        deltaAngle = twoPi;
      }
    }
    if (this.aClockwise === true && !samePoints) {
      if (deltaAngle === twoPi) {
        deltaAngle = -twoPi;
      } else {
        deltaAngle = deltaAngle - twoPi;
      }
    }
    const angle = this.aStartAngle + t * deltaAngle;
    let x = this.aX + this.xRadius * Math.cos(angle);
    let y = this.aY + this.yRadius * Math.sin(angle);
    if (this.aRotation !== 0) {
      const cos = Math.cos(this.aRotation);
      const sin = Math.sin(this.aRotation);
      const tx = x - this.aX;
      const ty = y - this.aY;
      x = tx * cos - ty * sin + this.aX;
      y = tx * sin + ty * cos + this.aY;
    }
    return point.set(x, y);
  }
  copy(source) {
    super.copy(source);
    this.aX = source.aX;
    this.aY = source.aY;
    this.xRadius = source.xRadius;
    this.yRadius = source.yRadius;
    this.aStartAngle = source.aStartAngle;
    this.aEndAngle = source.aEndAngle;
    this.aClockwise = source.aClockwise;
    this.aRotation = source.aRotation;
    return this;
  }
  toJSON() {
    const data = super.toJSON();
    data.aX = this.aX;
    data.aY = this.aY;
    data.xRadius = this.xRadius;
    data.yRadius = this.yRadius;
    data.aStartAngle = this.aStartAngle;
    data.aEndAngle = this.aEndAngle;
    data.aClockwise = this.aClockwise;
    data.aRotation = this.aRotation;
    return data;
  }
  fromJSON(json) {
    super.fromJSON(json);
    this.aX = json.aX;
    this.aY = json.aY;
    this.xRadius = json.xRadius;
    this.yRadius = json.yRadius;
    this.aStartAngle = json.aStartAngle;
    this.aEndAngle = json.aEndAngle;
    this.aClockwise = json.aClockwise;
    this.aRotation = json.aRotation;
    return this;
  }
}
class ArcCurve extends EllipseCurve {
  constructor(aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise) {
    super(aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise);
    this.isArcCurve = true;
    this.type = "ArcCurve";
  }
}
function CubicPoly() {
  let c0 = 0, c1 = 0, c2 = 0, c3 = 0;
  function init(x0, x1, t0, t1) {
    c0 = x0;
    c1 = t0;
    c2 = -3 * x0 + 3 * x1 - 2 * t0 - t1;
    c3 = 2 * x0 - 2 * x1 + t0 + t1;
  }
  return {
    initCatmullRom: function(x0, x1, x2, x3, tension) {
      init(x1, x2, tension * (x2 - x0), tension * (x3 - x1));
    },
    initNonuniformCatmullRom: function(x0, x1, x2, x3, dt0, dt1, dt2) {
      let t1 = (x1 - x0) / dt0 - (x2 - x0) / (dt0 + dt1) + (x2 - x1) / dt1;
      let t2 = (x2 - x1) / dt1 - (x3 - x1) / (dt1 + dt2) + (x3 - x2) / dt2;
      t1 *= dt1;
      t2 *= dt1;
      init(x1, x2, t1, t2);
    },
    calc: function(t) {
      const t2 = t * t;
      const t3 = t2 * t;
      return c0 + c1 * t + c2 * t2 + c3 * t3;
    }
  };
}
const tmp = /* @__PURE__ */ new Vector3();
const px = /* @__PURE__ */ new CubicPoly();
const py = /* @__PURE__ */ new CubicPoly();
const pz = /* @__PURE__ */ new CubicPoly();
class CatmullRomCurve3 extends Curve {
  constructor(points = [], closed = false, curveType = "centripetal", tension = 0.5) {
    super();
    this.isCatmullRomCurve3 = true;
    this.type = "CatmullRomCurve3";
    this.points = points;
    this.closed = closed;
    this.curveType = curveType;
    this.tension = tension;
  }
  getPoint(t, optionalTarget = new Vector3()) {
    const point = optionalTarget;
    const points = this.points;
    const l = points.length;
    const p2 = (l - (this.closed ? 0 : 1)) * t;
    let intPoint = Math.floor(p2);
    let weight = p2 - intPoint;
    if (this.closed) {
      intPoint += intPoint > 0 ? 0 : (Math.floor(Math.abs(intPoint) / l) + 1) * l;
    } else if (weight === 0 && intPoint === l - 1) {
      intPoint = l - 2;
      weight = 1;
    }
    let p0, p3;
    if (this.closed || intPoint > 0) {
      p0 = points[(intPoint - 1) % l];
    } else {
      tmp.subVectors(points[0], points[1]).add(points[0]);
      p0 = tmp;
    }
    const p1 = points[intPoint % l];
    const p22 = points[(intPoint + 1) % l];
    if (this.closed || intPoint + 2 < l) {
      p3 = points[(intPoint + 2) % l];
    } else {
      tmp.subVectors(points[l - 1], points[l - 2]).add(points[l - 1]);
      p3 = tmp;
    }
    if (this.curveType === "centripetal" || this.curveType === "chordal") {
      const pow = this.curveType === "chordal" ? 0.5 : 0.25;
      let dt0 = Math.pow(p0.distanceToSquared(p1), pow);
      let dt1 = Math.pow(p1.distanceToSquared(p22), pow);
      let dt2 = Math.pow(p22.distanceToSquared(p3), pow);
      if (dt1 < 1e-4) dt1 = 1;
      if (dt0 < 1e-4) dt0 = dt1;
      if (dt2 < 1e-4) dt2 = dt1;
      px.initNonuniformCatmullRom(p0.x, p1.x, p22.x, p3.x, dt0, dt1, dt2);
      py.initNonuniformCatmullRom(p0.y, p1.y, p22.y, p3.y, dt0, dt1, dt2);
      pz.initNonuniformCatmullRom(p0.z, p1.z, p22.z, p3.z, dt0, dt1, dt2);
    } else if (this.curveType === "catmullrom") {
      px.initCatmullRom(p0.x, p1.x, p22.x, p3.x, this.tension);
      py.initCatmullRom(p0.y, p1.y, p22.y, p3.y, this.tension);
      pz.initCatmullRom(p0.z, p1.z, p22.z, p3.z, this.tension);
    }
    point.set(
      px.calc(weight),
      py.calc(weight),
      pz.calc(weight)
    );
    return point;
  }
  copy(source) {
    super.copy(source);
    this.points = [];
    for (let i = 0, l = source.points.length; i < l; i++) {
      const point = source.points[i];
      this.points.push(point.clone());
    }
    this.closed = source.closed;
    this.curveType = source.curveType;
    this.tension = source.tension;
    return this;
  }
  toJSON() {
    const data = super.toJSON();
    data.points = [];
    for (let i = 0, l = this.points.length; i < l; i++) {
      const point = this.points[i];
      data.points.push(point.toArray());
    }
    data.closed = this.closed;
    data.curveType = this.curveType;
    data.tension = this.tension;
    return data;
  }
  fromJSON(json) {
    super.fromJSON(json);
    this.points = [];
    for (let i = 0, l = json.points.length; i < l; i++) {
      const point = json.points[i];
      this.points.push(new Vector3().fromArray(point));
    }
    this.closed = json.closed;
    this.curveType = json.curveType;
    this.tension = json.tension;
    return this;
  }
}
function CatmullRom(t, p0, p1, p2, p3) {
  const v0 = (p2 - p0) * 0.5;
  const v1 = (p3 - p1) * 0.5;
  const t2 = t * t;
  const t3 = t * t2;
  return (2 * p1 - 2 * p2 + v0 + v1) * t3 + (-3 * p1 + 3 * p2 - 2 * v0 - v1) * t2 + v0 * t + p1;
}
function QuadraticBezierP0(t, p2) {
  const k2 = 1 - t;
  return k2 * k2 * p2;
}
function QuadraticBezierP1(t, p2) {
  return 2 * (1 - t) * t * p2;
}
function QuadraticBezierP2(t, p2) {
  return t * t * p2;
}
function QuadraticBezier(t, p0, p1, p2) {
  return QuadraticBezierP0(t, p0) + QuadraticBezierP1(t, p1) + QuadraticBezierP2(t, p2);
}
function CubicBezierP0(t, p2) {
  const k2 = 1 - t;
  return k2 * k2 * k2 * p2;
}
function CubicBezierP1(t, p2) {
  const k2 = 1 - t;
  return 3 * k2 * k2 * t * p2;
}
function CubicBezierP2(t, p2) {
  return 3 * (1 - t) * t * t * p2;
}
function CubicBezierP3(t, p2) {
  return t * t * t * p2;
}
function CubicBezier(t, p0, p1, p2, p3) {
  return CubicBezierP0(t, p0) + CubicBezierP1(t, p1) + CubicBezierP2(t, p2) + CubicBezierP3(t, p3);
}
class CubicBezierCurve extends Curve {
  constructor(v0 = new Vector2(), v1 = new Vector2(), v2 = new Vector2(), v3 = new Vector2()) {
    super();
    this.isCubicBezierCurve = true;
    this.type = "CubicBezierCurve";
    this.v0 = v0;
    this.v1 = v1;
    this.v2 = v2;
    this.v3 = v3;
  }
  getPoint(t, optionalTarget = new Vector2()) {
    const point = optionalTarget;
    const v0 = this.v0, v1 = this.v1, v2 = this.v2, v3 = this.v3;
    point.set(
      CubicBezier(t, v0.x, v1.x, v2.x, v3.x),
      CubicBezier(t, v0.y, v1.y, v2.y, v3.y)
    );
    return point;
  }
  copy(source) {
    super.copy(source);
    this.v0.copy(source.v0);
    this.v1.copy(source.v1);
    this.v2.copy(source.v2);
    this.v3.copy(source.v3);
    return this;
  }
  toJSON() {
    const data = super.toJSON();
    data.v0 = this.v0.toArray();
    data.v1 = this.v1.toArray();
    data.v2 = this.v2.toArray();
    data.v3 = this.v3.toArray();
    return data;
  }
  fromJSON(json) {
    super.fromJSON(json);
    this.v0.fromArray(json.v0);
    this.v1.fromArray(json.v1);
    this.v2.fromArray(json.v2);
    this.v3.fromArray(json.v3);
    return this;
  }
}
class CubicBezierCurve3 extends Curve {
  constructor(v0 = new Vector3(), v1 = new Vector3(), v2 = new Vector3(), v3 = new Vector3()) {
    super();
    this.isCubicBezierCurve3 = true;
    this.type = "CubicBezierCurve3";
    this.v0 = v0;
    this.v1 = v1;
    this.v2 = v2;
    this.v3 = v3;
  }
  getPoint(t, optionalTarget = new Vector3()) {
    const point = optionalTarget;
    const v0 = this.v0, v1 = this.v1, v2 = this.v2, v3 = this.v3;
    point.set(
      CubicBezier(t, v0.x, v1.x, v2.x, v3.x),
      CubicBezier(t, v0.y, v1.y, v2.y, v3.y),
      CubicBezier(t, v0.z, v1.z, v2.z, v3.z)
    );
    return point;
  }
  copy(source) {
    super.copy(source);
    this.v0.copy(source.v0);
    this.v1.copy(source.v1);
    this.v2.copy(source.v2);
    this.v3.copy(source.v3);
    return this;
  }
  toJSON() {
    const data = super.toJSON();
    data.v0 = this.v0.toArray();
    data.v1 = this.v1.toArray();
    data.v2 = this.v2.toArray();
    data.v3 = this.v3.toArray();
    return data;
  }
  fromJSON(json) {
    super.fromJSON(json);
    this.v0.fromArray(json.v0);
    this.v1.fromArray(json.v1);
    this.v2.fromArray(json.v2);
    this.v3.fromArray(json.v3);
    return this;
  }
}
class LineCurve extends Curve {
  constructor(v1 = new Vector2(), v2 = new Vector2()) {
    super();
    this.isLineCurve = true;
    this.type = "LineCurve";
    this.v1 = v1;
    this.v2 = v2;
  }
  getPoint(t, optionalTarget = new Vector2()) {
    const point = optionalTarget;
    if (t === 1) {
      point.copy(this.v2);
    } else {
      point.copy(this.v2).sub(this.v1);
      point.multiplyScalar(t).add(this.v1);
    }
    return point;
  }
  // Line curve is linear, so we can overwrite default getPointAt
  getPointAt(u, optionalTarget) {
    return this.getPoint(u, optionalTarget);
  }
  getTangent(t, optionalTarget = new Vector2()) {
    return optionalTarget.subVectors(this.v2, this.v1).normalize();
  }
  getTangentAt(u, optionalTarget) {
    return this.getTangent(u, optionalTarget);
  }
  copy(source) {
    super.copy(source);
    this.v1.copy(source.v1);
    this.v2.copy(source.v2);
    return this;
  }
  toJSON() {
    const data = super.toJSON();
    data.v1 = this.v1.toArray();
    data.v2 = this.v2.toArray();
    return data;
  }
  fromJSON(json) {
    super.fromJSON(json);
    this.v1.fromArray(json.v1);
    this.v2.fromArray(json.v2);
    return this;
  }
}
class LineCurve3 extends Curve {
  constructor(v1 = new Vector3(), v2 = new Vector3()) {
    super();
    this.isLineCurve3 = true;
    this.type = "LineCurve3";
    this.v1 = v1;
    this.v2 = v2;
  }
  getPoint(t, optionalTarget = new Vector3()) {
    const point = optionalTarget;
    if (t === 1) {
      point.copy(this.v2);
    } else {
      point.copy(this.v2).sub(this.v1);
      point.multiplyScalar(t).add(this.v1);
    }
    return point;
  }
  // Line curve is linear, so we can overwrite default getPointAt
  getPointAt(u, optionalTarget) {
    return this.getPoint(u, optionalTarget);
  }
  getTangent(t, optionalTarget = new Vector3()) {
    return optionalTarget.subVectors(this.v2, this.v1).normalize();
  }
  getTangentAt(u, optionalTarget) {
    return this.getTangent(u, optionalTarget);
  }
  copy(source) {
    super.copy(source);
    this.v1.copy(source.v1);
    this.v2.copy(source.v2);
    return this;
  }
  toJSON() {
    const data = super.toJSON();
    data.v1 = this.v1.toArray();
    data.v2 = this.v2.toArray();
    return data;
  }
  fromJSON(json) {
    super.fromJSON(json);
    this.v1.fromArray(json.v1);
    this.v2.fromArray(json.v2);
    return this;
  }
}
class QuadraticBezierCurve extends Curve {
  constructor(v0 = new Vector2(), v1 = new Vector2(), v2 = new Vector2()) {
    super();
    this.isQuadraticBezierCurve = true;
    this.type = "QuadraticBezierCurve";
    this.v0 = v0;
    this.v1 = v1;
    this.v2 = v2;
  }
  getPoint(t, optionalTarget = new Vector2()) {
    const point = optionalTarget;
    const v0 = this.v0, v1 = this.v1, v2 = this.v2;
    point.set(
      QuadraticBezier(t, v0.x, v1.x, v2.x),
      QuadraticBezier(t, v0.y, v1.y, v2.y)
    );
    return point;
  }
  copy(source) {
    super.copy(source);
    this.v0.copy(source.v0);
    this.v1.copy(source.v1);
    this.v2.copy(source.v2);
    return this;
  }
  toJSON() {
    const data = super.toJSON();
    data.v0 = this.v0.toArray();
    data.v1 = this.v1.toArray();
    data.v2 = this.v2.toArray();
    return data;
  }
  fromJSON(json) {
    super.fromJSON(json);
    this.v0.fromArray(json.v0);
    this.v1.fromArray(json.v1);
    this.v2.fromArray(json.v2);
    return this;
  }
}
class QuadraticBezierCurve3 extends Curve {
  constructor(v0 = new Vector3(), v1 = new Vector3(), v2 = new Vector3()) {
    super();
    this.isQuadraticBezierCurve3 = true;
    this.type = "QuadraticBezierCurve3";
    this.v0 = v0;
    this.v1 = v1;
    this.v2 = v2;
  }
  getPoint(t, optionalTarget = new Vector3()) {
    const point = optionalTarget;
    const v0 = this.v0, v1 = this.v1, v2 = this.v2;
    point.set(
      QuadraticBezier(t, v0.x, v1.x, v2.x),
      QuadraticBezier(t, v0.y, v1.y, v2.y),
      QuadraticBezier(t, v0.z, v1.z, v2.z)
    );
    return point;
  }
  copy(source) {
    super.copy(source);
    this.v0.copy(source.v0);
    this.v1.copy(source.v1);
    this.v2.copy(source.v2);
    return this;
  }
  toJSON() {
    const data = super.toJSON();
    data.v0 = this.v0.toArray();
    data.v1 = this.v1.toArray();
    data.v2 = this.v2.toArray();
    return data;
  }
  fromJSON(json) {
    super.fromJSON(json);
    this.v0.fromArray(json.v0);
    this.v1.fromArray(json.v1);
    this.v2.fromArray(json.v2);
    return this;
  }
}
class SplineCurve extends Curve {
  constructor(points = []) {
    super();
    this.isSplineCurve = true;
    this.type = "SplineCurve";
    this.points = points;
  }
  getPoint(t, optionalTarget = new Vector2()) {
    const point = optionalTarget;
    const points = this.points;
    const p2 = (points.length - 1) * t;
    const intPoint = Math.floor(p2);
    const weight = p2 - intPoint;
    const p0 = points[intPoint === 0 ? intPoint : intPoint - 1];
    const p1 = points[intPoint];
    const p22 = points[intPoint > points.length - 2 ? points.length - 1 : intPoint + 1];
    const p3 = points[intPoint > points.length - 3 ? points.length - 1 : intPoint + 2];
    point.set(
      CatmullRom(weight, p0.x, p1.x, p22.x, p3.x),
      CatmullRom(weight, p0.y, p1.y, p22.y, p3.y)
    );
    return point;
  }
  copy(source) {
    super.copy(source);
    this.points = [];
    for (let i = 0, l = source.points.length; i < l; i++) {
      const point = source.points[i];
      this.points.push(point.clone());
    }
    return this;
  }
  toJSON() {
    const data = super.toJSON();
    data.points = [];
    for (let i = 0, l = this.points.length; i < l; i++) {
      const point = this.points[i];
      data.points.push(point.toArray());
    }
    return data;
  }
  fromJSON(json) {
    super.fromJSON(json);
    this.points = [];
    for (let i = 0, l = json.points.length; i < l; i++) {
      const point = json.points[i];
      this.points.push(new Vector2().fromArray(point));
    }
    return this;
  }
}
var Curves = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  ArcCurve,
  CatmullRomCurve3,
  CubicBezierCurve,
  CubicBezierCurve3,
  EllipseCurve,
  LineCurve,
  LineCurve3,
  QuadraticBezierCurve,
  QuadraticBezierCurve3,
  SplineCurve
});
class CurvePath extends Curve {
  constructor() {
    super();
    this.type = "CurvePath";
    this.curves = [];
    this.autoClose = false;
  }
  add(curve) {
    this.curves.push(curve);
  }
  closePath() {
    const startPoint = this.curves[0].getPoint(0);
    const endPoint = this.curves[this.curves.length - 1].getPoint(1);
    if (!startPoint.equals(endPoint)) {
      const lineType = startPoint.isVector2 === true ? "LineCurve" : "LineCurve3";
      this.curves.push(new Curves[lineType](endPoint, startPoint));
    }
    return this;
  }
  // To get accurate point with reference to
  // entire path distance at time t,
  // following has to be done:
  // 1. Length of each sub path have to be known
  // 2. Locate and identify type of curve
  // 3. Get t for the curve
  // 4. Return curve.getPointAt(t')
  getPoint(t, optionalTarget) {
    const d = t * this.getLength();
    const curveLengths = this.getCurveLengths();
    let i = 0;
    while (i < curveLengths.length) {
      if (curveLengths[i] >= d) {
        const diff = curveLengths[i] - d;
        const curve = this.curves[i];
        const segmentLength = curve.getLength();
        const u = segmentLength === 0 ? 0 : 1 - diff / segmentLength;
        return curve.getPointAt(u, optionalTarget);
      }
      i++;
    }
    return null;
  }
  // We cannot use the default THREE.Curve getPoint() with getLength() because in
  // THREE.Curve, getLength() depends on getPoint() but in THREE.CurvePath
  // getPoint() depends on getLength
  getLength() {
    const lens = this.getCurveLengths();
    return lens[lens.length - 1];
  }
  // cacheLengths must be recalculated.
  updateArcLengths() {
    this.needsUpdate = true;
    this.cacheLengths = null;
    this.getCurveLengths();
  }
  // Compute lengths and cache them
  // We cannot overwrite getLengths() because UtoT mapping uses it.
  getCurveLengths() {
    if (this.cacheLengths && this.cacheLengths.length === this.curves.length) {
      return this.cacheLengths;
    }
    const lengths = [];
    let sums = 0;
    for (let i = 0, l = this.curves.length; i < l; i++) {
      sums += this.curves[i].getLength();
      lengths.push(sums);
    }
    this.cacheLengths = lengths;
    return lengths;
  }
  getSpacedPoints(divisions = 40) {
    const points = [];
    for (let i = 0; i <= divisions; i++) {
      points.push(this.getPoint(i / divisions));
    }
    if (this.autoClose) {
      points.push(points[0]);
    }
    return points;
  }
  getPoints(divisions = 12) {
    const points = [];
    let last;
    for (let i = 0, curves = this.curves; i < curves.length; i++) {
      const curve = curves[i];
      const resolution = curve.isEllipseCurve ? divisions * 2 : curve.isLineCurve || curve.isLineCurve3 ? 1 : curve.isSplineCurve ? divisions * curve.points.length : divisions;
      const pts = curve.getPoints(resolution);
      for (let j2 = 0; j2 < pts.length; j2++) {
        const point = pts[j2];
        if (last && last.equals(point)) continue;
        points.push(point);
        last = point;
      }
    }
    if (this.autoClose && points.length > 1 && !points[points.length - 1].equals(points[0])) {
      points.push(points[0]);
    }
    return points;
  }
  copy(source) {
    super.copy(source);
    this.curves = [];
    for (let i = 0, l = source.curves.length; i < l; i++) {
      const curve = source.curves[i];
      this.curves.push(curve.clone());
    }
    this.autoClose = source.autoClose;
    return this;
  }
  toJSON() {
    const data = super.toJSON();
    data.autoClose = this.autoClose;
    data.curves = [];
    for (let i = 0, l = this.curves.length; i < l; i++) {
      const curve = this.curves[i];
      data.curves.push(curve.toJSON());
    }
    return data;
  }
  fromJSON(json) {
    super.fromJSON(json);
    this.autoClose = json.autoClose;
    this.curves = [];
    for (let i = 0, l = json.curves.length; i < l; i++) {
      const curve = json.curves[i];
      this.curves.push(new Curves[curve.type]().fromJSON(curve));
    }
    return this;
  }
}
class Path extends CurvePath {
  constructor(points) {
    super();
    this.type = "Path";
    this.currentPoint = new Vector2();
    if (points) {
      this.setFromPoints(points);
    }
  }
  setFromPoints(points) {
    this.moveTo(points[0].x, points[0].y);
    for (let i = 1, l = points.length; i < l; i++) {
      this.lineTo(points[i].x, points[i].y);
    }
    return this;
  }
  moveTo(x, y) {
    this.currentPoint.set(x, y);
    return this;
  }
  lineTo(x, y) {
    const curve = new LineCurve(this.currentPoint.clone(), new Vector2(x, y));
    this.curves.push(curve);
    this.currentPoint.set(x, y);
    return this;
  }
  quadraticCurveTo(aCPx, aCPy, aX, aY) {
    const curve = new QuadraticBezierCurve(
      this.currentPoint.clone(),
      new Vector2(aCPx, aCPy),
      new Vector2(aX, aY)
    );
    this.curves.push(curve);
    this.currentPoint.set(aX, aY);
    return this;
  }
  bezierCurveTo(aCP1x, aCP1y, aCP2x, aCP2y, aX, aY) {
    const curve = new CubicBezierCurve(
      this.currentPoint.clone(),
      new Vector2(aCP1x, aCP1y),
      new Vector2(aCP2x, aCP2y),
      new Vector2(aX, aY)
    );
    this.curves.push(curve);
    this.currentPoint.set(aX, aY);
    return this;
  }
  splineThru(pts) {
    const npts = [this.currentPoint.clone()].concat(pts);
    const curve = new SplineCurve(npts);
    this.curves.push(curve);
    this.currentPoint.copy(pts[pts.length - 1]);
    return this;
  }
  arc(aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise) {
    const x0 = this.currentPoint.x;
    const y0 = this.currentPoint.y;
    this.absarc(
      aX + x0,
      aY + y0,
      aRadius,
      aStartAngle,
      aEndAngle,
      aClockwise
    );
    return this;
  }
  absarc(aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise) {
    this.absellipse(aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise);
    return this;
  }
  ellipse(aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation) {
    const x0 = this.currentPoint.x;
    const y0 = this.currentPoint.y;
    this.absellipse(aX + x0, aY + y0, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation);
    return this;
  }
  absellipse(aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation) {
    const curve = new EllipseCurve(aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation);
    if (this.curves.length > 0) {
      const firstPoint = curve.getPoint(0);
      if (!firstPoint.equals(this.currentPoint)) {
        this.lineTo(firstPoint.x, firstPoint.y);
      }
    }
    this.curves.push(curve);
    const lastPoint = curve.getPoint(1);
    this.currentPoint.copy(lastPoint);
    return this;
  }
  copy(source) {
    super.copy(source);
    this.currentPoint.copy(source.currentPoint);
    return this;
  }
  toJSON() {
    const data = super.toJSON();
    data.currentPoint = this.currentPoint.toArray();
    return data;
  }
  fromJSON(json) {
    super.fromJSON(json);
    this.currentPoint.fromArray(json.currentPoint);
    return this;
  }
}
class CylinderGeometry extends BufferGeometry {
  constructor(radiusTop = 1, radiusBottom = 1, height = 1, radialSegments = 32, heightSegments = 1, openEnded = false, thetaStart = 0, thetaLength = Math.PI * 2) {
    super();
    this.type = "CylinderGeometry";
    this.parameters = {
      radiusTop,
      radiusBottom,
      height,
      radialSegments,
      heightSegments,
      openEnded,
      thetaStart,
      thetaLength
    };
    const scope = this;
    radialSegments = Math.floor(radialSegments);
    heightSegments = Math.floor(heightSegments);
    const indices = [];
    const vertices = [];
    const normals = [];
    const uvs = [];
    let index = 0;
    const indexArray = [];
    const halfHeight = height / 2;
    let groupStart = 0;
    generateTorso();
    if (openEnded === false) {
      if (radiusTop > 0) generateCap(true);
      if (radiusBottom > 0) generateCap(false);
    }
    this.setIndex(indices);
    this.setAttribute("position", new Float32BufferAttribute(vertices, 3));
    this.setAttribute("normal", new Float32BufferAttribute(normals, 3));
    this.setAttribute("uv", new Float32BufferAttribute(uvs, 2));
    function generateTorso() {
      const normal = new Vector3();
      const vertex2 = new Vector3();
      let groupCount = 0;
      const slope = (radiusBottom - radiusTop) / height;
      for (let y = 0; y <= heightSegments; y++) {
        const indexRow = [];
        const v = y / heightSegments;
        const radius = v * (radiusBottom - radiusTop) + radiusTop;
        for (let x = 0; x <= radialSegments; x++) {
          const u = x / radialSegments;
          const theta = u * thetaLength + thetaStart;
          const sinTheta = Math.sin(theta);
          const cosTheta = Math.cos(theta);
          vertex2.x = radius * sinTheta;
          vertex2.y = -v * height + halfHeight;
          vertex2.z = radius * cosTheta;
          vertices.push(vertex2.x, vertex2.y, vertex2.z);
          normal.set(sinTheta, slope, cosTheta).normalize();
          normals.push(normal.x, normal.y, normal.z);
          uvs.push(u, 1 - v);
          indexRow.push(index++);
        }
        indexArray.push(indexRow);
      }
      for (let x = 0; x < radialSegments; x++) {
        for (let y = 0; y < heightSegments; y++) {
          const a = indexArray[y][x];
          const b = indexArray[y + 1][x];
          const c = indexArray[y + 1][x + 1];
          const d = indexArray[y][x + 1];
          if (radiusTop > 0) {
            indices.push(a, b, d);
            groupCount += 3;
          }
          if (radiusBottom > 0) {
            indices.push(b, c, d);
            groupCount += 3;
          }
        }
      }
      scope.addGroup(groupStart, groupCount, 0);
      groupStart += groupCount;
    }
    function generateCap(top) {
      const centerIndexStart = index;
      const uv = new Vector2();
      const vertex2 = new Vector3();
      let groupCount = 0;
      const radius = top === true ? radiusTop : radiusBottom;
      const sign2 = top === true ? 1 : -1;
      for (let x = 1; x <= radialSegments; x++) {
        vertices.push(0, halfHeight * sign2, 0);
        normals.push(0, sign2, 0);
        uvs.push(0.5, 0.5);
        index++;
      }
      const centerIndexEnd = index;
      for (let x = 0; x <= radialSegments; x++) {
        const u = x / radialSegments;
        const theta = u * thetaLength + thetaStart;
        const cosTheta = Math.cos(theta);
        const sinTheta = Math.sin(theta);
        vertex2.x = radius * sinTheta;
        vertex2.y = halfHeight * sign2;
        vertex2.z = radius * cosTheta;
        vertices.push(vertex2.x, vertex2.y, vertex2.z);
        normals.push(0, sign2, 0);
        uv.x = cosTheta * 0.5 + 0.5;
        uv.y = sinTheta * 0.5 * sign2 + 0.5;
        uvs.push(uv.x, uv.y);
        index++;
      }
      for (let x = 0; x < radialSegments; x++) {
        const c = centerIndexStart + x;
        const i = centerIndexEnd + x;
        if (top === true) {
          indices.push(i, i + 1, c);
        } else {
          indices.push(i + 1, i, c);
        }
        groupCount += 3;
      }
      scope.addGroup(groupStart, groupCount, top === true ? 1 : 2);
      groupStart += groupCount;
    }
  }
  copy(source) {
    super.copy(source);
    this.parameters = Object.assign({}, source.parameters);
    return this;
  }
  static fromJSON(data) {
    return new CylinderGeometry(data.radiusTop, data.radiusBottom, data.height, data.radialSegments, data.heightSegments, data.openEnded, data.thetaStart, data.thetaLength);
  }
}
const _v0 = /* @__PURE__ */ new Vector3();
const _v1$1 = /* @__PURE__ */ new Vector3();
const _normal = /* @__PURE__ */ new Vector3();
const _triangle = /* @__PURE__ */ new Triangle();
class EdgesGeometry extends BufferGeometry {
  constructor(geometry = null, thresholdAngle = 1) {
    super();
    this.type = "EdgesGeometry";
    this.parameters = {
      geometry,
      thresholdAngle
    };
    if (geometry !== null) {
      const precisionPoints = 4;
      const precision = Math.pow(10, precisionPoints);
      const thresholdDot = Math.cos(DEG2RAD * thresholdAngle);
      const indexAttr = geometry.getIndex();
      const positionAttr = geometry.getAttribute("position");
      const indexCount = indexAttr ? indexAttr.count : positionAttr.count;
      const indexArr = [0, 0, 0];
      const vertKeys = ["a", "b", "c"];
      const hashes = new Array(3);
      const edgeData = {};
      const vertices = [];
      for (let i = 0; i < indexCount; i += 3) {
        if (indexAttr) {
          indexArr[0] = indexAttr.getX(i);
          indexArr[1] = indexAttr.getX(i + 1);
          indexArr[2] = indexAttr.getX(i + 2);
        } else {
          indexArr[0] = i;
          indexArr[1] = i + 1;
          indexArr[2] = i + 2;
        }
        const { a, b, c } = _triangle;
        a.fromBufferAttribute(positionAttr, indexArr[0]);
        b.fromBufferAttribute(positionAttr, indexArr[1]);
        c.fromBufferAttribute(positionAttr, indexArr[2]);
        _triangle.getNormal(_normal);
        hashes[0] = `${Math.round(a.x * precision)},${Math.round(a.y * precision)},${Math.round(a.z * precision)}`;
        hashes[1] = `${Math.round(b.x * precision)},${Math.round(b.y * precision)},${Math.round(b.z * precision)}`;
        hashes[2] = `${Math.round(c.x * precision)},${Math.round(c.y * precision)},${Math.round(c.z * precision)}`;
        if (hashes[0] === hashes[1] || hashes[1] === hashes[2] || hashes[2] === hashes[0]) {
          continue;
        }
        for (let j2 = 0; j2 < 3; j2++) {
          const jNext = (j2 + 1) % 3;
          const vecHash0 = hashes[j2];
          const vecHash1 = hashes[jNext];
          const v0 = _triangle[vertKeys[j2]];
          const v1 = _triangle[vertKeys[jNext]];
          const hash = `${vecHash0}_${vecHash1}`;
          const reverseHash = `${vecHash1}_${vecHash0}`;
          if (reverseHash in edgeData && edgeData[reverseHash]) {
            if (_normal.dot(edgeData[reverseHash].normal) <= thresholdDot) {
              vertices.push(v0.x, v0.y, v0.z);
              vertices.push(v1.x, v1.y, v1.z);
            }
            edgeData[reverseHash] = null;
          } else if (!(hash in edgeData)) {
            edgeData[hash] = {
              index0: indexArr[j2],
              index1: indexArr[jNext],
              normal: _normal.clone()
            };
          }
        }
      }
      for (const key in edgeData) {
        if (edgeData[key]) {
          const { index0, index1 } = edgeData[key];
          _v0.fromBufferAttribute(positionAttr, index0);
          _v1$1.fromBufferAttribute(positionAttr, index1);
          vertices.push(_v0.x, _v0.y, _v0.z);
          vertices.push(_v1$1.x, _v1$1.y, _v1$1.z);
        }
      }
      this.setAttribute("position", new Float32BufferAttribute(vertices, 3));
    }
  }
  copy(source) {
    super.copy(source);
    this.parameters = Object.assign({}, source.parameters);
    return this;
  }
}
class Shape extends Path {
  constructor(points) {
    super(points);
    this.uuid = generateUUID();
    this.type = "Shape";
    this.holes = [];
  }
  getPointsHoles(divisions) {
    const holesPts = [];
    for (let i = 0, l = this.holes.length; i < l; i++) {
      holesPts[i] = this.holes[i].getPoints(divisions);
    }
    return holesPts;
  }
  // get points of shape and holes (keypoints based on segments parameter)
  extractPoints(divisions) {
    return {
      shape: this.getPoints(divisions),
      holes: this.getPointsHoles(divisions)
    };
  }
  copy(source) {
    super.copy(source);
    this.holes = [];
    for (let i = 0, l = source.holes.length; i < l; i++) {
      const hole = source.holes[i];
      this.holes.push(hole.clone());
    }
    return this;
  }
  toJSON() {
    const data = super.toJSON();
    data.uuid = this.uuid;
    data.holes = [];
    for (let i = 0, l = this.holes.length; i < l; i++) {
      const hole = this.holes[i];
      data.holes.push(hole.toJSON());
    }
    return data;
  }
  fromJSON(json) {
    super.fromJSON(json);
    this.uuid = json.uuid;
    this.holes = [];
    for (let i = 0, l = json.holes.length; i < l; i++) {
      const hole = json.holes[i];
      this.holes.push(new Path().fromJSON(hole));
    }
    return this;
  }
}
const Earcut = {
  triangulate: function(data, holeIndices, dim = 2) {
    const hasHoles = holeIndices && holeIndices.length;
    const outerLen = hasHoles ? holeIndices[0] * dim : data.length;
    let outerNode = linkedList(data, 0, outerLen, dim, true);
    const triangles = [];
    if (!outerNode || outerNode.next === outerNode.prev) return triangles;
    let minX, minY, maxX, maxY, x, y, invSize;
    if (hasHoles) outerNode = eliminateHoles(data, holeIndices, outerNode, dim);
    if (data.length > 80 * dim) {
      minX = maxX = data[0];
      minY = maxY = data[1];
      for (let i = dim; i < outerLen; i += dim) {
        x = data[i];
        y = data[i + 1];
        if (x < minX) minX = x;
        if (y < minY) minY = y;
        if (x > maxX) maxX = x;
        if (y > maxY) maxY = y;
      }
      invSize = Math.max(maxX - minX, maxY - minY);
      invSize = invSize !== 0 ? 32767 / invSize : 0;
    }
    earcutLinked(outerNode, triangles, dim, minX, minY, invSize, 0);
    return triangles;
  }
};
function linkedList(data, start, end, dim, clockwise) {
  let i, last;
  if (clockwise === signedArea(data, start, end, dim) > 0) {
    for (i = start; i < end; i += dim) last = insertNode(i, data[i], data[i + 1], last);
  } else {
    for (i = end - dim; i >= start; i -= dim) last = insertNode(i, data[i], data[i + 1], last);
  }
  if (last && equals(last, last.next)) {
    removeNode(last);
    last = last.next;
  }
  return last;
}
function filterPoints(start, end) {
  if (!start) return start;
  if (!end) end = start;
  let p2 = start, again;
  do {
    again = false;
    if (!p2.steiner && (equals(p2, p2.next) || area(p2.prev, p2, p2.next) === 0)) {
      removeNode(p2);
      p2 = end = p2.prev;
      if (p2 === p2.next) break;
      again = true;
    } else {
      p2 = p2.next;
    }
  } while (again || p2 !== end);
  return end;
}
function earcutLinked(ear, triangles, dim, minX, minY, invSize, pass) {
  if (!ear) return;
  if (!pass && invSize) indexCurve(ear, minX, minY, invSize);
  let stop = ear, prev, next;
  while (ear.prev !== ear.next) {
    prev = ear.prev;
    next = ear.next;
    if (invSize ? isEarHashed(ear, minX, minY, invSize) : isEar(ear)) {
      triangles.push(prev.i / dim | 0);
      triangles.push(ear.i / dim | 0);
      triangles.push(next.i / dim | 0);
      removeNode(ear);
      ear = next.next;
      stop = next.next;
      continue;
    }
    ear = next;
    if (ear === stop) {
      if (!pass) {
        earcutLinked(filterPoints(ear), triangles, dim, minX, minY, invSize, 1);
      } else if (pass === 1) {
        ear = cureLocalIntersections(filterPoints(ear), triangles, dim);
        earcutLinked(ear, triangles, dim, minX, minY, invSize, 2);
      } else if (pass === 2) {
        splitEarcut(ear, triangles, dim, minX, minY, invSize);
      }
      break;
    }
  }
}
function isEar(ear) {
  const a = ear.prev, b = ear, c = ear.next;
  if (area(a, b, c) >= 0) return false;
  const ax = a.x, bx = b.x, cx = c.x, ay = a.y, by = b.y, cy = c.y;
  const x0 = ax < bx ? ax < cx ? ax : cx : bx < cx ? bx : cx, y0 = ay < by ? ay < cy ? ay : cy : by < cy ? by : cy, x1 = ax > bx ? ax > cx ? ax : cx : bx > cx ? bx : cx, y1 = ay > by ? ay > cy ? ay : cy : by > cy ? by : cy;
  let p2 = c.next;
  while (p2 !== a) {
    if (p2.x >= x0 && p2.x <= x1 && p2.y >= y0 && p2.y <= y1 && pointInTriangle(ax, ay, bx, by, cx, cy, p2.x, p2.y) && area(p2.prev, p2, p2.next) >= 0) return false;
    p2 = p2.next;
  }
  return true;
}
function isEarHashed(ear, minX, minY, invSize) {
  const a = ear.prev, b = ear, c = ear.next;
  if (area(a, b, c) >= 0) return false;
  const ax = a.x, bx = b.x, cx = c.x, ay = a.y, by = b.y, cy = c.y;
  const x0 = ax < bx ? ax < cx ? ax : cx : bx < cx ? bx : cx, y0 = ay < by ? ay < cy ? ay : cy : by < cy ? by : cy, x1 = ax > bx ? ax > cx ? ax : cx : bx > cx ? bx : cx, y1 = ay > by ? ay > cy ? ay : cy : by > cy ? by : cy;
  const minZ = zOrder(x0, y0, minX, minY, invSize), maxZ = zOrder(x1, y1, minX, minY, invSize);
  let p2 = ear.prevZ, n = ear.nextZ;
  while (p2 && p2.z >= minZ && n && n.z <= maxZ) {
    if (p2.x >= x0 && p2.x <= x1 && p2.y >= y0 && p2.y <= y1 && p2 !== a && p2 !== c && pointInTriangle(ax, ay, bx, by, cx, cy, p2.x, p2.y) && area(p2.prev, p2, p2.next) >= 0) return false;
    p2 = p2.prevZ;
    if (n.x >= x0 && n.x <= x1 && n.y >= y0 && n.y <= y1 && n !== a && n !== c && pointInTriangle(ax, ay, bx, by, cx, cy, n.x, n.y) && area(n.prev, n, n.next) >= 0) return false;
    n = n.nextZ;
  }
  while (p2 && p2.z >= minZ) {
    if (p2.x >= x0 && p2.x <= x1 && p2.y >= y0 && p2.y <= y1 && p2 !== a && p2 !== c && pointInTriangle(ax, ay, bx, by, cx, cy, p2.x, p2.y) && area(p2.prev, p2, p2.next) >= 0) return false;
    p2 = p2.prevZ;
  }
  while (n && n.z <= maxZ) {
    if (n.x >= x0 && n.x <= x1 && n.y >= y0 && n.y <= y1 && n !== a && n !== c && pointInTriangle(ax, ay, bx, by, cx, cy, n.x, n.y) && area(n.prev, n, n.next) >= 0) return false;
    n = n.nextZ;
  }
  return true;
}
function cureLocalIntersections(start, triangles, dim) {
  let p2 = start;
  do {
    const a = p2.prev, b = p2.next.next;
    if (!equals(a, b) && intersects(a, p2, p2.next, b) && locallyInside(a, b) && locallyInside(b, a)) {
      triangles.push(a.i / dim | 0);
      triangles.push(p2.i / dim | 0);
      triangles.push(b.i / dim | 0);
      removeNode(p2);
      removeNode(p2.next);
      p2 = start = b;
    }
    p2 = p2.next;
  } while (p2 !== start);
  return filterPoints(p2);
}
function splitEarcut(start, triangles, dim, minX, minY, invSize) {
  let a = start;
  do {
    let b = a.next.next;
    while (b !== a.prev) {
      if (a.i !== b.i && isValidDiagonal(a, b)) {
        let c = splitPolygon(a, b);
        a = filterPoints(a, a.next);
        c = filterPoints(c, c.next);
        earcutLinked(a, triangles, dim, minX, minY, invSize, 0);
        earcutLinked(c, triangles, dim, minX, minY, invSize, 0);
        return;
      }
      b = b.next;
    }
    a = a.next;
  } while (a !== start);
}
function eliminateHoles(data, holeIndices, outerNode, dim) {
  const queue2 = [];
  let i, len, start, end, list;
  for (i = 0, len = holeIndices.length; i < len; i++) {
    start = holeIndices[i] * dim;
    end = i < len - 1 ? holeIndices[i + 1] * dim : data.length;
    list = linkedList(data, start, end, dim, false);
    if (list === list.next) list.steiner = true;
    queue2.push(getLeftmost(list));
  }
  queue2.sort(compareX);
  for (i = 0; i < queue2.length; i++) {
    outerNode = eliminateHole(queue2[i], outerNode);
  }
  return outerNode;
}
function compareX(a, b) {
  return a.x - b.x;
}
function eliminateHole(hole, outerNode) {
  const bridge = findHoleBridge(hole, outerNode);
  if (!bridge) {
    return outerNode;
  }
  const bridgeReverse = splitPolygon(bridge, hole);
  filterPoints(bridgeReverse, bridgeReverse.next);
  return filterPoints(bridge, bridge.next);
}
function findHoleBridge(hole, outerNode) {
  let p2 = outerNode, qx = -Infinity, m;
  const hx = hole.x, hy = hole.y;
  do {
    if (hy <= p2.y && hy >= p2.next.y && p2.next.y !== p2.y) {
      const x = p2.x + (hy - p2.y) * (p2.next.x - p2.x) / (p2.next.y - p2.y);
      if (x <= hx && x > qx) {
        qx = x;
        m = p2.x < p2.next.x ? p2 : p2.next;
        if (x === hx) return m;
      }
    }
    p2 = p2.next;
  } while (p2 !== outerNode);
  if (!m) return null;
  const stop = m, mx = m.x, my = m.y;
  let tanMin = Infinity, tan;
  p2 = m;
  do {
    if (hx >= p2.x && p2.x >= mx && hx !== p2.x && pointInTriangle(hy < my ? hx : qx, hy, mx, my, hy < my ? qx : hx, hy, p2.x, p2.y)) {
      tan = Math.abs(hy - p2.y) / (hx - p2.x);
      if (locallyInside(p2, hole) && (tan < tanMin || tan === tanMin && (p2.x > m.x || p2.x === m.x && sectorContainsSector(m, p2)))) {
        m = p2;
        tanMin = tan;
      }
    }
    p2 = p2.next;
  } while (p2 !== stop);
  return m;
}
function sectorContainsSector(m, p2) {
  return area(m.prev, m, p2.prev) < 0 && area(p2.next, m, m.next) < 0;
}
function indexCurve(start, minX, minY, invSize) {
  let p2 = start;
  do {
    if (p2.z === 0) p2.z = zOrder(p2.x, p2.y, minX, minY, invSize);
    p2.prevZ = p2.prev;
    p2.nextZ = p2.next;
    p2 = p2.next;
  } while (p2 !== start);
  p2.prevZ.nextZ = null;
  p2.prevZ = null;
  sortLinked(p2);
}
function sortLinked(list) {
  let i, p2, q2, e, tail, numMerges, pSize, qSize, inSize = 1;
  do {
    p2 = list;
    list = null;
    tail = null;
    numMerges = 0;
    while (p2) {
      numMerges++;
      q2 = p2;
      pSize = 0;
      for (i = 0; i < inSize; i++) {
        pSize++;
        q2 = q2.nextZ;
        if (!q2) break;
      }
      qSize = inSize;
      while (pSize > 0 || qSize > 0 && q2) {
        if (pSize !== 0 && (qSize === 0 || !q2 || p2.z <= q2.z)) {
          e = p2;
          p2 = p2.nextZ;
          pSize--;
        } else {
          e = q2;
          q2 = q2.nextZ;
          qSize--;
        }
        if (tail) tail.nextZ = e;
        else list = e;
        e.prevZ = tail;
        tail = e;
      }
      p2 = q2;
    }
    tail.nextZ = null;
    inSize *= 2;
  } while (numMerges > 1);
  return list;
}
function zOrder(x, y, minX, minY, invSize) {
  x = (x - minX) * invSize | 0;
  y = (y - minY) * invSize | 0;
  x = (x | x << 8) & 16711935;
  x = (x | x << 4) & 252645135;
  x = (x | x << 2) & 858993459;
  x = (x | x << 1) & 1431655765;
  y = (y | y << 8) & 16711935;
  y = (y | y << 4) & 252645135;
  y = (y | y << 2) & 858993459;
  y = (y | y << 1) & 1431655765;
  return x | y << 1;
}
function getLeftmost(start) {
  let p2 = start, leftmost = start;
  do {
    if (p2.x < leftmost.x || p2.x === leftmost.x && p2.y < leftmost.y) leftmost = p2;
    p2 = p2.next;
  } while (p2 !== start);
  return leftmost;
}
function pointInTriangle(ax, ay, bx, by, cx, cy, px2, py2) {
  return (cx - px2) * (ay - py2) >= (ax - px2) * (cy - py2) && (ax - px2) * (by - py2) >= (bx - px2) * (ay - py2) && (bx - px2) * (cy - py2) >= (cx - px2) * (by - py2);
}
function isValidDiagonal(a, b) {
  return a.next.i !== b.i && a.prev.i !== b.i && !intersectsPolygon(a, b) && // dones't intersect other edges
  (locallyInside(a, b) && locallyInside(b, a) && middleInside(a, b) && // locally visible
  (area(a.prev, a, b.prev) || area(a, b.prev, b)) || // does not create opposite-facing sectors
  equals(a, b) && area(a.prev, a, a.next) > 0 && area(b.prev, b, b.next) > 0);
}
function area(p2, q2, r) {
  return (q2.y - p2.y) * (r.x - q2.x) - (q2.x - p2.x) * (r.y - q2.y);
}
function equals(p1, p2) {
  return p1.x === p2.x && p1.y === p2.y;
}
function intersects(p1, q1, p2, q2) {
  const o1 = sign(area(p1, q1, p2));
  const o2 = sign(area(p1, q1, q2));
  const o3 = sign(area(p2, q2, p1));
  const o4 = sign(area(p2, q2, q1));
  if (o1 !== o2 && o3 !== o4) return true;
  if (o1 === 0 && onSegment(p1, p2, q1)) return true;
  if (o2 === 0 && onSegment(p1, q2, q1)) return true;
  if (o3 === 0 && onSegment(p2, p1, q2)) return true;
  if (o4 === 0 && onSegment(p2, q1, q2)) return true;
  return false;
}
function onSegment(p2, q2, r) {
  return q2.x <= Math.max(p2.x, r.x) && q2.x >= Math.min(p2.x, r.x) && q2.y <= Math.max(p2.y, r.y) && q2.y >= Math.min(p2.y, r.y);
}
function sign(num) {
  return num > 0 ? 1 : num < 0 ? -1 : 0;
}
function intersectsPolygon(a, b) {
  let p2 = a;
  do {
    if (p2.i !== a.i && p2.next.i !== a.i && p2.i !== b.i && p2.next.i !== b.i && intersects(p2, p2.next, a, b)) return true;
    p2 = p2.next;
  } while (p2 !== a);
  return false;
}
function locallyInside(a, b) {
  return area(a.prev, a, a.next) < 0 ? area(a, b, a.next) >= 0 && area(a, a.prev, b) >= 0 : area(a, b, a.prev) < 0 || area(a, a.next, b) < 0;
}
function middleInside(a, b) {
  let p2 = a, inside = false;
  const px2 = (a.x + b.x) / 2, py2 = (a.y + b.y) / 2;
  do {
    if (p2.y > py2 !== p2.next.y > py2 && p2.next.y !== p2.y && px2 < (p2.next.x - p2.x) * (py2 - p2.y) / (p2.next.y - p2.y) + p2.x)
      inside = !inside;
    p2 = p2.next;
  } while (p2 !== a);
  return inside;
}
function splitPolygon(a, b) {
  const a2 = new Node(a.i, a.x, a.y), b2 = new Node(b.i, b.x, b.y), an2 = a.next, bp2 = b.prev;
  a.next = b;
  b.prev = a;
  a2.next = an2;
  an2.prev = a2;
  b2.next = a2;
  a2.prev = b2;
  bp2.next = b2;
  b2.prev = bp2;
  return b2;
}
function insertNode(i, x, y, last) {
  const p2 = new Node(i, x, y);
  if (!last) {
    p2.prev = p2;
    p2.next = p2;
  } else {
    p2.next = last.next;
    p2.prev = last;
    last.next.prev = p2;
    last.next = p2;
  }
  return p2;
}
function removeNode(p2) {
  p2.next.prev = p2.prev;
  p2.prev.next = p2.next;
  if (p2.prevZ) p2.prevZ.nextZ = p2.nextZ;
  if (p2.nextZ) p2.nextZ.prevZ = p2.prevZ;
}
function Node(i, x, y) {
  this.i = i;
  this.x = x;
  this.y = y;
  this.prev = null;
  this.next = null;
  this.z = 0;
  this.prevZ = null;
  this.nextZ = null;
  this.steiner = false;
}
function signedArea(data, start, end, dim) {
  let sum = 0;
  for (let i = start, j2 = end - dim; i < end; i += dim) {
    sum += (data[j2] - data[i]) * (data[i + 1] + data[j2 + 1]);
    j2 = i;
  }
  return sum;
}
class ShapeUtils {
  // calculate area of the contour polygon
  static area(contour) {
    const n = contour.length;
    let a = 0;
    for (let p2 = n - 1, q2 = 0; q2 < n; p2 = q2++) {
      a += contour[p2].x * contour[q2].y - contour[q2].x * contour[p2].y;
    }
    return a * 0.5;
  }
  static isClockWise(pts) {
    return ShapeUtils.area(pts) < 0;
  }
  static triangulateShape(contour, holes) {
    const vertices = [];
    const holeIndices = [];
    const faces = [];
    removeDupEndPts(contour);
    addContour(vertices, contour);
    let holeIndex = contour.length;
    holes.forEach(removeDupEndPts);
    for (let i = 0; i < holes.length; i++) {
      holeIndices.push(holeIndex);
      holeIndex += holes[i].length;
      addContour(vertices, holes[i]);
    }
    const triangles = Earcut.triangulate(vertices, holeIndices);
    for (let i = 0; i < triangles.length; i += 3) {
      faces.push(triangles.slice(i, i + 3));
    }
    return faces;
  }
}
function removeDupEndPts(points) {
  const l = points.length;
  if (l > 2 && points[l - 1].equals(points[0])) {
    points.pop();
  }
}
function addContour(vertices, contour) {
  for (let i = 0; i < contour.length; i++) {
    vertices.push(contour[i].x);
    vertices.push(contour[i].y);
  }
}
class ExtrudeGeometry extends BufferGeometry {
  constructor(shapes = new Shape([new Vector2(0.5, 0.5), new Vector2(-0.5, 0.5), new Vector2(-0.5, -0.5), new Vector2(0.5, -0.5)]), options = {}) {
    super();
    this.type = "ExtrudeGeometry";
    this.parameters = {
      shapes,
      options
    };
    shapes = Array.isArray(shapes) ? shapes : [shapes];
    const scope = this;
    const verticesArray = [];
    const uvArray = [];
    for (let i = 0, l = shapes.length; i < l; i++) {
      const shape = shapes[i];
      addShape(shape);
    }
    this.setAttribute("position", new Float32BufferAttribute(verticesArray, 3));
    this.setAttribute("uv", new Float32BufferAttribute(uvArray, 2));
    this.computeVertexNormals();
    function addShape(shape) {
      const placeholder = [];
      const curveSegments = options.curveSegments !== void 0 ? options.curveSegments : 12;
      const steps = options.steps !== void 0 ? options.steps : 1;
      const depth = options.depth !== void 0 ? options.depth : 1;
      let bevelEnabled = options.bevelEnabled !== void 0 ? options.bevelEnabled : true;
      let bevelThickness = options.bevelThickness !== void 0 ? options.bevelThickness : 0.2;
      let bevelSize = options.bevelSize !== void 0 ? options.bevelSize : bevelThickness - 0.1;
      let bevelOffset = options.bevelOffset !== void 0 ? options.bevelOffset : 0;
      let bevelSegments = options.bevelSegments !== void 0 ? options.bevelSegments : 3;
      const extrudePath = options.extrudePath;
      const uvgen = options.UVGenerator !== void 0 ? options.UVGenerator : WorldUVGenerator;
      let extrudePts, extrudeByPath = false;
      let splineTube, binormal, normal, position2;
      if (extrudePath) {
        extrudePts = extrudePath.getSpacedPoints(steps);
        extrudeByPath = true;
        bevelEnabled = false;
        splineTube = extrudePath.computeFrenetFrames(steps, false);
        binormal = new Vector3();
        normal = new Vector3();
        position2 = new Vector3();
      }
      if (!bevelEnabled) {
        bevelSegments = 0;
        bevelThickness = 0;
        bevelSize = 0;
        bevelOffset = 0;
      }
      const shapePoints = shape.extractPoints(curveSegments);
      let vertices = shapePoints.shape;
      const holes = shapePoints.holes;
      const reverse = !ShapeUtils.isClockWise(vertices);
      if (reverse) {
        vertices = vertices.reverse();
        for (let h2 = 0, hl2 = holes.length; h2 < hl2; h2++) {
          const ahole = holes[h2];
          if (ShapeUtils.isClockWise(ahole)) {
            holes[h2] = ahole.reverse();
          }
        }
      }
      const faces = ShapeUtils.triangulateShape(vertices, holes);
      const contour = vertices;
      for (let h2 = 0, hl2 = holes.length; h2 < hl2; h2++) {
        const ahole = holes[h2];
        vertices = vertices.concat(ahole);
      }
      function scalePt2(pt, vec, size2) {
        if (!vec) console.error("THREE.ExtrudeGeometry: vec does not exist");
        return pt.clone().addScaledVector(vec, size2);
      }
      const vlen = vertices.length, flen = faces.length;
      function getBevelVec(inPt, inPrev, inNext) {
        let v_trans_x, v_trans_y, shrink_by;
        const v_prev_x = inPt.x - inPrev.x, v_prev_y = inPt.y - inPrev.y;
        const v_next_x = inNext.x - inPt.x, v_next_y = inNext.y - inPt.y;
        const v_prev_lensq = v_prev_x * v_prev_x + v_prev_y * v_prev_y;
        const collinear0 = v_prev_x * v_next_y - v_prev_y * v_next_x;
        if (Math.abs(collinear0) > Number.EPSILON) {
          const v_prev_len = Math.sqrt(v_prev_lensq);
          const v_next_len = Math.sqrt(v_next_x * v_next_x + v_next_y * v_next_y);
          const ptPrevShift_x = inPrev.x - v_prev_y / v_prev_len;
          const ptPrevShift_y = inPrev.y + v_prev_x / v_prev_len;
          const ptNextShift_x = inNext.x - v_next_y / v_next_len;
          const ptNextShift_y = inNext.y + v_next_x / v_next_len;
          const sf2 = ((ptNextShift_x - ptPrevShift_x) * v_next_y - (ptNextShift_y - ptPrevShift_y) * v_next_x) / (v_prev_x * v_next_y - v_prev_y * v_next_x);
          v_trans_x = ptPrevShift_x + v_prev_x * sf2 - inPt.x;
          v_trans_y = ptPrevShift_y + v_prev_y * sf2 - inPt.y;
          const v_trans_lensq = v_trans_x * v_trans_x + v_trans_y * v_trans_y;
          if (v_trans_lensq <= 2) {
            return new Vector2(v_trans_x, v_trans_y);
          } else {
            shrink_by = Math.sqrt(v_trans_lensq / 2);
          }
        } else {
          let direction_eq = false;
          if (v_prev_x > Number.EPSILON) {
            if (v_next_x > Number.EPSILON) {
              direction_eq = true;
            }
          } else {
            if (v_prev_x < -Number.EPSILON) {
              if (v_next_x < -Number.EPSILON) {
                direction_eq = true;
              }
            } else {
              if (Math.sign(v_prev_y) === Math.sign(v_next_y)) {
                direction_eq = true;
              }
            }
          }
          if (direction_eq) {
            v_trans_x = -v_prev_y;
            v_trans_y = v_prev_x;
            shrink_by = Math.sqrt(v_prev_lensq);
          } else {
            v_trans_x = v_prev_x;
            v_trans_y = v_prev_y;
            shrink_by = Math.sqrt(v_prev_lensq / 2);
          }
        }
        return new Vector2(v_trans_x / shrink_by, v_trans_y / shrink_by);
      }
      const contourMovements = [];
      for (let i = 0, il2 = contour.length, j2 = il2 - 1, k2 = i + 1; i < il2; i++, j2++, k2++) {
        if (j2 === il2) j2 = 0;
        if (k2 === il2) k2 = 0;
        contourMovements[i] = getBevelVec(contour[i], contour[j2], contour[k2]);
      }
      const holesMovements = [];
      let oneHoleMovements, verticesMovements = contourMovements.concat();
      for (let h2 = 0, hl2 = holes.length; h2 < hl2; h2++) {
        const ahole = holes[h2];
        oneHoleMovements = [];
        for (let i = 0, il2 = ahole.length, j2 = il2 - 1, k2 = i + 1; i < il2; i++, j2++, k2++) {
          if (j2 === il2) j2 = 0;
          if (k2 === il2) k2 = 0;
          oneHoleMovements[i] = getBevelVec(ahole[i], ahole[j2], ahole[k2]);
        }
        holesMovements.push(oneHoleMovements);
        verticesMovements = verticesMovements.concat(oneHoleMovements);
      }
      for (let b = 0; b < bevelSegments; b++) {
        const t = b / bevelSegments;
        const z2 = bevelThickness * Math.cos(t * Math.PI / 2);
        const bs3 = bevelSize * Math.sin(t * Math.PI / 2) + bevelOffset;
        for (let i = 0, il2 = contour.length; i < il2; i++) {
          const vert = scalePt2(contour[i], contourMovements[i], bs3);
          v(vert.x, vert.y, -z2);
        }
        for (let h2 = 0, hl2 = holes.length; h2 < hl2; h2++) {
          const ahole = holes[h2];
          oneHoleMovements = holesMovements[h2];
          for (let i = 0, il2 = ahole.length; i < il2; i++) {
            const vert = scalePt2(ahole[i], oneHoleMovements[i], bs3);
            v(vert.x, vert.y, -z2);
          }
        }
      }
      const bs2 = bevelSize + bevelOffset;
      for (let i = 0; i < vlen; i++) {
        const vert = bevelEnabled ? scalePt2(vertices[i], verticesMovements[i], bs2) : vertices[i];
        if (!extrudeByPath) {
          v(vert.x, vert.y, 0);
        } else {
          normal.copy(splineTube.normals[0]).multiplyScalar(vert.x);
          binormal.copy(splineTube.binormals[0]).multiplyScalar(vert.y);
          position2.copy(extrudePts[0]).add(normal).add(binormal);
          v(position2.x, position2.y, position2.z);
        }
      }
      for (let s = 1; s <= steps; s++) {
        for (let i = 0; i < vlen; i++) {
          const vert = bevelEnabled ? scalePt2(vertices[i], verticesMovements[i], bs2) : vertices[i];
          if (!extrudeByPath) {
            v(vert.x, vert.y, depth / steps * s);
          } else {
            normal.copy(splineTube.normals[s]).multiplyScalar(vert.x);
            binormal.copy(splineTube.binormals[s]).multiplyScalar(vert.y);
            position2.copy(extrudePts[s]).add(normal).add(binormal);
            v(position2.x, position2.y, position2.z);
          }
        }
      }
      for (let b = bevelSegments - 1; b >= 0; b--) {
        const t = b / bevelSegments;
        const z2 = bevelThickness * Math.cos(t * Math.PI / 2);
        const bs3 = bevelSize * Math.sin(t * Math.PI / 2) + bevelOffset;
        for (let i = 0, il2 = contour.length; i < il2; i++) {
          const vert = scalePt2(contour[i], contourMovements[i], bs3);
          v(vert.x, vert.y, depth + z2);
        }
        for (let h2 = 0, hl2 = holes.length; h2 < hl2; h2++) {
          const ahole = holes[h2];
          oneHoleMovements = holesMovements[h2];
          for (let i = 0, il2 = ahole.length; i < il2; i++) {
            const vert = scalePt2(ahole[i], oneHoleMovements[i], bs3);
            if (!extrudeByPath) {
              v(vert.x, vert.y, depth + z2);
            } else {
              v(vert.x, vert.y + extrudePts[steps - 1].y, extrudePts[steps - 1].x + z2);
            }
          }
        }
      }
      buildLidFaces();
      buildSideFaces();
      function buildLidFaces() {
        const start = verticesArray.length / 3;
        if (bevelEnabled) {
          let layer = 0;
          let offset = vlen * layer;
          for (let i = 0; i < flen; i++) {
            const face = faces[i];
            f3(face[2] + offset, face[1] + offset, face[0] + offset);
          }
          layer = steps + bevelSegments * 2;
          offset = vlen * layer;
          for (let i = 0; i < flen; i++) {
            const face = faces[i];
            f3(face[0] + offset, face[1] + offset, face[2] + offset);
          }
        } else {
          for (let i = 0; i < flen; i++) {
            const face = faces[i];
            f3(face[2], face[1], face[0]);
          }
          for (let i = 0; i < flen; i++) {
            const face = faces[i];
            f3(face[0] + vlen * steps, face[1] + vlen * steps, face[2] + vlen * steps);
          }
        }
        scope.addGroup(start, verticesArray.length / 3 - start, 0);
      }
      function buildSideFaces() {
        const start = verticesArray.length / 3;
        let layeroffset = 0;
        sidewalls(contour, layeroffset);
        layeroffset += contour.length;
        for (let h2 = 0, hl2 = holes.length; h2 < hl2; h2++) {
          const ahole = holes[h2];
          sidewalls(ahole, layeroffset);
          layeroffset += ahole.length;
        }
        scope.addGroup(start, verticesArray.length / 3 - start, 1);
      }
      function sidewalls(contour2, layeroffset) {
        let i = contour2.length;
        while (--i >= 0) {
          const j2 = i;
          let k2 = i - 1;
          if (k2 < 0) k2 = contour2.length - 1;
          for (let s = 0, sl2 = steps + bevelSegments * 2; s < sl2; s++) {
            const slen1 = vlen * s;
            const slen2 = vlen * (s + 1);
            const a = layeroffset + j2 + slen1, b = layeroffset + k2 + slen1, c = layeroffset + k2 + slen2, d = layeroffset + j2 + slen2;
            f4(a, b, c, d);
          }
        }
      }
      function v(x, y, z2) {
        placeholder.push(x);
        placeholder.push(y);
        placeholder.push(z2);
      }
      function f3(a, b, c) {
        addVertex(a);
        addVertex(b);
        addVertex(c);
        const nextIndex = verticesArray.length / 3;
        const uvs = uvgen.generateTopUV(scope, verticesArray, nextIndex - 3, nextIndex - 2, nextIndex - 1);
        addUV(uvs[0]);
        addUV(uvs[1]);
        addUV(uvs[2]);
      }
      function f4(a, b, c, d) {
        addVertex(a);
        addVertex(b);
        addVertex(d);
        addVertex(b);
        addVertex(c);
        addVertex(d);
        const nextIndex = verticesArray.length / 3;
        const uvs = uvgen.generateSideWallUV(scope, verticesArray, nextIndex - 6, nextIndex - 3, nextIndex - 2, nextIndex - 1);
        addUV(uvs[0]);
        addUV(uvs[1]);
        addUV(uvs[3]);
        addUV(uvs[1]);
        addUV(uvs[2]);
        addUV(uvs[3]);
      }
      function addVertex(index) {
        verticesArray.push(placeholder[index * 3 + 0]);
        verticesArray.push(placeholder[index * 3 + 1]);
        verticesArray.push(placeholder[index * 3 + 2]);
      }
      function addUV(vector2) {
        uvArray.push(vector2.x);
        uvArray.push(vector2.y);
      }
    }
  }
  copy(source) {
    super.copy(source);
    this.parameters = Object.assign({}, source.parameters);
    return this;
  }
  toJSON() {
    const data = super.toJSON();
    const shapes = this.parameters.shapes;
    const options = this.parameters.options;
    return toJSON$1(shapes, options, data);
  }
  static fromJSON(data, shapes) {
    const geometryShapes = [];
    for (let j2 = 0, jl2 = data.shapes.length; j2 < jl2; j2++) {
      const shape = shapes[data.shapes[j2]];
      geometryShapes.push(shape);
    }
    const extrudePath = data.options.extrudePath;
    if (extrudePath !== void 0) {
      data.options.extrudePath = new Curves[extrudePath.type]().fromJSON(extrudePath);
    }
    return new ExtrudeGeometry(geometryShapes, data.options);
  }
}
const WorldUVGenerator = {
  generateTopUV: function(geometry, vertices, indexA, indexB, indexC) {
    const a_x = vertices[indexA * 3];
    const a_y = vertices[indexA * 3 + 1];
    const b_x = vertices[indexB * 3];
    const b_y = vertices[indexB * 3 + 1];
    const c_x = vertices[indexC * 3];
    const c_y = vertices[indexC * 3 + 1];
    return [
      new Vector2(a_x, a_y),
      new Vector2(b_x, b_y),
      new Vector2(c_x, c_y)
    ];
  },
  generateSideWallUV: function(geometry, vertices, indexA, indexB, indexC, indexD) {
    const a_x = vertices[indexA * 3];
    const a_y = vertices[indexA * 3 + 1];
    const a_z = vertices[indexA * 3 + 2];
    const b_x = vertices[indexB * 3];
    const b_y = vertices[indexB * 3 + 1];
    const b_z = vertices[indexB * 3 + 2];
    const c_x = vertices[indexC * 3];
    const c_y = vertices[indexC * 3 + 1];
    const c_z = vertices[indexC * 3 + 2];
    const d_x = vertices[indexD * 3];
    const d_y = vertices[indexD * 3 + 1];
    const d_z = vertices[indexD * 3 + 2];
    if (Math.abs(a_y - b_y) < Math.abs(a_x - b_x)) {
      return [
        new Vector2(a_x, 1 - a_z),
        new Vector2(b_x, 1 - b_z),
        new Vector2(c_x, 1 - c_z),
        new Vector2(d_x, 1 - d_z)
      ];
    } else {
      return [
        new Vector2(a_y, 1 - a_z),
        new Vector2(b_y, 1 - b_z),
        new Vector2(c_y, 1 - c_z),
        new Vector2(d_y, 1 - d_z)
      ];
    }
  }
};
function toJSON$1(shapes, options, data) {
  data.shapes = [];
  if (Array.isArray(shapes)) {
    for (let i = 0, l = shapes.length; i < l; i++) {
      const shape = shapes[i];
      data.shapes.push(shape.uuid);
    }
  } else {
    data.shapes.push(shapes.uuid);
  }
  data.options = Object.assign({}, options);
  if (options.extrudePath !== void 0) data.options.extrudePath = options.extrudePath.toJSON();
  return data;
}
class WireframeGeometry extends BufferGeometry {
  constructor(geometry = null) {
    super();
    this.type = "WireframeGeometry";
    this.parameters = {
      geometry
    };
    if (geometry !== null) {
      const vertices = [];
      const edges = /* @__PURE__ */ new Set();
      const start = new Vector3();
      const end = new Vector3();
      if (geometry.index !== null) {
        const position = geometry.attributes.position;
        const indices = geometry.index;
        let groups = geometry.groups;
        if (groups.length === 0) {
          groups = [{ start: 0, count: indices.count, materialIndex: 0 }];
        }
        for (let o = 0, ol2 = groups.length; o < ol2; ++o) {
          const group = groups[o];
          const groupStart = group.start;
          const groupCount = group.count;
          for (let i = groupStart, l = groupStart + groupCount; i < l; i += 3) {
            for (let j2 = 0; j2 < 3; j2++) {
              const index1 = indices.getX(i + j2);
              const index2 = indices.getX(i + (j2 + 1) % 3);
              start.fromBufferAttribute(position, index1);
              end.fromBufferAttribute(position, index2);
              if (isUniqueEdge(start, end, edges) === true) {
                vertices.push(start.x, start.y, start.z);
                vertices.push(end.x, end.y, end.z);
              }
            }
          }
        }
      } else {
        const position = geometry.attributes.position;
        for (let i = 0, l = position.count / 3; i < l; i++) {
          for (let j2 = 0; j2 < 3; j2++) {
            const index1 = 3 * i + j2;
            const index2 = 3 * i + (j2 + 1) % 3;
            start.fromBufferAttribute(position, index1);
            end.fromBufferAttribute(position, index2);
            if (isUniqueEdge(start, end, edges) === true) {
              vertices.push(start.x, start.y, start.z);
              vertices.push(end.x, end.y, end.z);
            }
          }
        }
      }
      this.setAttribute("position", new Float32BufferAttribute(vertices, 3));
    }
  }
  copy(source) {
    super.copy(source);
    this.parameters = Object.assign({}, source.parameters);
    return this;
  }
}
function isUniqueEdge(start, end, edges) {
  const hash1 = `${start.x},${start.y},${start.z}-${end.x},${end.y},${end.z}`;
  const hash2 = `${end.x},${end.y},${end.z}-${start.x},${start.y},${start.z}`;
  if (edges.has(hash1) === true || edges.has(hash2) === true) {
    return false;
  } else {
    edges.add(hash1);
    edges.add(hash2);
    return true;
  }
}
const Cache = {
  enabled: false,
  files: {},
  add: function(key, file) {
    if (this.enabled === false) return;
    this.files[key] = file;
  },
  get: function(key) {
    if (this.enabled === false) return;
    return this.files[key];
  },
  remove: function(key) {
    delete this.files[key];
  },
  clear: function() {
    this.files = {};
  }
};
class LoadingManager {
  constructor(onLoad, onProgress, onError) {
    const scope = this;
    let isLoading = false;
    let itemsLoaded = 0;
    let itemsTotal = 0;
    let urlModifier = void 0;
    const handlers = [];
    this.onStart = void 0;
    this.onLoad = onLoad;
    this.onProgress = onProgress;
    this.onError = onError;
    this.itemStart = function(url) {
      itemsTotal++;
      if (isLoading === false) {
        if (scope.onStart !== void 0) {
          scope.onStart(url, itemsLoaded, itemsTotal);
        }
      }
      isLoading = true;
    };
    this.itemEnd = function(url) {
      itemsLoaded++;
      if (scope.onProgress !== void 0) {
        scope.onProgress(url, itemsLoaded, itemsTotal);
      }
      if (itemsLoaded === itemsTotal) {
        isLoading = false;
        if (scope.onLoad !== void 0) {
          scope.onLoad();
        }
      }
    };
    this.itemError = function(url) {
      if (scope.onError !== void 0) {
        scope.onError(url);
      }
    };
    this.resolveURL = function(url) {
      if (urlModifier) {
        return urlModifier(url);
      }
      return url;
    };
    this.setURLModifier = function(transform) {
      urlModifier = transform;
      return this;
    };
    this.addHandler = function(regex, loader) {
      handlers.push(regex, loader);
      return this;
    };
    this.removeHandler = function(regex) {
      const index = handlers.indexOf(regex);
      if (index !== -1) {
        handlers.splice(index, 2);
      }
      return this;
    };
    this.getHandler = function(file) {
      for (let i = 0, l = handlers.length; i < l; i += 2) {
        const regex = handlers[i];
        const loader = handlers[i + 1];
        if (regex.global) regex.lastIndex = 0;
        if (regex.test(file)) {
          return loader;
        }
      }
      return null;
    };
  }
}
const DefaultLoadingManager = /* @__PURE__ */ new LoadingManager();
class Loader {
  constructor(manager) {
    this.manager = manager !== void 0 ? manager : DefaultLoadingManager;
    this.crossOrigin = "anonymous";
    this.withCredentials = false;
    this.path = "";
    this.resourcePath = "";
    this.requestHeader = {};
  }
  load() {
  }
  loadAsync(url, onProgress) {
    const scope = this;
    return new Promise(function(resolve2, reject) {
      scope.load(url, resolve2, onProgress, reject);
    });
  }
  parse() {
  }
  setCrossOrigin(crossOrigin) {
    this.crossOrigin = crossOrigin;
    return this;
  }
  setWithCredentials(value) {
    this.withCredentials = value;
    return this;
  }
  setPath(path) {
    this.path = path;
    return this;
  }
  setResourcePath(resourcePath) {
    this.resourcePath = resourcePath;
    return this;
  }
  setRequestHeader(requestHeader) {
    this.requestHeader = requestHeader;
    return this;
  }
}
Loader.DEFAULT_MATERIAL_NAME = "__DEFAULT";
const loading = {};
class HttpError extends Error {
  constructor(message, response) {
    super(message);
    this.response = response;
  }
}
class FileLoader extends Loader {
  constructor(manager) {
    super(manager);
  }
  load(url, onLoad, onProgress, onError) {
    if (url === void 0) url = "";
    if (this.path !== void 0) url = this.path + url;
    url = this.manager.resolveURL(url);
    const cached = Cache.get(url);
    if (cached !== void 0) {
      this.manager.itemStart(url);
      setTimeout(() => {
        if (onLoad) onLoad(cached);
        this.manager.itemEnd(url);
      }, 0);
      return cached;
    }
    if (loading[url] !== void 0) {
      loading[url].push({
        onLoad,
        onProgress,
        onError
      });
      return;
    }
    loading[url] = [];
    loading[url].push({
      onLoad,
      onProgress,
      onError
    });
    const req = new Request(url, {
      headers: new Headers(this.requestHeader),
      credentials: this.withCredentials ? "include" : "same-origin"
      // An abort controller could be added within a future PR
    });
    const mimeType = this.mimeType;
    const responseType = this.responseType;
    fetch(req).then((response) => {
      if (response.status === 200 || response.status === 0) {
        if (response.status === 0) {
          console.warn("THREE.FileLoader: HTTP Status 0 received.");
        }
        if (typeof ReadableStream === "undefined" || response.body === void 0 || response.body.getReader === void 0) {
          return response;
        }
        const callbacks = loading[url];
        const reader = response.body.getReader();
        const contentLength = response.headers.get("X-File-Size") || response.headers.get("Content-Length");
        const total = contentLength ? parseInt(contentLength) : 0;
        const lengthComputable = total !== 0;
        let loaded = 0;
        const stream = new ReadableStream({
          start(controller) {
            readData();
            function readData() {
              reader.read().then(({ done, value }) => {
                if (done) {
                  controller.close();
                } else {
                  loaded += value.byteLength;
                  const event = new ProgressEvent("progress", { lengthComputable, loaded, total });
                  for (let i = 0, il2 = callbacks.length; i < il2; i++) {
                    const callback = callbacks[i];
                    if (callback.onProgress) callback.onProgress(event);
                  }
                  controller.enqueue(value);
                  readData();
                }
              }, (e) => {
                controller.error(e);
              });
            }
          }
        });
        return new Response(stream);
      } else {
        throw new HttpError(`fetch for "${response.url}" responded with ${response.status}: ${response.statusText}`, response);
      }
    }).then((response) => {
      switch (responseType) {
        case "arraybuffer":
          return response.arrayBuffer();
        case "blob":
          return response.blob();
        case "document":
          return response.text().then((text) => {
            const parser = new DOMParser();
            return parser.parseFromString(text, mimeType);
          });
        case "json":
          return response.json();
        default:
          if (mimeType === void 0) {
            return response.text();
          } else {
            const re = /charset="?([^;"\s]*)"?/i;
            const exec = re.exec(mimeType);
            const label = exec && exec[1] ? exec[1].toLowerCase() : void 0;
            const decoder = new TextDecoder(label);
            return response.arrayBuffer().then((ab2) => decoder.decode(ab2));
          }
      }
    }).then((data) => {
      Cache.add(url, data);
      const callbacks = loading[url];
      delete loading[url];
      for (let i = 0, il2 = callbacks.length; i < il2; i++) {
        const callback = callbacks[i];
        if (callback.onLoad) callback.onLoad(data);
      }
    }).catch((err) => {
      const callbacks = loading[url];
      if (callbacks === void 0) {
        this.manager.itemError(url);
        throw err;
      }
      delete loading[url];
      for (let i = 0, il2 = callbacks.length; i < il2; i++) {
        const callback = callbacks[i];
        if (callback.onError) callback.onError(err);
      }
      this.manager.itemError(url);
    }).finally(() => {
      this.manager.itemEnd(url);
    });
    this.manager.itemStart(url);
  }
  setResponseType(value) {
    this.responseType = value;
    return this;
  }
  setMimeType(value) {
    this.mimeType = value;
    return this;
  }
}
class InstancedBufferGeometry extends BufferGeometry {
  constructor() {
    super();
    this.isInstancedBufferGeometry = true;
    this.type = "InstancedBufferGeometry";
    this.instanceCount = Infinity;
  }
  copy(source) {
    super.copy(source);
    this.instanceCount = source.instanceCount;
    return this;
  }
  toJSON() {
    const data = super.toJSON();
    data.instanceCount = this.instanceCount;
    data.isInstancedBufferGeometry = true;
    return data;
  }
}
class Clock {
  constructor(autoStart = true) {
    this.autoStart = autoStart;
    this.startTime = 0;
    this.oldTime = 0;
    this.elapsedTime = 0;
    this.running = false;
  }
  start() {
    this.startTime = now();
    this.oldTime = this.startTime;
    this.elapsedTime = 0;
    this.running = true;
  }
  stop() {
    this.getElapsedTime();
    this.running = false;
    this.autoStart = false;
  }
  getElapsedTime() {
    this.getDelta();
    return this.elapsedTime;
  }
  getDelta() {
    let diff = 0;
    if (this.autoStart && !this.running) {
      this.start();
      return 0;
    }
    if (this.running) {
      const newTime = now();
      diff = (newTime - this.oldTime) / 1e3;
      this.oldTime = newTime;
      this.elapsedTime += diff;
    }
    return diff;
  }
}
function now() {
  return performance.now();
}
class InstancedInterleavedBuffer extends InterleavedBuffer {
  constructor(array, stride, meshPerAttribute = 1) {
    super(array, stride);
    this.isInstancedInterleavedBuffer = true;
    this.meshPerAttribute = meshPerAttribute;
  }
  copy(source) {
    super.copy(source);
    this.meshPerAttribute = source.meshPerAttribute;
    return this;
  }
  clone(data) {
    const ib2 = super.clone(data);
    ib2.meshPerAttribute = this.meshPerAttribute;
    return ib2;
  }
  toJSON(data) {
    const json = super.toJSON(data);
    json.isInstancedInterleavedBuffer = true;
    json.meshPerAttribute = this.meshPerAttribute;
    return json;
  }
}
const _matrix = /* @__PURE__ */ new Matrix4();
class Raycaster {
  constructor(origin, direction, near = 0, far = Infinity) {
    this.ray = new Ray(origin, direction);
    this.near = near;
    this.far = far;
    this.camera = null;
    this.layers = new Layers();
    this.params = {
      Mesh: {},
      Line: { threshold: 1 },
      LOD: {},
      Points: { threshold: 1 },
      Sprite: {}
    };
  }
  set(origin, direction) {
    this.ray.set(origin, direction);
  }
  setFromCamera(coords, camera) {
    if (camera.isPerspectiveCamera) {
      this.ray.origin.setFromMatrixPosition(camera.matrixWorld);
      this.ray.direction.set(coords.x, coords.y, 0.5).unproject(camera).sub(this.ray.origin).normalize();
      this.camera = camera;
    } else if (camera.isOrthographicCamera) {
      this.ray.origin.set(coords.x, coords.y, (camera.near + camera.far) / (camera.near - camera.far)).unproject(camera);
      this.ray.direction.set(0, 0, -1).transformDirection(camera.matrixWorld);
      this.camera = camera;
    } else {
      console.error("THREE.Raycaster: Unsupported camera type: " + camera.type);
    }
  }
  setFromXRController(controller) {
    _matrix.identity().extractRotation(controller.matrixWorld);
    this.ray.origin.setFromMatrixPosition(controller.matrixWorld);
    this.ray.direction.set(0, 0, -1).applyMatrix4(_matrix);
    return this;
  }
  intersectObject(object, recursive = true, intersects2 = []) {
    intersect(object, this, intersects2, recursive);
    intersects2.sort(ascSort);
    return intersects2;
  }
  intersectObjects(objects, recursive = true, intersects2 = []) {
    for (let i = 0, l = objects.length; i < l; i++) {
      intersect(objects[i], this, intersects2, recursive);
    }
    intersects2.sort(ascSort);
    return intersects2;
  }
}
function ascSort(a, b) {
  return a.distance - b.distance;
}
function intersect(object, raycaster, intersects2, recursive) {
  let propagate = true;
  if (object.layers.test(raycaster.layers)) {
    const result = object.raycast(raycaster, intersects2);
    if (result === false) propagate = false;
  }
  if (propagate === true && recursive === true) {
    const children = object.children;
    for (let i = 0, l = children.length; i < l; i++) {
      intersect(children[i], raycaster, intersects2, true);
    }
  }
}
const _startP = /* @__PURE__ */ new Vector3();
const _startEnd = /* @__PURE__ */ new Vector3();
class Line3 {
  constructor(start = new Vector3(), end = new Vector3()) {
    this.start = start;
    this.end = end;
  }
  set(start, end) {
    this.start.copy(start);
    this.end.copy(end);
    return this;
  }
  copy(line) {
    this.start.copy(line.start);
    this.end.copy(line.end);
    return this;
  }
  getCenter(target) {
    return target.addVectors(this.start, this.end).multiplyScalar(0.5);
  }
  delta(target) {
    return target.subVectors(this.end, this.start);
  }
  distanceSq() {
    return this.start.distanceToSquared(this.end);
  }
  distance() {
    return this.start.distanceTo(this.end);
  }
  at(t, target) {
    return this.delta(target).multiplyScalar(t).add(this.start);
  }
  closestPointToPointParameter(point, clampToLine) {
    _startP.subVectors(point, this.start);
    _startEnd.subVectors(this.end, this.start);
    const startEnd2 = _startEnd.dot(_startEnd);
    const startEnd_startP = _startEnd.dot(_startP);
    let t = startEnd_startP / startEnd2;
    if (clampToLine) {
      t = clamp(t, 0, 1);
    }
    return t;
  }
  closestPointToPoint(point, clampToLine, target) {
    const t = this.closestPointToPointParameter(point, clampToLine);
    return this.delta(target).multiplyScalar(t).add(this.start);
  }
  applyMatrix4(matrix) {
    this.start.applyMatrix4(matrix);
    this.end.applyMatrix4(matrix);
    return this;
  }
  equals(line) {
    return line.start.equals(this.start) && line.end.equals(this.end);
  }
  clone() {
    return new this.constructor().copy(this);
  }
}
class ShapePath {
  constructor() {
    this.type = "ShapePath";
    this.color = new Color();
    this.subPaths = [];
    this.currentPath = null;
  }
  moveTo(x, y) {
    this.currentPath = new Path();
    this.subPaths.push(this.currentPath);
    this.currentPath.moveTo(x, y);
    return this;
  }
  lineTo(x, y) {
    this.currentPath.lineTo(x, y);
    return this;
  }
  quadraticCurveTo(aCPx, aCPy, aX, aY) {
    this.currentPath.quadraticCurveTo(aCPx, aCPy, aX, aY);
    return this;
  }
  bezierCurveTo(aCP1x, aCP1y, aCP2x, aCP2y, aX, aY) {
    this.currentPath.bezierCurveTo(aCP1x, aCP1y, aCP2x, aCP2y, aX, aY);
    return this;
  }
  splineThru(pts) {
    this.currentPath.splineThru(pts);
    return this;
  }
  toShapes(isCCW) {
    function toShapesNoHoles(inSubpaths) {
      const shapes2 = [];
      for (let i = 0, l = inSubpaths.length; i < l; i++) {
        const tmpPath2 = inSubpaths[i];
        const tmpShape2 = new Shape();
        tmpShape2.curves = tmpPath2.curves;
        shapes2.push(tmpShape2);
      }
      return shapes2;
    }
    function isPointInsidePolygon(inPt, inPolygon) {
      const polyLen = inPolygon.length;
      let inside = false;
      for (let p2 = polyLen - 1, q2 = 0; q2 < polyLen; p2 = q2++) {
        let edgeLowPt = inPolygon[p2];
        let edgeHighPt = inPolygon[q2];
        let edgeDx = edgeHighPt.x - edgeLowPt.x;
        let edgeDy = edgeHighPt.y - edgeLowPt.y;
        if (Math.abs(edgeDy) > Number.EPSILON) {
          if (edgeDy < 0) {
            edgeLowPt = inPolygon[q2];
            edgeDx = -edgeDx;
            edgeHighPt = inPolygon[p2];
            edgeDy = -edgeDy;
          }
          if (inPt.y < edgeLowPt.y || inPt.y > edgeHighPt.y) continue;
          if (inPt.y === edgeLowPt.y) {
            if (inPt.x === edgeLowPt.x) return true;
          } else {
            const perpEdge = edgeDy * (inPt.x - edgeLowPt.x) - edgeDx * (inPt.y - edgeLowPt.y);
            if (perpEdge === 0) return true;
            if (perpEdge < 0) continue;
            inside = !inside;
          }
        } else {
          if (inPt.y !== edgeLowPt.y) continue;
          if (edgeHighPt.x <= inPt.x && inPt.x <= edgeLowPt.x || edgeLowPt.x <= inPt.x && inPt.x <= edgeHighPt.x) return true;
        }
      }
      return inside;
    }
    const isClockWise = ShapeUtils.isClockWise;
    const subPaths = this.subPaths;
    if (subPaths.length === 0) return [];
    let solid, tmpPath, tmpShape;
    const shapes = [];
    if (subPaths.length === 1) {
      tmpPath = subPaths[0];
      tmpShape = new Shape();
      tmpShape.curves = tmpPath.curves;
      shapes.push(tmpShape);
      return shapes;
    }
    let holesFirst = !isClockWise(subPaths[0].getPoints());
    holesFirst = isCCW ? !holesFirst : holesFirst;
    const betterShapeHoles = [];
    const newShapes = [];
    let newShapeHoles = [];
    let mainIdx = 0;
    let tmpPoints;
    newShapes[mainIdx] = void 0;
    newShapeHoles[mainIdx] = [];
    for (let i = 0, l = subPaths.length; i < l; i++) {
      tmpPath = subPaths[i];
      tmpPoints = tmpPath.getPoints();
      solid = isClockWise(tmpPoints);
      solid = isCCW ? !solid : solid;
      if (solid) {
        if (!holesFirst && newShapes[mainIdx]) mainIdx++;
        newShapes[mainIdx] = { s: new Shape(), p: tmpPoints };
        newShapes[mainIdx].s.curves = tmpPath.curves;
        if (holesFirst) mainIdx++;
        newShapeHoles[mainIdx] = [];
      } else {
        newShapeHoles[mainIdx].push({ h: tmpPath, p: tmpPoints[0] });
      }
    }
    if (!newShapes[0]) return toShapesNoHoles(subPaths);
    if (newShapes.length > 1) {
      let ambiguous = false;
      let toChange = 0;
      for (let sIdx = 0, sLen = newShapes.length; sIdx < sLen; sIdx++) {
        betterShapeHoles[sIdx] = [];
      }
      for (let sIdx = 0, sLen = newShapes.length; sIdx < sLen; sIdx++) {
        const sho = newShapeHoles[sIdx];
        for (let hIdx = 0; hIdx < sho.length; hIdx++) {
          const ho2 = sho[hIdx];
          let hole_unassigned = true;
          for (let s2Idx = 0; s2Idx < newShapes.length; s2Idx++) {
            if (isPointInsidePolygon(ho2.p, newShapes[s2Idx].p)) {
              if (sIdx !== s2Idx) toChange++;
              if (hole_unassigned) {
                hole_unassigned = false;
                betterShapeHoles[s2Idx].push(ho2);
              } else {
                ambiguous = true;
              }
            }
          }
          if (hole_unassigned) {
            betterShapeHoles[sIdx].push(ho2);
          }
        }
      }
      if (toChange > 0 && ambiguous === false) {
        newShapeHoles = betterShapeHoles;
      }
    }
    let tmpHoles;
    for (let i = 0, il2 = newShapes.length; i < il2; i++) {
      tmpShape = newShapes[i].s;
      shapes.push(tmpShape);
      tmpHoles = newShapeHoles[i];
      for (let j2 = 0, jl2 = tmpHoles.length; j2 < jl2; j2++) {
        tmpShape.holes.push(tmpHoles[j2].h);
      }
    }
    return shapes;
  }
}
class Controls extends EventDispatcher {
  constructor(object, domElement = null) {
    super();
    this.object = object;
    this.domElement = domElement;
    this.enabled = true;
    this.state = -1;
    this.keys = {};
    this.mouseButtons = { LEFT: null, MIDDLE: null, RIGHT: null };
    this.touches = { ONE: null, TWO: null };
  }
  connect() {
  }
  disconnect() {
  }
  dispose() {
  }
  update() {
  }
}
if (typeof __THREE_DEVTOOLS__ !== "undefined") {
  __THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("register", { detail: {
    revision: REVISION
  } }));
}
if (typeof window !== "undefined") {
  if (window.__THREE__) {
    console.warn("WARNING: Multiple instances of Three.js being imported.");
  } else {
    window.__THREE__ = REVISION;
  }
}
const _euler = new Euler(0, 0, 0, "YXZ");
const _vector$1 = new Vector3();
const _changeEvent = { type: "change" };
const _lockEvent = { type: "lock" };
const _unlockEvent = { type: "unlock" };
const _PI_2 = Math.PI / 2;
class PointerLockControls extends Controls {
  constructor(camera, domElement = null) {
    super(camera, domElement);
    this.isLocked = false;
    this.minPolarAngle = 0;
    this.maxPolarAngle = Math.PI;
    this.pointerSpeed = 1;
    this._onMouseMove = onMouseMove.bind(this);
    this._onPointerlockChange = onPointerlockChange.bind(this);
    this._onPointerlockError = onPointerlockError.bind(this);
    if (this.domElement !== null) {
      this.connect();
    }
  }
  connect() {
    this.domElement.ownerDocument.addEventListener("mousemove", this._onMouseMove);
    this.domElement.ownerDocument.addEventListener("pointerlockchange", this._onPointerlockChange);
    this.domElement.ownerDocument.addEventListener("pointerlockerror", this._onPointerlockError);
  }
  disconnect() {
    this.domElement.ownerDocument.removeEventListener("mousemove", this._onMouseMove);
    this.domElement.ownerDocument.removeEventListener("pointerlockchange", this._onPointerlockChange);
    this.domElement.ownerDocument.removeEventListener("pointerlockerror", this._onPointerlockError);
  }
  dispose() {
    this.disconnect();
  }
  getObject() {
    console.warn("THREE.PointerLockControls: getObject() has been deprecated. Use controls.object instead.");
    return this.object;
  }
  getDirection(v) {
    return v.set(0, 0, -1).applyQuaternion(this.object.quaternion);
  }
  moveForward(distance) {
    if (this.enabled === false) return;
    const camera = this.object;
    _vector$1.setFromMatrixColumn(camera.matrix, 0);
    _vector$1.crossVectors(camera.up, _vector$1);
    camera.position.addScaledVector(_vector$1, distance);
  }
  moveRight(distance) {
    if (this.enabled === false) return;
    const camera = this.object;
    _vector$1.setFromMatrixColumn(camera.matrix, 0);
    camera.position.addScaledVector(_vector$1, distance);
  }
  lock() {
    this.domElement.requestPointerLock();
  }
  unlock() {
    this.domElement.ownerDocument.exitPointerLock();
  }
}
function onMouseMove(event) {
  if (this.enabled === false || this.isLocked === false) return;
  const movementX = event.movementX || event.mozMovementX || event.webkitMovementX || 0;
  const movementY = event.movementY || event.mozMovementY || event.webkitMovementY || 0;
  const camera = this.object;
  _euler.setFromQuaternion(camera.quaternion);
  _euler.y -= movementX * 2e-3 * this.pointerSpeed;
  _euler.x -= movementY * 2e-3 * this.pointerSpeed;
  _euler.x = Math.max(_PI_2 - this.maxPolarAngle, Math.min(_PI_2 - this.minPolarAngle, _euler.x));
  camera.quaternion.setFromEuler(_euler);
  this.dispatchEvent(_changeEvent);
}
function onPointerlockChange() {
  if (this.domElement.ownerDocument.pointerLockElement === this.domElement) {
    this.dispatchEvent(_lockEvent);
    this.isLocked = true;
  } else {
    this.dispatchEvent(_unlockEvent);
    this.isLocked = false;
  }
}
function onPointerlockError() {
  console.error("THREE.PointerLockControls: Unable to use Pointer Lock API");
}
class FontLoader extends Loader {
  constructor(manager) {
    super(manager);
  }
  load(url, onLoad, onProgress, onError) {
    const scope = this;
    const loader = new FileLoader(this.manager);
    loader.setPath(this.path);
    loader.setRequestHeader(this.requestHeader);
    loader.setWithCredentials(this.withCredentials);
    loader.load(url, function(text) {
      const font = scope.parse(JSON.parse(text));
      if (onLoad) onLoad(font);
    }, onProgress, onError);
  }
  parse(json) {
    return new Font(json);
  }
}
class Font {
  constructor(data) {
    this.isFont = true;
    this.type = "Font";
    this.data = data;
  }
  generateShapes(text, size2 = 100) {
    const shapes = [];
    const paths = createPaths(text, size2, this.data);
    for (let p2 = 0, pl2 = paths.length; p2 < pl2; p2++) {
      shapes.push(...paths[p2].toShapes());
    }
    return shapes;
  }
}
function createPaths(text, size2, data) {
  const chars = Array.from(text);
  const scale = size2 / data.resolution;
  const line_height = (data.boundingBox.yMax - data.boundingBox.yMin + data.underlineThickness) * scale;
  const paths = [];
  let offsetX = 0, offsetY = 0;
  for (let i = 0; i < chars.length; i++) {
    const char = chars[i];
    if (char === "\n") {
      offsetX = 0;
      offsetY -= line_height;
    } else {
      const ret = createPath(char, scale, offsetX, offsetY, data);
      offsetX += ret.offsetX;
      paths.push(ret.path);
    }
  }
  return paths;
}
function createPath(char, scale, offsetX, offsetY, data) {
  const glyph = data.glyphs[char] || data.glyphs["?"];
  if (!glyph) {
    console.error('THREE.Font: character "' + char + '" does not exists in font family ' + data.familyName + ".");
    return;
  }
  const path = new ShapePath();
  let x, y, cpx, cpy, cpx1, cpy1, cpx2, cpy2;
  if (glyph.o) {
    const outline = glyph._cachedOutline || (glyph._cachedOutline = glyph.o.split(" "));
    for (let i = 0, l = outline.length; i < l; ) {
      const action = outline[i++];
      switch (action) {
        case "m":
          x = outline[i++] * scale + offsetX;
          y = outline[i++] * scale + offsetY;
          path.moveTo(x, y);
          break;
        case "l":
          x = outline[i++] * scale + offsetX;
          y = outline[i++] * scale + offsetY;
          path.lineTo(x, y);
          break;
        case "q":
          cpx = outline[i++] * scale + offsetX;
          cpy = outline[i++] * scale + offsetY;
          cpx1 = outline[i++] * scale + offsetX;
          cpy1 = outline[i++] * scale + offsetY;
          path.quadraticCurveTo(cpx1, cpy1, cpx, cpy);
          break;
        case "b":
          cpx = outline[i++] * scale + offsetX;
          cpy = outline[i++] * scale + offsetY;
          cpx1 = outline[i++] * scale + offsetX;
          cpy1 = outline[i++] * scale + offsetY;
          cpx2 = outline[i++] * scale + offsetX;
          cpy2 = outline[i++] * scale + offsetY;
          path.bezierCurveTo(cpx1, cpy1, cpx2, cpy2, cpx, cpy);
          break;
      }
    }
  }
  return { offsetX: glyph.ha * scale, path };
}
class TextGeometry extends ExtrudeGeometry {
  constructor(text, parameters = {}) {
    const font = parameters.font;
    if (font === void 0) {
      super();
    } else {
      const shapes = font.generateShapes(text, parameters.size);
      if (parameters.depth === void 0 && parameters.height !== void 0) {
        console.warn("THREE.TextGeometry: .height is now depreciated. Please use .depth instead");
      }
      parameters.depth = parameters.depth !== void 0 ? parameters.depth : parameters.height !== void 0 ? parameters.height : 50;
      if (parameters.bevelThickness === void 0) parameters.bevelThickness = 10;
      if (parameters.bevelSize === void 0) parameters.bevelSize = 8;
      if (parameters.bevelEnabled === void 0) parameters.bevelEnabled = false;
      super(shapes, parameters);
    }
    this.type = "TextGeometry";
  }
}
class HomeEnvironment {
  constructor(scene) {
    this.scene = scene;
  }
  addCube(x, y, z2, size2, color, angle = void 0) {
    const geometry = new BoxGeometry(size2, size2, size2);
    const material = new MeshBasicMaterial({ color });
    const cube = new Mesh(geometry, material);
    cube.position.set(x + size2 / 2, y + size2 / 2, z2 + size2 / 2);
    if (angle !== void 0) {
      cube.rotation.y = angle;
    }
    this.scene.add(cube);
    const edges = new EdgesGeometry(geometry);
    const outlineMaterial = new LineBasicMaterial({ color: 0 });
    const outline = new LineSegments(edges, outlineMaterial);
    outline.position.copy(cube.position);
    if (angle !== void 0) {
      outline.rotation.copy(cube.rotation);
    }
    this.scene.add(outline);
  }
  addPlane() {
    const geometry = new PlaneGeometry(500, 500);
    const material = new MeshBasicMaterial({ color: 4298762, side: DoubleSide });
    const ground = new Mesh(geometry, material);
    ground.rotation.x = -Math.PI / 2;
    this.scene.add(ground);
  }
  createManyCubesInCircle(numCubes, angleOffset, color, angleStep, radius, heightIncrement) {
    for (let i = 0; i < numCubes; i++) {
      const angle = i * angleStep + angleOffset;
      const x = radius * Math.cos(angle);
      const z2 = radius * Math.sin(angle);
      const y = i * heightIncrement;
      this.addCube(x, y, z2, 4, color, angle);
    }
  }
  build() {
    this.addCilinder(0, 100, 0, 46, 5, 16777215);
    this.addHollowCilinder(0, 254, 0, 53, 200, 16777215);
    this.addCube(0, 0, 0, 2, 6766855);
    this.addCube(4, 0, 0, 4, 6766855);
    this.addCube(-8, -2, 0, 4, 6766855);
    this.addCube(-4, 0, 0, 4, 6766855);
    this.addCube(0, 2, 0, 4, 6766855);
    this.addCube(4, 4, 0, 4, 6766855);
    this.addCube(8, 6, 0, 4, 6766855);
    this.addCube(12, 8, 0, 4, 6766855);
    this.addCube(16, 10, 0, 4, 6766855);
    this.addCube(20, 12, 0, 4, 6766855);
    this.addCube(15, 0, 0, 5, 65280);
    this.addCube(0, 0, 15, 5, 16711680);
    this.addCube(-15, 0, 0, 5, 255);
    this.addCube(0, 0, -15, 5, 14540253);
    this.addCube(0, 0, -15, 5, 14540253);
    this.addPlane();
  }
  addCilinder(x, y, z2, radius, height, color) {
    const geometry = new CylinderGeometry(radius, radius, height, 32);
    const material = new MeshBasicMaterial({ color, opacity: 0.5, transparent: true });
    const cylinder = new Mesh(geometry, material);
    cylinder.position.set(x, y, z2);
    this.scene.add(cylinder);
  }
  addHollowCilinder(x, y, z2, innerRadius, outterRadius, color) {
    const geometry = new CylinderGeometry(outterRadius, innerRadius, 1, 32, 32, true);
    const material = new MeshBasicMaterial({ color, opacity: 0.5, transparent: true, side: DoubleSide });
    const cylinder = new Mesh(geometry, material);
    cylinder.position.set(x, y, z2);
    this.scene.add(cylinder);
  }
}
class MovementControls {
  constructor(htmlElement, scene, controls, clock, elevation) {
    __publicField(this, "moveForward", false);
    __publicField(this, "moveLeft", false);
    __publicField(this, "moveRight", false);
    __publicField(this, "moveBackward", false);
    __publicField(this, "canJump", true);
    __publicField(this, "velocity", new Vector3());
    __publicField(this, "direction", new Vector3());
    this.controls = controls;
    this.htmlElement = htmlElement;
    this.clock = clock;
    this.scene = scene;
    this.speed = 3;
    this.mass = 100;
    this.horizontalDeceleration = 10;
    this.verticalDeceleration = 2.5;
    this.jumpVelociy = 70;
    this.elevation = elevation;
    this.connect();
    this.raycaster = new Raycaster(new Vector3(), new Vector3(0, -1, 0), 0, 100);
  }
  connect() {
    document.addEventListener("keydown", this.onKeyDown.bind(this));
    document.addEventListener("keyup", this.onKeyUp.bind(this));
  }
  updatePosition() {
    const delta = this.clock.getDelta();
    const position = this.controls.getObject().position.clone();
    position.y -= this.elevation;
    this.raycaster.ray.origin.copy(position);
    const intersections = this.raycaster.intersectObjects(this.scene.children, false);
    let minIntersectionDistance = 100;
    intersections.forEach(function(intersection) {
      if (intersection.distance < minIntersectionDistance) {
        minIntersectionDistance = intersection.distance;
      }
    });
    const onObject = intersections.length > 0 && minIntersectionDistance <= 1;
    this.velocity.x -= this.velocity.x * this.horizontalDeceleration * delta;
    this.velocity.z -= this.velocity.z * this.horizontalDeceleration * delta;
    this.velocity.y -= this.verticalDeceleration * this.mass * delta;
    this.direction.z = Number(this.moveForward) - Number(this.moveBackward);
    this.direction.x = Number(this.moveRight) - Number(this.moveLeft);
    this.direction.normalize();
    if (this.moveForward || this.moveBackward) this.velocity.z -= this.direction.z * this.speed * delta;
    if (this.moveLeft || this.moveRight) this.velocity.x -= this.direction.x * this.speed * delta;
    if (onObject === true) {
      this.velocity.y = Math.max(0, this.velocity.y);
      this.canJump = true;
    }
    this.controls.moveRight(-this.velocity.x);
    this.controls.moveForward(-this.velocity.z);
    const deltaY = this.velocity.y * delta;
    this.controls.object.position.y += deltaY > 0 ? deltaY : Math.max(deltaY, -minIntersectionDistance);
    if (this.controls.object.position.y < this.elevation) {
      this.velocity.y = 0;
      this.controls.object.position.y = this.elevation;
      this.canJump = true;
    }
  }
  onKeyDown(event) {
    console.log("key down");
    switch (event.code) {
      case "ArrowUp":
      case "KeyW":
        this.moveForward = true;
        break;
      case "ArrowLeft":
      case "KeyA":
        this.moveLeft = true;
        break;
      case "ArrowDown":
      case "KeyS":
        this.moveBackward = true;
        break;
      case "ArrowRight":
      case "KeyD":
        this.moveRight = true;
        break;
      case "Space":
        if (this.canJump === true) this.velocity.y += this.jumpVelociy;
        this.canJump = false;
        break;
    }
  }
  onKeyUp(event) {
    console.log("key up");
    switch (event.code) {
      case "ArrowUp":
      case "KeyW":
        this.moveForward = false;
        break;
      case "ArrowLeft":
      case "KeyA":
        this.moveLeft = false;
        break;
      case "ArrowDown":
      case "KeyS":
        this.moveBackward = false;
        break;
      case "ArrowRight":
      case "KeyD":
        this.moveRight = false;
        break;
    }
  }
}
class Character {
  constructor(htmlElement, camera, scene, clock, renderer2, controls, height) {
    __publicField(this, "oldPosition", null);
    this.camera = camera;
    this.scene = scene;
    this.clock = clock;
    this.controls = controls;
    this.height = height;
    this.movementControls = new MovementControls(htmlElement, scene, controls, clock, height);
  }
  initPosition() {
    this.camera.position.set(52, 257, 2);
    this.camera.lookAt(0, 257, 0);
  }
  updatePosition() {
    this.movementControls.updatePosition();
    this.checkCollisions();
  }
  checkCollisions() {
  }
}
const _box$1 = new Box3();
const _vector = new Vector3();
class LineSegmentsGeometry extends InstancedBufferGeometry {
  constructor() {
    super();
    this.isLineSegmentsGeometry = true;
    this.type = "LineSegmentsGeometry";
    const positions = [-1, 2, 0, 1, 2, 0, -1, 1, 0, 1, 1, 0, -1, 0, 0, 1, 0, 0, -1, -1, 0, 1, -1, 0];
    const uvs = [-1, 2, 1, 2, -1, 1, 1, 1, -1, -1, 1, -1, -1, -2, 1, -2];
    const index = [0, 2, 1, 2, 3, 1, 2, 4, 3, 4, 5, 3, 4, 6, 5, 6, 7, 5];
    this.setIndex(index);
    this.setAttribute("position", new Float32BufferAttribute(positions, 3));
    this.setAttribute("uv", new Float32BufferAttribute(uvs, 2));
  }
  applyMatrix4(matrix) {
    const start = this.attributes.instanceStart;
    const end = this.attributes.instanceEnd;
    if (start !== void 0) {
      start.applyMatrix4(matrix);
      end.applyMatrix4(matrix);
      start.needsUpdate = true;
    }
    if (this.boundingBox !== null) {
      this.computeBoundingBox();
    }
    if (this.boundingSphere !== null) {
      this.computeBoundingSphere();
    }
    return this;
  }
  setPositions(array) {
    let lineSegments;
    if (array instanceof Float32Array) {
      lineSegments = array;
    } else if (Array.isArray(array)) {
      lineSegments = new Float32Array(array);
    }
    const instanceBuffer = new InstancedInterleavedBuffer(lineSegments, 6, 1);
    this.setAttribute("instanceStart", new InterleavedBufferAttribute(instanceBuffer, 3, 0));
    this.setAttribute("instanceEnd", new InterleavedBufferAttribute(instanceBuffer, 3, 3));
    this.computeBoundingBox();
    this.computeBoundingSphere();
    return this;
  }
  setColors(array) {
    let colors;
    if (array instanceof Float32Array) {
      colors = array;
    } else if (Array.isArray(array)) {
      colors = new Float32Array(array);
    }
    const instanceColorBuffer = new InstancedInterleavedBuffer(colors, 6, 1);
    this.setAttribute("instanceColorStart", new InterleavedBufferAttribute(instanceColorBuffer, 3, 0));
    this.setAttribute("instanceColorEnd", new InterleavedBufferAttribute(instanceColorBuffer, 3, 3));
    return this;
  }
  fromWireframeGeometry(geometry) {
    this.setPositions(geometry.attributes.position.array);
    return this;
  }
  fromEdgesGeometry(geometry) {
    this.setPositions(geometry.attributes.position.array);
    return this;
  }
  fromMesh(mesh) {
    this.fromWireframeGeometry(new WireframeGeometry(mesh.geometry));
    return this;
  }
  fromLineSegments(lineSegments) {
    const geometry = lineSegments.geometry;
    this.setPositions(geometry.attributes.position.array);
    return this;
  }
  computeBoundingBox() {
    if (this.boundingBox === null) {
      this.boundingBox = new Box3();
    }
    const start = this.attributes.instanceStart;
    const end = this.attributes.instanceEnd;
    if (start !== void 0 && end !== void 0) {
      this.boundingBox.setFromBufferAttribute(start);
      _box$1.setFromBufferAttribute(end);
      this.boundingBox.union(_box$1);
    }
  }
  computeBoundingSphere() {
    if (this.boundingSphere === null) {
      this.boundingSphere = new Sphere();
    }
    if (this.boundingBox === null) {
      this.computeBoundingBox();
    }
    const start = this.attributes.instanceStart;
    const end = this.attributes.instanceEnd;
    if (start !== void 0 && end !== void 0) {
      const center = this.boundingSphere.center;
      this.boundingBox.getCenter(center);
      let maxRadiusSq = 0;
      for (let i = 0, il2 = start.count; i < il2; i++) {
        _vector.fromBufferAttribute(start, i);
        maxRadiusSq = Math.max(maxRadiusSq, center.distanceToSquared(_vector));
        _vector.fromBufferAttribute(end, i);
        maxRadiusSq = Math.max(maxRadiusSq, center.distanceToSquared(_vector));
      }
      this.boundingSphere.radius = Math.sqrt(maxRadiusSq);
      if (isNaN(this.boundingSphere.radius)) {
        console.error("THREE.LineSegmentsGeometry.computeBoundingSphere(): Computed radius is NaN. The instanced position data is likely to have NaN values.", this);
      }
    }
  }
  toJSON() {
  }
  applyMatrix(matrix) {
    console.warn("THREE.LineSegmentsGeometry: applyMatrix() has been renamed to applyMatrix4().");
    return this.applyMatrix4(matrix);
  }
}
UniformsLib.line = {
  worldUnits: { value: 1 },
  linewidth: { value: 1 },
  resolution: { value: new Vector2(1, 1) },
  dashOffset: { value: 0 },
  dashScale: { value: 1 },
  dashSize: { value: 1 },
  gapSize: { value: 1 }
  // todo FIX - maybe change to totalSize
};
ShaderLib["line"] = {
  uniforms: UniformsUtils.merge([
    UniformsLib.common,
    UniformsLib.fog,
    UniformsLib.line
  ]),
  vertexShader: (
    /* glsl */
    `
		#include <common>
		#include <color_pars_vertex>
		#include <fog_pars_vertex>
		#include <logdepthbuf_pars_vertex>
		#include <clipping_planes_pars_vertex>

		uniform float linewidth;
		uniform vec2 resolution;

		attribute vec3 instanceStart;
		attribute vec3 instanceEnd;

		attribute vec3 instanceColorStart;
		attribute vec3 instanceColorEnd;

		#ifdef WORLD_UNITS

			varying vec4 worldPos;
			varying vec3 worldStart;
			varying vec3 worldEnd;

			#ifdef USE_DASH

				varying vec2 vUv;

			#endif

		#else

			varying vec2 vUv;

		#endif

		#ifdef USE_DASH

			uniform float dashScale;
			attribute float instanceDistanceStart;
			attribute float instanceDistanceEnd;
			varying float vLineDistance;

		#endif

		void trimSegment( const in vec4 start, inout vec4 end ) {

			// trim end segment so it terminates between the camera plane and the near plane

			// conservative estimate of the near plane
			float a = projectionMatrix[ 2 ][ 2 ]; // 3nd entry in 3th column
			float b = projectionMatrix[ 3 ][ 2 ]; // 3nd entry in 4th column
			float nearEstimate = - 0.5 * b / a;

			float alpha = ( nearEstimate - start.z ) / ( end.z - start.z );

			end.xyz = mix( start.xyz, end.xyz, alpha );

		}

		void main() {

			#ifdef USE_COLOR

				vColor.xyz = ( position.y < 0.5 ) ? instanceColorStart : instanceColorEnd;

			#endif

			#ifdef USE_DASH

				vLineDistance = ( position.y < 0.5 ) ? dashScale * instanceDistanceStart : dashScale * instanceDistanceEnd;
				vUv = uv;

			#endif

			float aspect = resolution.x / resolution.y;

			// camera space
			vec4 start = modelViewMatrix * vec4( instanceStart, 1.0 );
			vec4 end = modelViewMatrix * vec4( instanceEnd, 1.0 );

			#ifdef WORLD_UNITS

				worldStart = start.xyz;
				worldEnd = end.xyz;

			#else

				vUv = uv;

			#endif

			// special case for perspective projection, and segments that terminate either in, or behind, the camera plane
			// clearly the gpu firmware has a way of addressing this issue when projecting into ndc space
			// but we need to perform ndc-space calculations in the shader, so we must address this issue directly
			// perhaps there is a more elegant solution -- WestLangley

			bool perspective = ( projectionMatrix[ 2 ][ 3 ] == - 1.0 ); // 4th entry in the 3rd column

			if ( perspective ) {

				if ( start.z < 0.0 && end.z >= 0.0 ) {

					trimSegment( start, end );

				} else if ( end.z < 0.0 && start.z >= 0.0 ) {

					trimSegment( end, start );

				}

			}

			// clip space
			vec4 clipStart = projectionMatrix * start;
			vec4 clipEnd = projectionMatrix * end;

			// ndc space
			vec3 ndcStart = clipStart.xyz / clipStart.w;
			vec3 ndcEnd = clipEnd.xyz / clipEnd.w;

			// direction
			vec2 dir = ndcEnd.xy - ndcStart.xy;

			// account for clip-space aspect ratio
			dir.x *= aspect;
			dir = normalize( dir );

			#ifdef WORLD_UNITS

				vec3 worldDir = normalize( end.xyz - start.xyz );
				vec3 tmpFwd = normalize( mix( start.xyz, end.xyz, 0.5 ) );
				vec3 worldUp = normalize( cross( worldDir, tmpFwd ) );
				vec3 worldFwd = cross( worldDir, worldUp );
				worldPos = position.y < 0.5 ? start: end;

				// height offset
				float hw = linewidth * 0.5;
				worldPos.xyz += position.x < 0.0 ? hw * worldUp : - hw * worldUp;

				// don't extend the line if we're rendering dashes because we
				// won't be rendering the endcaps
				#ifndef USE_DASH

					// cap extension
					worldPos.xyz += position.y < 0.5 ? - hw * worldDir : hw * worldDir;

					// add width to the box
					worldPos.xyz += worldFwd * hw;

					// endcaps
					if ( position.y > 1.0 || position.y < 0.0 ) {

						worldPos.xyz -= worldFwd * 2.0 * hw;

					}

				#endif

				// project the worldpos
				vec4 clip = projectionMatrix * worldPos;

				// shift the depth of the projected points so the line
				// segments overlap neatly
				vec3 clipPose = ( position.y < 0.5 ) ? ndcStart : ndcEnd;
				clip.z = clipPose.z * clip.w;

			#else

				vec2 offset = vec2( dir.y, - dir.x );
				// undo aspect ratio adjustment
				dir.x /= aspect;
				offset.x /= aspect;

				// sign flip
				if ( position.x < 0.0 ) offset *= - 1.0;

				// endcaps
				if ( position.y < 0.0 ) {

					offset += - dir;

				} else if ( position.y > 1.0 ) {

					offset += dir;

				}

				// adjust for linewidth
				offset *= linewidth;

				// adjust for clip-space to screen-space conversion // maybe resolution should be based on viewport ...
				offset /= resolution.y;

				// select end
				vec4 clip = ( position.y < 0.5 ) ? clipStart : clipEnd;

				// back to clip space
				offset *= clip.w;

				clip.xy += offset;

			#endif

			gl_Position = clip;

			vec4 mvPosition = ( position.y < 0.5 ) ? start : end; // this is an approximation

			#include <logdepthbuf_vertex>
			#include <clipping_planes_vertex>
			#include <fog_vertex>

		}
		`
  ),
  fragmentShader: (
    /* glsl */
    `
		uniform vec3 diffuse;
		uniform float opacity;
		uniform float linewidth;

		#ifdef USE_DASH

			uniform float dashOffset;
			uniform float dashSize;
			uniform float gapSize;

		#endif

		varying float vLineDistance;

		#ifdef WORLD_UNITS

			varying vec4 worldPos;
			varying vec3 worldStart;
			varying vec3 worldEnd;

			#ifdef USE_DASH

				varying vec2 vUv;

			#endif

		#else

			varying vec2 vUv;

		#endif

		#include <common>
		#include <color_pars_fragment>
		#include <fog_pars_fragment>
		#include <logdepthbuf_pars_fragment>
		#include <clipping_planes_pars_fragment>

		vec2 closestLineToLine(vec3 p1, vec3 p2, vec3 p3, vec3 p4) {

			float mua;
			float mub;

			vec3 p13 = p1 - p3;
			vec3 p43 = p4 - p3;

			vec3 p21 = p2 - p1;

			float d1343 = dot( p13, p43 );
			float d4321 = dot( p43, p21 );
			float d1321 = dot( p13, p21 );
			float d4343 = dot( p43, p43 );
			float d2121 = dot( p21, p21 );

			float denom = d2121 * d4343 - d4321 * d4321;

			float numer = d1343 * d4321 - d1321 * d4343;

			mua = numer / denom;
			mua = clamp( mua, 0.0, 1.0 );
			mub = ( d1343 + d4321 * ( mua ) ) / d4343;
			mub = clamp( mub, 0.0, 1.0 );

			return vec2( mua, mub );

		}

		void main() {

			#include <clipping_planes_fragment>

			#ifdef USE_DASH

				if ( vUv.y < - 1.0 || vUv.y > 1.0 ) discard; // discard endcaps

				if ( mod( vLineDistance + dashOffset, dashSize + gapSize ) > dashSize ) discard; // todo - FIX

			#endif

			float alpha = opacity;

			#ifdef WORLD_UNITS

				// Find the closest points on the view ray and the line segment
				vec3 rayEnd = normalize( worldPos.xyz ) * 1e5;
				vec3 lineDir = worldEnd - worldStart;
				vec2 params = closestLineToLine( worldStart, worldEnd, vec3( 0.0, 0.0, 0.0 ), rayEnd );

				vec3 p1 = worldStart + lineDir * params.x;
				vec3 p2 = rayEnd * params.y;
				vec3 delta = p1 - p2;
				float len = length( delta );
				float norm = len / linewidth;

				#ifndef USE_DASH

					#ifdef USE_ALPHA_TO_COVERAGE

						float dnorm = fwidth( norm );
						alpha = 1.0 - smoothstep( 0.5 - dnorm, 0.5 + dnorm, norm );

					#else

						if ( norm > 0.5 ) {

							discard;

						}

					#endif

				#endif

			#else

				#ifdef USE_ALPHA_TO_COVERAGE

					// artifacts appear on some hardware if a derivative is taken within a conditional
					float a = vUv.x;
					float b = ( vUv.y > 0.0 ) ? vUv.y - 1.0 : vUv.y + 1.0;
					float len2 = a * a + b * b;
					float dlen = fwidth( len2 );

					if ( abs( vUv.y ) > 1.0 ) {

						alpha = 1.0 - smoothstep( 1.0 - dlen, 1.0 + dlen, len2 );

					}

				#else

					if ( abs( vUv.y ) > 1.0 ) {

						float a = vUv.x;
						float b = ( vUv.y > 0.0 ) ? vUv.y - 1.0 : vUv.y + 1.0;
						float len2 = a * a + b * b;

						if ( len2 > 1.0 ) discard;

					}

				#endif

			#endif

			vec4 diffuseColor = vec4( diffuse, alpha );

			#include <logdepthbuf_fragment>
			#include <color_fragment>

			gl_FragColor = vec4( diffuseColor.rgb, alpha );

			#include <tonemapping_fragment>
			#include <colorspace_fragment>
			#include <fog_fragment>
			#include <premultiplied_alpha_fragment>

		}
		`
  )
};
class LineMaterial extends ShaderMaterial {
  constructor(parameters) {
    super({
      type: "LineMaterial",
      uniforms: UniformsUtils.clone(ShaderLib["line"].uniforms),
      vertexShader: ShaderLib["line"].vertexShader,
      fragmentShader: ShaderLib["line"].fragmentShader,
      clipping: true
      // required for clipping support
    });
    this.isLineMaterial = true;
    this.setValues(parameters);
  }
  get color() {
    return this.uniforms.diffuse.value;
  }
  set color(value) {
    this.uniforms.diffuse.value = value;
  }
  get worldUnits() {
    return "WORLD_UNITS" in this.defines;
  }
  set worldUnits(value) {
    if (value === true) {
      this.defines.WORLD_UNITS = "";
    } else {
      delete this.defines.WORLD_UNITS;
    }
  }
  get linewidth() {
    return this.uniforms.linewidth.value;
  }
  set linewidth(value) {
    if (!this.uniforms.linewidth) return;
    this.uniforms.linewidth.value = value;
  }
  get dashed() {
    return "USE_DASH" in this.defines;
  }
  set dashed(value) {
    if (value === true !== this.dashed) {
      this.needsUpdate = true;
    }
    if (value === true) {
      this.defines.USE_DASH = "";
    } else {
      delete this.defines.USE_DASH;
    }
  }
  get dashScale() {
    return this.uniforms.dashScale.value;
  }
  set dashScale(value) {
    this.uniforms.dashScale.value = value;
  }
  get dashSize() {
    return this.uniforms.dashSize.value;
  }
  set dashSize(value) {
    this.uniforms.dashSize.value = value;
  }
  get dashOffset() {
    return this.uniforms.dashOffset.value;
  }
  set dashOffset(value) {
    this.uniforms.dashOffset.value = value;
  }
  get gapSize() {
    return this.uniforms.gapSize.value;
  }
  set gapSize(value) {
    this.uniforms.gapSize.value = value;
  }
  get opacity() {
    return this.uniforms.opacity.value;
  }
  set opacity(value) {
    if (!this.uniforms) return;
    this.uniforms.opacity.value = value;
  }
  get resolution() {
    return this.uniforms.resolution.value;
  }
  set resolution(value) {
    this.uniforms.resolution.value.copy(value);
  }
  get alphaToCoverage() {
    return "USE_ALPHA_TO_COVERAGE" in this.defines;
  }
  set alphaToCoverage(value) {
    if (!this.defines) return;
    if (value === true !== this.alphaToCoverage) {
      this.needsUpdate = true;
    }
    if (value === true) {
      this.defines.USE_ALPHA_TO_COVERAGE = "";
    } else {
      delete this.defines.USE_ALPHA_TO_COVERAGE;
    }
  }
}
const _viewport = new Vector4();
const _start = new Vector3();
const _end = new Vector3();
const _start4 = new Vector4();
const _end4 = new Vector4();
const _ssOrigin = new Vector4();
const _ssOrigin3 = new Vector3();
const _mvMatrix = new Matrix4();
const _line = new Line3();
const _closestPoint = new Vector3();
const _box = new Box3();
const _sphere = new Sphere();
const _clipToWorldVector = new Vector4();
let _ray, _lineWidth;
function getWorldSpaceHalfWidth(camera, distance, resolution) {
  _clipToWorldVector.set(0, 0, -distance, 1).applyMatrix4(camera.projectionMatrix);
  _clipToWorldVector.multiplyScalar(1 / _clipToWorldVector.w);
  _clipToWorldVector.x = _lineWidth / resolution.width;
  _clipToWorldVector.y = _lineWidth / resolution.height;
  _clipToWorldVector.applyMatrix4(camera.projectionMatrixInverse);
  _clipToWorldVector.multiplyScalar(1 / _clipToWorldVector.w);
  return Math.abs(Math.max(_clipToWorldVector.x, _clipToWorldVector.y));
}
function raycastWorldUnits(lineSegments, intersects2) {
  const matrixWorld = lineSegments.matrixWorld;
  const geometry = lineSegments.geometry;
  const instanceStart = geometry.attributes.instanceStart;
  const instanceEnd = geometry.attributes.instanceEnd;
  const segmentCount = Math.min(geometry.instanceCount, instanceStart.count);
  for (let i = 0, l = segmentCount; i < l; i++) {
    _line.start.fromBufferAttribute(instanceStart, i);
    _line.end.fromBufferAttribute(instanceEnd, i);
    _line.applyMatrix4(matrixWorld);
    const pointOnLine = new Vector3();
    const point = new Vector3();
    _ray.distanceSqToSegment(_line.start, _line.end, point, pointOnLine);
    const isInside = point.distanceTo(pointOnLine) < _lineWidth * 0.5;
    if (isInside) {
      intersects2.push({
        point,
        pointOnLine,
        distance: _ray.origin.distanceTo(point),
        object: lineSegments,
        face: null,
        faceIndex: i,
        uv: null,
        uv1: null
      });
    }
  }
}
function raycastScreenSpace(lineSegments, camera, intersects2) {
  const projectionMatrix = camera.projectionMatrix;
  const material = lineSegments.material;
  const resolution = material.resolution;
  const matrixWorld = lineSegments.matrixWorld;
  const geometry = lineSegments.geometry;
  const instanceStart = geometry.attributes.instanceStart;
  const instanceEnd = geometry.attributes.instanceEnd;
  const segmentCount = Math.min(geometry.instanceCount, instanceStart.count);
  const near = -camera.near;
  _ray.at(1, _ssOrigin);
  _ssOrigin.w = 1;
  _ssOrigin.applyMatrix4(camera.matrixWorldInverse);
  _ssOrigin.applyMatrix4(projectionMatrix);
  _ssOrigin.multiplyScalar(1 / _ssOrigin.w);
  _ssOrigin.x *= resolution.x / 2;
  _ssOrigin.y *= resolution.y / 2;
  _ssOrigin.z = 0;
  _ssOrigin3.copy(_ssOrigin);
  _mvMatrix.multiplyMatrices(camera.matrixWorldInverse, matrixWorld);
  for (let i = 0, l = segmentCount; i < l; i++) {
    _start4.fromBufferAttribute(instanceStart, i);
    _end4.fromBufferAttribute(instanceEnd, i);
    _start4.w = 1;
    _end4.w = 1;
    _start4.applyMatrix4(_mvMatrix);
    _end4.applyMatrix4(_mvMatrix);
    const isBehindCameraNear = _start4.z > near && _end4.z > near;
    if (isBehindCameraNear) {
      continue;
    }
    if (_start4.z > near) {
      const deltaDist = _start4.z - _end4.z;
      const t = (_start4.z - near) / deltaDist;
      _start4.lerp(_end4, t);
    } else if (_end4.z > near) {
      const deltaDist = _end4.z - _start4.z;
      const t = (_end4.z - near) / deltaDist;
      _end4.lerp(_start4, t);
    }
    _start4.applyMatrix4(projectionMatrix);
    _end4.applyMatrix4(projectionMatrix);
    _start4.multiplyScalar(1 / _start4.w);
    _end4.multiplyScalar(1 / _end4.w);
    _start4.x *= resolution.x / 2;
    _start4.y *= resolution.y / 2;
    _end4.x *= resolution.x / 2;
    _end4.y *= resolution.y / 2;
    _line.start.copy(_start4);
    _line.start.z = 0;
    _line.end.copy(_end4);
    _line.end.z = 0;
    const param = _line.closestPointToPointParameter(_ssOrigin3, true);
    _line.at(param, _closestPoint);
    const zPos = MathUtils.lerp(_start4.z, _end4.z, param);
    const isInClipSpace = zPos >= -1 && zPos <= 1;
    const isInside = _ssOrigin3.distanceTo(_closestPoint) < _lineWidth * 0.5;
    if (isInClipSpace && isInside) {
      _line.start.fromBufferAttribute(instanceStart, i);
      _line.end.fromBufferAttribute(instanceEnd, i);
      _line.start.applyMatrix4(matrixWorld);
      _line.end.applyMatrix4(matrixWorld);
      const pointOnLine = new Vector3();
      const point = new Vector3();
      _ray.distanceSqToSegment(_line.start, _line.end, point, pointOnLine);
      intersects2.push({
        point,
        pointOnLine,
        distance: _ray.origin.distanceTo(point),
        object: lineSegments,
        face: null,
        faceIndex: i,
        uv: null,
        uv1: null
      });
    }
  }
}
class LineSegments2 extends Mesh {
  constructor(geometry = new LineSegmentsGeometry(), material = new LineMaterial({ color: Math.random() * 16777215 })) {
    super(geometry, material);
    this.isLineSegments2 = true;
    this.type = "LineSegments2";
  }
  // for backwards-compatibility, but could be a method of LineSegmentsGeometry...
  computeLineDistances() {
    const geometry = this.geometry;
    const instanceStart = geometry.attributes.instanceStart;
    const instanceEnd = geometry.attributes.instanceEnd;
    const lineDistances = new Float32Array(2 * instanceStart.count);
    for (let i = 0, j2 = 0, l = instanceStart.count; i < l; i++, j2 += 2) {
      _start.fromBufferAttribute(instanceStart, i);
      _end.fromBufferAttribute(instanceEnd, i);
      lineDistances[j2] = j2 === 0 ? 0 : lineDistances[j2 - 1];
      lineDistances[j2 + 1] = lineDistances[j2] + _start.distanceTo(_end);
    }
    const instanceDistanceBuffer = new InstancedInterleavedBuffer(lineDistances, 2, 1);
    geometry.setAttribute("instanceDistanceStart", new InterleavedBufferAttribute(instanceDistanceBuffer, 1, 0));
    geometry.setAttribute("instanceDistanceEnd", new InterleavedBufferAttribute(instanceDistanceBuffer, 1, 1));
    return this;
  }
  raycast(raycaster, intersects2) {
    const worldUnits = this.material.worldUnits;
    const camera = raycaster.camera;
    if (camera === null && !worldUnits) {
      console.error('LineSegments2: "Raycaster.camera" needs to be set in order to raycast against LineSegments2 while worldUnits is set to false.');
    }
    const threshold = raycaster.params.Line2 !== void 0 ? raycaster.params.Line2.threshold || 0 : 0;
    _ray = raycaster.ray;
    const matrixWorld = this.matrixWorld;
    const geometry = this.geometry;
    const material = this.material;
    _lineWidth = material.linewidth + threshold;
    if (geometry.boundingSphere === null) {
      geometry.computeBoundingSphere();
    }
    _sphere.copy(geometry.boundingSphere).applyMatrix4(matrixWorld);
    let sphereMargin;
    if (worldUnits) {
      sphereMargin = _lineWidth * 0.5;
    } else {
      const distanceToSphere = Math.max(camera.near, _sphere.distanceToPoint(_ray.origin));
      sphereMargin = getWorldSpaceHalfWidth(camera, distanceToSphere, material.resolution);
    }
    _sphere.radius += sphereMargin;
    if (_ray.intersectsSphere(_sphere) === false) {
      return;
    }
    if (geometry.boundingBox === null) {
      geometry.computeBoundingBox();
    }
    _box.copy(geometry.boundingBox).applyMatrix4(matrixWorld);
    let boxMargin;
    if (worldUnits) {
      boxMargin = _lineWidth * 0.5;
    } else {
      const distanceToBox = Math.max(camera.near, _box.distanceToPoint(_ray.origin));
      boxMargin = getWorldSpaceHalfWidth(camera, distanceToBox, material.resolution);
    }
    _box.expandByScalar(boxMargin);
    if (_ray.intersectsBox(_box) === false) {
      return;
    }
    if (worldUnits) {
      raycastWorldUnits(this, intersects2);
    } else {
      raycastScreenSpace(this, camera, intersects2);
    }
  }
  onBeforeRender(renderer2) {
    const uniforms = this.material.uniforms;
    if (uniforms && uniforms.resolution) {
      renderer2.getViewport(_viewport);
      this.material.uniforms.resolution.value.set(_viewport.z, _viewport.w);
    }
  }
}
class LineGeometry extends LineSegmentsGeometry {
  constructor() {
    super();
    this.isLineGeometry = true;
    this.type = "LineGeometry";
  }
  setPositions(array) {
    const length = array.length - 3;
    const points = new Float32Array(2 * length);
    for (let i = 0; i < length; i += 3) {
      points[2 * i] = array[i];
      points[2 * i + 1] = array[i + 1];
      points[2 * i + 2] = array[i + 2];
      points[2 * i + 3] = array[i + 3];
      points[2 * i + 4] = array[i + 4];
      points[2 * i + 5] = array[i + 5];
    }
    super.setPositions(points);
    return this;
  }
  setColors(array) {
    const length = array.length - 3;
    const colors = new Float32Array(2 * length);
    for (let i = 0; i < length; i += 3) {
      colors[2 * i] = array[i];
      colors[2 * i + 1] = array[i + 1];
      colors[2 * i + 2] = array[i + 2];
      colors[2 * i + 3] = array[i + 3];
      colors[2 * i + 4] = array[i + 4];
      colors[2 * i + 5] = array[i + 5];
    }
    super.setColors(colors);
    return this;
  }
  fromLine(line) {
    const geometry = line.geometry;
    this.setPositions(geometry.attributes.position.array);
    return this;
  }
}
class Line2 extends LineSegments2 {
  constructor(geometry = new LineGeometry(), material = new LineMaterial({ color: Math.random() * 16777215 })) {
    super(geometry, material);
    this.isLine2 = true;
    this.type = "Line2";
  }
}
const fontLoader = new FontLoader();
let geometryFont = null;
fontLoader.load("https://unpkg.com/three@0.77.0/examples/fonts/helvetiker_bold.typeface.json", function(font) {
  geometryFont = font;
  console.log("Font loaded");
});
let textHeightCounter = 0;
class Game {
  constructor() {
    __publicField(this, "width", null);
    __publicField(this, "height", null);
    __publicField(this, "htmlElement", null);
    __publicField(this, "renderer", null);
    __publicField(this, "clock", null);
    __publicField(this, "camera", null);
    __publicField(this, "scene", null);
    console.debug("game creating");
    this.clock = new Clock();
    this.renderer = new WebGLRenderer();
    this.scene = new Scene();
    this.scene.background = new Color(8900331);
    console.debug("game created");
  }
  init(htmlElement) {
    const canvasArea = htmlElement.getBoundingClientRect();
    console.debug("game initializing");
    this.width = canvasArea.width;
    this.height = canvasArea.height;
    this.htmlElement = htmlElement;
    this.camera = new PerspectiveCamera(75, this.width / this.height, 0.1, 1e3);
    this.renderer.setSize(this.width, this.height);
    this.htmlElement.appendChild(this.renderer.domElement);
    this.renderer.setAnimationLoop(this.animate.bind(this));
    this.controls = new PointerLockControls(this.camera, this.htmlElement);
    this.environment = new HomeEnvironment(this.scene);
    this.environment.build();
    this.character = new Character(this.htmlElement, this.camera, this.scene, this.clock, this.renderer, this.controls, 1.8);
    this.character.initPosition();
    console.debug("game initialized");
    window.addEventListener("resize", this.onWindowResize.bind(this), false);
  }
  onWindowResize() {
    const canvasArea = this.htmlElement.getBoundingClientRect();
    this.width = canvasArea.width;
    this.height = canvasArea.height;
    this.camera.aspect = this.width / this.height;
    this.camera.updateProjectionMatrix();
    this.renderer.setSize(this.width, this.height);
  }
  animate() {
    if (this.controls.isLocked === true) {
      this.character.updatePosition();
    }
    this.renderer.render(this.scene, this.camera);
  }
  isReady() {
    return this.renderer !== null;
  }
  processTextInput(text) {
    if (!this.controls.isLocked) {
      console.log("Ignoring text input, user is not in the game");
      return;
    }
    console.log("Processing Text:", text);
    const geometry = new TextGeometry(text, {
      font: geometryFont,
      size: 1,
      height: 0.1,
      curveSegments: 12,
      bevelEnabled: false,
      bevelThickness: 0.01,
      bevelSize: 0.01,
      bevelOffset: 0,
      bevelSegments: 5
    });
    const material = new MeshBasicMaterial({ color: 1599914 });
    const textObj = new Mesh(geometry, material);
    textObj.position.set(42 + textHeightCounter, 2, 2);
    textObj.rotation.z = Math.PI;
    textObj.rotation.y = Math.PI / 2;
    textObj.rotation.x = Math.PI;
    this.scene.add(textObj);
    console.log("Text processed:", text);
    textHeightCounter++;
    const strokeGroup = new Group();
    strokeGroup.position.copy(textObj.position.clone());
    strokeGroup.position.x += 0.1001;
    strokeGroup.rotation.copy(textObj.rotation.clone());
    const lineMaterial = new LineMaterial({
      color: 0,
      lineWidth: 0.1
    });
    const shapes = geometryFont.generateShapes(text, 1);
    shapes.forEach((s) => {
      let points = s.getPoints();
      let points3d = [];
      points.forEach((p2) => {
        points3d.push(p2.x, p2.y, 0);
      });
      const lineGeo = new LineGeometry();
      lineGeo.setPositions(points3d);
      const strokeMesh = new Line2(lineGeo, lineMaterial);
      strokeMesh.computeLineDistances();
      strokeGroup.add(strokeMesh);
    });
    this.scene.add(strokeGroup);
  }
  focus() {
    this.controls.lock();
  }
}
const _hoisted_1 = ["open"];
const _hoisted_2 = { class: "instructions" };
const _sfc_main$1 = /* @__PURE__ */ defineComponent({
  __name: "GameView",
  setup(__props) {
    const game = new Game();
    const gameScreen = useTemplateRef("gameScreen");
    const gameMenu = ref("gameMenu");
    const gameMenuVisible = ref(true);
    const recognition = new (window.SpeechRecognition || window.webkitSpeechRecognition || window.mozSpeechRecognition || window.msSpeechRecognition)();
    let recognitionServiceCheckInterval = null;
    recognition.lang = "en-US";
    recognition.continuous = true;
    recognition.interimResults = false;
    const showMenu = () => {
      gameMenuVisible.value = !document.pointerLockElement;
    };
    onBeforeMount(async () => {
      recognition.start();
      recognition.onresult = (event) => {
        if (!event.results[event.results.length - 1].isFinal) {
          console.debug("Transcript has not yet processed");
          return;
        }
        const transcript = event.results[event.results.length - 1][0].transcript;
        if (!transcript) {
          console.debug("Transcript is empty!");
          return;
        }
        game.processTextInput(transcript);
      };
      recognition.onerror = (event) => {
        console.log("Recognition service error:", event.message);
        recognition.start();
      };
    });
    onBeforeUnmount(() => {
      recognition.stop();
      document.removeEventListener("pointerlockchange", showMenu);
      clearInterval(recognitionServiceCheckInterval);
    });
    onMounted(() => {
      const gameScreenElement = gameScreen.value;
      game.init(gameScreenElement);
      if (game.isReady()) {
        const gameScreenFallback = document.getElementById("game-screen-fallback");
        if (gameScreenFallback) {
          gameScreenFallback.style.display = "none";
        }
      }
      document.addEventListener("pointerlockchange", showMenu);
      document.addEventListener("visibilitychange", () => {
        if (!document.hidden) {
          recognition.stop();
          recognition.start();
          console.log("Recognition service restarted");
        }
      });
      recognitionServiceCheckInterval = setInterval(() => {
        checkRecognitionService();
      }, 3e4);
      loadModel();
    });
    async function checkRecognitionService() {
      try {
        recognition.start();
      } catch (e) {
        console.log("Recognition service already started");
      }
    }
    async function loadModel() {
      console.log("Model loading");
      try {
        const options = {
          executionProviders: ["wasm"],
          wasmPaths: "/rpg_game/assets/onnxruntime/"
          // Local path to ort-wasm-simd-threaded.wasm
        };
        const session = await Kd.create("/rpg_game/assets/models/t5_onnx/encoder_model.onnx", options);
        console.log("Model loaded");
      } catch (err) {
        console.error("Failed to load model or run inference:", err);
      }
    }
    return (_ctx, _cache2) => {
      const _component_RouterLink = resolveComponent("RouterLink");
      return openBlock(), createElementBlock(Fragment, null, [
        createBaseVNode("dialog", {
          ref_key: "gameMenu",
          ref: gameMenu,
          class: "game-menu",
          open: gameMenuVisible.value,
          onClick: _cache2[1] || (_cache2[1] = ($event) => unref(game).focus())
        }, [
          createBaseVNode("div", _hoisted_2, [
            _cache2[3] || (_cache2[3] = createBaseVNode("p", { style: { "font-size": "36px" } }, " Click to play ", -1)),
            _cache2[4] || (_cache2[4] = createBaseVNode("p", null, [
              createTextVNode(" Move: WASD"),
              createBaseVNode("br"),
              createTextVNode(" Jump: SPACE"),
              createBaseVNode("br"),
              createTextVNode(" Look: MOUSE ")
            ], -1)),
            createVNode(_component_RouterLink, {
              to: "/",
              class: "quit-link",
              onClick: _cache2[0] || (_cache2[0] = ($event) => $event.stopPropagation())
            }, {
              default: withCtx(() => _cache2[2] || (_cache2[2] = [
                createTextVNode("Quit")
              ])),
              _: 1
            })
          ])
        ], 8, _hoisted_1),
        createBaseVNode("main", {
          class: "game-screen",
          ref_key: "gameScreen",
          ref: gameScreen
        }, null, 512),
        _cache2[5] || (_cache2[5] = createBaseVNode("div", {
          class: "game-screen-fallback",
          id: "game-screen-fallback"
        }, [
          createBaseVNode("h1", { class: "backup-text" }, " This is the game! "),
          createBaseVNode("p", { class: "backup-text" }, " If you see this screen, the game is either loading or you are one of the unlucky ones and should contact support ")
        ], -1))
      ], 64);
    };
  }
});
const GameView = /* @__PURE__ */ _export_sfc(_sfc_main$1, [["__scopeId", "data-v-5bb406c7"]]);
const _sfc_main = /* @__PURE__ */ defineComponent({
  __name: "AboutView",
  setup(__props) {
    return (_ctx, _cache2) => {
      return openBlock(), createElementBlock(Fragment, null, [
        createVNode(PageHeader),
        _cache2[0] || (_cache2[0] = createBaseVNode("main", null, [
          createBaseVNode("p", null, " This is About Page ")
        ], -1))
      ], 64);
    };
  }
});
const router = createRouter({
  history: createWebHistory("/rpg_game/"),
  routes: [
    {
      path: "/",
      name: "home",
      component: _sfc_main$2
    },
    {
      path: "/game",
      name: "game",
      component: GameView
    },
    {
      path: "/about",
      name: "about",
      component: _sfc_main
    }
  ]
});
const app = createApp(_sfc_main$4);
app.use(createPinia());
app.use(router);
app.mount("#app");
